
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091bc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080093a8  080093a8  000193a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800975c  0800975c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009764  08009764  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800976c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001d4  08009940  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20000610  08009940  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a23  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b55  00000000  00000000  00035c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  000397b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109b  00000000  00000000  0003ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237af  00000000  00000000  0003bde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d7b8  00000000  00000000  0005f592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1fd8  00000000  00000000  0007cd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067fc  00000000  00000000  0013ed24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00145520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800938c 	.word	0x0800938c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	0800938c 	.word	0x0800938c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_uldivmod>:
 8000ee4:	b953      	cbnz	r3, 8000efc <__aeabi_uldivmod+0x18>
 8000ee6:	b94a      	cbnz	r2, 8000efc <__aeabi_uldivmod+0x18>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bf08      	it	eq
 8000eec:	2800      	cmpeq	r0, #0
 8000eee:	bf1c      	itt	ne
 8000ef0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ef4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef8:	f000 b972 	b.w	80011e0 <__aeabi_idiv0>
 8000efc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f04:	f000 f806 	bl	8000f14 <__udivmoddi4>
 8000f08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f10:	b004      	add	sp, #16
 8000f12:	4770      	bx	lr

08000f14 <__udivmoddi4>:
 8000f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f18:	9e08      	ldr	r6, [sp, #32]
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	468e      	mov	lr, r1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d14c      	bne.n	8000fbe <__udivmoddi4+0xaa>
 8000f24:	428a      	cmp	r2, r1
 8000f26:	4694      	mov	ip, r2
 8000f28:	d967      	bls.n	8000ffa <__udivmoddi4+0xe6>
 8000f2a:	fab2 f382 	clz	r3, r2
 8000f2e:	b153      	cbz	r3, 8000f46 <__udivmoddi4+0x32>
 8000f30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f34:	f1c3 0220 	rsb	r2, r3, #32
 8000f38:	fa01 fe03 	lsl.w	lr, r1, r3
 8000f3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f40:	ea42 0e0e 	orr.w	lr, r2, lr
 8000f44:	409c      	lsls	r4, r3
 8000f46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4a:	fbbe f1f7 	udiv	r1, lr, r7
 8000f4e:	fa1f f58c 	uxth.w	r5, ip
 8000f52:	fb07 ee11 	mls	lr, r7, r1, lr
 8000f56:	fb01 f005 	mul.w	r0, r1, r5
 8000f5a:	0c22      	lsrs	r2, r4, #16
 8000f5c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000f60:	4290      	cmp	r0, r2
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x66>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f101 3eff 	add.w	lr, r1, #4294967295
 8000f6c:	f080 8119 	bcs.w	80011a2 <__udivmoddi4+0x28e>
 8000f70:	4290      	cmp	r0, r2
 8000f72:	f240 8116 	bls.w	80011a2 <__udivmoddi4+0x28e>
 8000f76:	3902      	subs	r1, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a12      	subs	r2, r2, r0
 8000f7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f80:	fb07 2210 	mls	r2, r7, r0, r2
 8000f84:	fb00 f505 	mul.w	r5, r0, r5
 8000f88:	b2a4      	uxth	r4, r4
 8000f8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f8e:	42a5      	cmp	r5, r4
 8000f90:	d90a      	bls.n	8000fa8 <__udivmoddi4+0x94>
 8000f92:	eb1c 0404 	adds.w	r4, ip, r4
 8000f96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f9a:	f080 8104 	bcs.w	80011a6 <__udivmoddi4+0x292>
 8000f9e:	42a5      	cmp	r5, r4
 8000fa0:	f240 8101 	bls.w	80011a6 <__udivmoddi4+0x292>
 8000fa4:	4464      	add	r4, ip
 8000fa6:	3802      	subs	r0, #2
 8000fa8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fac:	2100      	movs	r1, #0
 8000fae:	1b64      	subs	r4, r4, r5
 8000fb0:	b11e      	cbz	r6, 8000fba <__udivmoddi4+0xa6>
 8000fb2:	40dc      	lsrs	r4, r3
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0xc0>
 8000fc2:	2e00      	cmp	r6, #0
 8000fc4:	f000 80ea 	beq.w	800119c <__udivmoddi4+0x288>
 8000fc8:	2100      	movs	r1, #0
 8000fca:	e9c6 0500 	strd	r0, r5, [r6]
 8000fce:	4608      	mov	r0, r1
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	fab3 f183 	clz	r1, r3
 8000fd8:	2900      	cmp	r1, #0
 8000fda:	d148      	bne.n	800106e <__udivmoddi4+0x15a>
 8000fdc:	42ab      	cmp	r3, r5
 8000fde:	d302      	bcc.n	8000fe6 <__udivmoddi4+0xd2>
 8000fe0:	4282      	cmp	r2, r0
 8000fe2:	f200 80f8 	bhi.w	80011d6 <__udivmoddi4+0x2c2>
 8000fe6:	1a84      	subs	r4, r0, r2
 8000fe8:	eb65 0203 	sbc.w	r2, r5, r3
 8000fec:	2001      	movs	r0, #1
 8000fee:	4696      	mov	lr, r2
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d0e2      	beq.n	8000fba <__udivmoddi4+0xa6>
 8000ff4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000ff8:	e7df      	b.n	8000fba <__udivmoddi4+0xa6>
 8000ffa:	b902      	cbnz	r2, 8000ffe <__udivmoddi4+0xea>
 8000ffc:	deff      	udf	#255	; 0xff
 8000ffe:	fab2 f382 	clz	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 808e 	bne.w	8001124 <__udivmoddi4+0x210>
 8001008:	1a88      	subs	r0, r1, r2
 800100a:	2101      	movs	r1, #1
 800100c:	0c17      	lsrs	r7, r2, #16
 800100e:	fa1f fe82 	uxth.w	lr, r2
 8001012:	fbb0 f5f7 	udiv	r5, r0, r7
 8001016:	fb07 0015 	mls	r0, r7, r5, r0
 800101a:	0c22      	lsrs	r2, r4, #16
 800101c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001020:	fb0e f005 	mul.w	r0, lr, r5
 8001024:	4290      	cmp	r0, r2
 8001026:	d908      	bls.n	800103a <__udivmoddi4+0x126>
 8001028:	eb1c 0202 	adds.w	r2, ip, r2
 800102c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001030:	d202      	bcs.n	8001038 <__udivmoddi4+0x124>
 8001032:	4290      	cmp	r0, r2
 8001034:	f200 80cc 	bhi.w	80011d0 <__udivmoddi4+0x2bc>
 8001038:	4645      	mov	r5, r8
 800103a:	1a12      	subs	r2, r2, r0
 800103c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001040:	fb07 2210 	mls	r2, r7, r0, r2
 8001044:	fb0e fe00 	mul.w	lr, lr, r0
 8001048:	b2a4      	uxth	r4, r4
 800104a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800104e:	45a6      	cmp	lr, r4
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x150>
 8001052:	eb1c 0404 	adds.w	r4, ip, r4
 8001056:	f100 32ff 	add.w	r2, r0, #4294967295
 800105a:	d202      	bcs.n	8001062 <__udivmoddi4+0x14e>
 800105c:	45a6      	cmp	lr, r4
 800105e:	f200 80b4 	bhi.w	80011ca <__udivmoddi4+0x2b6>
 8001062:	4610      	mov	r0, r2
 8001064:	eba4 040e 	sub.w	r4, r4, lr
 8001068:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800106c:	e7a0      	b.n	8000fb0 <__udivmoddi4+0x9c>
 800106e:	f1c1 0720 	rsb	r7, r1, #32
 8001072:	408b      	lsls	r3, r1
 8001074:	fa22 fc07 	lsr.w	ip, r2, r7
 8001078:	ea4c 0c03 	orr.w	ip, ip, r3
 800107c:	fa25 fa07 	lsr.w	sl, r5, r7
 8001080:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001084:	fbba f8f9 	udiv	r8, sl, r9
 8001088:	408d      	lsls	r5, r1
 800108a:	fa20 f307 	lsr.w	r3, r0, r7
 800108e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001092:	fa1f fe8c 	uxth.w	lr, ip
 8001096:	432b      	orrs	r3, r5
 8001098:	fa00 f501 	lsl.w	r5, r0, r1
 800109c:	fb08 f00e 	mul.w	r0, r8, lr
 80010a0:	0c1c      	lsrs	r4, r3, #16
 80010a2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010a6:	42a0      	cmp	r0, r4
 80010a8:	fa02 f201 	lsl.w	r2, r2, r1
 80010ac:	d90b      	bls.n	80010c6 <__udivmoddi4+0x1b2>
 80010ae:	eb1c 0404 	adds.w	r4, ip, r4
 80010b2:	f108 3aff 	add.w	sl, r8, #4294967295
 80010b6:	f080 8086 	bcs.w	80011c6 <__udivmoddi4+0x2b2>
 80010ba:	42a0      	cmp	r0, r4
 80010bc:	f240 8083 	bls.w	80011c6 <__udivmoddi4+0x2b2>
 80010c0:	f1a8 0802 	sub.w	r8, r8, #2
 80010c4:	4464      	add	r4, ip
 80010c6:	1a24      	subs	r4, r4, r0
 80010c8:	b298      	uxth	r0, r3
 80010ca:	fbb4 f3f9 	udiv	r3, r4, r9
 80010ce:	fb09 4413 	mls	r4, r9, r3, r4
 80010d2:	fb03 fe0e 	mul.w	lr, r3, lr
 80010d6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80010da:	45a6      	cmp	lr, r4
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x1dc>
 80010de:	eb1c 0404 	adds.w	r4, ip, r4
 80010e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80010e6:	d26a      	bcs.n	80011be <__udivmoddi4+0x2aa>
 80010e8:	45a6      	cmp	lr, r4
 80010ea:	d968      	bls.n	80011be <__udivmoddi4+0x2aa>
 80010ec:	3b02      	subs	r3, #2
 80010ee:	4464      	add	r4, ip
 80010f0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80010f4:	fba0 9302 	umull	r9, r3, r0, r2
 80010f8:	eba4 040e 	sub.w	r4, r4, lr
 80010fc:	429c      	cmp	r4, r3
 80010fe:	46c8      	mov	r8, r9
 8001100:	469e      	mov	lr, r3
 8001102:	d354      	bcc.n	80011ae <__udivmoddi4+0x29a>
 8001104:	d051      	beq.n	80011aa <__udivmoddi4+0x296>
 8001106:	2e00      	cmp	r6, #0
 8001108:	d067      	beq.n	80011da <__udivmoddi4+0x2c6>
 800110a:	ebb5 0308 	subs.w	r3, r5, r8
 800110e:	eb64 040e 	sbc.w	r4, r4, lr
 8001112:	40cb      	lsrs	r3, r1
 8001114:	fa04 f707 	lsl.w	r7, r4, r7
 8001118:	431f      	orrs	r7, r3
 800111a:	40cc      	lsrs	r4, r1
 800111c:	e9c6 7400 	strd	r7, r4, [r6]
 8001120:	2100      	movs	r1, #0
 8001122:	e74a      	b.n	8000fba <__udivmoddi4+0xa6>
 8001124:	fa02 fc03 	lsl.w	ip, r2, r3
 8001128:	f1c3 0020 	rsb	r0, r3, #32
 800112c:	40c1      	lsrs	r1, r0
 800112e:	409d      	lsls	r5, r3
 8001130:	fa24 f000 	lsr.w	r0, r4, r0
 8001134:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001138:	4328      	orrs	r0, r5
 800113a:	fbb1 f5f7 	udiv	r5, r1, r7
 800113e:	fb07 1115 	mls	r1, r7, r5, r1
 8001142:	fa1f fe8c 	uxth.w	lr, ip
 8001146:	0c02      	lsrs	r2, r0, #16
 8001148:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800114c:	fb05 f10e 	mul.w	r1, r5, lr
 8001150:	4291      	cmp	r1, r2
 8001152:	fa04 f403 	lsl.w	r4, r4, r3
 8001156:	d908      	bls.n	800116a <__udivmoddi4+0x256>
 8001158:	eb1c 0202 	adds.w	r2, ip, r2
 800115c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001160:	d22f      	bcs.n	80011c2 <__udivmoddi4+0x2ae>
 8001162:	4291      	cmp	r1, r2
 8001164:	d92d      	bls.n	80011c2 <__udivmoddi4+0x2ae>
 8001166:	3d02      	subs	r5, #2
 8001168:	4462      	add	r2, ip
 800116a:	1a52      	subs	r2, r2, r1
 800116c:	fbb2 f1f7 	udiv	r1, r2, r7
 8001170:	fb07 2211 	mls	r2, r7, r1, r2
 8001174:	b280      	uxth	r0, r0
 8001176:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800117a:	fb01 f20e 	mul.w	r2, r1, lr
 800117e:	4282      	cmp	r2, r0
 8001180:	d908      	bls.n	8001194 <__udivmoddi4+0x280>
 8001182:	eb1c 0000 	adds.w	r0, ip, r0
 8001186:	f101 38ff 	add.w	r8, r1, #4294967295
 800118a:	d216      	bcs.n	80011ba <__udivmoddi4+0x2a6>
 800118c:	4282      	cmp	r2, r0
 800118e:	d914      	bls.n	80011ba <__udivmoddi4+0x2a6>
 8001190:	3902      	subs	r1, #2
 8001192:	4460      	add	r0, ip
 8001194:	1a80      	subs	r0, r0, r2
 8001196:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800119a:	e73a      	b.n	8001012 <__udivmoddi4+0xfe>
 800119c:	4631      	mov	r1, r6
 800119e:	4630      	mov	r0, r6
 80011a0:	e70b      	b.n	8000fba <__udivmoddi4+0xa6>
 80011a2:	4671      	mov	r1, lr
 80011a4:	e6e9      	b.n	8000f7a <__udivmoddi4+0x66>
 80011a6:	4610      	mov	r0, r2
 80011a8:	e6fe      	b.n	8000fa8 <__udivmoddi4+0x94>
 80011aa:	454d      	cmp	r5, r9
 80011ac:	d2ab      	bcs.n	8001106 <__udivmoddi4+0x1f2>
 80011ae:	ebb9 0802 	subs.w	r8, r9, r2
 80011b2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80011b6:	3801      	subs	r0, #1
 80011b8:	e7a5      	b.n	8001106 <__udivmoddi4+0x1f2>
 80011ba:	4641      	mov	r1, r8
 80011bc:	e7ea      	b.n	8001194 <__udivmoddi4+0x280>
 80011be:	4603      	mov	r3, r0
 80011c0:	e796      	b.n	80010f0 <__udivmoddi4+0x1dc>
 80011c2:	4645      	mov	r5, r8
 80011c4:	e7d1      	b.n	800116a <__udivmoddi4+0x256>
 80011c6:	46d0      	mov	r8, sl
 80011c8:	e77d      	b.n	80010c6 <__udivmoddi4+0x1b2>
 80011ca:	4464      	add	r4, ip
 80011cc:	3802      	subs	r0, #2
 80011ce:	e749      	b.n	8001064 <__udivmoddi4+0x150>
 80011d0:	3d02      	subs	r5, #2
 80011d2:	4462      	add	r2, ip
 80011d4:	e731      	b.n	800103a <__udivmoddi4+0x126>
 80011d6:	4608      	mov	r0, r1
 80011d8:	e70a      	b.n	8000ff0 <__udivmoddi4+0xdc>
 80011da:	4631      	mov	r1, r6
 80011dc:	e6ed      	b.n	8000fba <__udivmoddi4+0xa6>
 80011de:	bf00      	nop

080011e0 <__aeabi_idiv0>:
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <MotorEnc_Init>:
int32_t FilterSum;
uint16_t OldestMember;


void MotorEnc_Init(MotorEncoder_t *encoder, TIM_HandleTypeDef *htim)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	encoder->htimEnc = htim;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80011f4:	213c      	movs	r1, #60	; 0x3c
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f004 fcda 	bl	8005bb0 <HAL_TIM_Encoder_Start>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <MotorEnc_Uptade>:

void MotorEnc_Uptade(MotorEncoder_t *encoder)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint32_t NewCounter = encoder->htimEnc->Instance->CNT;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	60fb      	str	r3, [r7, #12]
	int16_t TempPosition = encoder->Position;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	899b      	ldrh	r3, [r3, #12]
 800121a:	817b      	strh	r3, [r7, #10]

	if(NewCounter == encoder->LastCounter)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	429a      	cmp	r2, r3
 8001224:	d103      	bne.n	800122e <MotorEnc_Uptade+0x2a>
	{
		encoder->Velocity = 0;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	809a      	strh	r2, [r3, #4]
 800122c:	e052      	b.n	80012d4 <MotorEnc_Uptade+0xd0>
	}
	else if(NewCounter > encoder->LastCounter)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d924      	bls.n	8001282 <MotorEnc_Uptade+0x7e>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))	//overflow happened
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	2b10      	cmp	r3, #16
 8001246:	d111      	bne.n	800126c <MotorEnc_Uptade+0x68>
		{
			encoder->Velocity = - ( encoder->LastCounter + (encoder->htimEnc->Instance->ARR - NewCounter) );
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	b29b      	uxth	r3, r3
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	b29b      	uxth	r3, r3
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21a      	sxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	809a      	strh	r2, [r3, #4]
 800126a:	e033      	b.n	80012d4 <MotorEnc_Uptade+0xd0>
		}
		else
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	b29b      	uxth	r3, r3
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	809a      	strh	r2, [r3, #4]
 8001280:	e028      	b.n	80012d4 <MotorEnc_Uptade+0xd0>
		}
	}
	else if(NewCounter < encoder->LastCounter)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d223      	bcs.n	80012d4 <MotorEnc_Uptade+0xd0>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b10      	cmp	r3, #16
 800129a:	d10a      	bne.n	80012b2 <MotorEnc_Uptade+0xae>
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	809a      	strh	r2, [r3, #4]
 80012b0:	e010      	b.n	80012d4 <MotorEnc_Uptade+0xd0>
		}
		else																//overflow happened
		{
			encoder->Velocity = NewCounter + (encoder->htimEnc->Instance->ARR + encoder->LastCounter);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	809a      	strh	r2, [r3, #4]
		}
	}


	TempPosition = encoder->Position + encoder->Velocity;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	817b      	strh	r3, [r7, #10]

	if(encoder->Velocity != 0)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d024      	beq.n	800133e <MotorEnc_Uptade+0x13a>
	{
		if(TempPosition >= 0)
 80012f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db16      	blt.n	800132a <MotorEnc_Uptade+0x126>
		{
			encoder->Position = (encoder->Position + encoder->Velocity) % PULSES_PER_ROTATION;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001302:	461a      	mov	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800130a:	4413      	add	r3, r2
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <MotorEnc_Uptade+0x170>)
 800130e:	fb82 1203 	smull	r1, r2, r2, r3
 8001312:	1251      	asrs	r1, r2, #9
 8001314:	17da      	asrs	r2, r3, #31
 8001316:	1a8a      	subs	r2, r1, r2
 8001318:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800131c:	fb01 f202 	mul.w	r2, r1, r2
 8001320:	1a9a      	subs	r2, r3, r2
 8001322:	b212      	sxth	r2, r2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	819a      	strh	r2, [r3, #12]
 8001328:	e009      	b.n	800133e <MotorEnc_Uptade+0x13a>
		}
		else
		{
			encoder->Position = PULSES_PER_ROTATION + encoder->Velocity;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001330:	b29b      	uxth	r3, r3
 8001332:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	819a      	strh	r2, [r3, #12]
		}
	}

	encoder->RPM = (encoder->Velocity * (1000 / ENCODER_SAMPLING_TIME_MS) * 60 ) / PULSES_PER_ROTATION; //define constants
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001344:	461a      	mov	r2, r3
 8001346:	f241 7370 	movw	r3, #6000	; 0x1770
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <MotorEnc_Uptade+0x170>)
 8001350:	fb82 1203 	smull	r1, r2, r2, r3
 8001354:	1252      	asrs	r2, r2, #9
 8001356:	17db      	asrs	r3, r3, #31
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fd6e 	bl	8000e3c <__aeabi_i2f>
 8001360:	4602      	mov	r2, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	615a      	str	r2, [r3, #20]
	encoder->LastCounter = NewCounter;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	611a      	str	r2, [r3, #16]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	5d9f7391 	.word	0x5d9f7391

08001378 <MotorEnc_FilterVelocity>:

void MotorEnc_FilterVelocity(MotorEncoder_t *encoder)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]


	//static float VelocityIIR;


	float alpha = 0.1;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MotorEnc_FilterVelocity+0x5c>)
 8001382:	60fb      	str	r3, [r7, #12]
	encoder->VelocityFiltered = alpha * (float) encoder->Velocity + (1.0f - alpha) * encoder->VelocityFiltered;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fd56 	bl	8000e3c <__aeabi_i2f>
 8001390:	4603      	mov	r3, r0
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff4f 	bl	8000238 <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	461c      	mov	r4, r3
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80013a4:	f7ff fc94 	bl	8000cd0 <__aeabi_fsub>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f7fe ff40 	bl	8000238 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff fc89 	bl	8000cd4 <__addsf3>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]
//	VelocityFilterBuffer[OldestMember] = VelocityIIR;
//	OldestMember = (OldestMember + 1) % 100;



}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	3dcccccd 	.word	0x3dcccccd

080013d8 <Motors_Init>:
MotorEncoder_t MotorEncoderA;
MotorEncoder_t MotorEncoderB;


void Motors_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af02      	add	r7, sp, #8
	DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80013de:	230c      	movs	r3, #12
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2308      	movs	r3, #8
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2304      	movs	r3, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	4907      	ldr	r1, [pc, #28]	; (8001408 <Motors_Init+0x30>)
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <Motors_Init+0x34>)
 80013ee:	f000 f8d3 	bl	8001598 <DRV8836_Init>
	MotorEnc_Init(&MotorEncoderA, &htim1);
 80013f2:	4907      	ldr	r1, [pc, #28]	; (8001410 <Motors_Init+0x38>)
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <Motors_Init+0x3c>)
 80013f6:	f7ff fef5 	bl	80011e4 <MotorEnc_Init>
	MotorEnc_Init(&MotorEncoderB, &htim4);
 80013fa:	4907      	ldr	r1, [pc, #28]	; (8001418 <Motors_Init+0x40>)
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <Motors_Init+0x44>)
 80013fe:	f7ff fef1 	bl	80011e4 <MotorEnc_Init>
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000398 	.word	0x20000398
 800140c:	200001f0 	.word	0x200001f0
 8001410:	20000350 	.word	0x20000350
 8001414:	20000208 	.word	0x20000208
 8001418:	200003e0 	.word	0x200003e0
 800141c:	20000220 	.word	0x20000220

08001420 <Motors_SetMotorSpeed>:
{
	DRV8836_SetMotor(&MotorDriver, motorAB, direction, speed);
}

Motors_Error_t Motors_SetMotorSpeed(DRV8836_Output_t motorAB, uint16_t speed)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	80bb      	strh	r3, [r7, #4]
	switch(motorAB)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <Motors_SetMotorSpeed+0x1c>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d009      	beq.n	800144e <Motors_SetMotorSpeed+0x2e>
 800143a:	e011      	b.n	8001460 <Motors_SetMotorSpeed+0x40>
	{
	case Output_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.a_direction, speed);
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <Motors_SetMotorSpeed+0x4c>)
 800143e:	7d1a      	ldrb	r2, [r3, #20]
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	79f9      	ldrb	r1, [r7, #7]
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <Motors_SetMotorSpeed+0x4c>)
 8001446:	f000 f965 	bl	8001714 <DRV8836_SetMotor>
 800144a:	4603      	mov	r3, r0
 800144c:	e009      	b.n	8001462 <Motors_SetMotorSpeed+0x42>
		break;

	case Output_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.b_direction, speed);
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <Motors_SetMotorSpeed+0x4c>)
 8001450:	7d5a      	ldrb	r2, [r3, #21]
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	79f9      	ldrb	r1, [r7, #7]
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <Motors_SetMotorSpeed+0x4c>)
 8001458:	f000 f95c 	bl	8001714 <DRV8836_SetMotor>
 800145c:	4603      	mov	r3, r0
 800145e:	e000      	b.n	8001462 <Motors_SetMotorSpeed+0x42>
		break;

	default:
		return MOTORS_ERROR;
 8001460:	2301      	movs	r3, #1
		break;
	}
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200001f0 	.word	0x200001f0

08001470 <Motors_SetMotorDirection>:

Motors_Error_t Motors_SetMotorDirection(DRV8836_Output_t motorAB, DRV8836_Direction_t direction)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
	switch(motorAB)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <Motors_SetMotorDirection+0x1c>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d009      	beq.n	800149e <Motors_SetMotorDirection+0x2e>
 800148a:	e011      	b.n	80014b0 <Motors_SetMotorDirection+0x40>
	{
	case Output_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.a_speed);
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <Motors_SetMotorDirection+0x4c>)
 800148e:	8a1b      	ldrh	r3, [r3, #16]
 8001490:	79ba      	ldrb	r2, [r7, #6]
 8001492:	79f9      	ldrb	r1, [r7, #7]
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <Motors_SetMotorDirection+0x4c>)
 8001496:	f000 f93d 	bl	8001714 <DRV8836_SetMotor>
 800149a:	4603      	mov	r3, r0
 800149c:	e009      	b.n	80014b2 <Motors_SetMotorDirection+0x42>
		break;

	case Output_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.b_speed);
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <Motors_SetMotorDirection+0x4c>)
 80014a0:	8a5b      	ldrh	r3, [r3, #18]
 80014a2:	79ba      	ldrb	r2, [r7, #6]
 80014a4:	79f9      	ldrb	r1, [r7, #7]
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <Motors_SetMotorDirection+0x4c>)
 80014a8:	f000 f934 	bl	8001714 <DRV8836_SetMotor>
 80014ac:	4603      	mov	r3, r0
 80014ae:	e000      	b.n	80014b2 <Motors_SetMotorDirection+0x42>
		break;

	default:
		return MOTORS_ERROR;
 80014b0:	2301      	movs	r3, #1
		break;
	}
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001f0 	.word	0x200001f0

080014c0 <Motors_EncoderSample>:


void Motors_EncoderSample(void)						//call this function with encoder sampling frequency
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	MotorEnc_Uptade(&MotorEncoderA);
 80014c4:	4806      	ldr	r0, [pc, #24]	; (80014e0 <Motors_EncoderSample+0x20>)
 80014c6:	f7ff fe9d 	bl	8001204 <MotorEnc_Uptade>
	MotorEnc_Uptade(&MotorEncoderB);
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <Motors_EncoderSample+0x24>)
 80014cc:	f7ff fe9a 	bl	8001204 <MotorEnc_Uptade>
	MotorEnc_FilterVelocity(&MotorEncoderA);
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <Motors_EncoderSample+0x20>)
 80014d2:	f7ff ff51 	bl	8001378 <MotorEnc_FilterVelocity>
	MotorEnc_FilterVelocity(&MotorEncoderB);
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <Motors_EncoderSample+0x24>)
 80014d8:	f7ff ff4e 	bl	8001378 <MotorEnc_FilterVelocity>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000208 	.word	0x20000208
 80014e4:	20000220 	.word	0x20000220

080014e8 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f1xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fa:	3301      	adds	r3, #1
 80014fc:	425a      	negs	r2, r3
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	f002 021f 	and.w	r2, r2, #31
 8001506:	bf58      	it	pl
 8001508:	4253      	negpl	r3, r2
 800150a:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	429a      	cmp	r2, r3
 8001516:	d101      	bne.n	800151c <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e00b      	b.n	8001534 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001522:	4619      	mov	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	78fa      	ldrb	r2, [r7, #3]
 8001528:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800154e:	3301      	adds	r3, #1
 8001550:	425a      	negs	r2, r3
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	bf58      	it	pl
 800155c:	4253      	negpl	r3, r2
 800155e:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	429a      	cmp	r2, r3
 800156e:	d101      	bne.n	8001574 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 8001570:	2301      	movs	r3, #1
 8001572:	e00c      	b.n	800158e <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800157a:	461a      	mov	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	5c9a      	ldrb	r2, [r3, r2]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <DRV8836_Init>:
 *      Author: Michal Klebokowski
 */
#include "drv8836.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	4611      	mov	r1, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	460b      	mov	r3, r1
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	4613      	mov	r3, r2
 80015ac:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	88fa      	ldrh	r2, [r7, #6]
 80015b8:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	88ba      	ldrh	r2, [r7, #4]
 80015be:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8b3a      	ldrh	r2, [r7, #24]
 80015c4:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8bba      	ldrh	r2, [r7, #28]
 80015ca:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	891b      	ldrh	r3, [r3, #8]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f004 f99e 	bl	8005918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	895b      	ldrh	r3, [r3, #10]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f004 f996 	bl	8005918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	899b      	ldrh	r3, [r3, #12]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4610      	mov	r0, r2
 80015f8:	f004 f98e 	bl	8005918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	89db      	ldrh	r3, [r3, #14]
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f004 f986 	bl	8005918 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <DRV8836_Init+0x86>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
 800161c:	e016      	b.n	800164c <DRV8836_Init+0xb4>
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d105      	bne.n	8001630 <DRV8836_Init+0x98>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2300      	movs	r3, #0
 800162c:	6393      	str	r3, [r2, #56]	; 0x38
 800162e:	e00d      	b.n	800164c <DRV8836_Init+0xb4>
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	2b08      	cmp	r3, #8
 8001634:	d105      	bne.n	8001642 <DRV8836_Init+0xaa>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001640:	e004      	b.n	800164c <DRV8836_Init+0xb4>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <DRV8836_Init+0xc6>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
 800165c:	e016      	b.n	800168c <DRV8836_Init+0xf4>
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d105      	bne.n	8001670 <DRV8836_Init+0xd8>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	6393      	str	r3, [r2, #56]	; 0x38
 800166e:	e00d      	b.n	800168c <DRV8836_Init+0xf4>
 8001670:	88bb      	ldrh	r3, [r7, #4]
 8001672:	2b08      	cmp	r3, #8
 8001674:	d105      	bne.n	8001682 <DRV8836_Init+0xea>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001680:	e004      	b.n	800168c <DRV8836_Init+0xf4>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 800168c:	8b3b      	ldrh	r3, [r7, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <DRV8836_Init+0x106>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	635a      	str	r2, [r3, #52]	; 0x34
 800169c:	e016      	b.n	80016cc <DRV8836_Init+0x134>
 800169e:	8b3b      	ldrh	r3, [r7, #24]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d105      	bne.n	80016b0 <DRV8836_Init+0x118>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	6393      	str	r3, [r2, #56]	; 0x38
 80016ae:	e00d      	b.n	80016cc <DRV8836_Init+0x134>
 80016b0:	8b3b      	ldrh	r3, [r7, #24]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d105      	bne.n	80016c2 <DRV8836_Init+0x12a>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2300      	movs	r3, #0
 80016be:	63d3      	str	r3, [r2, #60]	; 0x3c
 80016c0:	e004      	b.n	80016cc <DRV8836_Init+0x134>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 80016cc:	8bbb      	ldrh	r3, [r7, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <DRV8836_Init+0x146>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016dc:	e016      	b.n	800170c <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 80016de:	8bbb      	ldrh	r3, [r7, #28]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d105      	bne.n	80016f0 <DRV8836_Init+0x158>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016ee:	e00d      	b.n	800170c <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 80016f0:	8bbb      	ldrh	r3, [r7, #28]
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d105      	bne.n	8001702 <DRV8836_Init+0x16a>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2300      	movs	r3, #0
 80016fe:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001700:	e004      	b.n	800170c <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <DRV8836_SetMotor>:

DRV8836_Error_t DRV8836_SetMotor(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction, uint16_t speed)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	70fb      	strb	r3, [r7, #3]
 8001726:	460b      	mov	r3, r1
 8001728:	70bb      	strb	r3, [r7, #2]
 800172a:	4613      	mov	r3, r2
 800172c:	803b      	strh	r3, [r7, #0]
	DRV8836_Direction_t *TargetDirection;
	uint16_t *TargetSpeed;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;

	if(speed > ic->drv_htim->Instance->ARR) //check if pwm value fit the counter period range
 800172e:	883a      	ldrh	r2, [r7, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	429a      	cmp	r2, r3
 800173a:	d901      	bls.n	8001740 <DRV8836_SetMotor+0x2c>
	{
		return DRV8836_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e14e      	b.n	80019de <DRV8836_SetMotor+0x2ca>
	}

	if(Output_A == output)
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <DRV8836_SetMotor+0x4c>
	{
		TargetForwardChannel = ic->a_forward_channel;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	891b      	ldrh	r3, [r3, #8]
 800174a:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->a_reverse_channel;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	895b      	ldrh	r3, [r3, #10]
 8001750:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->a_speed);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3310      	adds	r3, #16
 8001756:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3314      	adds	r3, #20
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e011      	b.n	8001784 <DRV8836_SetMotor+0x70>
	}
	else if(Output_B == output)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d10c      	bne.n	8001780 <DRV8836_SetMotor+0x6c>
	{
		TargetForwardChannel = ic->b_forward_channel;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	899b      	ldrh	r3, [r3, #12]
 800176a:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->b_reverse_channel;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	89db      	ldrh	r3, [r3, #14]
 8001770:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->b_speed);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3312      	adds	r3, #18
 8001776:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->b_direction);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3315      	adds	r3, #21
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e001      	b.n	8001784 <DRV8836_SetMotor+0x70>
	}
	else
	{
		return DRV8836_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e12c      	b.n	80019de <DRV8836_SetMotor+0x2ca>
	}

	switch(direction)
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	2b03      	cmp	r3, #3
 8001788:	f200 8120 	bhi.w	80019cc <DRV8836_SetMotor+0x2b8>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <DRV8836_SetMotor+0x80>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	08001827 	.word	0x08001827
 800179c:	080018a9 	.word	0x080018a9
 80017a0:	0800192b 	.word	0x0800192b
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 80017a4:	89fb      	ldrh	r3, [r7, #14]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d105      	bne.n	80017b6 <DRV8836_SetMotor+0xa2>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2200      	movs	r2, #0
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
 80017b4:	e016      	b.n	80017e4 <DRV8836_SetMotor+0xd0>
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d105      	bne.n	80017c8 <DRV8836_SetMotor+0xb4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	6393      	str	r3, [r2, #56]	; 0x38
 80017c6:	e00d      	b.n	80017e4 <DRV8836_SetMotor+0xd0>
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d105      	bne.n	80017da <DRV8836_SetMotor+0xc6>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80017d8:	e004      	b.n	80017e4 <DRV8836_SetMotor+0xd0>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 80017e4:	89bb      	ldrh	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <DRV8836_SetMotor+0xe2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2200      	movs	r2, #0
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80017f4:	e0ec      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 80017f6:	89bb      	ldrh	r3, [r7, #12]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d105      	bne.n	8001808 <DRV8836_SetMotor+0xf4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001806:	e0e3      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001808:	89bb      	ldrh	r3, [r7, #12]
 800180a:	2b08      	cmp	r3, #8
 800180c:	d105      	bne.n	800181a <DRV8836_SetMotor+0x106>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001818:	e0da      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001824:	e0d4      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <DRV8836_SetMotor+0x124>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
 8001836:	e016      	b.n	8001866 <DRV8836_SetMotor+0x152>
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	2b04      	cmp	r3, #4
 800183c:	d105      	bne.n	800184a <DRV8836_SetMotor+0x136>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	6393      	str	r3, [r2, #56]	; 0x38
 8001848:	e00d      	b.n	8001866 <DRV8836_SetMotor+0x152>
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d105      	bne.n	800185c <DRV8836_SetMotor+0x148>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2300      	movs	r3, #0
 8001858:	63d3      	str	r3, [r2, #60]	; 0x3c
 800185a:	e004      	b.n	8001866 <DRV8836_SetMotor+0x152>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2300      	movs	r3, #0
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001866:	89bb      	ldrh	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <DRV8836_SetMotor+0x164>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001876:	e0ab      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001878:	89bb      	ldrh	r3, [r7, #12]
 800187a:	2b04      	cmp	r3, #4
 800187c:	d105      	bne.n	800188a <DRV8836_SetMotor+0x176>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001888:	e0a2      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 800188a:	89bb      	ldrh	r3, [r7, #12]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d105      	bne.n	800189c <DRV8836_SetMotor+0x188>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	883b      	ldrh	r3, [r7, #0]
 8001898:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800189a:	e099      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	883b      	ldrh	r3, [r7, #0]
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80018a6:	e093      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, speed);
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <DRV8836_SetMotor+0x1a6>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	883a      	ldrh	r2, [r7, #0]
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
 80018b8:	e016      	b.n	80018e8 <DRV8836_SetMotor+0x1d4>
 80018ba:	89fb      	ldrh	r3, [r7, #14]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d105      	bne.n	80018cc <DRV8836_SetMotor+0x1b8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	883b      	ldrh	r3, [r7, #0]
 80018c8:	6393      	str	r3, [r2, #56]	; 0x38
 80018ca:	e00d      	b.n	80018e8 <DRV8836_SetMotor+0x1d4>
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d105      	bne.n	80018de <DRV8836_SetMotor+0x1ca>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	883b      	ldrh	r3, [r7, #0]
 80018da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80018dc:	e004      	b.n	80018e8 <DRV8836_SetMotor+0x1d4>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	883b      	ldrh	r3, [r7, #0]
 80018e6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 80018e8:	89bb      	ldrh	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d105      	bne.n	80018fa <DRV8836_SetMotor+0x1e6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80018f8:	e06a      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 80018fa:	89bb      	ldrh	r3, [r7, #12]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d105      	bne.n	800190c <DRV8836_SetMotor+0x1f8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800190a:	e061      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800190c:	89bb      	ldrh	r3, [r7, #12]
 800190e:	2b08      	cmp	r3, #8
 8001910:	d105      	bne.n	800191e <DRV8836_SetMotor+0x20a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800191c:	e058      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2300      	movs	r3, #0
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001928:	e052      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d107      	bne.n	8001940 <DRV8836_SetMotor+0x22c>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68d2      	ldr	r2, [r2, #12]
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
 800193e:	e01c      	b.n	800197a <DRV8836_SetMotor+0x266>
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d107      	bne.n	8001956 <DRV8836_SetMotor+0x242>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6852      	ldr	r2, [r2, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	6393      	str	r3, [r2, #56]	; 0x38
 8001954:	e011      	b.n	800197a <DRV8836_SetMotor+0x266>
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d107      	bne.n	800196c <DRV8836_SetMotor+0x258>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6852      	ldr	r2, [r2, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	63d3      	str	r3, [r2, #60]	; 0x3c
 800196a:	e006      	b.n	800197a <DRV8836_SetMotor+0x266>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6852      	ldr	r2, [r2, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 800197a:	89bb      	ldrh	r3, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <DRV8836_SetMotor+0x27c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68d2      	ldr	r2, [r2, #12]
 800198c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800198e:	e01f      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001990:	89bb      	ldrh	r3, [r7, #12]
 8001992:	2b04      	cmp	r3, #4
 8001994:	d107      	bne.n	80019a6 <DRV8836_SetMotor+0x292>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6852      	ldr	r2, [r2, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80019a4:	e014      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80019a6:	89bb      	ldrh	r3, [r7, #12]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d107      	bne.n	80019bc <DRV8836_SetMotor+0x2a8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6852      	ldr	r2, [r2, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80019ba:	e009      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6852      	ldr	r2, [r2, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80019ca:	e001      	b.n	80019d0 <DRV8836_SetMotor+0x2bc>

	default:
		return DRV8836_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e006      	b.n	80019de <DRV8836_SetMotor+0x2ca>
		break;
	}

	*TargetDirection = direction;	//save set direction and speed to struct
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	78ba      	ldrb	r2, [r7, #2]
 80019d4:	701a      	strb	r2, [r3, #0]
	*TargetSpeed = speed;
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	883a      	ldrh	r2, [r7, #0]
 80019da:	801a      	strh	r2, [r3, #0]

	return DRV8836_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fc:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <MX_GPIO_Init+0x154>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a02:	f043 0310 	orr.w	r3, r3, #16
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a14:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a48      	ldr	r2, [pc, #288]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a1a:	f043 0320 	orr.w	r3, r3, #32
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a42      	ldr	r2, [pc, #264]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a3c      	ldr	r2, [pc, #240]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <MX_GPIO_Init+0x154>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f246 0103 	movw	r1, #24579	; 0x6003
 8001a62:	4837      	ldr	r0, [pc, #220]	; (8001b40 <MX_GPIO_Init+0x158>)
 8001a64:	f002 f9fa 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	4835      	ldr	r0, [pc, #212]	; (8001b44 <MX_GPIO_Init+0x15c>)
 8001a6e:	f002 f9f5 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	4834      	ldr	r0, [pc, #208]	; (8001b48 <MX_GPIO_Init+0x160>)
 8001a78:	f002 f9f0 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 8001a7c:	f246 0302 	movw	r3, #24578	; 0x6002
 8001a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	f107 0310 	add.w	r3, r7, #16
 8001a92:	4619      	mov	r1, r3
 8001a94:	482a      	ldr	r0, [pc, #168]	; (8001b40 <MX_GPIO_Init+0x158>)
 8001a96:	f002 f85d 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4823      	ldr	r0, [pc, #140]	; (8001b40 <MX_GPIO_Init+0x158>)
 8001ab2:	f002 f84f 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4820      	ldr	r0, [pc, #128]	; (8001b4c <MX_GPIO_Init+0x164>)
 8001acc:	f002 f842 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <MX_GPIO_Init+0x168>)
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4819      	ldr	r0, [pc, #100]	; (8001b4c <MX_GPIO_Init+0x164>)
 8001ae6:	f002 f835 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8001aea:	2304      	movs	r3, #4
 8001aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	4810      	ldr	r0, [pc, #64]	; (8001b44 <MX_GPIO_Init+0x15c>)
 8001b02:	f002 f827 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001b06:	2310      	movs	r3, #16
 8001b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480a      	ldr	r0, [pc, #40]	; (8001b48 <MX_GPIO_Init+0x160>)
 8001b1e:	f002 f819 	bl	8003b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2028      	movs	r0, #40	; 0x28
 8001b28:	f001 ffdd 	bl	8003ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b2c:	2028      	movs	r0, #40	; 0x28
 8001b2e:	f001 fff6 	bl	8003b1e <HAL_NVIC_EnableIRQ>

}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40011000 	.word	0x40011000
 8001b44:	40011400 	.word	0x40011400
 8001b48:	40010c00 	.word	0x40010c00
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	10210000 	.word	0x10210000

08001b54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <MX_I2C1_Init+0x54>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b60:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_I2C1_Init+0x58>)
 8001b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b92:	f002 f9ad 	bl	8003ef0 <HAL_I2C_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b9c:	f000 fb41 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000238 	.word	0x20000238
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	00061a80 	.word	0x00061a80

08001bb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_I2C_MspInit+0x90>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d132      	bne.n	8001c36 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001be8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bee:	2312      	movs	r3, #18
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4812      	ldr	r0, [pc, #72]	; (8001c48 <HAL_I2C_MspInit+0x98>)
 8001bfe:	f001 ffa9 	bl	8003b54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_I2C_MspInit+0x9c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <HAL_I2C_MspInit+0x9c>)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_I2C_MspInit+0x94>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40005400 	.word	0x40005400
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40010000 	.word	0x40010000

08001c50 <Parser_Klebot>:

#include "klebot_parser.h"


void Parser_Klebot(uint8_t *command, uint8_t length)							//main parser funciton
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	60fb      	str	r3, [r7, #12]
	uint8_t Length = length;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	72fb      	strb	r3, [r7, #11]



	switch(*CurrentByte)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2bd1      	cmp	r3, #209	; 0xd1
 8001c6a:	d019      	beq.n	8001ca0 <Parser_Klebot+0x50>
 8001c6c:	2bd1      	cmp	r3, #209	; 0xd1
 8001c6e:	dc22      	bgt.n	8001cb6 <Parser_Klebot+0x66>
 8001c70:	2ba1      	cmp	r3, #161	; 0xa1
 8001c72:	d002      	beq.n	8001c7a <Parser_Klebot+0x2a>
 8001c74:	2bd0      	cmp	r3, #208	; 0xd0
 8001c76:	d007      	beq.n	8001c88 <Parser_Klebot+0x38>
		CurrentByte++;
		Length--;
		Programs_MotorsDebugParser(CurrentByte, Length);
	default:

		break;
 8001c78:	e01d      	b.n	8001cb6 <Parser_Klebot+0x66>
		CurrentByte++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
		Length--;
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	72fb      	strb	r3, [r7, #11]
		break;
 8001c86:	e017      	b.n	8001cb8 <Parser_Klebot+0x68>
		CurrentByte++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
		Length--;
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	72fb      	strb	r3, [r7, #11]
		Programs_DiodeTestParser(CurrentByte, Length);
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	4619      	mov	r1, r3
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f001 fc37 	bl	800350c <Programs_DiodeTestParser>
		break;
 8001c9e:	e00b      	b.n	8001cb8 <Parser_Klebot+0x68>
		CurrentByte++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
		Length--;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	72fb      	strb	r3, [r7, #11]
		Programs_MotorsDebugParser(CurrentByte, Length);
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f001 fcc5 	bl	8003640 <Programs_MotorsDebugParser>
		break;
 8001cb6:	bf00      	nop
	}


}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fed3 	bl	8002a74 <nRF24_Init>

#ifdef ROBOT
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8001cce:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <Radio_Init+0x28>)
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f000 fd3c 	bl	800274e <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <Radio_Init+0x2c>)
 8001cd8:	f000 fd72 	bl	80027c0 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8001cdc:	f000 fb76 	bl	80023cc <nRF24_RX_Mode>
#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
	nRF24_SetTXAddress( (uint8_t*) "Bot");
	nRF24_TX_Mode();
#endif
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	080093a8 	.word	0x080093a8
 8001cec:	080093ac 	.word	0x080093ac

08001cf0 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001d00:	2300      	movs	r3, #0
 8001d02:	73bb      	strb	r3, [r7, #14]
 8001d04:	e010      	b.n	8001d28 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <Radio_RxBufferPut+0x4c>)
 8001d0e:	f7ff fbeb 	bl	80014e8 <RBuffer_Write>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001d22:	7bbb      	ldrb	r3, [r7, #14]
 8001d24:	3301      	adds	r3, #1
 8001d26:	73bb      	strb	r3, [r7, #14]
 8001d28:	7bba      	ldrb	r2, [r7, #14]
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d3ea      	bcc.n	8001d06 <Radio_RxBufferPut+0x16>
	}
	return Status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200002b4 	.word	0x200002b4

08001d40 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 8001d52:	f107 030d 	add.w	r3, r7, #13
 8001d56:	4619      	mov	r1, r3
 8001d58:	4814      	ldr	r0, [pc, #80]	; (8001dac <Radio_RxBufferGet+0x6c>)
 8001d5a:	f7ff fbf0 	bl	800153e <RBuffer_Read>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001d68:	e012      	b.n	8001d90 <Radio_RxBufferGet+0x50>
	{
		*(CommandDestination+Length) = Data;				//write received byte to destination
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	7b7a      	ldrb	r2, [r7, #13]
 8001d72:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	3301      	adds	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 8001d7a:	f107 030d 	add.w	r3, r7, #13
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480a      	ldr	r0, [pc, #40]	; (8001dac <Radio_RxBufferGet+0x6c>)
 8001d82:	f7ff fbdc 	bl	800153e <RBuffer_Read>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d002      	beq.n	8001d9c <Radio_RxBufferGet+0x5c>
 8001d96:	7bbb      	ldrb	r3, [r7, #14]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0e6      	beq.n	8001d6a <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	701a      	strb	r2, [r3, #0]
	return Status;
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200002b4 	.word	0x200002b4

08001db0 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73bb      	strb	r3, [r7, #14]
 8001dc4:	e010      	b.n	8001de8 <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480f      	ldr	r0, [pc, #60]	; (8001e0c <Radio_TxBufferPut+0x5c>)
 8001dce:	f7ff fb8b 	bl	80014e8 <RBuffer_Write>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	73fb      	strb	r3, [r7, #15]
		Command++;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3301      	adds	r3, #1
 8001de0:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	3301      	adds	r3, #1
 8001de6:	73bb      	strb	r3, [r7, #14]
 8001de8:	7bba      	ldrb	r2, [r7, #14]
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3ea      	bcc.n	8001dc6 <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8001df0:	2104      	movs	r1, #4
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <Radio_TxBufferPut+0x5c>)
 8001df4:	f7ff fb78 	bl	80014e8 <RBuffer_Write>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	73fb      	strb	r3, [r7, #15]
	return Status;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000290 	.word	0x20000290

08001e10 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8001e22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e26:	1d3a      	adds	r2, r7, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4816      	ldr	r0, [pc, #88]	; (8001e88 <Radio_TxBufferSend+0x78>)
 8001e2e:	f7ff fb86 	bl	800153e <RBuffer_Read>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8001e40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8001e4a:	3328      	adds	r3, #40	; 0x28
 8001e4c:	443b      	add	r3, r7
 8001e4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d003      	beq.n	8001e5e <Radio_TxBufferSend+0x4e>
 8001e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0e1      	beq.n	8001e22 <Radio_TxBufferSend+0x12>
		TxStatus = RADIO_BUSY;
	}
#endif

#ifdef ROBOT
	if(Status == RADIO_OK)
 8001e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <Radio_TxBufferSend+0x6a>
	{
		nRF24_WriteAckPayload(0, DataToSend, Length);
 8001e66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 fe68 	bl	8002b44 <nRF24_WriteAckPayload>
		TxStatus = RADIO_BUSY;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <Radio_TxBufferSend+0x7c>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	701a      	strb	r2, [r3, #0]
	}
#endif

	return Status;
 8001e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000290 	.word	0x20000290
 8001e8c:	2000028d 	.word	0x2000028d

08001e90 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 8001e96:	f000 fdc5 	bl	8002a24 <nRF24_Event>
	}
#endif

#ifdef ROBOT

	if(TxStatus == RADIO_OK)	//If Tx is free, send response
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <Radio_Process+0x64>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <Radio_Process+0x16>
	{
		Radio_TxBufferSend();	//send ack payload
 8001ea2:	f7ff ffb5 	bl	8001e10 <Radio_TxBufferSend>
	}

	if((HAL_GetTick() - ConnectionTimeoutCounter) > (3 * PACKET_SEND_DELAY) )	//check when last message came to know if connection isnt dead
 8001ea6:	f001 fd19 	bl	80038dc <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <Radio_Process+0x68>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b96      	cmp	r3, #150	; 0x96
 8001eb4:	d904      	bls.n	8001ec0 <Radio_Process+0x30>
	{
		ConnectionStatus = RADIO_ERROR;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <Radio_Process+0x6c>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
		Radio_NoConnectionCallback();
 8001ebc:	f000 f832 	bl	8001f24 <Radio_NoConnectionCallback>
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <Radio_Process+0x70>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d110      	bne.n	8001eea <Radio_Process+0x5a>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001ec8:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff35 	bl	8001d40 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 8001ed6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f8b2 	bl	8002048 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <Radio_Process+0x70>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
	}
}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	; 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000028d 	.word	0x2000028d
 8001ef8:	200002d8 	.word	0x200002d8
 8001efc:	2000028c 	.word	0x2000028c
 8001f00:	2000028e 	.word	0x2000028e

08001f04 <Radio_GetConnectionStatus>:
//
//Get connection status
//

Klebot_Radio_Status Radio_GetConnectionStatus(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	return ConnectionStatus;
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <Radio_GetConnectionStatus+0x10>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	2000028c 	.word	0x2000028c

08001f18 <Radio_HandlerIRQ>:

//
//Klebot radio callbacks to use
//
void Radio_HandlerIRQ(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	nRF24_IRQ_Handler();
 8001f1c:	f000 fd30 	bl	8002980 <nRF24_IRQ_Handler>
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <Radio_NoConnectionCallback>:

__weak void Radio_NoConnectionCallback(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <nRF24_EventTxCallback+0x18>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <nRF24_EventTxCallback+0x1c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	2000028d 	.word	0x2000028d
 8001f4c:	2000028c 	.word	0x2000028c

08001f50 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 8001f56:	1dfa      	adds	r2, r7, #7
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fcf7 	bl	8002952 <nRF24_ReadRXPaylaod>

#ifdef ROBOT
	ConnectionStatus = RADIO_OK;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <nRF24_EventRxCallback+0x48>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
 8001f6a:	f001 fcb7 	bl	80038dc <HAL_GetTick>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <nRF24_EventRxCallback+0x4c>)
 8001f72:	6013      	str	r3, [r2, #0]
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
 8001f74:	7a3b      	ldrb	r3, [r7, #8]
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d00a      	beq.n	8001f90 <nRF24_EventRxCallback+0x40>
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff feb4 	bl	8001cf0 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <nRF24_EventRxCallback+0x50>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e000      	b.n	8001f92 <nRF24_EventRxCallback+0x42>
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
 8001f90:	bf00      	nop
}
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000028c 	.word	0x2000028c
 8001f9c:	200002d8 	.word	0x200002d8
 8001fa0:	2000028e 	.word	0x2000028e

08001fa4 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <nRF24_EventMrCallback+0x14>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000028c 	.word	0x2000028c

08001fbc <ConnectionBlinkLED>:

uint8_t CommandSource = RADIO_DATA_SOURCE;


static void ConnectionBlinkLED(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	static uint32_t LastTick = 0;

	if(RADIO_ERROR == Radio_GetConnectionStatus())
 8001fc0:	f7ff ffa0 	bl	8001f04 <Radio_GetConnectionStatus>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <ConnectionBlinkLED+0x1a>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	2101      	movs	r1, #1
 8001fce:	480b      	ldr	r0, [pc, #44]	; (8001ffc <ConnectionBlinkLED+0x40>)
 8001fd0:	f001 ff44 	bl	8003e5c <HAL_GPIO_WritePin>
		return;
 8001fd4:	e011      	b.n	8001ffa <ConnectionBlinkLED+0x3e>
	}

	if(HAL_GetTick() - LastTick > 500)
 8001fd6:	f001 fc81 	bl	80038dc <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <ConnectionBlinkLED+0x44>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fe6:	d908      	bls.n	8001ffa <ConnectionBlinkLED+0x3e>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4804      	ldr	r0, [pc, #16]	; (8001ffc <ConnectionBlinkLED+0x40>)
 8001fec:	f001 ff4e 	bl	8003e8c <HAL_GPIO_TogglePin>
		LastTick = HAL_GetTick();
 8001ff0:	f001 fc74 	bl	80038dc <HAL_GetTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a02      	ldr	r2, [pc, #8]	; (8002000 <ConnectionBlinkLED+0x44>)
 8001ff8:	6013      	str	r3, [r2, #0]
	}
}
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40011000 	.word	0x40011000
 8002000:	200002e0 	.word	0x200002e0

08002004 <KlebotScheduler>:



void KlebotScheduler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;



	Radio_Process();
 800200a:	f7ff ff41 	bl	8001e90 <Radio_Process>


	if(0 == StartupInitFlag)
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <KlebotScheduler+0x40>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <KlebotScheduler+0x18>
	{
		//startup things
		StartupInitFlag = 1;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <KlebotScheduler+0x40>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
	}

	SubProgramStatus = Programs_PerformProgram();
 800201c:	f001 fb9e 	bl	800375c <Programs_PerformProgram>
 8002020:	4603      	mov	r3, r0
 8002022:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <KlebotScheduler+0x2c>
	{
		Programs_ClearProgram();
 800202a:	f001 fb8b 	bl	8003744 <Programs_ClearProgram>

	//app pointer



}
 800202e:	e004      	b.n	800203a <KlebotScheduler+0x36>
	else if(SubProgramStatus == NO_PROGRAM_SET)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <KlebotScheduler+0x36>
		ConnectionBlinkLED();
 8002036:	f7ff ffc1 	bl	8001fbc <ConnectionBlinkLED>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200002e4 	.word	0x200002e4

08002048 <Radio_NewCommandReceivedCallback>:
//
//Callback from klebot_radio, forwards data if currently selected commands source is radio
//

void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
	if(RADIO_DATA_SOURCE == CommandSource)
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <Radio_NewCommandReceivedCallback+0x28>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d104      	bne.n	8002066 <Radio_NewCommandReceivedCallback+0x1e>
	{
		Parser_Klebot(command, length);
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fdf5 	bl	8001c50 <Parser_Klebot>
	}
	else
	{

	}
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200002dc 	.word	0x200002dc

08002074 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800207c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002080:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800208c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002090:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002094:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800209c:	e000      	b.n	80020a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800209e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80020a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f9      	beq.n	800209e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80020aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80020b4:	687b      	ldr	r3, [r7, #4]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c4:	f001 fbb2 	bl	800382c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c8:	f000 f82e 	bl	8002128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020cc:	f7ff fc8c 	bl	80019e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80020d0:	f7ff fd40 	bl	8001b54 <MX_I2C1_Init>
  MX_SPI3_Init();
 80020d4:	f000 fd56 	bl	8002b84 <MX_SPI3_Init>
  MX_TIM1_Init();
 80020d8:	f000 ff18 	bl	8002f0c <MX_TIM1_Init>
  MX_TIM3_Init();
 80020dc:	f000 ff6e 	bl	8002fbc <MX_TIM3_Init>
  MX_TIM4_Init();
 80020e0:	f001 f802 	bl	80030e8 <MX_TIM4_Init>
  MX_TIM7_Init();
 80020e4:	f001 f854 	bl	8003190 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80020e8:	f001 f978 	bl	80033dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //DRV8836_Init(&MotorDriver1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020f2:	480a      	ldr	r0, [pc, #40]	; (800211c <main+0x5c>)
 80020f4:	f001 feb2 	bl	8003e5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fe:	4807      	ldr	r0, [pc, #28]	; (800211c <main+0x5c>)
 8002100:	f001 feac 	bl	8003e5c <HAL_GPIO_WritePin>

  //MotorEnc_Init(&MotorEncoderA, &htim4);
  Motors_Init();
 8002104:	f7ff f968 	bl	80013d8 <Motors_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <main+0x60>)
 800210a:	f003 fb53 	bl	80057b4 <HAL_TIM_Base_Start_IT>



  Radio_Init(&hspi3);
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <main+0x64>)
 8002110:	f7ff fdd6 	bl	8001cc0 <Radio_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  KlebotScheduler();
 8002114:	f7ff ff76 	bl	8002004 <KlebotScheduler>
 8002118:	e7fc      	b.n	8002114 <main+0x54>
 800211a:	bf00      	nop
 800211c:	40011000 	.word	0x40011000
 8002120:	20000428 	.word	0x20000428
 8002124:	200002f4 	.word	0x200002f4

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b094      	sub	sp, #80	; 0x50
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	2238      	movs	r2, #56	; 0x38
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f005 f9e5 	bl	8007506 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800214a:	2301      	movs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800214e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002154:	2301      	movs	r3, #1
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002158:	2301      	movs	r3, #1
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002160:	2302      	movs	r3, #2
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800216a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800216e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8002170:	2300      	movs	r3, #0
 8002172:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	4618      	mov	r0, r3
 800217a:	f001 fffd 	bl	8004178 <HAL_RCC_OscConfig>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8002184:	f000 f84d 	bl	8002222 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002188:	230f      	movs	r3, #15
 800218a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800218c:	2302      	movs	r3, #2
 800218e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2102      	movs	r1, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fafe 	bl	80047a4 <HAL_RCC_ClockConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80021ae:	f000 f838 	bl	8002222 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80021b2:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <SystemClock_Config+0x98>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	bf00      	nop
 80021ba:	3750      	adds	r7, #80	; 0x50
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	42420070 	.word	0x42420070

080021c4 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff50 	bl	8002074 <ITM_SendChar>

	return ch;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_TIM_PeriodElapsedCallback>:
		return 0;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Motors_EncoderSample();
 80021f2:	f7ff f965 	bl	80014c0 <Motors_EncoderSample>
//		//USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d;", MotorEncoderA.Velocity );
//		//USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d;",(int16_t) MotorEncoderA.Position );
//		HAL_UART_Transmit(&huart2, USB_Buffer, USB_Buffer_Length, 500);

	}
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40001400 	.word	0x40001400

08002204 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002214:	d101      	bne.n	800221a <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 8002216:	f7ff fe7f 	bl	8001f18 <Radio_HandlerIRQ>

	}
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002226:	b672      	cpsid	i
}
 8002228:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800222a:	e7fe      	b.n	800222a <Error_Handler+0x8>

0800222c <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f001 fb59 	bl	80038f0 <HAL_Delay>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <nRF24_SendSpi+0x28>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	b29a      	uxth	r2, r3
 800225c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	f002 fd53 	bl	8004d0c <HAL_SPI_Transmit>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200002e8 	.word	0x200002e8

08002274 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <nRF24_ReadSpi+0x28>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	b29a      	uxth	r2, r3
 8002288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	f002 fe80 	bl	8004f92 <HAL_SPI_Receive>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002e8 	.word	0x200002e8

080022a0 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80022ae:	2200      	movs	r2, #0
 80022b0:	2104      	movs	r1, #4
 80022b2:	480c      	ldr	r0, [pc, #48]	; (80022e4 <nRF24_ReadRegister+0x44>)
 80022b4:	f001 fdd2 	bl	8003e5c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ffc3 	bl	8002248 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 80022c2:	f107 030f 	add.w	r3, r7, #15
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ffd3 	bl	8002274 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 80022ce:	2201      	movs	r2, #1
 80022d0:	2104      	movs	r1, #4
 80022d2:	4804      	ldr	r0, [pc, #16]	; (80022e4 <nRF24_ReadRegister+0x44>)
 80022d4:	f001 fdc2 	bl	8003e5c <HAL_GPIO_WritePin>

	return result;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40011400 	.word	0x40011400

080022e8 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80022fc:	2200      	movs	r2, #0
 80022fe:	2104      	movs	r1, #4
 8002300:	480a      	ldr	r0, [pc, #40]	; (800232c <nRF24_ReadRegisters+0x44>)
 8002302:	f001 fdab 	bl	8003e5c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff9c 	bl	8002248 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	4619      	mov	r1, r3
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	f7ff ffad 	bl	8002274 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 800231a:	2201      	movs	r2, #1
 800231c:	2104      	movs	r1, #4
 800231e:	4803      	ldr	r0, [pc, #12]	; (800232c <nRF24_ReadRegisters+0x44>)
 8002320:	f001 fd9c 	bl	8003e5c <HAL_GPIO_WritePin>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40011400 	.word	0x40011400

08002330 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	460a      	mov	r2, r1
 800233a:	71fb      	strb	r3, [r7, #7]
 800233c:	4613      	mov	r3, r2
 800233e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f043 0320 	orr.w	r3, r3, #32
 8002346:	b2db      	uxtb	r3, r3
 8002348:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 800234e:	2200      	movs	r2, #0
 8002350:	2104      	movs	r1, #4
 8002352:	4809      	ldr	r0, [pc, #36]	; (8002378 <nRF24_WriteRegister+0x48>)
 8002354:	f001 fd82 	bl	8003e5c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff72 	bl	8002248 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002364:	2201      	movs	r2, #1
 8002366:	2104      	movs	r1, #4
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <nRF24_WriteRegister+0x48>)
 800236a:	f001 fd77 	bl	8003e5c <HAL_GPIO_WritePin>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40011400 	.word	0x40011400

0800237c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
 8002388:	4613      	mov	r3, r2
 800238a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f043 0320 	orr.w	r3, r3, #32
 8002392:	b2db      	uxtb	r3, r3
 8002394:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002396:	2200      	movs	r2, #0
 8002398:	2104      	movs	r1, #4
 800239a:	480b      	ldr	r0, [pc, #44]	; (80023c8 <nRF24_WriteRegisters+0x4c>)
 800239c:	f001 fd5e 	bl	8003e5c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	2101      	movs	r1, #1
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff4f 	bl	8002248 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 80023aa:	79bb      	ldrb	r3, [r7, #6]
 80023ac:	4619      	mov	r1, r3
 80023ae:	6838      	ldr	r0, [r7, #0]
 80023b0:	f7ff ff4a 	bl	8002248 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80023b4:	2201      	movs	r2, #1
 80023b6:	2104      	movs	r1, #4
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <nRF24_WriteRegisters+0x4c>)
 80023ba:	f001 fd4f 	bl	8003e5c <HAL_GPIO_WritePin>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40011400 	.word	0x40011400

080023cc <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 80023d2:	f000 f829 	bl	8002428 <nRF24_ReadConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 80023da:	4911      	ldr	r1, [pc, #68]	; (8002420 <nRF24_RX_Mode+0x54>)
 80023dc:	2000      	movs	r0, #0
 80023de:	f000 f9b6 	bl	800274e <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f81f 	bl	8002438 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80023fa:	2070      	movs	r0, #112	; 0x70
 80023fc:	f000 f877 	bl	80024ee <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8002400:	f000 f884 	bl	800250c <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002404:	f000 f89c 	bl	8002540 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8002408:	2201      	movs	r2, #1
 800240a:	2110      	movs	r1, #16
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <nRF24_RX_Mode+0x58>)
 800240e:	f001 fd25 	bl	8003e5c <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8002412:	2001      	movs	r0, #1
 8002414:	f7ff ff0a 	bl	800222c <nRF24_Delay_ms>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200002ec 	.word	0x200002ec
 8002424:	40010c00 	.word	0x40010c00

08002428 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff ff37 	bl	80022a0 <nRF24_ReadRegister>
 8002432:	4603      	mov	r3, r0
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}

08002438 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4619      	mov	r1, r3
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff ff72 	bl	8002330 <nRF24_WriteRegister>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800245e:	2006      	movs	r0, #6
 8002460:	f7ff ff1e 	bl	80022a0 <nRF24_ReadRegister>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	f023 0307 	bic.w	r3, r3, #7
 800246e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	b25a      	sxtb	r2, r3
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	4313      	orrs	r3, r2
 800247c:	b25b      	sxtb	r3, r3
 800247e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	4619      	mov	r1, r3
 8002484:	2006      	movs	r0, #6
 8002486:	f7ff ff53 	bl	8002330 <nRF24_WriteRegister>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800249c:	2006      	movs	r0, #6
 800249e:	f7ff feff 	bl	80022a0 <nRF24_ReadRegister>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80024ac:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d104      	bne.n	80024be <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	f043 0320 	orr.w	r3, r3, #32
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e006      	b.n	80024cc <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d103      	bne.n	80024cc <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	4619      	mov	r1, r3
 80024d0:	2006      	movs	r0, #6
 80024d2:	f7ff ff2d 	bl	8002330 <nRF24_WriteRegister>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80024e2:	2007      	movs	r0, #7
 80024e4:	f7ff fedc 	bl	80022a0 <nRF24_ReadRegister>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}

080024ee <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	4619      	mov	r1, r3
 80024fc:	2007      	movs	r0, #7
 80024fe:	f7ff ff17 	bl	8002330 <nRF24_WriteRegister>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8002512:	23e2      	movs	r3, #226	; 0xe2
 8002514:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002516:	2200      	movs	r2, #0
 8002518:	2104      	movs	r1, #4
 800251a:	4808      	ldr	r0, [pc, #32]	; (800253c <nRF24_FlushRX+0x30>)
 800251c:	f001 fc9e 	bl	8003e5c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002520:	1dfb      	adds	r3, r7, #7
 8002522:	2101      	movs	r1, #1
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fe8f 	bl	8002248 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800252a:	2201      	movs	r2, #1
 800252c:	2104      	movs	r1, #4
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <nRF24_FlushRX+0x30>)
 8002530:	f001 fc94 	bl	8003e5c <HAL_GPIO_WritePin>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40011400 	.word	0x40011400

08002540 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002546:	23e1      	movs	r3, #225	; 0xe1
 8002548:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800254a:	2200      	movs	r2, #0
 800254c:	2104      	movs	r1, #4
 800254e:	4808      	ldr	r0, [pc, #32]	; (8002570 <nRF24_FlushTX+0x30>)
 8002550:	f001 fc84 	bl	8003e5c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002554:	1dfb      	adds	r3, r7, #7
 8002556:	2101      	movs	r1, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fe75 	bl	8002248 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800255e:	2201      	movs	r2, #1
 8002560:	2104      	movs	r1, #4
 8002562:	4803      	ldr	r0, [pc, #12]	; (8002570 <nRF24_FlushTX+0x30>)
 8002564:	f001 fc7a 	bl	8003e5c <HAL_GPIO_WritePin>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40011400 	.word	0x40011400

08002574 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800257e:	f7ff ff53 	bl	8002428 <nRF24_ReadConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	e003      	b.n	800259e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	f023 0308 	bic.w	r3, r3, #8
 800259c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff49 	bl	8002438 <nRF24_WriteConfig>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80025b8:	f7ff ff36 	bl	8002428 <nRF24_ReadConfig>
 80025bc:	4603      	mov	r3, r0
 80025be:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d104      	bne.n	80025d0 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e003      	b.n	80025d8 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	f023 0304 	bic.w	r3, r3, #4
 80025d6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff2c 	bl	8002438 <nRF24_WriteConfig>
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	460a      	mov	r2, r1
 80025f2:	71fb      	strb	r3, [r7, #7]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	b25a      	sxtb	r2, r3
 80025fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	b25b      	sxtb	r3, r3
 8002608:	4313      	orrs	r3, r2
 800260a:	b25b      	sxtb	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4619      	mov	r1, r3
 8002610:	2004      	movs	r0, #4
 8002612:	f7ff fe8d 	bl	8002330 <nRF24_WriteRegister>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	2005      	movs	r0, #5
 8002634:	f7ff fe7c 	bl	8002330 <nRF24_WriteRegister>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	460a      	mov	r2, r1
 800264a:	71fb      	strb	r3, [r7, #7]
 800264c:	4613      	mov	r3, r2
 800264e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d901      	bls.n	800265a <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002656:	2305      	movs	r3, #5
 8002658:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800265a:	2002      	movs	r0, #2
 800265c:	f7ff fe20 	bl	80022a0 <nRF24_ReadRegister>
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10a      	bne.n	8002680 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2201      	movs	r2, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	b25a      	sxtb	r2, r3
 8002674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002678:	4313      	orrs	r3, r2
 800267a:	b25b      	sxtb	r3, r3
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e00b      	b.n	8002698 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2201      	movs	r2, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	b25b      	sxtb	r3, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	b25a      	sxtb	r2, r3
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	4013      	ands	r3, r2
 8002694:	b25b      	sxtb	r3, r3
 8002696:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	4619      	mov	r1, r3
 800269c:	2002      	movs	r0, #2
 800269e:	f7ff fe47 	bl	8002330 <nRF24_WriteRegister>
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	460a      	mov	r2, r1
 80026b4:	71fb      	strb	r3, [r7, #7]
 80026b6:	4613      	mov	r3, r2
 80026b8:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d901      	bls.n	80026c4 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80026c0:	2305      	movs	r3, #5
 80026c2:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7ff fdeb 	bl	80022a0 <nRF24_ReadRegister>
 80026ca:	4603      	mov	r3, r0
 80026cc:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80026ce:	79bb      	ldrb	r3, [r7, #6]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10a      	bne.n	80026ea <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	2201      	movs	r2, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	b25a      	sxtb	r2, r3
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e00b      	b.n	8002702 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2201      	movs	r2, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	b25a      	sxtb	r2, r3
 80026f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fc:	4013      	ands	r3, r2
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	4619      	mov	r1, r3
 8002706:	2001      	movs	r0, #1
 8002708:	f7ff fe12 	bl	8002330 <nRF24_WriteRegister>
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d901      	bls.n	8002728 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002724:	2305      	movs	r3, #5
 8002726:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d801      	bhi.n	8002732 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800272e:	2303      	movs	r3, #3
 8002730:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	3b02      	subs	r3, #2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4619      	mov	r1, r3
 8002740:	2003      	movs	r0, #3
 8002742:	f7ff fdf5 	bl	8002330 <nRF24_WriteRegister>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	6039      	str	r1, [r7, #0]
 8002758:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <nRF24_SetRXAddress+0x18>
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d11d      	bne.n	80027a2 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e00d      	b.n	8002788 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	441a      	add	r2, r3
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	f1c3 0302 	rsb	r3, r3, #2
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	3310      	adds	r3, #16
 800277c:	443b      	add	r3, r7
 800277e:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	3301      	adds	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d9ee      	bls.n	800276c <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	330a      	adds	r3, #10
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f107 010c 	add.w	r1, r7, #12
 8002798:	2203      	movs	r2, #3
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fdee 	bl	800237c <nRF24_WriteRegisters>
	{
 80027a0:	e00a      	b.n	80027b8 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	330a      	adds	r3, #10
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	3302      	adds	r3, #2
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7ff fdbd 	bl	8002330 <nRF24_WriteRegister>
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	2203      	movs	r2, #3
 80027ce:	4619      	mov	r1, r3
 80027d0:	200a      	movs	r0, #10
 80027d2:	f7ff fd89 	bl	80022e8 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e00c      	b.n	80027f6 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	f1c3 0302 	rsb	r3, r3, #2
 80027e4:	3210      	adds	r2, #16
 80027e6:	443a      	add	r2, r7
 80027e8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80027ec:	4a16      	ldr	r2, [pc, #88]	; (8002848 <nRF24_SetTXAddress+0x88>)
 80027ee:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	3301      	adds	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d9ef      	bls.n	80027dc <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e00d      	b.n	800281e <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	441a      	add	r2, r3
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	f1c3 0302 	rsb	r3, r3, #2
 800280e:	7812      	ldrb	r2, [r2, #0]
 8002810:	3310      	adds	r3, #16
 8002812:	443b      	add	r3, r7
 8002814:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	3301      	adds	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d9ee      	bls.n	8002802 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	2203      	movs	r2, #3
 800282a:	4619      	mov	r1, r3
 800282c:	200a      	movs	r0, #10
 800282e:	f7ff fda5 	bl	800237c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8002832:	f107 030c 	add.w	r3, r7, #12
 8002836:	2203      	movs	r2, #3
 8002838:	4619      	mov	r1, r3
 800283a:	2010      	movs	r0, #16
 800283c:	f7ff fd9e 	bl	800237c <nRF24_WriteRegisters>

}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200002ec 	.word	0x200002ec

0800284c <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002852:	f7ff fe44 	bl	80024de <nRF24_ReadStatus>
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002860:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fe42 	bl	80024ee <nRF24_WriteStatus>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 800287c:	2060      	movs	r0, #96	; 0x60
 800287e:	f7ff fd0f 	bl	80022a0 <nRF24_ReadRegister>
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b20      	cmp	r3, #32
 800288a:	d906      	bls.n	800289a <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 800288c:	f7ff fe3e 	bl	800250c <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8002890:	2002      	movs	r0, #2
 8002892:	f7ff fccb 	bl	800222c <nRF24_Delay_ms>
        return 0;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 800289a:	79fb      	ldrb	r3, [r7, #7]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80028ae:	f7ff fdbb 	bl	8002428 <nRF24_ReadConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e003      	b.n	80028ce <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028cc:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fdb1 	bl	8002438 <nRF24_WriteConfig>
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80028e8:	f7ff fd9e 	bl	8002428 <nRF24_ReadConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	f043 0320 	orr.w	r3, r3, #32
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e003      	b.n	8002908 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	f023 0320 	bic.w	r3, r3, #32
 8002906:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fd94 	bl	8002438 <nRF24_WriteConfig>
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002922:	f7ff fd81 	bl	8002428 <nRF24_ReadConfig>
 8002926:	4603      	mov	r3, r0
 8002928:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	f043 0310 	orr.w	r3, r3, #16
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e003      	b.n	8002942 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	f023 0310 	bic.w	r3, r3, #16
 8002940:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd77 	bl	8002438 <nRF24_WriteConfig>
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 800295c:	f7ff ff89 	bl	8002872 <nRF24_GetDynamicPayloadSize>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	2061      	movs	r0, #97	; 0x61
 8002972:	f7ff fcb9 	bl	80022e8 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <nRF24_IRQ_Handler+0x14>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	200002f2 	.word	0x200002f2

08002998 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <nRF24_IRQ_Read+0x7c>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d130      	bne.n	8002a0a <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <nRF24_IRQ_Read+0x7c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 80029ae:	f7ff fd96 	bl	80024de <nRF24_ReadStatus>
 80029b2:	4603      	mov	r3, r0
 80029b4:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 80029ba:	79bb      	ldrb	r3, [r7, #6]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <nRF24_IRQ_Read+0x80>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d0:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 80029d2:	79bb      	ldrb	r3, [r7, #6]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <nRF24_IRQ_Read+0x84>)
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f043 0320 	orr.w	r3, r3, #32
 80029e8:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 80029ea:	79bb      	ldrb	r3, [r7, #6]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <nRF24_IRQ_Read+0x88>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f043 0310 	orr.w	r3, r3, #16
 8002a00:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fd72 	bl	80024ee <nRF24_WriteStatus>
	}
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200002f2 	.word	0x200002f2
 8002a18:	200002ef 	.word	0x200002ef
 8002a1c:	200002f0 	.word	0x200002f0
 8002a20:	200002f1 	.word	0x200002f1

08002a24 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8002a28:	f7ff ffb6 	bl	8002998 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <nRF24_Event+0x44>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8002a34:	f7ff fa8c 	bl	8001f50 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <nRF24_Event+0x44>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <nRF24_Event+0x48>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8002a46:	f7ff fa73 	bl	8001f30 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <nRF24_Event+0x48>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <nRF24_Event+0x4c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8002a58:	f7ff faa4 	bl	8001fa4 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <nRF24_Event+0x4c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
	}
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200002ef 	.word	0x200002ef
 8002a6c:	200002f0 	.word	0x200002f0
 8002a70:	200002f1 	.word	0x200002f1

08002a74 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002a7c:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <nRF24_Init+0xc4>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002a82:	2200      	movs	r2, #0
 8002a84:	2110      	movs	r1, #16
 8002a86:	482d      	ldr	r0, [pc, #180]	; (8002b3c <nRF24_Init+0xc8>)
 8002a88:	f001 f9e8 	bl	8003e5c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2104      	movs	r1, #4
 8002a90:	482b      	ldr	r0, [pc, #172]	; (8002b40 <nRF24_Init+0xcc>)
 8002a92:	f001 f9e3 	bl	8003e5c <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8002a96:	2005      	movs	r0, #5
 8002a98:	f7ff fbc8 	bl	800222c <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	f7ff fcd9 	bl	8002454 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	f7ff fcf5 	bl	8002492 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7ff fd63 	bl	8002574 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7ff fd7d 	bl	80025ae <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002ab4:	2107      	movs	r1, #7
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	f7ff fd96 	bl	80025e8 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002abc:	201d      	movs	r0, #29
 8002abe:	f7ff fbef 	bl	80022a0 <nRF24_ReadRegister>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	201d      	movs	r0, #29
 8002ace:	f7ff fc2f 	bl	8002330 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002ad2:	213f      	movs	r1, #63	; 0x3f
 8002ad4:	201c      	movs	r0, #28
 8002ad6:	f7ff fc2b 	bl	8002330 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8002ada:	200a      	movs	r0, #10
 8002adc:	f7ff fd9f 	bl	800261e <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7ff fdac 	bl	8002640 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002ae8:	2101      	movs	r1, #1
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff fddd 	bl	80026aa <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002af0:	2003      	movs	r0, #3
 8002af2:	f7ff fe0f 	bl	8002714 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f7ff fb98 	bl	800222c <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002afc:	2001      	movs	r0, #1
 8002afe:	f7ff fed1 	bl	80028a4 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7ff feeb 	bl	80028de <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7ff ff05 	bl	8002918 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7ff fb8c 	bl	800222c <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8002b14:	f7ff fe9a 	bl	800284c <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 8002b18:	201d      	movs	r0, #29
 8002b1a:	f7ff fbc1 	bl	80022a0 <nRF24_ReadRegister>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4619      	mov	r1, r3
 8002b28:	201d      	movs	r0, #29
 8002b2a:	f7ff fc01 	bl	8002330 <nRF24_WriteRegister>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200002e8 	.word	0x200002e8
 8002b3c:	40010c00 	.word	0x40010c00
 8002b40:	40011400 	.word	0x40011400

08002b44 <nRF24_WriteAckPayload>:
//
//
//

nRF24_TX_Status nRF24_WriteAckPayload(uint8_t pipe, uint8_t * data, uint8_t size)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71bb      	strb	r3, [r7, #6]
	if(size > 32)
 8002b54:	79bb      	ldrb	r3, [r7, #6]
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d901      	bls.n	8002b5e <nRF24_WriteAckPayload+0x1a>
		return NRF24_NO_TRANSMITTED_PACKET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e00d      	b.n	8002b7a <nRF24_WriteAckPayload+0x36>

	pipe &= 0x07;
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegisters((NRF24_CMD_W_ACK_PAYLOAD | pipe), data, size);
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f063 0357 	orn	r3, r3, #87	; 0x57
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	79ba      	ldrb	r2, [r7, #6]
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fc02 	bl	800237c <nRF24_WriteRegisters>

	return NRF24_TRANSMITTED_PACKET;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <MX_SPI3_Init+0x68>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002bb8:	2218      	movs	r2, #24
 8002bba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002bd0:	220a      	movs	r2, #10
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002bd4:	4804      	ldr	r0, [pc, #16]	; (8002be8 <MX_SPI3_Init+0x64>)
 8002bd6:	f002 f815 	bl	8004c04 <HAL_SPI_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002be0:	f7ff fb1f 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200002f4 	.word	0x200002f4
 8002bec:	40003c00 	.word	0x40003c00

08002bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a23      	ldr	r2, [pc, #140]	; (8002c98 <HAL_SPI_MspInit+0xa8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d13f      	bne.n	8002c90 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c10:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <HAL_SPI_MspInit+0xac>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <HAL_SPI_MspInit+0xac>)
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	61d3      	str	r3, [r2, #28]
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <HAL_SPI_MspInit+0xac>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c28:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <HAL_SPI_MspInit+0xac>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_SPI_MspInit+0xac>)
 8002c2e:	f043 0310 	orr.w	r3, r3, #16
 8002c32:	6193      	str	r3, [r2, #24]
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_SPI_MspInit+0xac>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 8002c40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <HAL_SPI_MspInit+0xb0>)
 8002c56:	f000 ff7d 	bl	8003b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 8002c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <HAL_SPI_MspInit+0xb0>)
 8002c70:	f000 ff70 	bl	8003b54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_SPI_MspInit+0xb4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8a:	4a06      	ldr	r2, [pc, #24]	; (8002ca4 <HAL_SPI_MspInit+0xb4>)
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002c90:	bf00      	nop
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40003c00 	.word	0x40003c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	40010000 	.word	0x40010000

08002ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6193      	str	r3, [r2, #24]
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <HAL_MspInit+0x5c>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_MspInit+0x60>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_MspInit+0x60>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000

08002d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <NMI_Handler+0x4>

08002d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d16:	e7fe      	b.n	8002d16 <HardFault_Handler+0x4>

08002d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <MemManage_Handler+0x4>

08002d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <BusFault_Handler+0x4>

08002d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <UsageFault_Handler+0x4>

08002d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d52:	f000 fdb1 	bl	80038b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002d5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d62:	f001 f8ad 	bl	8003ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <TIM7_IRQHandler+0x10>)
 8002d72:	f002 ffab 	bl	8005ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000428 	.word	0x20000428

08002d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return 1;
 8002d84:	2301      	movs	r3, #1
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <_kill>:

int _kill(int pid, int sig)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d98:	f004 fc08 	bl	80075ac <__errno>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2216      	movs	r2, #22
 8002da0:	601a      	str	r2, [r3, #0]
  return -1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_exit>:

void _exit (int status)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002db6:	f04f 31ff 	mov.w	r1, #4294967295
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffe7 	bl	8002d8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dc0:	e7fe      	b.n	8002dc0 <_exit+0x12>

08002dc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e00a      	b.n	8002dea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	4601      	mov	r1, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	60ba      	str	r2, [r7, #8]
 8002de0:	b2ca      	uxtb	r2, r1
 8002de2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3301      	adds	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	dbf0      	blt.n	8002dd4 <_read+0x12>
  }

  return len;
 8002df2:	687b      	ldr	r3, [r7, #4]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e009      	b.n	8002e22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	60ba      	str	r2, [r7, #8]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff f9d4 	bl	80021c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	dbf1      	blt.n	8002e0e <_write+0x12>
  }
  return len;
 8002e2a:	687b      	ldr	r3, [r7, #4]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_close>:

int _close(int file)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e5a:	605a      	str	r2, [r3, #4]
  return 0;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <_isatty>:

int _isatty(int file)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e70:	2301      	movs	r3, #1
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <_sbrk+0x5c>)
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <_sbrk+0x60>)
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <_sbrk+0x64>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <_sbrk+0x64>)
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <_sbrk+0x68>)
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <_sbrk+0x64>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d207      	bcs.n	8002ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec4:	f004 fb72 	bl	80075ac <__errno>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	220c      	movs	r2, #12
 8002ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e009      	b.n	8002ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <_sbrk+0x64>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <_sbrk+0x64>)
 8002ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20010000 	.word	0x20010000
 8002ef4:	00001000 	.word	0x00001000
 8002ef8:	2000034c 	.word	0x2000034c
 8002efc:	20000610 	.word	0x20000610

08002f00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	2224      	movs	r2, #36	; 0x24
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 faf3 	bl	8007506 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f2a:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <MX_TIM1_Init+0xac>)
 8002f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f54:	2303      	movs	r3, #3
 8002f56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f80:	f002 fd74 	bl	8005a6c <HAL_TIM_Encoder_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002f8a:	f7ff f94a 	bl	8002222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f96:	1d3b      	adds	r3, r7, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4806      	ldr	r0, [pc, #24]	; (8002fb4 <MX_TIM1_Init+0xa8>)
 8002f9c:	f003 fbfa 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002fa6:	f7ff f93c 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002faa:	bf00      	nop
 8002fac:	3730      	adds	r7, #48	; 0x30
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000350 	.word	0x20000350
 8002fb8:	40012c00 	.word	0x40012c00

08002fbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd0:	f107 0320 	add.w	r3, r7, #32
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
 8002fe8:	615a      	str	r2, [r3, #20]
 8002fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fec:	4b3c      	ldr	r3, [pc, #240]	; (80030e0 <MX_TIM3_Init+0x124>)
 8002fee:	4a3d      	ldr	r2, [pc, #244]	; (80030e4 <MX_TIM3_Init+0x128>)
 8002ff0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <MX_TIM3_Init+0x124>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff8:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <MX_TIM3_Init+0x124>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <MX_TIM3_Init+0x124>)
 8003000:	22ff      	movs	r2, #255	; 0xff
 8003002:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <MX_TIM3_Init+0x124>)
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300a:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <MX_TIM3_Init+0x124>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003010:	4833      	ldr	r0, [pc, #204]	; (80030e0 <MX_TIM3_Init+0x124>)
 8003012:	f002 fb7f 	bl	8005714 <HAL_TIM_Base_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800301c:	f7ff f901 	bl	8002222 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800302a:	4619      	mov	r1, r3
 800302c:	482c      	ldr	r0, [pc, #176]	; (80030e0 <MX_TIM3_Init+0x124>)
 800302e:	f003 f817 	bl	8006060 <HAL_TIM_ConfigClockSource>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003038:	f7ff f8f3 	bl	8002222 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800303c:	4828      	ldr	r0, [pc, #160]	; (80030e0 <MX_TIM3_Init+0x124>)
 800303e:	f002 fc13 	bl	8005868 <HAL_TIM_PWM_Init>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003048:	f7ff f8eb 	bl	8002222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304c:	2300      	movs	r3, #0
 800304e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003054:	f107 0320 	add.w	r3, r7, #32
 8003058:	4619      	mov	r1, r3
 800305a:	4821      	ldr	r0, [pc, #132]	; (80030e0 <MX_TIM3_Init+0x124>)
 800305c:	f003 fb9a 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003066:	f7ff f8dc 	bl	8002222 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800306a:	2360      	movs	r3, #96	; 0x60
 800306c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003076:	2304      	movs	r3, #4
 8003078:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	2200      	movs	r2, #0
 800307e:	4619      	mov	r1, r3
 8003080:	4817      	ldr	r0, [pc, #92]	; (80030e0 <MX_TIM3_Init+0x124>)
 8003082:	f002 ff2b 	bl	8005edc <HAL_TIM_PWM_ConfigChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800308c:	f7ff f8c9 	bl	8002222 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	2204      	movs	r2, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4812      	ldr	r0, [pc, #72]	; (80030e0 <MX_TIM3_Init+0x124>)
 8003098:	f002 ff20 	bl	8005edc <HAL_TIM_PWM_ConfigChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80030a2:	f7ff f8be 	bl	8002222 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	2208      	movs	r2, #8
 80030aa:	4619      	mov	r1, r3
 80030ac:	480c      	ldr	r0, [pc, #48]	; (80030e0 <MX_TIM3_Init+0x124>)
 80030ae:	f002 ff15 	bl	8005edc <HAL_TIM_PWM_ConfigChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 80030b8:	f7ff f8b3 	bl	8002222 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	220c      	movs	r2, #12
 80030c0:	4619      	mov	r1, r3
 80030c2:	4807      	ldr	r0, [pc, #28]	; (80030e0 <MX_TIM3_Init+0x124>)
 80030c4:	f002 ff0a 	bl	8005edc <HAL_TIM_PWM_ConfigChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80030ce:	f7ff f8a8 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030d2:	4803      	ldr	r0, [pc, #12]	; (80030e0 <MX_TIM3_Init+0x124>)
 80030d4:	f000 f93a 	bl	800334c <HAL_TIM_MspPostInit>

}
 80030d8:	bf00      	nop
 80030da:	3738      	adds	r7, #56	; 0x38
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000398 	.word	0x20000398
 80030e4:	40000400 	.word	0x40000400

080030e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	; 0x30
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030ee:	f107 030c 	add.w	r3, r7, #12
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 fa05 	bl	8007506 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <MX_TIM4_Init+0xa0>)
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <MX_TIM4_Init+0xa4>)
 8003108:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800310a:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <MX_TIM4_Init+0xa0>)
 800310c:	2200      	movs	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <MX_TIM4_Init+0xa0>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <MX_TIM4_Init+0xa0>)
 8003118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800311c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <MX_TIM4_Init+0xa0>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <MX_TIM4_Init+0xa0>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800312a:	2303      	movs	r3, #3
 800312c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800312e:	2302      	movs	r3, #2
 8003130:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003132:	2301      	movs	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800313e:	2302      	movs	r3, #2
 8003140:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003142:	2301      	movs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003146:	2300      	movs	r3, #0
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	4619      	mov	r1, r3
 8003154:	480c      	ldr	r0, [pc, #48]	; (8003188 <MX_TIM4_Init+0xa0>)
 8003156:	f002 fc89 	bl	8005a6c <HAL_TIM_Encoder_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003160:	f7ff f85f 	bl	8002222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003164:	2300      	movs	r3, #0
 8003166:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	4619      	mov	r1, r3
 8003170:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_TIM4_Init+0xa0>)
 8003172:	f003 fb0f 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800317c:	f7ff f851 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003180:	bf00      	nop
 8003182:	3730      	adds	r7, #48	; 0x30
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200003e0 	.word	0x200003e0
 800318c:	40000800 	.word	0x40000800

08003190 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003196:	463b      	mov	r3, r7
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <MX_TIM7_Init+0x64>)
 80031a0:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <MX_TIM7_Init+0x68>)
 80031a2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <MX_TIM7_Init+0x64>)
 80031a6:	2247      	movs	r2, #71	; 0x47
 80031a8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <MX_TIM7_Init+0x64>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <MX_TIM7_Init+0x64>)
 80031b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80031b6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <MX_TIM7_Init+0x64>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80031be:	480d      	ldr	r0, [pc, #52]	; (80031f4 <MX_TIM7_Init+0x64>)
 80031c0:	f002 faa8 	bl	8005714 <HAL_TIM_Base_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80031ca:	f7ff f82a 	bl	8002222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80031d6:	463b      	mov	r3, r7
 80031d8:	4619      	mov	r1, r3
 80031da:	4806      	ldr	r0, [pc, #24]	; (80031f4 <MX_TIM7_Init+0x64>)
 80031dc:	f003 fada 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80031e6:	f7ff f81c 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000428 	.word	0x20000428
 80031f8:	40001400 	.word	0x40001400

080031fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0318 	add.w	r3, r7, #24
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d125      	bne.n	8003268 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800321c:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003222:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003226:	6193      	str	r3, [r2, #24]
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003234:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4a23      	ldr	r2, [pc, #140]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6193      	str	r3, [r2, #24]
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 800324c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 0318 	add.w	r3, r7, #24
 800325e:	4619      	mov	r1, r3
 8003260:	481a      	ldr	r0, [pc, #104]	; (80032cc <HAL_TIM_Encoder_MspInit+0xd0>)
 8003262:	f000 fc77 	bl	8003b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003266:	e028      	b.n	80032ba <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d123      	bne.n	80032ba <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	61d3      	str	r3, [r2, #28]
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003290:	f043 0308 	orr.w	r3, r3, #8
 8003294:	6193      	str	r3, [r2, #24]
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 80032a2:	23c0      	movs	r3, #192	; 0xc0
 80032a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ae:	f107 0318 	add.w	r3, r7, #24
 80032b2:	4619      	mov	r1, r3
 80032b4:	4807      	ldr	r0, [pc, #28]	; (80032d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 80032b6:	f000 fc4d 	bl	8003b54 <HAL_GPIO_Init>
}
 80032ba:	bf00      	nop
 80032bc:	3728      	adds	r7, #40	; 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40010800 	.word	0x40010800
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40010c00 	.word	0x40010c00

080032d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_TIM_Base_MspInit+0x68>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10c      	bne.n	8003304 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ea:	4b16      	ldr	r3, [pc, #88]	; (8003344 <HAL_TIM_Base_MspInit+0x6c>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a15      	ldr	r2, [pc, #84]	; (8003344 <HAL_TIM_Base_MspInit+0x6c>)
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	61d3      	str	r3, [r2, #28]
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_TIM_Base_MspInit+0x6c>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003302:	e018      	b.n	8003336 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0f      	ldr	r2, [pc, #60]	; (8003348 <HAL_TIM_Base_MspInit+0x70>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d113      	bne.n	8003336 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_TIM_Base_MspInit+0x6c>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4a0c      	ldr	r2, [pc, #48]	; (8003344 <HAL_TIM_Base_MspInit+0x6c>)
 8003314:	f043 0320 	orr.w	r3, r3, #32
 8003318:	61d3      	str	r3, [r2, #28]
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_TIM_Base_MspInit+0x6c>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	2100      	movs	r1, #0
 800332a:	2037      	movs	r0, #55	; 0x37
 800332c:	f000 fbdb 	bl	8003ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003330:	2037      	movs	r0, #55	; 0x37
 8003332:	f000 fbf4 	bl	8003b1e <HAL_NVIC_EnableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40000400 	.word	0x40000400
 8003344:	40021000 	.word	0x40021000
 8003348:	40001400 	.word	0x40001400

0800334c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a19      	ldr	r2, [pc, #100]	; (80033cc <HAL_TIM_MspPostInit+0x80>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d12a      	bne.n	80033c2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_TIM_MspPostInit+0x84>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <HAL_TIM_MspPostInit+0x84>)
 8003372:	f043 0310 	orr.w	r3, r3, #16
 8003376:	6193      	str	r3, [r2, #24]
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_TIM_MspPostInit+0x84>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 8003384:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003388:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338a:	2302      	movs	r3, #2
 800338c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003392:	f107 030c 	add.w	r3, r7, #12
 8003396:	4619      	mov	r1, r3
 8003398:	480e      	ldr	r0, [pc, #56]	; (80033d4 <HAL_TIM_MspPostInit+0x88>)
 800339a:	f000 fbdb 	bl	8003b54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_TIM_MspPostInit+0x8c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <HAL_TIM_MspPostInit+0x8c>)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033c2:	bf00      	nop
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40011000 	.word	0x40011000
 80033d8:	40010000 	.word	0x40010000

080033dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 80033e2:	4a12      	ldr	r2, [pc, #72]	; (800342c <MX_USART2_UART_Init+0x50>)
 80033e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 80033e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 8003402:	220c      	movs	r2, #12
 8003404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003412:	4805      	ldr	r0, [pc, #20]	; (8003428 <MX_USART2_UART_Init+0x4c>)
 8003414:	f003 fa36 	bl	8006884 <HAL_UART_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800341e:	f7fe ff00 	bl	8002222 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000470 	.word	0x20000470
 800342c:	40004400 	.word	0x40004400

08003430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <HAL_UART_MspInit+0x88>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d12f      	bne.n	80034b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_UART_MspInit+0x8c>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_UART_MspInit+0x8c>)
 8003456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345a:	61d3      	str	r3, [r2, #28]
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <HAL_UART_MspInit+0x8c>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_UART_MspInit+0x8c>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <HAL_UART_MspInit+0x8c>)
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	6193      	str	r3, [r2, #24]
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_UART_MspInit+0x8c>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003480:	2304      	movs	r3, #4
 8003482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	4619      	mov	r1, r3
 8003492:	480b      	ldr	r0, [pc, #44]	; (80034c0 <HAL_UART_MspInit+0x90>)
 8003494:	f000 fb5e 	bl	8003b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003498:	2308      	movs	r3, #8
 800349a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a4:	f107 0310 	add.w	r3, r7, #16
 80034a8:	4619      	mov	r1, r3
 80034aa:	4805      	ldr	r0, [pc, #20]	; (80034c0 <HAL_UART_MspInit+0x90>)
 80034ac:	f000 fb52 	bl	8003b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40004400 	.word	0x40004400
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40010800 	.word	0x40010800

080034c4 <Programs_DiodeTestProgram>:

//
// -- Main Diode Test Program for Robot --
//
Programs_status_t Programs_DiodeTestProgram(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	if(0 == StartupInitFlag)
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <Programs_DiodeTestProgram+0x3c>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <Programs_DiodeTestProgram+0x1c>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80034d0:	2201      	movs	r2, #1
 80034d2:	2101      	movs	r1, #1
 80034d4:	480b      	ldr	r0, [pc, #44]	; (8003504 <Programs_DiodeTestProgram+0x40>)
 80034d6:	f000 fcc1 	bl	8003e5c <HAL_GPIO_WritePin>
		StartupInitFlag = 1;
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <Programs_DiodeTestProgram+0x3c>)
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
	}

	if(1 == ProgramExitFlag)
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <Programs_DiodeTestProgram+0x44>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d107      	bne.n	80034f8 <Programs_DiodeTestProgram+0x34>
	{
		ProgramExitFlag = 0;
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <Programs_DiodeTestProgram+0x44>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
		StartupInitFlag = 0;
 80034ee:	4b04      	ldr	r3, [pc, #16]	; (8003500 <Programs_DiodeTestProgram+0x3c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
		return PROGRAM_COMPLETED;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <Programs_DiodeTestProgram+0x36>
	}
	return PROGRAM_IN_PROGRESS;
 80034f8:	2302      	movs	r3, #2
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	200004b9 	.word	0x200004b9
 8003504:	40011000 	.word	0x40011000
 8003508:	200004b8 	.word	0x200004b8

0800350c <Programs_DiodeTestParser>:
//
// -- Diode Test Program Parser --
//

void Programs_DiodeTestParser(uint8_t *command, uint8_t length)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60fb      	str	r3, [r7, #12]
	uint8_t Buffer[3];

	switch(*CurrentByte)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	3b10      	subs	r3, #16
 8003522:	2b11      	cmp	r3, #17
 8003524:	d85b      	bhi.n	80035de <Programs_DiodeTestParser+0xd2>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <Programs_DiodeTestParser+0x20>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	08003575 	.word	0x08003575
 8003530:	080035d1 	.word	0x080035d1
 8003534:	080035df 	.word	0x080035df
 8003538:	080035df 	.word	0x080035df
 800353c:	080035df 	.word	0x080035df
 8003540:	080035df 	.word	0x080035df
 8003544:	080035df 	.word	0x080035df
 8003548:	080035df 	.word	0x080035df
 800354c:	080035df 	.word	0x080035df
 8003550:	080035df 	.word	0x080035df
 8003554:	080035df 	.word	0x080035df
 8003558:	080035df 	.word	0x080035df
 800355c:	080035df 	.word	0x080035df
 8003560:	080035df 	.word	0x080035df
 8003564:	080035df 	.word	0x080035df
 8003568:	080035df 	.word	0x080035df
 800356c:	08003589 	.word	0x08003589
 8003570:	080035ad 	.word	0x080035ad
	{
	case START_PROGRAM:
		if(PROGRAMS_OK == Programs_SetProgram(Programs_DiodeTestProgram) )
 8003574:	481d      	ldr	r0, [pc, #116]	; (80035ec <Programs_DiodeTestParser+0xe0>)
 8003576:	f000 f8cf 	bl	8003718 <Programs_SetProgram>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d130      	bne.n	80035e2 <Programs_DiodeTestParser+0xd6>
		{
			Programs_SendProgramStartedACK(DIODE_TEST);
 8003580:	20d0      	movs	r0, #208	; 0xd0
 8003582:	f000 f901 	bl	8003788 <Programs_SendProgramStartedACK>
		}
		break;
 8003586:	e02c      	b.n	80035e2 <Programs_DiodeTestParser+0xd6>

	case DIODE_SET_ON:
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003588:	2200      	movs	r2, #0
 800358a:	2101      	movs	r1, #1
 800358c:	4818      	ldr	r0, [pc, #96]	; (80035f0 <Programs_DiodeTestParser+0xe4>)
 800358e:	f000 fc65 	bl	8003e5c <HAL_GPIO_WritePin>
		Buffer[0] = DIODE_TEST;
 8003592:	23d0      	movs	r3, #208	; 0xd0
 8003594:	723b      	strb	r3, [r7, #8]
		Buffer[1] = DIODE_REAL_STATE;
 8003596:	2322      	movs	r3, #34	; 0x22
 8003598:	727b      	strb	r3, [r7, #9]
		Buffer[2] = 1;
 800359a:	2301      	movs	r3, #1
 800359c:	72bb      	strb	r3, [r7, #10]
		Radio_TxBufferPut(Buffer, 3);
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	2103      	movs	r1, #3
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fc03 	bl	8001db0 <Radio_TxBufferPut>
		break;
 80035aa:	e01b      	b.n	80035e4 <Programs_DiodeTestParser+0xd8>

	case DIODE_SET_OFF:
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80035ac:	2201      	movs	r2, #1
 80035ae:	2101      	movs	r1, #1
 80035b0:	480f      	ldr	r0, [pc, #60]	; (80035f0 <Programs_DiodeTestParser+0xe4>)
 80035b2:	f000 fc53 	bl	8003e5c <HAL_GPIO_WritePin>
		Buffer[0] = DIODE_TEST;
 80035b6:	23d0      	movs	r3, #208	; 0xd0
 80035b8:	723b      	strb	r3, [r7, #8]
		Buffer[1] = DIODE_REAL_STATE;
 80035ba:	2322      	movs	r3, #34	; 0x22
 80035bc:	727b      	strb	r3, [r7, #9]
		Buffer[2] = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	72bb      	strb	r3, [r7, #10]
		Radio_TxBufferPut(Buffer, 3);
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	2103      	movs	r1, #3
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fbf1 	bl	8001db0 <Radio_TxBufferPut>
		break;
 80035ce:	e009      	b.n	80035e4 <Programs_DiodeTestParser+0xd8>

	case EXIT_PROGRAM:
		ProgramExitFlag = 1;
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <Programs_DiodeTestParser+0xe8>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
		Programs_SendProgramExitACK(DIODE_TEST);
 80035d6:	20d0      	movs	r0, #208	; 0xd0
 80035d8:	f000 f8ec 	bl	80037b4 <Programs_SendProgramExitACK>
		break;
 80035dc:	e002      	b.n	80035e4 <Programs_DiodeTestParser+0xd8>

	default:
		break;
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <Programs_DiodeTestParser+0xd8>
		break;
 80035e2:	bf00      	nop
	}

}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	080034c5 	.word	0x080034c5
 80035f0:	40011000 	.word	0x40011000
 80035f4:	200004b8 	.word	0x200004b8

080035f8 <Programs_MotorsDebugProgram>:

//
// -- Main Diode Test Program for Robot --
//
Programs_status_t Programs_MotorsDebugProgram(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	if(0 == StartupInitFlag)
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <Programs_MotorsDebugProgram+0x3c>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d107      	bne.n	8003614 <Programs_MotorsDebugProgram+0x1c>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003604:	2201      	movs	r2, #1
 8003606:	2101      	movs	r1, #1
 8003608:	480b      	ldr	r0, [pc, #44]	; (8003638 <Programs_MotorsDebugProgram+0x40>)
 800360a:	f000 fc27 	bl	8003e5c <HAL_GPIO_WritePin>
		StartupInitFlag = 1;
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <Programs_MotorsDebugProgram+0x3c>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
	}

	if(1 == ProgramExitFlag)
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <Programs_MotorsDebugProgram+0x44>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d107      	bne.n	800362c <Programs_MotorsDebugProgram+0x34>
	{
		ProgramExitFlag = 0;
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <Programs_MotorsDebugProgram+0x44>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
		StartupInitFlag = 0;
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <Programs_MotorsDebugProgram+0x3c>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
		return PROGRAM_COMPLETED;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <Programs_MotorsDebugProgram+0x36>
	}




	return PROGRAM_IN_PROGRESS;
 800362c:	2302      	movs	r3, #2
}
 800362e:	4618      	mov	r0, r3
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200004bb 	.word	0x200004bb
 8003638:	40011000 	.word	0x40011000
 800363c:	200004ba 	.word	0x200004ba

08003640 <Programs_MotorsDebugParser>:
//
// -- Diode Test Program Parser --
//

void Programs_MotorsDebugParser(uint8_t *command, uint8_t length)		//FRAME: MOTOR_DEBUG, ACTION, MOTOR, VALUE
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60fb      	str	r3, [r7, #12]
	//uint8_t Buffer[3];

	switch(*CurrentByte)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	3b10      	subs	r3, #16
 8003656:	2b11      	cmp	r3, #17
 8003658:	d852      	bhi.n	8003700 <Programs_MotorsDebugParser+0xc0>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <Programs_MotorsDebugParser+0x20>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	080036a9 	.word	0x080036a9
 8003664:	080036f3 	.word	0x080036f3
 8003668:	08003701 	.word	0x08003701
 800366c:	08003701 	.word	0x08003701
 8003670:	08003701 	.word	0x08003701
 8003674:	08003701 	.word	0x08003701
 8003678:	08003701 	.word	0x08003701
 800367c:	08003701 	.word	0x08003701
 8003680:	08003701 	.word	0x08003701
 8003684:	08003701 	.word	0x08003701
 8003688:	08003701 	.word	0x08003701
 800368c:	08003701 	.word	0x08003701
 8003690:	08003701 	.word	0x08003701
 8003694:	08003701 	.word	0x08003701
 8003698:	08003701 	.word	0x08003701
 800369c:	08003701 	.word	0x08003701
 80036a0:	080036bd 	.word	0x080036bd
 80036a4:	080036d9 	.word	0x080036d9
	{
	case START_PROGRAM:
		if(PROGRAMS_OK == Programs_SetProgram(Programs_MotorsDebugProgram) )
 80036a8:	4819      	ldr	r0, [pc, #100]	; (8003710 <Programs_MotorsDebugParser+0xd0>)
 80036aa:	f000 f835 	bl	8003718 <Programs_SetProgram>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d127      	bne.n	8003704 <Programs_MotorsDebugParser+0xc4>
		{
			Programs_SendProgramStartedACK(MOTORS_DEBUG);
 80036b4:	20d1      	movs	r0, #209	; 0xd1
 80036b6:	f000 f867 	bl	8003788 <Programs_SendProgramStartedACK>
		}
		break;
 80036ba:	e023      	b.n	8003704 <Programs_MotorsDebugParser+0xc4>

	case MOTOR_SET_PWM:

		CurrentByte++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3301      	adds	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
		Motors_SetMotorSpeed(*CurrentByte, *(CurrentByte+1) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3301      	adds	r3, #1
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7fd fea5 	bl	8001420 <Motors_SetMotorSpeed>

//		Buffer[0] = MOTOR_DEBUG;
//		Buffer[1] = DIODE_REAL_STATE;
//		Buffer[2] = 1;
//		Radio_TxBufferPut(Buffer, 3);
		break;
 80036d6:	e016      	b.n	8003706 <Programs_MotorsDebugParser+0xc6>

	case MOTOR_SET_DIRECTION:
		CurrentByte++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
		Motors_SetMotorDirection(*CurrentByte, *(CurrentByte+1) );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f7fd fec0 	bl	8001470 <Motors_SetMotorDirection>
//		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
//		Buffer[0] = DIODE_TEST;
//		Buffer[1] = DIODE_REAL_STATE;
//		Buffer[2] = 0;
//		Radio_TxBufferPut(Buffer, 3);
		break;
 80036f0:	e009      	b.n	8003706 <Programs_MotorsDebugParser+0xc6>

	case EXIT_PROGRAM:
		ProgramExitFlag = 1;
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <Programs_MotorsDebugParser+0xd4>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
		Programs_SendProgramExitACK(MOTORS_DEBUG);
 80036f8:	20d1      	movs	r0, #209	; 0xd1
 80036fa:	f000 f85b 	bl	80037b4 <Programs_SendProgramExitACK>
		break;
 80036fe:	e002      	b.n	8003706 <Programs_MotorsDebugParser+0xc6>

	default:
		break;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <Programs_MotorsDebugParser+0xc6>
		break;
 8003704:	bf00      	nop
	}

}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	080035f9 	.word	0x080035f9
 8003714:	200004ba 	.word	0x200004ba

08003718 <Programs_SetProgram>:
// -- General functions to manage programs --
//

/* Function for setting current pointer to program */
Programs_error_t Programs_SetProgram(uint8_t (*Program)(void))
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToPerform)
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <Programs_SetProgram+0x28>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <Programs_SetProgram+0x1a>
	{
		ProgramToPerform = Program;
 8003728:	4a05      	ldr	r2, [pc, #20]	; (8003740 <Programs_SetProgram+0x28>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6013      	str	r3, [r2, #0]
		return PROGRAMS_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <Programs_SetProgram+0x1c>
	}
	else
	{
		return PROGRAMS_ERROR;
 8003732:	2301      	movs	r3, #1
	}
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	200004bc 	.word	0x200004bc

08003744 <Programs_ClearProgram>:
{
	return ProgramToPerform;
}

void Programs_ClearProgram(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
	ProgramToPerform = NULL;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <Programs_ClearProgram+0x14>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	200004bc 	.word	0x200004bc

0800375c <Programs_PerformProgram>:

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
	Programs_status_t status;
	/* If there is a program to perform... */
	if(NULL != ProgramToPerform)
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <Programs_PerformProgram+0x28>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <Programs_PerformProgram+0x1a>
	{
	/* Perform it and return it's status */
		status = ProgramToPerform();
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <Programs_PerformProgram+0x28>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4798      	blx	r3
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
 8003774:	e001      	b.n	800377a <Programs_PerformProgram+0x1e>
	}
	else
	{
		status = NO_PROGRAM_SET;
 8003776:	2300      	movs	r3, #0
 8003778:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 800377a:	79fb      	ldrb	r3, [r7, #7]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200004bc 	.word	0x200004bc

08003788 <Programs_SendProgramStartedACK>:
//
// -- Sending acknowledgements for controller about starting/exiting programs --
//

Programs_error_t Programs_SendProgramStartedACK(uint8_t ProgramID)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[3];
	Buffer[0] = ProgramID;
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	733b      	strb	r3, [r7, #12]
	Buffer[1] = START_PROGRAM;
 8003796:	2310      	movs	r3, #16
 8003798:	737b      	strb	r3, [r7, #13]
	Buffer[2] = ACK;
 800379a:	23f0      	movs	r3, #240	; 0xf0
 800379c:	73bb      	strb	r3, [r7, #14]
	return Radio_TxBufferPut(Buffer, 3);
 800379e:	f107 030c 	add.w	r3, r7, #12
 80037a2:	2103      	movs	r1, #3
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fb03 	bl	8001db0 <Radio_TxBufferPut>
 80037aa:	4603      	mov	r3, r0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <Programs_SendProgramExitACK>:

Programs_error_t Programs_SendProgramExitACK(uint8_t ProgramID)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[3];
	Buffer[0] = ProgramID;
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	733b      	strb	r3, [r7, #12]
	Buffer[1] = EXIT_PROGRAM;
 80037c2:	2311      	movs	r3, #17
 80037c4:	737b      	strb	r3, [r7, #13]
	Buffer[2] = ACK;
 80037c6:	23f0      	movs	r3, #240	; 0xf0
 80037c8:	73bb      	strb	r3, [r7, #14]
	return Radio_TxBufferPut(Buffer, 3);
 80037ca:	f107 030c 	add.w	r3, r7, #12
 80037ce:	2103      	movs	r1, #3
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe faed 	bl	8001db0 <Radio_TxBufferPut>
 80037d6:	4603      	mov	r3, r0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037e0:	f7ff fb8e 	bl	8002f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037e4:	480b      	ldr	r0, [pc, #44]	; (8003814 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80037e6:	490c      	ldr	r1, [pc, #48]	; (8003818 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80037e8:	4a0c      	ldr	r2, [pc, #48]	; (800381c <LoopFillZerobss+0x16>)
  movs r3, #0
 80037ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037ec:	e002      	b.n	80037f4 <LoopCopyDataInit>

080037ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037f2:	3304      	adds	r3, #4

080037f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037f8:	d3f9      	bcc.n	80037ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037fa:	4a09      	ldr	r2, [pc, #36]	; (8003820 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80037fc:	4c09      	ldr	r4, [pc, #36]	; (8003824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003800:	e001      	b.n	8003806 <LoopFillZerobss>

08003802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003804:	3204      	adds	r2, #4

08003806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003808:	d3fb      	bcc.n	8003802 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800380a:	f003 fed5 	bl	80075b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800380e:	f7fe fc57 	bl	80020c0 <main>
  bx lr
 8003812:	4770      	bx	lr
  ldr r0, =_sdata
 8003814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003818:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800381c:	0800976c 	.word	0x0800976c
  ldr r2, =_sbss
 8003820:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003824:	20000610 	.word	0x20000610

08003828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003828:	e7fe      	b.n	8003828 <ADC1_2_IRQHandler>
	...

0800382c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <HAL_Init+0x28>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a07      	ldr	r2, [pc, #28]	; (8003854 <HAL_Init+0x28>)
 8003836:	f043 0310 	orr.w	r3, r3, #16
 800383a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800383c:	2003      	movs	r0, #3
 800383e:	f000 f947 	bl	8003ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003842:	200f      	movs	r0, #15
 8003844:	f000 f808 	bl	8003858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003848:	f7ff fa2e 	bl	8002ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40022000 	.word	0x40022000

08003858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_InitTick+0x54>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_InitTick+0x58>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f95f 	bl	8003b3a <HAL_SYSTICK_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00e      	b.n	80038a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b0f      	cmp	r3, #15
 800388a:	d80a      	bhi.n	80038a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800388c:	2200      	movs	r2, #0
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	f000 f927 	bl	8003ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003898:	4a06      	ldr	r2, [pc, #24]	; (80038b4 <HAL_InitTick+0x5c>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000000 	.word	0x20000000
 80038b0:	20000008 	.word	0x20000008
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_IncTick+0x1c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_IncTick+0x20>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <HAL_IncTick+0x20>)
 80038ca:	6013      	str	r3, [r2, #0]
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	20000008 	.word	0x20000008
 80038d8:	200004c0 	.word	0x200004c0

080038dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return uwTick;
 80038e0:	4b02      	ldr	r3, [pc, #8]	; (80038ec <HAL_GetTick+0x10>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	200004c0 	.word	0x200004c0

080038f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7ff fff0 	bl	80038dc <HAL_GetTick>
 80038fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d005      	beq.n	8003916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_Delay+0x44>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003916:	bf00      	nop
 8003918:	f7ff ffe0 	bl	80038dc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	429a      	cmp	r2, r3
 8003926:	d8f7      	bhi.n	8003918 <HAL_Delay+0x28>
  {
  }
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000008 	.word	0x20000008

08003938 <__NVIC_SetPriorityGrouping>:
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60d3      	str	r3, [r2, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_GetPriorityGrouping>:
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <__NVIC_GetPriorityGrouping+0x18>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	f003 0307 	and.w	r3, r3, #7
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_EnableIRQ>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db0b      	blt.n	80039c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	4906      	ldr	r1, [pc, #24]	; (80039d0 <__NVIC_EnableIRQ+0x34>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2001      	movs	r0, #1
 80039be:	fa00 f202 	lsl.w	r2, r0, r2
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	e000e100 	.word	0xe000e100

080039d4 <__NVIC_SetPriority>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0a      	blt.n	80039fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	490c      	ldr	r1, [pc, #48]	; (8003a20 <__NVIC_SetPriority+0x4c>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	440b      	add	r3, r1
 80039f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039fc:	e00a      	b.n	8003a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4908      	ldr	r1, [pc, #32]	; (8003a24 <__NVIC_SetPriority+0x50>)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3b04      	subs	r3, #4
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	440b      	add	r3, r1
 8003a12:	761a      	strb	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e100 	.word	0xe000e100
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <NVIC_EncodePriority>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf28      	it	cs
 8003a46:	2304      	movcs	r3, #4
 8003a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d902      	bls.n	8003a58 <NVIC_EncodePriority+0x30>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3b03      	subs	r3, #3
 8003a56:	e000      	b.n	8003a5a <NVIC_EncodePriority+0x32>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43d9      	mvns	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	4313      	orrs	r3, r2
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <SysTick_Config>:
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a9c:	d301      	bcc.n	8003aa2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00f      	b.n	8003ac2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <SysTick_Config+0x40>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aaa:	210f      	movs	r1, #15
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	f7ff ff90 	bl	80039d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <SysTick_Config+0x40>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aba:	4b04      	ldr	r3, [pc, #16]	; (8003acc <SysTick_Config+0x40>)
 8003abc:	2207      	movs	r2, #7
 8003abe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	e000e010 	.word	0xe000e010

08003ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff2d 	bl	8003938 <__NVIC_SetPriorityGrouping>
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003af8:	f7ff ff42 	bl	8003980 <__NVIC_GetPriorityGrouping>
 8003afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	6978      	ldr	r0, [r7, #20]
 8003b04:	f7ff ff90 	bl	8003a28 <NVIC_EncodePriority>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff5f 	bl	80039d4 <__NVIC_SetPriority>
}
 8003b16:	bf00      	nop
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4603      	mov	r3, r0
 8003b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ff35 	bl	800399c <__NVIC_EnableIRQ>
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ffa2 	bl	8003a8c <SysTick_Config>
 8003b48:	4603      	mov	r3, r0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b08b      	sub	sp, #44	; 0x2c
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b66:	e169      	b.n	8003e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 8158 	bne.w	8003e36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a9a      	ldr	r2, [pc, #616]	; (8003df4 <HAL_GPIO_Init+0x2a0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d05e      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003b90:	4a98      	ldr	r2, [pc, #608]	; (8003df4 <HAL_GPIO_Init+0x2a0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d875      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003b96:	4a98      	ldr	r2, [pc, #608]	; (8003df8 <HAL_GPIO_Init+0x2a4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d058      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003b9c:	4a96      	ldr	r2, [pc, #600]	; (8003df8 <HAL_GPIO_Init+0x2a4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d86f      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003ba2:	4a96      	ldr	r2, [pc, #600]	; (8003dfc <HAL_GPIO_Init+0x2a8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d052      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003ba8:	4a94      	ldr	r2, [pc, #592]	; (8003dfc <HAL_GPIO_Init+0x2a8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d869      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003bae:	4a94      	ldr	r2, [pc, #592]	; (8003e00 <HAL_GPIO_Init+0x2ac>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d04c      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003bb4:	4a92      	ldr	r2, [pc, #584]	; (8003e00 <HAL_GPIO_Init+0x2ac>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d863      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003bba:	4a92      	ldr	r2, [pc, #584]	; (8003e04 <HAL_GPIO_Init+0x2b0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d046      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003bc0:	4a90      	ldr	r2, [pc, #576]	; (8003e04 <HAL_GPIO_Init+0x2b0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d85d      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003bc6:	2b12      	cmp	r3, #18
 8003bc8:	d82a      	bhi.n	8003c20 <HAL_GPIO_Init+0xcc>
 8003bca:	2b12      	cmp	r3, #18
 8003bcc:	d859      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <HAL_GPIO_Init+0x80>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003c4f 	.word	0x08003c4f
 8003bd8:	08003c29 	.word	0x08003c29
 8003bdc:	08003c3b 	.word	0x08003c3b
 8003be0:	08003c7d 	.word	0x08003c7d
 8003be4:	08003c83 	.word	0x08003c83
 8003be8:	08003c83 	.word	0x08003c83
 8003bec:	08003c83 	.word	0x08003c83
 8003bf0:	08003c83 	.word	0x08003c83
 8003bf4:	08003c83 	.word	0x08003c83
 8003bf8:	08003c83 	.word	0x08003c83
 8003bfc:	08003c83 	.word	0x08003c83
 8003c00:	08003c83 	.word	0x08003c83
 8003c04:	08003c83 	.word	0x08003c83
 8003c08:	08003c83 	.word	0x08003c83
 8003c0c:	08003c83 	.word	0x08003c83
 8003c10:	08003c83 	.word	0x08003c83
 8003c14:	08003c83 	.word	0x08003c83
 8003c18:	08003c31 	.word	0x08003c31
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	4a79      	ldr	r2, [pc, #484]	; (8003e08 <HAL_GPIO_Init+0x2b4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c26:	e02c      	b.n	8003c82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	623b      	str	r3, [r7, #32]
          break;
 8003c2e:	e029      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	3304      	adds	r3, #4
 8003c36:	623b      	str	r3, [r7, #32]
          break;
 8003c38:	e024      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	623b      	str	r3, [r7, #32]
          break;
 8003c42:	e01f      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	623b      	str	r3, [r7, #32]
          break;
 8003c4c:	e01a      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c56:	2304      	movs	r3, #4
 8003c58:	623b      	str	r3, [r7, #32]
          break;
 8003c5a:	e013      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c64:	2308      	movs	r3, #8
 8003c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	611a      	str	r2, [r3, #16]
          break;
 8003c6e:	e009      	b.n	8003c84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c70:	2308      	movs	r3, #8
 8003c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	615a      	str	r2, [r3, #20]
          break;
 8003c7a:	e003      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	623b      	str	r3, [r7, #32]
          break;
 8003c80:	e000      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          break;
 8003c82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2bff      	cmp	r3, #255	; 0xff
 8003c88:	d801      	bhi.n	8003c8e <HAL_GPIO_Init+0x13a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	e001      	b.n	8003c92 <HAL_GPIO_Init+0x13e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2bff      	cmp	r3, #255	; 0xff
 8003c98:	d802      	bhi.n	8003ca0 <HAL_GPIO_Init+0x14c>
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	e002      	b.n	8003ca6 <HAL_GPIO_Init+0x152>
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	3b08      	subs	r3, #8
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	210f      	movs	r1, #15
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	6a39      	ldr	r1, [r7, #32]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80b1 	beq.w	8003e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cd4:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <HAL_GPIO_Init+0x2b8>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <HAL_GPIO_Init+0x2b8>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6193      	str	r3, [r2, #24]
 8003ce0:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <HAL_GPIO_Init+0x2b8>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cec:	4a48      	ldr	r2, [pc, #288]	; (8003e10 <HAL_GPIO_Init+0x2bc>)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	220f      	movs	r2, #15
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a40      	ldr	r2, [pc, #256]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d013      	beq.n	8003d40 <HAL_GPIO_Init+0x1ec>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <HAL_GPIO_Init+0x2c4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00d      	beq.n	8003d3c <HAL_GPIO_Init+0x1e8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3e      	ldr	r2, [pc, #248]	; (8003e1c <HAL_GPIO_Init+0x2c8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <HAL_GPIO_Init+0x1e4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3d      	ldr	r2, [pc, #244]	; (8003e20 <HAL_GPIO_Init+0x2cc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_GPIO_Init+0x1e0>
 8003d30:	2303      	movs	r3, #3
 8003d32:	e006      	b.n	8003d42 <HAL_GPIO_Init+0x1ee>
 8003d34:	2304      	movs	r3, #4
 8003d36:	e004      	b.n	8003d42 <HAL_GPIO_Init+0x1ee>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e002      	b.n	8003d42 <HAL_GPIO_Init+0x1ee>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_GPIO_Init+0x1ee>
 8003d40:	2300      	movs	r3, #0
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	f002 0203 	and.w	r2, r2, #3
 8003d48:	0092      	lsls	r2, r2, #2
 8003d4a:	4093      	lsls	r3, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d52:	492f      	ldr	r1, [pc, #188]	; (8003e10 <HAL_GPIO_Init+0x2bc>)
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	3302      	adds	r3, #2
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	492c      	ldr	r1, [pc, #176]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]
 8003d78:	e006      	b.n	8003d88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d7a:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	4928      	ldr	r1, [pc, #160]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d006      	beq.n	8003da2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	4922      	ldr	r1, [pc, #136]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60cb      	str	r3, [r1, #12]
 8003da0:	e006      	b.n	8003db0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	491e      	ldr	r1, [pc, #120]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d006      	beq.n	8003dca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4918      	ldr	r1, [pc, #96]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
 8003dc8:	e006      	b.n	8003dd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dca:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	4914      	ldr	r1, [pc, #80]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d021      	beq.n	8003e28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	490e      	ldr	r1, [pc, #56]	; (8003e24 <HAL_GPIO_Init+0x2d0>)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	e021      	b.n	8003e36 <HAL_GPIO_Init+0x2e2>
 8003df2:	bf00      	nop
 8003df4:	10320000 	.word	0x10320000
 8003df8:	10310000 	.word	0x10310000
 8003dfc:	10220000 	.word	0x10220000
 8003e00:	10210000 	.word	0x10210000
 8003e04:	10120000 	.word	0x10120000
 8003e08:	10110000 	.word	0x10110000
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40010800 	.word	0x40010800
 8003e18:	40010c00 	.word	0x40010c00
 8003e1c:	40011000 	.word	0x40011000
 8003e20:	40011400 	.word	0x40011400
 8003e24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_GPIO_Init+0x304>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	4909      	ldr	r1, [pc, #36]	; (8003e58 <HAL_GPIO_Init+0x304>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	3301      	adds	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f47f ae8e 	bne.w	8003b68 <HAL_GPIO_Init+0x14>
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	372c      	adds	r7, #44	; 0x2c
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	40010400 	.word	0x40010400

08003e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e6c:	787b      	ldrb	r3, [r7, #1]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e78:	e003      	b.n	8003e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e7a:	887b      	ldrh	r3, [r7, #2]
 8003e7c:	041a      	lsls	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	611a      	str	r2, [r3, #16]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	43d9      	mvns	r1, r3
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	400b      	ands	r3, r1
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	611a      	str	r2, [r3, #16]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ed6:	4a05      	ldr	r2, [pc, #20]	; (8003eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe f990 	bl	8002204 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40010400 	.word	0x40010400

08003ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e12b      	b.n	800415a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd fe4a 	bl	8001bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	; 0x24
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f54:	f000 fe10 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8003f58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4a81      	ldr	r2, [pc, #516]	; (8004164 <HAL_I2C_Init+0x274>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d807      	bhi.n	8003f74 <HAL_I2C_Init+0x84>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a80      	ldr	r2, [pc, #512]	; (8004168 <HAL_I2C_Init+0x278>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	bf94      	ite	ls
 8003f6c:	2301      	movls	r3, #1
 8003f6e:	2300      	movhi	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e006      	b.n	8003f82 <HAL_I2C_Init+0x92>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a7d      	ldr	r2, [pc, #500]	; (800416c <HAL_I2C_Init+0x27c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	bf94      	ite	ls
 8003f7c:	2301      	movls	r3, #1
 8003f7e:	2300      	movhi	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e0e7      	b.n	800415a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4a78      	ldr	r2, [pc, #480]	; (8004170 <HAL_I2C_Init+0x280>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0c9b      	lsrs	r3, r3, #18
 8003f94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a6a      	ldr	r2, [pc, #424]	; (8004164 <HAL_I2C_Init+0x274>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d802      	bhi.n	8003fc4 <HAL_I2C_Init+0xd4>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	e009      	b.n	8003fd8 <HAL_I2C_Init+0xe8>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	4a69      	ldr	r2, [pc, #420]	; (8004174 <HAL_I2C_Init+0x284>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	099b      	lsrs	r3, r3, #6
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	495c      	ldr	r1, [pc, #368]	; (8004164 <HAL_I2C_Init+0x274>)
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	d819      	bhi.n	800402c <HAL_I2C_Init+0x13c>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1e59      	subs	r1, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fbb1 f3f3 	udiv	r3, r1, r3
 8004006:	1c59      	adds	r1, r3, #1
 8004008:	f640 73fc 	movw	r3, #4092	; 0xffc
 800400c:	400b      	ands	r3, r1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_I2C_Init+0x138>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1e59      	subs	r1, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004020:	3301      	adds	r3, #1
 8004022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004026:	e051      	b.n	80040cc <HAL_I2C_Init+0x1dc>
 8004028:	2304      	movs	r3, #4
 800402a:	e04f      	b.n	80040cc <HAL_I2C_Init+0x1dc>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d111      	bne.n	8004058 <HAL_I2C_Init+0x168>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e58      	subs	r0, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	440b      	add	r3, r1
 8004042:	fbb0 f3f3 	udiv	r3, r0, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e012      	b.n	800407e <HAL_I2C_Init+0x18e>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1e58      	subs	r0, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	0099      	lsls	r1, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	fbb0 f3f3 	udiv	r3, r0, r3
 800406e:	3301      	adds	r3, #1
 8004070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Init+0x196>
 8004082:	2301      	movs	r3, #1
 8004084:	e022      	b.n	80040cc <HAL_I2C_Init+0x1dc>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10e      	bne.n	80040ac <HAL_I2C_Init+0x1bc>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1e58      	subs	r0, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	440b      	add	r3, r1
 800409c:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040aa:	e00f      	b.n	80040cc <HAL_I2C_Init+0x1dc>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e58      	subs	r0, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	0099      	lsls	r1, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	6809      	ldr	r1, [r1, #0]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6911      	ldr	r1, [r2, #16]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68d2      	ldr	r2, [r2, #12]
 8004106:	4311      	orrs	r1, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	430b      	orrs	r3, r1
 800410e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	000186a0 	.word	0x000186a0
 8004168:	001e847f 	.word	0x001e847f
 800416c:	003d08ff 	.word	0x003d08ff
 8004170:	431bde83 	.word	0x431bde83
 8004174:	10624dd3 	.word	0x10624dd3

08004178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e304      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8087 	beq.w	80042a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004198:	4b92      	ldr	r3, [pc, #584]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d00c      	beq.n	80041be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041a4:	4b8f      	ldr	r3, [pc, #572]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d112      	bne.n	80041d6 <HAL_RCC_OscConfig+0x5e>
 80041b0:	4b8c      	ldr	r3, [pc, #560]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041bc:	d10b      	bne.n	80041d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041be:	4b89      	ldr	r3, [pc, #548]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d06c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x12c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d168      	bne.n	80042a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e2de      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x76>
 80041e0:	4b80      	ldr	r3, [pc, #512]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7f      	ldr	r2, [pc, #508]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e02e      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x98>
 80041f6:	4b7b      	ldr	r3, [pc, #492]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7a      	ldr	r2, [pc, #488]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b78      	ldr	r3, [pc, #480]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a77      	ldr	r2, [pc, #476]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e01d      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0xbc>
 800421a:	4b72      	ldr	r3, [pc, #456]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a71      	ldr	r2, [pc, #452]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6e      	ldr	r2, [pc, #440]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 8004234:	4b6b      	ldr	r3, [pc, #428]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6a      	ldr	r2, [pc, #424]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b68      	ldr	r3, [pc, #416]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a67      	ldr	r2, [pc, #412]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7ff fb42 	bl	80038dc <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7ff fb3e 	bl	80038dc <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e292      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b5d      	ldr	r3, [pc, #372]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xe4>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7ff fb2e 	bl	80038dc <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7ff fb2a 	bl	80038dc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e27e      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x10c>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d063      	beq.n	800437a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042b2:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042be:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d11c      	bne.n	8004304 <HAL_RCC_OscConfig+0x18c>
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d116      	bne.n	8004304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_RCC_OscConfig+0x176>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e252      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4939      	ldr	r1, [pc, #228]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e03a      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <HAL_RCC_OscConfig+0x270>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7ff fae3 	bl	80038dc <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431a:	f7ff fadf 	bl	80038dc <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e233      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4927      	ldr	r1, [pc, #156]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <HAL_RCC_OscConfig+0x270>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7ff fac2 	bl	80038dc <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435c:	f7ff fabe 	bl	80038dc <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e212      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d03a      	beq.n	80043fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b17      	ldr	r3, [pc, #92]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004394:	f7ff faa2 	bl	80038dc <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439c:	f7ff fa9e 	bl	80038dc <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1f2      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043ba:	2001      	movs	r0, #1
 80043bc:	f000 fc04 	bl	8004bc8 <RCC_Delay>
 80043c0:	e01c      	b.n	80043fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c8:	f7ff fa88 	bl	80038dc <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ce:	e00f      	b.n	80043f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d0:	f7ff fa84 	bl	80038dc <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d908      	bls.n	80043f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e1d8      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	42420000 	.word	0x42420000
 80043ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	4b9b      	ldr	r3, [pc, #620]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e9      	bne.n	80043d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a6 	beq.w	8004556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440e:	4b94      	ldr	r3, [pc, #592]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	4b91      	ldr	r3, [pc, #580]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4a90      	ldr	r2, [pc, #576]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	61d3      	str	r3, [r2, #28]
 8004426:	4b8e      	ldr	r3, [pc, #568]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b8b      	ldr	r3, [pc, #556]	; (8004664 <HAL_RCC_OscConfig+0x4ec>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b88      	ldr	r3, [pc, #544]	; (8004664 <HAL_RCC_OscConfig+0x4ec>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a87      	ldr	r2, [pc, #540]	; (8004664 <HAL_RCC_OscConfig+0x4ec>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7ff fa45 	bl	80038dc <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7ff fa41 	bl	80038dc <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	; 0x64
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e195      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b7e      	ldr	r3, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x4ec>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x312>
 800447c:	4b78      	ldr	r3, [pc, #480]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a77      	ldr	r2, [pc, #476]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6213      	str	r3, [r2, #32]
 8004488:	e02d      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x334>
 8004492:	4b73      	ldr	r3, [pc, #460]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4a72      	ldr	r2, [pc, #456]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	6213      	str	r3, [r2, #32]
 800449e:	4b70      	ldr	r3, [pc, #448]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a6f      	ldr	r2, [pc, #444]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	6213      	str	r3, [r2, #32]
 80044aa:	e01c      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d10c      	bne.n	80044ce <HAL_RCC_OscConfig+0x356>
 80044b4:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4a69      	ldr	r2, [pc, #420]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	6213      	str	r3, [r2, #32]
 80044c0:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a66      	ldr	r2, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	e00b      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 80044ce:	4b64      	ldr	r3, [pc, #400]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4a63      	ldr	r2, [pc, #396]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	6213      	str	r3, [r2, #32]
 80044da:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4a60      	ldr	r2, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d015      	beq.n	800451a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7ff f9f5 	bl	80038dc <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7ff f9f1 	bl	80038dc <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e143      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	4b54      	ldr	r3, [pc, #336]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ee      	beq.n	80044f6 <HAL_RCC_OscConfig+0x37e>
 8004518:	e014      	b.n	8004544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451a:	f7ff f9df 	bl	80038dc <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7ff f9db 	bl	80038dc <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e12d      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ee      	bne.n	8004522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d105      	bne.n	8004556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454a:	4b45      	ldr	r3, [pc, #276]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4a44      	ldr	r2, [pc, #272]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004554:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 808c 	beq.w	8004678 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004560:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456c:	d10e      	bne.n	800458c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800456e:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004576:	2b08      	cmp	r3, #8
 8004578:	d108      	bne.n	800458c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800457a:	4b39      	ldr	r3, [pc, #228]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004586:	d101      	bne.n	800458c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e103      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	2b02      	cmp	r3, #2
 8004592:	d14e      	bne.n	8004632 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004594:	4b32      	ldr	r3, [pc, #200]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80045a0:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0ef      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80045b4:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <HAL_RCC_OscConfig+0x4f0>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7ff f98f 	bl	80038dc <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045c2:	f7ff f98b 	bl	80038dc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	; 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0df      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80045d4:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	491c      	ldr	r1, [pc, #112]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4918      	ldr	r1, [pc, #96]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004600:	4313      	orrs	r3, r2
 8004602:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <HAL_RCC_OscConfig+0x4f0>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7ff f967 	bl	80038dc <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004612:	f7ff f963 	bl	80038dc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b64      	cmp	r3, #100	; 0x64
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0b7      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x49a>
 8004630:	e022      	b.n	8004678 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <HAL_RCC_OscConfig+0x4e8>)
 8004638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <HAL_RCC_OscConfig+0x4f0>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7ff f94a 	bl	80038dc <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800464a:	e00f      	b.n	800466c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800464c:	f7ff f946 	bl	80038dc <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d908      	bls.n	800466c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e09a      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
 8004668:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800466c:	4b4b      	ldr	r3, [pc, #300]	; (800479c <HAL_RCC_OscConfig+0x624>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e9      	bne.n	800464c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8088 	beq.w	8004792 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004682:	4b46      	ldr	r3, [pc, #280]	; (800479c <HAL_RCC_OscConfig+0x624>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b08      	cmp	r3, #8
 800468c:	d068      	beq.n	8004760 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d14d      	bne.n	8004732 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004696:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7ff f91e 	bl	80038dc <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a4:	f7ff f91a 	bl	80038dc <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e06e      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b6:	4b39      	ldr	r3, [pc, #228]	; (800479c <HAL_RCC_OscConfig+0x624>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ca:	d10f      	bne.n	80046ec <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80046cc:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x624>)
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4931      	ldr	r1, [pc, #196]	; (800479c <HAL_RCC_OscConfig+0x624>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046da:	4b30      	ldr	r3, [pc, #192]	; (800479c <HAL_RCC_OscConfig+0x624>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	f023 020f 	bic.w	r2, r3, #15
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	492d      	ldr	r1, [pc, #180]	; (800479c <HAL_RCC_OscConfig+0x624>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ec:	4b2b      	ldr	r3, [pc, #172]	; (800479c <HAL_RCC_OscConfig+0x624>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	430b      	orrs	r3, r1
 80046fe:	4927      	ldr	r1, [pc, #156]	; (800479c <HAL_RCC_OscConfig+0x624>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004704:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470a:	f7ff f8e7 	bl	80038dc <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004712:	f7ff f8e3 	bl	80038dc <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e037      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCC_OscConfig+0x624>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x59a>
 8004730:	e02f      	b.n	8004792 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x628>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7ff f8d0 	bl	80038dc <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7ff f8cc 	bl	80038dc <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e020      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_RCC_OscConfig+0x624>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x5c8>
 800475e:	e018      	b.n	8004792 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e013      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_OscConfig+0x624>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	429a      	cmp	r2, r3
 800477e:	d106      	bne.n	800478e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	42420060 	.word	0x42420060

080047a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0d0      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d910      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b67      	ldr	r3, [pc, #412]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4965      	ldr	r1, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800480a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004822:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d040      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d115      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e073      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06b      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b39      	ldr	r3, [pc, #228]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4936      	ldr	r1, [pc, #216]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7ff f822 	bl	80038dc <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7ff f81e 	bl	80038dc <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e053      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d210      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 0207 	bic.w	r2, r3, #7
 80048da:	4922      	ldr	r1, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1cc>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1d0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe ff80 	bl	8003858 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40022000 	.word	0x40022000
 8004968:	40021000 	.word	0x40021000
 800496c:	080093b4 	.word	0x080093b4
 8004970:	20000000 	.word	0x20000000
 8004974:	20000004 	.word	0x20000004

08004978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b092      	sub	sp, #72	; 0x48
 800497e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004984:	2300      	movs	r3, #0
 8004986:	63bb      	str	r3, [r7, #56]	; 0x38
 8004988:	2300      	movs	r3, #0
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	2300      	movs	r3, #0
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
 8004998:	2300      	movs	r3, #0
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800499c:	4b6b      	ldr	r3, [pc, #428]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d002      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d003      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 80049b0:	e0c3      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b67      	ldr	r3, [pc, #412]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80049b4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80049b6:	e0c3      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ba:	0c9b      	lsrs	r3, r3, #18
 80049bc:	f003 020f 	and.w	r2, r3, #15
 80049c0:	4b64      	ldr	r3, [pc, #400]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80049c2:	5c9b      	ldrb	r3, [r3, r2]
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80ac 	beq.w	8004b2a <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80049d2:	4b5e      	ldr	r3, [pc, #376]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	f003 020f 	and.w	r2, r3, #15
 80049da:	4b5f      	ldr	r3, [pc, #380]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x1e0>)
 80049dc:	5c9b      	ldrb	r3, [r3, r2]
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80049e0:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 808c 	beq.w	8004b06 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80049ee:	4b57      	ldr	r3, [pc, #348]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	3301      	adds	r3, #1
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80049fc:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	3302      	adds	r3, #2
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	623b      	str	r3, [r7, #32]
 8004a10:	627a      	str	r2, [r7, #36]	; 0x24
 8004a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a14:	2200      	movs	r2, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	4611      	mov	r1, r2
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	fb00 f203 	mul.w	r2, r0, r3
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	fb03 f301 	mul.w	r3, r3, r1
 8004a26:	4413      	add	r3, r2
 8004a28:	6a3a      	ldr	r2, [r7, #32]
 8004a2a:	fba2 4500 	umull	r4, r5, r2, r0
 8004a2e:	442b      	add	r3, r5
 8004a30:	461d      	mov	r5, r3
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	f04f 0000 	mov.w	r0, #0
 8004a3a:	f04f 0100 	mov.w	r1, #0
 8004a3e:	0159      	lsls	r1, r3, #5
 8004a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a44:	0150      	lsls	r0, r2, #5
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	ebb2 0a04 	subs.w	sl, r2, r4
 8004a4e:	eb63 0b05 	sbc.w	fp, r3, r5
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a5e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a62:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a66:	ebb2 080a 	subs.w	r8, r2, sl
 8004a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a82:	4690      	mov	r8, r2
 8004a84:	4699      	mov	r9, r3
 8004a86:	eb18 0304 	adds.w	r3, r8, r4
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	eb49 0305 	adc.w	r3, r9, r5
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	028b      	lsls	r3, r1, #10
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004aac:	4601      	mov	r1, r0
 8004aae:	028a      	lsls	r2, r1, #10
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	617a      	str	r2, [r7, #20]
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2200      	movs	r2, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	60fa      	str	r2, [r7, #12]
 8004ac4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004ac8:	4622      	mov	r2, r4
 8004aca:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004ace:	4645      	mov	r5, r8
 8004ad0:	fb05 f202 	mul.w	r2, r5, r2
 8004ad4:	46cc      	mov	ip, r9
 8004ad6:	4625      	mov	r5, r4
 8004ad8:	461c      	mov	r4, r3
 8004ada:	4623      	mov	r3, r4
 8004adc:	fb03 f30c 	mul.w	r3, r3, ip
 8004ae0:	4413      	add	r3, r2
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4644      	mov	r4, r8
 8004ae6:	fba2 2404 	umull	r2, r4, r2, r4
 8004aea:	61fc      	str	r4, [r7, #28]
 8004aec:	61ba      	str	r2, [r7, #24]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af8:	f7fc f9f4 	bl	8000ee4 <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4613      	mov	r3, r2
 8004b02:	647b      	str	r3, [r7, #68]	; 0x44
 8004b04:	e007      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b08:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004b0a:	fb03 f202 	mul.w	r2, r3, r2
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004b16:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004b18:	7b5b      	ldrb	r3, [r3, #13]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d108      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8004b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	647b      	str	r3, [r7, #68]	; 0x44
 8004b28:	e004      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	4a0b      	ldr	r2, [pc, #44]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b36:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004b38:	e002      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8004b3c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3748      	adds	r7, #72	; 0x48
 8004b46:	46bd      	mov	sp, r7
 8004b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	080093cc 	.word	0x080093cc
 8004b58:	080093dc 	.word	0x080093dc
 8004b5c:	003d0900 	.word	0x003d0900
 8004b60:	007a1200 	.word	0x007a1200

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr
 8004b74:	20000000 	.word	0x20000000

08004b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b7c:	f7ff fff2 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4903      	ldr	r1, [pc, #12]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b8e:	5ccb      	ldrb	r3, [r1, r3]
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	080093c4 	.word	0x080093c4

08004ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ba4:	f7ff ffde 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	0adb      	lsrs	r3, r3, #11
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4903      	ldr	r1, [pc, #12]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	080093c4 	.word	0x080093c4

08004bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <RCC_Delay+0x34>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <RCC_Delay+0x38>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	0a5b      	lsrs	r3, r3, #9
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004be4:	bf00      	nop
  }
  while (Delay --);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1e5a      	subs	r2, r3, #1
 8004bea:	60fa      	str	r2, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f9      	bne.n	8004be4 <RCC_Delay+0x1c>
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	10624dd3 	.word	0x10624dd3

08004c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e076      	b.n	8004d04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c26:	d009      	beq.n	8004c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	61da      	str	r2, [r3, #28]
 8004c2e:	e005      	b.n	8004c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd ffca 	bl	8002bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	ea42 0103 	orr.w	r1, r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	0c1a      	lsrs	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f002 0204 	and.w	r2, r2, #4
 8004ce2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_SPI_Transmit+0x22>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e12d      	b.n	8004f8a <HAL_SPI_Transmit+0x27e>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d36:	f7fe fdd1 	bl	80038dc <HAL_GetTick>
 8004d3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d50:	e116      	b.n	8004f80 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_SPI_Transmit+0x52>
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d62:	e10d      	b.n	8004f80 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2203      	movs	r2, #3
 8004d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	88fa      	ldrh	r2, [r7, #6]
 8004d82:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004daa:	d10f      	bne.n	8004dcc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d007      	beq.n	8004dea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df2:	d14f      	bne.n	8004e94 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <HAL_SPI_Transmit+0xf6>
 8004dfc:	8afb      	ldrh	r3, [r7, #22]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d142      	bne.n	8004e88 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	1c9a      	adds	r2, r3, #2
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e26:	e02f      	b.n	8004e88 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d112      	bne.n	8004e5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	881a      	ldrh	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	1c9a      	adds	r2, r3, #2
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e5a:	e015      	b.n	8004e88 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e5c:	f7fe fd3e 	bl	80038dc <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d803      	bhi.n	8004e74 <HAL_SPI_Transmit+0x168>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d102      	bne.n	8004e7a <HAL_SPI_Transmit+0x16e>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004e86:	e07b      	b.n	8004f80 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ca      	bne.n	8004e28 <HAL_SPI_Transmit+0x11c>
 8004e92:	e050      	b.n	8004f36 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Transmit+0x196>
 8004e9c:	8afb      	ldrh	r3, [r7, #22]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d144      	bne.n	8004f2c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ec8:	e030      	b.n	8004f2c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d113      	bne.n	8004f00 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	7812      	ldrb	r2, [r2, #0]
 8004ee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004efe:	e015      	b.n	8004f2c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f00:	f7fe fcec 	bl	80038dc <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d803      	bhi.n	8004f18 <HAL_SPI_Transmit+0x20c>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d102      	bne.n	8004f1e <HAL_SPI_Transmit+0x212>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f2a:	e029      	b.n	8004f80 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1c9      	bne.n	8004eca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fbcc 	bl	80056d8 <SPI_EndRxTxTransaction>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e003      	b.n	8004f80 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af02      	add	r7, sp, #8
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d002      	beq.n	8004fb8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fb6:	e0fb      	b.n	80051b0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc0:	d112      	bne.n	8004fe8 <HAL_SPI_Receive+0x56>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2204      	movs	r2, #4
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f8ef 	bl	80051c2 <HAL_SPI_TransmitReceive>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	e0e8      	b.n	80051ba <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_SPI_Receive+0x64>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e0e1      	b.n	80051ba <HAL_SPI_Receive+0x228>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ffe:	f7fe fc6d 	bl	80038dc <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_Receive+0x7e>
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005014:	e0cc      	b.n	80051b0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2204      	movs	r2, #4
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505c:	d10f      	bne.n	800507e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800507c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d007      	beq.n	800509c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d16a      	bne.n	800517a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050a4:	e032      	b.n	800510c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d115      	bne.n	80050e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f103 020c 	add.w	r2, r3, #12
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050de:	e015      	b.n	800510c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e0:	f7fe fbfc 	bl	80038dc <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d803      	bhi.n	80050f8 <HAL_SPI_Receive+0x166>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d102      	bne.n	80050fe <HAL_SPI_Receive+0x16c>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800510a:	e051      	b.n	80051b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1c7      	bne.n	80050a6 <HAL_SPI_Receive+0x114>
 8005116:	e035      	b.n	8005184 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d113      	bne.n	800514e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	b292      	uxth	r2, r2
 8005132:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	1c9a      	adds	r2, r3, #2
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800514c:	e015      	b.n	800517a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800514e:	f7fe fbc5 	bl	80038dc <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d803      	bhi.n	8005166 <HAL_SPI_Receive+0x1d4>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d102      	bne.n	800516c <HAL_SPI_Receive+0x1da>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005178:	e01a      	b.n	80051b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1c9      	bne.n	8005118 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fa53 	bl	8005634 <SPI_EndRxTransaction>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
 80051a6:	e003      	b.n	80051b0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b08c      	sub	sp, #48	; 0x30
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051d0:	2301      	movs	r3, #1
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x26>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e198      	b.n	800551a <HAL_SPI_TransmitReceive+0x358>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051f0:	f7fe fb74 	bl	80038dc <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005206:	887b      	ldrh	r3, [r7, #2]
 8005208:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800520a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800520e:	2b01      	cmp	r3, #1
 8005210:	d00f      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x70>
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005218:	d107      	bne.n	800522a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d103      	bne.n	800522a <HAL_SPI_TransmitReceive+0x68>
 8005222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005226:	2b04      	cmp	r3, #4
 8005228:	d003      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800522a:	2302      	movs	r3, #2
 800522c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005230:	e16d      	b.n	800550e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x82>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x82>
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800524a:	e160      	b.n	800550e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b04      	cmp	r3, #4
 8005256:	d003      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2205      	movs	r2, #5
 800525c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	887a      	ldrh	r2, [r7, #2]
 8005270:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	887a      	ldrh	r2, [r7, #2]
 8005276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	887a      	ldrh	r2, [r7, #2]
 8005282:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d007      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052bc:	d17c      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x10a>
 80052c6:	8b7b      	ldrh	r3, [r7, #26]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d16a      	bne.n	80053a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	881a      	ldrh	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	1c9a      	adds	r2, r3, #2
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052f0:	e057      	b.n	80053a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d11b      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x176>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d016      	beq.n	8005338 <HAL_SPI_TransmitReceive+0x176>
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d113      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	1c9a      	adds	r2, r3, #2
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d119      	bne.n	800537a <HAL_SPI_TransmitReceive+0x1b8>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d014      	beq.n	800537a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	b292      	uxth	r2, r2
 800535c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	1c9a      	adds	r2, r3, #2
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005376:	2301      	movs	r3, #1
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800537a:	f7fe faaf 	bl	80038dc <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005386:	429a      	cmp	r2, r3
 8005388:	d80b      	bhi.n	80053a2 <HAL_SPI_TransmitReceive+0x1e0>
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d007      	beq.n	80053a2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80053a0:	e0b5      	b.n	800550e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1a2      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x130>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d19d      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x130>
 80053b6:	e080      	b.n	80054ba <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_SPI_TransmitReceive+0x204>
 80053c0:	8b7b      	ldrh	r3, [r7, #26]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d16f      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	7812      	ldrb	r2, [r2, #0]
 80053d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ec:	e05b      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d11c      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x274>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d017      	beq.n	8005436 <HAL_SPI_TransmitReceive+0x274>
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d114      	bne.n	8005436 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d119      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x2b6>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d014      	beq.n	8005478 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005474:	2301      	movs	r3, #1
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005478:	f7fe fa30 	bl	80038dc <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005484:	429a      	cmp	r2, r3
 8005486:	d803      	bhi.n	8005490 <HAL_SPI_TransmitReceive+0x2ce>
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d102      	bne.n	8005496 <HAL_SPI_TransmitReceive+0x2d4>
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	2b00      	cmp	r3, #0
 8005494:	d107      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80054a4:	e033      	b.n	800550e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d19e      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x22c>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d199      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f90a 	bl	80056d8 <SPI_EndRxTxTransaction>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054d6:	e01a      	b.n	800550e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005504:	e003      	b.n	800550e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800551a:	4618      	mov	r0, r3
 800551c:	3730      	adds	r7, #48	; 0x30
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005534:	f7fe f9d2 	bl	80038dc <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	4413      	add	r3, r2
 8005542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005544:	f7fe f9ca 	bl	80038dc <HAL_GetTick>
 8005548:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800554a:	4b39      	ldr	r3, [pc, #228]	; (8005630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	015b      	lsls	r3, r3, #5
 8005550:	0d1b      	lsrs	r3, r3, #20
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	fb02 f303 	mul.w	r3, r2, r3
 8005558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800555a:	e054      	b.n	8005606 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d050      	beq.n	8005606 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005564:	f7fe f9ba 	bl	80038dc <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	429a      	cmp	r2, r3
 8005572:	d902      	bls.n	800557a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d13d      	bne.n	80055f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005592:	d111      	bne.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559c:	d004      	beq.n	80055a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a6:	d107      	bne.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c0:	d10f      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e017      	b.n	8005626 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3b01      	subs	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4013      	ands	r3, r2
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	429a      	cmp	r2, r3
 8005614:	bf0c      	ite	eq
 8005616:	2301      	moveq	r3, #1
 8005618:	2300      	movne	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	429a      	cmp	r2, r3
 8005622:	d19b      	bne.n	800555c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000000 	.word	0x20000000

08005634 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005648:	d111      	bne.n	800566e <SPI_EndRxTransaction+0x3a>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005652:	d004      	beq.n	800565e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565c:	d107      	bne.n	800566e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005676:	d117      	bne.n	80056a8 <SPI_EndRxTransaction+0x74>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005680:	d112      	bne.n	80056a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2200      	movs	r2, #0
 800568a:	2101      	movs	r1, #1
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff ff49 	bl	8005524 <SPI_WaitFlagStateUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01a      	beq.n	80056ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e013      	b.n	80056d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff ff36 	bl	8005524 <SPI_WaitFlagStateUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e000      	b.n	80056d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2200      	movs	r2, #0
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff ff18 	bl	8005524 <SPI_WaitFlagStateUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e000      	b.n	800570c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e041      	b.n	80057aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fd fdcc 	bl	80032d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 fd70 	bl	8006238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d001      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e03f      	b.n	800584c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <HAL_TIM_Base_Start_IT+0xa4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x62>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d00e      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x62>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a17      	ldr	r2, [pc, #92]	; (800585c <HAL_TIM_Base_Start_IT+0xa8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x62>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a16      	ldr	r2, [pc, #88]	; (8005860 <HAL_TIM_Base_Start_IT+0xac>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x62>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a14      	ldr	r2, [pc, #80]	; (8005864 <HAL_TIM_Base_Start_IT+0xb0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d111      	bne.n	800583a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b06      	cmp	r3, #6
 8005826:	d010      	beq.n	800584a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005838:	e007      	b.n	800584a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0201 	orr.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00

08005868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e041      	b.n	80058fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f839 	bl	8005906 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f000 fcc6 	bl	8006238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <HAL_TIM_PWM_Start+0x24>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	bf14      	ite	ne
 8005934:	2301      	movne	r3, #1
 8005936:	2300      	moveq	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e022      	b.n	8005982 <HAL_TIM_PWM_Start+0x6a>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d109      	bne.n	8005956 <HAL_TIM_PWM_Start+0x3e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	bf14      	ite	ne
 800594e:	2301      	movne	r3, #1
 8005950:	2300      	moveq	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e015      	b.n	8005982 <HAL_TIM_PWM_Start+0x6a>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d109      	bne.n	8005970 <HAL_TIM_PWM_Start+0x58>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e008      	b.n	8005982 <HAL_TIM_PWM_Start+0x6a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e063      	b.n	8005a52 <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Start+0x82>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005998:	e013      	b.n	80059c2 <HAL_TIM_PWM_Start+0xaa>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b04      	cmp	r3, #4
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Start+0x92>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059a8:	e00b      	b.n	80059c2 <HAL_TIM_PWM_Start+0xaa>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_PWM_Start+0xa2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b8:	e003      	b.n	80059c2 <HAL_TIM_PWM_Start+0xaa>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 febe 	bl	800674c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a21      	ldr	r2, [pc, #132]	; (8005a5c <HAL_TIM_PWM_Start+0x144>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d107      	bne.n	80059ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <HAL_TIM_PWM_Start+0x144>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <HAL_TIM_PWM_Start+0x104>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_PWM_Start+0x104>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a17      	ldr	r2, [pc, #92]	; (8005a60 <HAL_TIM_PWM_Start+0x148>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIM_PWM_Start+0x104>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <HAL_TIM_PWM_Start+0x14c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_PWM_Start+0x104>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <HAL_TIM_PWM_Start+0x150>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d111      	bne.n	8005a40 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d010      	beq.n	8005a50 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	e007      	b.n	8005a50 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00

08005a6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e093      	b.n	8005ba8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7fd fbb1 	bl	80031fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab0:	f023 0307 	bic.w	r3, r3, #7
 8005ab4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	f000 fbb9 	bl	8006238 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	4313      	orrs	r3, r2
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b0c:	f023 030c 	bic.w	r3, r3, #12
 8005b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	011a      	lsls	r2, r3, #4
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	031b      	lsls	r3, r3, #12
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	4313      	orrs	r3, r2
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d110      	bne.n	8005c02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d102      	bne.n	8005bec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005be6:	7b7b      	ldrb	r3, [r7, #13]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d001      	beq.n	8005bf0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e069      	b.n	8005cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c00:	e031      	b.n	8005c66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d110      	bne.n	8005c2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c08:	7bbb      	ldrb	r3, [r7, #14]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d102      	bne.n	8005c14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c0e:	7b3b      	ldrb	r3, [r7, #12]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d001      	beq.n	8005c18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e055      	b.n	8005cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c28:	e01d      	b.n	8005c66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d108      	bne.n	8005c42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c30:	7bbb      	ldrb	r3, [r7, #14]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d105      	bne.n	8005c42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c36:	7b7b      	ldrb	r3, [r7, #13]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d102      	bne.n	8005c42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c3c:	7b3b      	ldrb	r3, [r7, #12]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d001      	beq.n	8005c46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e03e      	b.n	8005cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_TIM_Encoder_Start+0xc4>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d008      	beq.n	8005c84 <HAL_TIM_Encoder_Start+0xd4>
 8005c72:	e00f      	b.n	8005c94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fd65 	bl	800674c <TIM_CCxChannelCmd>
      break;
 8005c82:	e016      	b.n	8005cb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	2104      	movs	r1, #4
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fd5d 	bl	800674c <TIM_CCxChannelCmd>
      break;
 8005c92:	e00e      	b.n	8005cb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fd55 	bl	800674c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	2104      	movs	r1, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fd4e 	bl	800674c <TIM_CCxChannelCmd>
      break;
 8005cb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d122      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d11b      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0202 	mvn.w	r2, #2
 8005cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fa76 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa69 	bl	80061ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fa78 	bl	8006212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d122      	bne.n	8005d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d11b      	bne.n	8005d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0204 	mvn.w	r2, #4
 8005d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa4c 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa3f 	bl	80061ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fa4e 	bl	8006212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d122      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d11b      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0208 	mvn.w	r2, #8
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2204      	movs	r2, #4
 8005da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa22 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005dbc:	e005      	b.n	8005dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fa15 	bl	80061ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fa24 	bl	8006212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d122      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0210 	mvn.w	r2, #16
 8005df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9f8 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f9eb 	bl	80061ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f9fa 	bl	8006212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d10e      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d107      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0201 	mvn.w	r2, #1
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fc f9c8 	bl	80021e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b80      	cmp	r3, #128	; 0x80
 8005e5c:	d10e      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	d107      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fcfb 	bl	8006872 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d10e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f9be 	bl	8006224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0220 	mvn.w	r2, #32
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fcc6 	bl	8006860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e0ae      	b.n	8006058 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	f200 809f 	bhi.w	8006048 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f45 	.word	0x08005f45
 8005f14:	08006049 	.word	0x08006049
 8005f18:	08006049 	.word	0x08006049
 8005f1c:	08006049 	.word	0x08006049
 8005f20:	08005f85 	.word	0x08005f85
 8005f24:	08006049 	.word	0x08006049
 8005f28:	08006049 	.word	0x08006049
 8005f2c:	08006049 	.word	0x08006049
 8005f30:	08005fc7 	.word	0x08005fc7
 8005f34:	08006049 	.word	0x08006049
 8005f38:	08006049 	.word	0x08006049
 8005f3c:	08006049 	.word	0x08006049
 8005f40:	08006007 	.word	0x08006007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f9e0 	bl	8006310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0208 	orr.w	r2, r2, #8
 8005f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0204 	bic.w	r2, r2, #4
 8005f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6999      	ldr	r1, [r3, #24]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	619a      	str	r2, [r3, #24]
      break;
 8005f82:	e064      	b.n	800604e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fa26 	bl	80063dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6999      	ldr	r1, [r3, #24]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	021a      	lsls	r2, r3, #8
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	619a      	str	r2, [r3, #24]
      break;
 8005fc4:	e043      	b.n	800604e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fa6f 	bl	80064b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0208 	orr.w	r2, r2, #8
 8005fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0204 	bic.w	r2, r2, #4
 8005ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69d9      	ldr	r1, [r3, #28]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	61da      	str	r2, [r3, #28]
      break;
 8006004:	e023      	b.n	800604e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fab9 	bl	8006584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69d9      	ldr	r1, [r3, #28]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	021a      	lsls	r2, r3, #8
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	61da      	str	r2, [r3, #28]
      break;
 8006046:	e002      	b.n	800604e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
      break;
 800604c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_TIM_ConfigClockSource+0x1c>
 8006078:	2302      	movs	r3, #2
 800607a:	e0b4      	b.n	80061e6 <HAL_TIM_ConfigClockSource+0x186>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800609a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b4:	d03e      	beq.n	8006134 <HAL_TIM_ConfigClockSource+0xd4>
 80060b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ba:	f200 8087 	bhi.w	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c2:	f000 8086 	beq.w	80061d2 <HAL_TIM_ConfigClockSource+0x172>
 80060c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ca:	d87f      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060cc:	2b70      	cmp	r3, #112	; 0x70
 80060ce:	d01a      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0xa6>
 80060d0:	2b70      	cmp	r3, #112	; 0x70
 80060d2:	d87b      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060d4:	2b60      	cmp	r3, #96	; 0x60
 80060d6:	d050      	beq.n	800617a <HAL_TIM_ConfigClockSource+0x11a>
 80060d8:	2b60      	cmp	r3, #96	; 0x60
 80060da:	d877      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060dc:	2b50      	cmp	r3, #80	; 0x50
 80060de:	d03c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0xfa>
 80060e0:	2b50      	cmp	r3, #80	; 0x50
 80060e2:	d873      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060e4:	2b40      	cmp	r3, #64	; 0x40
 80060e6:	d058      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x13a>
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d86f      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060ec:	2b30      	cmp	r3, #48	; 0x30
 80060ee:	d064      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x15a>
 80060f0:	2b30      	cmp	r3, #48	; 0x30
 80060f2:	d86b      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d060      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x15a>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d867      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d05c      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x15a>
 8006100:	2b10      	cmp	r3, #16
 8006102:	d05a      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x15a>
 8006104:	e062      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006116:	f000 fafa 	bl	800670e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	609a      	str	r2, [r3, #8]
      break;
 8006132:	e04f      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006144:	f000 fae3 	bl	800670e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006156:	609a      	str	r2, [r3, #8]
      break;
 8006158:	e03c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006166:	461a      	mov	r2, r3
 8006168:	f000 fa5a 	bl	8006620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2150      	movs	r1, #80	; 0x50
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fab1 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8006178:	e02c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006186:	461a      	mov	r2, r3
 8006188:	f000 fa78 	bl	800667c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2160      	movs	r1, #96	; 0x60
 8006192:	4618      	mov	r0, r3
 8006194:	f000 faa1 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8006198:	e01c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a6:	461a      	mov	r2, r3
 80061a8:	f000 fa3a 	bl	8006620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2140      	movs	r1, #64	; 0x40
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fa91 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 80061b8:	e00c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f000 fa88 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 80061ca:	e003      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
      break;
 80061d0:	e000      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr

08006212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr

08006224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr
	...

08006238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a2d      	ldr	r2, [pc, #180]	; (8006300 <TIM_Base_SetConfig+0xc8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00f      	beq.n	8006270 <TIM_Base_SetConfig+0x38>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d00b      	beq.n	8006270 <TIM_Base_SetConfig+0x38>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <TIM_Base_SetConfig+0xcc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_Base_SetConfig+0x38>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a29      	ldr	r2, [pc, #164]	; (8006308 <TIM_Base_SetConfig+0xd0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0x38>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a28      	ldr	r2, [pc, #160]	; (800630c <TIM_Base_SetConfig+0xd4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d108      	bne.n	8006282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <TIM_Base_SetConfig+0xc8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00f      	beq.n	80062aa <TIM_Base_SetConfig+0x72>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006290:	d00b      	beq.n	80062aa <TIM_Base_SetConfig+0x72>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1b      	ldr	r2, [pc, #108]	; (8006304 <TIM_Base_SetConfig+0xcc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d007      	beq.n	80062aa <TIM_Base_SetConfig+0x72>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <TIM_Base_SetConfig+0xd0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_Base_SetConfig+0x72>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a19      	ldr	r2, [pc, #100]	; (800630c <TIM_Base_SetConfig+0xd4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d108      	bne.n	80062bc <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a07      	ldr	r2, [pc, #28]	; (8006300 <TIM_Base_SetConfig+0xc8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d103      	bne.n	80062f0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	615a      	str	r2, [r3, #20]
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00

08006310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f023 0201 	bic.w	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f023 0302 	bic.w	r3, r3, #2
 8006358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <TIM_OC1_SetConfig+0xc8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d10c      	bne.n	8006386 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0308 	bic.w	r3, r3, #8
 8006372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f023 0304 	bic.w	r3, r3, #4
 8006384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <TIM_OC1_SetConfig+0xc8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d111      	bne.n	80063b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800639c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	621a      	str	r2, [r3, #32]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40012c00 	.word	0x40012c00

080063dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f023 0210 	bic.w	r2, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0320 	bic.w	r3, r3, #32
 8006426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <TIM_OC2_SetConfig+0xd0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d10d      	bne.n	8006458 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a14      	ldr	r2, [pc, #80]	; (80064ac <TIM_OC2_SetConfig+0xd0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d113      	bne.n	8006488 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800646e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr
 80064ac:	40012c00 	.word	0x40012c00

080064b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <TIM_OC3_SetConfig+0xd0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10d      	bne.n	800652a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a14      	ldr	r2, [pc, #80]	; (8006580 <TIM_OC3_SetConfig+0xd0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d113      	bne.n	800655a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40012c00 	.word	0x40012c00

08006584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	031b      	lsls	r3, r3, #12
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a0f      	ldr	r2, [pc, #60]	; (800661c <TIM_OC4_SetConfig+0x98>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d109      	bne.n	80065f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr
 800661c:	40012c00 	.word	0x40012c00

08006620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f023 0201 	bic.w	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800664a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f023 030a 	bic.w	r3, r3, #10
 800665c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0210 	bic.w	r2, r3, #16
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	031b      	lsls	r3, r3, #12
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066da:	b480      	push	{r7}
 80066dc:	b085      	sub	sp, #20
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f043 0307 	orr.w	r3, r3, #7
 80066fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	609a      	str	r2, [r3, #8]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800670e:	b480      	push	{r7}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006728:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	021a      	lsls	r2, r3, #8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	431a      	orrs	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4313      	orrs	r3, r2
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	609a      	str	r2, [r3, #8]
}
 8006742:	bf00      	nop
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2201      	movs	r2, #1
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	43db      	mvns	r3, r3
 800676e:	401a      	ands	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1a      	ldr	r2, [r3, #32]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	fa01 f303 	lsl.w	r3, r1, r3
 8006784:	431a      	orrs	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e04b      	b.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a19      	ldr	r2, [pc, #100]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f8:	d00e      	beq.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a15      	ldr	r2, [pc, #84]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a13      	ldr	r2, [pc, #76]	; (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a12      	ldr	r2, [pc, #72]	; (800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d10c      	bne.n	8006832 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800681e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	4313      	orrs	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00

08006860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e042      	b.n	800691c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fc fdc0 	bl	8003430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2224      	movs	r2, #36	; 0x24
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f82b 	bl	8006924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800695e:	f023 030c 	bic.w	r3, r3, #12
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	430b      	orrs	r3, r1
 800696a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a2c      	ldr	r2, [pc, #176]	; (8006a38 <UART_SetConfig+0x114>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d103      	bne.n	8006994 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800698c:	f7fe f908 	bl	8004ba0 <HAL_RCC_GetPCLK2Freq>
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	e002      	b.n	800699a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006994:	f7fe f8f0 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8006998:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009a      	lsls	r2, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <UART_SetConfig+0x118>)
 80069b2:	fba2 2303 	umull	r2, r3, r2, r3
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	0119      	lsls	r1, r3, #4
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009a      	lsls	r2, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80069d0:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <UART_SetConfig+0x118>)
 80069d2:	fba3 0302 	umull	r0, r3, r3, r2
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	2064      	movs	r0, #100	; 0x64
 80069da:	fb00 f303 	mul.w	r3, r0, r3
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	3332      	adds	r3, #50	; 0x32
 80069e4:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <UART_SetConfig+0x118>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f0:	4419      	add	r1, r3
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009a      	lsls	r2, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <UART_SetConfig+0x118>)
 8006a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	2064      	movs	r0, #100	; 0x64
 8006a12:	fb00 f303 	mul.w	r3, r0, r3
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	3332      	adds	r3, #50	; 0x32
 8006a1c:	4a07      	ldr	r2, [pc, #28]	; (8006a3c <UART_SetConfig+0x118>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	f003 020f 	and.w	r2, r3, #15
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40013800 	.word	0x40013800
 8006a3c:	51eb851f 	.word	0x51eb851f

08006a40 <__cvt>:
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a46:	461f      	mov	r7, r3
 8006a48:	bfbb      	ittet	lt
 8006a4a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a4e:	461f      	movlt	r7, r3
 8006a50:	2300      	movge	r3, #0
 8006a52:	232d      	movlt	r3, #45	; 0x2d
 8006a54:	b088      	sub	sp, #32
 8006a56:	4614      	mov	r4, r2
 8006a58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a5c:	7013      	strb	r3, [r2, #0]
 8006a5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a60:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a64:	f023 0820 	bic.w	r8, r3, #32
 8006a68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a6c:	d005      	beq.n	8006a7a <__cvt+0x3a>
 8006a6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a72:	d100      	bne.n	8006a76 <__cvt+0x36>
 8006a74:	3501      	adds	r5, #1
 8006a76:	2302      	movs	r3, #2
 8006a78:	e000      	b.n	8006a7c <__cvt+0x3c>
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	aa07      	add	r2, sp, #28
 8006a7e:	9204      	str	r2, [sp, #16]
 8006a80:	aa06      	add	r2, sp, #24
 8006a82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a86:	e9cd 3500 	strd	r3, r5, [sp]
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	f000 fe53 	bl	8007738 <_dtoa_r>
 8006a92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a96:	4606      	mov	r6, r0
 8006a98:	d102      	bne.n	8006aa0 <__cvt+0x60>
 8006a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a9c:	07db      	lsls	r3, r3, #31
 8006a9e:	d522      	bpl.n	8006ae6 <__cvt+0xa6>
 8006aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006aa4:	eb06 0905 	add.w	r9, r6, r5
 8006aa8:	d110      	bne.n	8006acc <__cvt+0x8c>
 8006aaa:	7833      	ldrb	r3, [r6, #0]
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d10a      	bne.n	8006ac6 <__cvt+0x86>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	f7fa f896 	bl	8000be8 <__aeabi_dcmpeq>
 8006abc:	b918      	cbnz	r0, 8006ac6 <__cvt+0x86>
 8006abe:	f1c5 0501 	rsb	r5, r5, #1
 8006ac2:	f8ca 5000 	str.w	r5, [sl]
 8006ac6:	f8da 3000 	ldr.w	r3, [sl]
 8006aca:	4499      	add	r9, r3
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7fa f888 	bl	8000be8 <__aeabi_dcmpeq>
 8006ad8:	b108      	cbz	r0, 8006ade <__cvt+0x9e>
 8006ada:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ade:	2230      	movs	r2, #48	; 0x30
 8006ae0:	9b07      	ldr	r3, [sp, #28]
 8006ae2:	454b      	cmp	r3, r9
 8006ae4:	d307      	bcc.n	8006af6 <__cvt+0xb6>
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	9b07      	ldr	r3, [sp, #28]
 8006aea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006aec:	1b9b      	subs	r3, r3, r6
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	b008      	add	sp, #32
 8006af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af6:	1c59      	adds	r1, r3, #1
 8006af8:	9107      	str	r1, [sp, #28]
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	e7f0      	b.n	8006ae0 <__cvt+0xa0>

08006afe <__exponent>:
 8006afe:	4603      	mov	r3, r0
 8006b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b02:	2900      	cmp	r1, #0
 8006b04:	f803 2b02 	strb.w	r2, [r3], #2
 8006b08:	bfb6      	itet	lt
 8006b0a:	222d      	movlt	r2, #45	; 0x2d
 8006b0c:	222b      	movge	r2, #43	; 0x2b
 8006b0e:	4249      	neglt	r1, r1
 8006b10:	2909      	cmp	r1, #9
 8006b12:	7042      	strb	r2, [r0, #1]
 8006b14:	dd2a      	ble.n	8006b6c <__exponent+0x6e>
 8006b16:	f10d 0207 	add.w	r2, sp, #7
 8006b1a:	4617      	mov	r7, r2
 8006b1c:	260a      	movs	r6, #10
 8006b1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b22:	4694      	mov	ip, r2
 8006b24:	fb06 1415 	mls	r4, r6, r5, r1
 8006b28:	3430      	adds	r4, #48	; 0x30
 8006b2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b2e:	460c      	mov	r4, r1
 8006b30:	2c63      	cmp	r4, #99	; 0x63
 8006b32:	4629      	mov	r1, r5
 8006b34:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b38:	dcf1      	bgt.n	8006b1e <__exponent+0x20>
 8006b3a:	3130      	adds	r1, #48	; 0x30
 8006b3c:	f1ac 0402 	sub.w	r4, ip, #2
 8006b40:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b44:	4622      	mov	r2, r4
 8006b46:	1c41      	adds	r1, r0, #1
 8006b48:	42ba      	cmp	r2, r7
 8006b4a:	d30a      	bcc.n	8006b62 <__exponent+0x64>
 8006b4c:	f10d 0209 	add.w	r2, sp, #9
 8006b50:	eba2 020c 	sub.w	r2, r2, ip
 8006b54:	42bc      	cmp	r4, r7
 8006b56:	bf88      	it	hi
 8006b58:	2200      	movhi	r2, #0
 8006b5a:	4413      	add	r3, r2
 8006b5c:	1a18      	subs	r0, r3, r0
 8006b5e:	b003      	add	sp, #12
 8006b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b62:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b66:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b6a:	e7ed      	b.n	8006b48 <__exponent+0x4a>
 8006b6c:	2330      	movs	r3, #48	; 0x30
 8006b6e:	3130      	adds	r1, #48	; 0x30
 8006b70:	7083      	strb	r3, [r0, #2]
 8006b72:	70c1      	strb	r1, [r0, #3]
 8006b74:	1d03      	adds	r3, r0, #4
 8006b76:	e7f1      	b.n	8006b5c <__exponent+0x5e>

08006b78 <_printf_float>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	b091      	sub	sp, #68	; 0x44
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b84:	4616      	mov	r6, r2
 8006b86:	461f      	mov	r7, r3
 8006b88:	4605      	mov	r5, r0
 8006b8a:	f000 fcc5 	bl	8007518 <_localeconv_r>
 8006b8e:	6803      	ldr	r3, [r0, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	9309      	str	r3, [sp, #36]	; 0x24
 8006b94:	f7f9 fb48 	bl	8000228 <strlen>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8006b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba0:	900a      	str	r0, [sp, #40]	; 0x28
 8006ba2:	3307      	adds	r3, #7
 8006ba4:	f023 0307 	bic.w	r3, r3, #7
 8006ba8:	f103 0208 	add.w	r2, r3, #8
 8006bac:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bb0:	f8d4 b000 	ldr.w	fp, [r4]
 8006bb4:	f8c8 2000 	str.w	r2, [r8]
 8006bb8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	4643      	mov	r3, r8
 8006bc0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bc4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006bc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295
 8006bce:	4650      	mov	r0, sl
 8006bd0:	4b9c      	ldr	r3, [pc, #624]	; (8006e44 <_printf_float+0x2cc>)
 8006bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bd4:	f7fa f83a 	bl	8000c4c <__aeabi_dcmpun>
 8006bd8:	bb70      	cbnz	r0, 8006c38 <_printf_float+0xc0>
 8006bda:	f04f 32ff 	mov.w	r2, #4294967295
 8006bde:	4650      	mov	r0, sl
 8006be0:	4b98      	ldr	r3, [pc, #608]	; (8006e44 <_printf_float+0x2cc>)
 8006be2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006be4:	f7fa f814 	bl	8000c10 <__aeabi_dcmple>
 8006be8:	bb30      	cbnz	r0, 8006c38 <_printf_float+0xc0>
 8006bea:	2200      	movs	r2, #0
 8006bec:	2300      	movs	r3, #0
 8006bee:	4650      	mov	r0, sl
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	f7fa f803 	bl	8000bfc <__aeabi_dcmplt>
 8006bf6:	b110      	cbz	r0, 8006bfe <_printf_float+0x86>
 8006bf8:	232d      	movs	r3, #45	; 0x2d
 8006bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bfe:	4a92      	ldr	r2, [pc, #584]	; (8006e48 <_printf_float+0x2d0>)
 8006c00:	4b92      	ldr	r3, [pc, #584]	; (8006e4c <_printf_float+0x2d4>)
 8006c02:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c06:	bf94      	ite	ls
 8006c08:	4690      	movls	r8, r2
 8006c0a:	4698      	movhi	r8, r3
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	f04f 0a00 	mov.w	sl, #0
 8006c12:	6123      	str	r3, [r4, #16]
 8006c14:	f02b 0304 	bic.w	r3, fp, #4
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	4633      	mov	r3, r6
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	9700      	str	r7, [sp, #0]
 8006c22:	aa0f      	add	r2, sp, #60	; 0x3c
 8006c24:	f000 f9d6 	bl	8006fd4 <_printf_common>
 8006c28:	3001      	adds	r0, #1
 8006c2a:	f040 8090 	bne.w	8006d4e <_printf_float+0x1d6>
 8006c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c32:	b011      	add	sp, #68	; 0x44
 8006c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c38:	4652      	mov	r2, sl
 8006c3a:	4643      	mov	r3, r8
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	4641      	mov	r1, r8
 8006c40:	f7fa f804 	bl	8000c4c <__aeabi_dcmpun>
 8006c44:	b148      	cbz	r0, 8006c5a <_printf_float+0xe2>
 8006c46:	f1b8 0f00 	cmp.w	r8, #0
 8006c4a:	bfb8      	it	lt
 8006c4c:	232d      	movlt	r3, #45	; 0x2d
 8006c4e:	4a80      	ldr	r2, [pc, #512]	; (8006e50 <_printf_float+0x2d8>)
 8006c50:	bfb8      	it	lt
 8006c52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c56:	4b7f      	ldr	r3, [pc, #508]	; (8006e54 <_printf_float+0x2dc>)
 8006c58:	e7d3      	b.n	8006c02 <_printf_float+0x8a>
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	d142      	bne.n	8006cea <_printf_float+0x172>
 8006c64:	2306      	movs	r3, #6
 8006c66:	6063      	str	r3, [r4, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	aa0e      	add	r2, sp, #56	; 0x38
 8006c6e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c72:	aa0d      	add	r2, sp, #52	; 0x34
 8006c74:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c78:	9203      	str	r2, [sp, #12]
 8006c7a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	4652      	mov	r2, sl
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	4643      	mov	r3, r8
 8006c8e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006c90:	f7ff fed6 	bl	8006a40 <__cvt>
 8006c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c96:	4680      	mov	r8, r0
 8006c98:	2947      	cmp	r1, #71	; 0x47
 8006c9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c9c:	d108      	bne.n	8006cb0 <_printf_float+0x138>
 8006c9e:	1cc8      	adds	r0, r1, #3
 8006ca0:	db02      	blt.n	8006ca8 <_printf_float+0x130>
 8006ca2:	6863      	ldr	r3, [r4, #4]
 8006ca4:	4299      	cmp	r1, r3
 8006ca6:	dd40      	ble.n	8006d2a <_printf_float+0x1b2>
 8006ca8:	f1a9 0902 	sub.w	r9, r9, #2
 8006cac:	fa5f f989 	uxtb.w	r9, r9
 8006cb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cb4:	d81f      	bhi.n	8006cf6 <_printf_float+0x17e>
 8006cb6:	464a      	mov	r2, r9
 8006cb8:	3901      	subs	r1, #1
 8006cba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cbe:	910d      	str	r1, [sp, #52]	; 0x34
 8006cc0:	f7ff ff1d 	bl	8006afe <__exponent>
 8006cc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cc6:	4682      	mov	sl, r0
 8006cc8:	1813      	adds	r3, r2, r0
 8006cca:	2a01      	cmp	r2, #1
 8006ccc:	6123      	str	r3, [r4, #16]
 8006cce:	dc02      	bgt.n	8006cd6 <_printf_float+0x15e>
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	07d2      	lsls	r2, r2, #31
 8006cd4:	d501      	bpl.n	8006cda <_printf_float+0x162>
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d09b      	beq.n	8006c1a <_printf_float+0xa2>
 8006ce2:	232d      	movs	r3, #45	; 0x2d
 8006ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce8:	e797      	b.n	8006c1a <_printf_float+0xa2>
 8006cea:	2947      	cmp	r1, #71	; 0x47
 8006cec:	d1bc      	bne.n	8006c68 <_printf_float+0xf0>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1ba      	bne.n	8006c68 <_printf_float+0xf0>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e7b7      	b.n	8006c66 <_printf_float+0xee>
 8006cf6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006cfa:	d118      	bne.n	8006d2e <_printf_float+0x1b6>
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	6863      	ldr	r3, [r4, #4]
 8006d00:	dd0b      	ble.n	8006d1a <_printf_float+0x1a2>
 8006d02:	6121      	str	r1, [r4, #16]
 8006d04:	b913      	cbnz	r3, 8006d0c <_printf_float+0x194>
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	07d0      	lsls	r0, r2, #31
 8006d0a:	d502      	bpl.n	8006d12 <_printf_float+0x19a>
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	440b      	add	r3, r1
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	f04f 0a00 	mov.w	sl, #0
 8006d16:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d18:	e7df      	b.n	8006cda <_printf_float+0x162>
 8006d1a:	b913      	cbnz	r3, 8006d22 <_printf_float+0x1aa>
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	07d2      	lsls	r2, r2, #31
 8006d20:	d501      	bpl.n	8006d26 <_printf_float+0x1ae>
 8006d22:	3302      	adds	r3, #2
 8006d24:	e7f4      	b.n	8006d10 <_printf_float+0x198>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e7f2      	b.n	8006d10 <_printf_float+0x198>
 8006d2a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d30:	4299      	cmp	r1, r3
 8006d32:	db05      	blt.n	8006d40 <_printf_float+0x1c8>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	6121      	str	r1, [r4, #16]
 8006d38:	07d8      	lsls	r0, r3, #31
 8006d3a:	d5ea      	bpl.n	8006d12 <_printf_float+0x19a>
 8006d3c:	1c4b      	adds	r3, r1, #1
 8006d3e:	e7e7      	b.n	8006d10 <_printf_float+0x198>
 8006d40:	2900      	cmp	r1, #0
 8006d42:	bfcc      	ite	gt
 8006d44:	2201      	movgt	r2, #1
 8006d46:	f1c1 0202 	rsble	r2, r1, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	e7e0      	b.n	8006d10 <_printf_float+0x198>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	055a      	lsls	r2, r3, #21
 8006d52:	d407      	bmi.n	8006d64 <_printf_float+0x1ec>
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	4642      	mov	r2, r8
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b8      	blx	r7
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d12b      	bne.n	8006dba <_printf_float+0x242>
 8006d62:	e764      	b.n	8006c2e <_printf_float+0xb6>
 8006d64:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d68:	f240 80dd 	bls.w	8006f26 <_printf_float+0x3ae>
 8006d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d70:	2200      	movs	r2, #0
 8006d72:	2300      	movs	r3, #0
 8006d74:	f7f9 ff38 	bl	8000be8 <__aeabi_dcmpeq>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d033      	beq.n	8006de4 <_printf_float+0x26c>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	4a35      	ldr	r2, [pc, #212]	; (8006e58 <_printf_float+0x2e0>)
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af51 	beq.w	8006c2e <_printf_float+0xb6>
 8006d8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d90:	429a      	cmp	r2, r3
 8006d92:	db02      	blt.n	8006d9a <_printf_float+0x222>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	07d8      	lsls	r0, r3, #31
 8006d98:	d50f      	bpl.n	8006dba <_printf_float+0x242>
 8006d9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f af42 	beq.w	8006c2e <_printf_float+0xb6>
 8006daa:	f04f 0800 	mov.w	r8, #0
 8006dae:	f104 091a 	add.w	r9, r4, #26
 8006db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006db4:	3b01      	subs	r3, #1
 8006db6:	4543      	cmp	r3, r8
 8006db8:	dc09      	bgt.n	8006dce <_printf_float+0x256>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	079b      	lsls	r3, r3, #30
 8006dbe:	f100 8104 	bmi.w	8006fca <_printf_float+0x452>
 8006dc2:	68e0      	ldr	r0, [r4, #12]
 8006dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc6:	4298      	cmp	r0, r3
 8006dc8:	bfb8      	it	lt
 8006dca:	4618      	movlt	r0, r3
 8006dcc:	e731      	b.n	8006c32 <_printf_float+0xba>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	464a      	mov	r2, r9
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f af28 	beq.w	8006c2e <_printf_float+0xb6>
 8006dde:	f108 0801 	add.w	r8, r8, #1
 8006de2:	e7e6      	b.n	8006db2 <_printf_float+0x23a>
 8006de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	dc38      	bgt.n	8006e5c <_printf_float+0x2e4>
 8006dea:	2301      	movs	r3, #1
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	4a19      	ldr	r2, [pc, #100]	; (8006e58 <_printf_float+0x2e0>)
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	f43f af1a 	beq.w	8006c2e <_printf_float+0xb6>
 8006dfa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	d102      	bne.n	8006e08 <_printf_float+0x290>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	07d9      	lsls	r1, r3, #31
 8006e06:	d5d8      	bpl.n	8006dba <_printf_float+0x242>
 8006e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f af0b 	beq.w	8006c2e <_printf_float+0xb6>
 8006e18:	f04f 0900 	mov.w	r9, #0
 8006e1c:	f104 0a1a 	add.w	sl, r4, #26
 8006e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e22:	425b      	negs	r3, r3
 8006e24:	454b      	cmp	r3, r9
 8006e26:	dc01      	bgt.n	8006e2c <_printf_float+0x2b4>
 8006e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e2a:	e794      	b.n	8006d56 <_printf_float+0x1de>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4652      	mov	r2, sl
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f aef9 	beq.w	8006c2e <_printf_float+0xb6>
 8006e3c:	f109 0901 	add.w	r9, r9, #1
 8006e40:	e7ee      	b.n	8006e20 <_printf_float+0x2a8>
 8006e42:	bf00      	nop
 8006e44:	7fefffff 	.word	0x7fefffff
 8006e48:	080093ec 	.word	0x080093ec
 8006e4c:	080093f0 	.word	0x080093f0
 8006e50:	080093f4 	.word	0x080093f4
 8006e54:	080093f8 	.word	0x080093f8
 8006e58:	080093fc 	.word	0x080093fc
 8006e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e60:	429a      	cmp	r2, r3
 8006e62:	bfa8      	it	ge
 8006e64:	461a      	movge	r2, r3
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	4691      	mov	r9, r2
 8006e6a:	dc37      	bgt.n	8006edc <_printf_float+0x364>
 8006e6c:	f04f 0b00 	mov.w	fp, #0
 8006e70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e74:	f104 021a 	add.w	r2, r4, #26
 8006e78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e7c:	ebaa 0309 	sub.w	r3, sl, r9
 8006e80:	455b      	cmp	r3, fp
 8006e82:	dc33      	bgt.n	8006eec <_printf_float+0x374>
 8006e84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	db3b      	blt.n	8006f04 <_printf_float+0x38c>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	07da      	lsls	r2, r3, #31
 8006e90:	d438      	bmi.n	8006f04 <_printf_float+0x38c>
 8006e92:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006e96:	eba2 0903 	sub.w	r9, r2, r3
 8006e9a:	eba2 020a 	sub.w	r2, r2, sl
 8006e9e:	4591      	cmp	r9, r2
 8006ea0:	bfa8      	it	ge
 8006ea2:	4691      	movge	r9, r2
 8006ea4:	f1b9 0f00 	cmp.w	r9, #0
 8006ea8:	dc34      	bgt.n	8006f14 <_printf_float+0x39c>
 8006eaa:	f04f 0800 	mov.w	r8, #0
 8006eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eb2:	f104 0a1a 	add.w	sl, r4, #26
 8006eb6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006eba:	1a9b      	subs	r3, r3, r2
 8006ebc:	eba3 0309 	sub.w	r3, r3, r9
 8006ec0:	4543      	cmp	r3, r8
 8006ec2:	f77f af7a 	ble.w	8006dba <_printf_float+0x242>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4652      	mov	r2, sl
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f aeac 	beq.w	8006c2e <_printf_float+0xb6>
 8006ed6:	f108 0801 	add.w	r8, r8, #1
 8006eda:	e7ec      	b.n	8006eb6 <_printf_float+0x33e>
 8006edc:	4613      	mov	r3, r2
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d1c0      	bne.n	8006e6c <_printf_float+0x2f4>
 8006eea:	e6a0      	b.n	8006c2e <_printf_float+0xb6>
 8006eec:	2301      	movs	r3, #1
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f ae99 	beq.w	8006c2e <_printf_float+0xb6>
 8006efc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006efe:	f10b 0b01 	add.w	fp, fp, #1
 8006f02:	e7b9      	b.n	8006e78 <_printf_float+0x300>
 8006f04:	4631      	mov	r1, r6
 8006f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d1bf      	bne.n	8006e92 <_printf_float+0x31a>
 8006f12:	e68c      	b.n	8006c2e <_printf_float+0xb6>
 8006f14:	464b      	mov	r3, r9
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	eb08 020a 	add.w	r2, r8, sl
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	d1c2      	bne.n	8006eaa <_printf_float+0x332>
 8006f24:	e683      	b.n	8006c2e <_printf_float+0xb6>
 8006f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f28:	2a01      	cmp	r2, #1
 8006f2a:	dc01      	bgt.n	8006f30 <_printf_float+0x3b8>
 8006f2c:	07db      	lsls	r3, r3, #31
 8006f2e:	d539      	bpl.n	8006fa4 <_printf_float+0x42c>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4642      	mov	r2, r8
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f ae77 	beq.w	8006c2e <_printf_float+0xb6>
 8006f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f ae6f 	beq.w	8006c2e <_printf_float+0xb6>
 8006f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f54:	2200      	movs	r2, #0
 8006f56:	2300      	movs	r3, #0
 8006f58:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006f5c:	f7f9 fe44 	bl	8000be8 <__aeabi_dcmpeq>
 8006f60:	b9d8      	cbnz	r0, 8006f9a <_printf_float+0x422>
 8006f62:	f109 33ff 	add.w	r3, r9, #4294967295
 8006f66:	f108 0201 	add.w	r2, r8, #1
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	d10e      	bne.n	8006f92 <_printf_float+0x41a>
 8006f74:	e65b      	b.n	8006c2e <_printf_float+0xb6>
 8006f76:	2301      	movs	r3, #1
 8006f78:	464a      	mov	r2, r9
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae54 	beq.w	8006c2e <_printf_float+0xb6>
 8006f86:	f108 0801 	add.w	r8, r8, #1
 8006f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4543      	cmp	r3, r8
 8006f90:	dcf1      	bgt.n	8006f76 <_printf_float+0x3fe>
 8006f92:	4653      	mov	r3, sl
 8006f94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f98:	e6de      	b.n	8006d58 <_printf_float+0x1e0>
 8006f9a:	f04f 0800 	mov.w	r8, #0
 8006f9e:	f104 091a 	add.w	r9, r4, #26
 8006fa2:	e7f2      	b.n	8006f8a <_printf_float+0x412>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	e7df      	b.n	8006f6a <_printf_float+0x3f2>
 8006faa:	2301      	movs	r3, #1
 8006fac:	464a      	mov	r2, r9
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f ae3a 	beq.w	8006c2e <_printf_float+0xb6>
 8006fba:	f108 0801 	add.w	r8, r8, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	4543      	cmp	r3, r8
 8006fc6:	dcf0      	bgt.n	8006faa <_printf_float+0x432>
 8006fc8:	e6fb      	b.n	8006dc2 <_printf_float+0x24a>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	f104 0919 	add.w	r9, r4, #25
 8006fd2:	e7f4      	b.n	8006fbe <_printf_float+0x446>

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4616      	mov	r6, r2
 8006fda:	4699      	mov	r9, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	bfb8      	it	lt
 8006fe6:	4613      	movlt	r3, r2
 8006fe8:	6033      	str	r3, [r6, #0]
 8006fea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fee:	460c      	mov	r4, r1
 8006ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ff4:	b10a      	cbz	r2, 8006ffa <_printf_common+0x26>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	0699      	lsls	r1, r3, #26
 8006ffe:	bf42      	ittt	mi
 8007000:	6833      	ldrmi	r3, [r6, #0]
 8007002:	3302      	addmi	r3, #2
 8007004:	6033      	strmi	r3, [r6, #0]
 8007006:	6825      	ldr	r5, [r4, #0]
 8007008:	f015 0506 	ands.w	r5, r5, #6
 800700c:	d106      	bne.n	800701c <_printf_common+0x48>
 800700e:	f104 0a19 	add.w	sl, r4, #25
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	6832      	ldr	r2, [r6, #0]
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dc2b      	bgt.n	8007074 <_printf_common+0xa0>
 800701c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007020:	1e13      	subs	r3, r2, #0
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	bf18      	it	ne
 8007026:	2301      	movne	r3, #1
 8007028:	0692      	lsls	r2, r2, #26
 800702a:	d430      	bmi.n	800708e <_printf_common+0xba>
 800702c:	4649      	mov	r1, r9
 800702e:	4638      	mov	r0, r7
 8007030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007034:	47c0      	blx	r8
 8007036:	3001      	adds	r0, #1
 8007038:	d023      	beq.n	8007082 <_printf_common+0xae>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	f003 0306 	and.w	r3, r3, #6
 8007042:	2b04      	cmp	r3, #4
 8007044:	bf14      	ite	ne
 8007046:	2500      	movne	r5, #0
 8007048:	6833      	ldreq	r3, [r6, #0]
 800704a:	f04f 0600 	mov.w	r6, #0
 800704e:	bf08      	it	eq
 8007050:	68e5      	ldreq	r5, [r4, #12]
 8007052:	f104 041a 	add.w	r4, r4, #26
 8007056:	bf08      	it	eq
 8007058:	1aed      	subeq	r5, r5, r3
 800705a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800705e:	bf08      	it	eq
 8007060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007064:	4293      	cmp	r3, r2
 8007066:	bfc4      	itt	gt
 8007068:	1a9b      	subgt	r3, r3, r2
 800706a:	18ed      	addgt	r5, r5, r3
 800706c:	42b5      	cmp	r5, r6
 800706e:	d11a      	bne.n	80070a6 <_printf_common+0xd2>
 8007070:	2000      	movs	r0, #0
 8007072:	e008      	b.n	8007086 <_printf_common+0xb2>
 8007074:	2301      	movs	r3, #1
 8007076:	4652      	mov	r2, sl
 8007078:	4649      	mov	r1, r9
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	3001      	adds	r0, #1
 8007080:	d103      	bne.n	800708a <_printf_common+0xb6>
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708a:	3501      	adds	r5, #1
 800708c:	e7c1      	b.n	8007012 <_printf_common+0x3e>
 800708e:	2030      	movs	r0, #48	; 0x30
 8007090:	18e1      	adds	r1, r4, r3
 8007092:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800709c:	4422      	add	r2, r4
 800709e:	3302      	adds	r3, #2
 80070a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070a4:	e7c2      	b.n	800702c <_printf_common+0x58>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4622      	mov	r2, r4
 80070aa:	4649      	mov	r1, r9
 80070ac:	4638      	mov	r0, r7
 80070ae:	47c0      	blx	r8
 80070b0:	3001      	adds	r0, #1
 80070b2:	d0e6      	beq.n	8007082 <_printf_common+0xae>
 80070b4:	3601      	adds	r6, #1
 80070b6:	e7d9      	b.n	800706c <_printf_common+0x98>

080070b8 <_printf_i>:
 80070b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070bc:	7e0f      	ldrb	r7, [r1, #24]
 80070be:	4691      	mov	r9, r2
 80070c0:	2f78      	cmp	r7, #120	; 0x78
 80070c2:	4680      	mov	r8, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	469a      	mov	sl, r3
 80070c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070ce:	d807      	bhi.n	80070e0 <_printf_i+0x28>
 80070d0:	2f62      	cmp	r7, #98	; 0x62
 80070d2:	d80a      	bhi.n	80070ea <_printf_i+0x32>
 80070d4:	2f00      	cmp	r7, #0
 80070d6:	f000 80d5 	beq.w	8007284 <_printf_i+0x1cc>
 80070da:	2f58      	cmp	r7, #88	; 0x58
 80070dc:	f000 80c1 	beq.w	8007262 <_printf_i+0x1aa>
 80070e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070e8:	e03a      	b.n	8007160 <_printf_i+0xa8>
 80070ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070ee:	2b15      	cmp	r3, #21
 80070f0:	d8f6      	bhi.n	80070e0 <_printf_i+0x28>
 80070f2:	a101      	add	r1, pc, #4	; (adr r1, 80070f8 <_printf_i+0x40>)
 80070f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f8:	08007151 	.word	0x08007151
 80070fc:	08007165 	.word	0x08007165
 8007100:	080070e1 	.word	0x080070e1
 8007104:	080070e1 	.word	0x080070e1
 8007108:	080070e1 	.word	0x080070e1
 800710c:	080070e1 	.word	0x080070e1
 8007110:	08007165 	.word	0x08007165
 8007114:	080070e1 	.word	0x080070e1
 8007118:	080070e1 	.word	0x080070e1
 800711c:	080070e1 	.word	0x080070e1
 8007120:	080070e1 	.word	0x080070e1
 8007124:	0800726b 	.word	0x0800726b
 8007128:	08007191 	.word	0x08007191
 800712c:	08007225 	.word	0x08007225
 8007130:	080070e1 	.word	0x080070e1
 8007134:	080070e1 	.word	0x080070e1
 8007138:	0800728d 	.word	0x0800728d
 800713c:	080070e1 	.word	0x080070e1
 8007140:	08007191 	.word	0x08007191
 8007144:	080070e1 	.word	0x080070e1
 8007148:	080070e1 	.word	0x080070e1
 800714c:	0800722d 	.word	0x0800722d
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	1d1a      	adds	r2, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	602a      	str	r2, [r5, #0]
 8007158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800715c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007160:	2301      	movs	r3, #1
 8007162:	e0a0      	b.n	80072a6 <_printf_i+0x1ee>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	682b      	ldr	r3, [r5, #0]
 8007168:	0607      	lsls	r7, r0, #24
 800716a:	f103 0104 	add.w	r1, r3, #4
 800716e:	6029      	str	r1, [r5, #0]
 8007170:	d501      	bpl.n	8007176 <_printf_i+0xbe>
 8007172:	681e      	ldr	r6, [r3, #0]
 8007174:	e003      	b.n	800717e <_printf_i+0xc6>
 8007176:	0646      	lsls	r6, r0, #25
 8007178:	d5fb      	bpl.n	8007172 <_printf_i+0xba>
 800717a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800717e:	2e00      	cmp	r6, #0
 8007180:	da03      	bge.n	800718a <_printf_i+0xd2>
 8007182:	232d      	movs	r3, #45	; 0x2d
 8007184:	4276      	negs	r6, r6
 8007186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800718a:	230a      	movs	r3, #10
 800718c:	4859      	ldr	r0, [pc, #356]	; (80072f4 <_printf_i+0x23c>)
 800718e:	e012      	b.n	80071b6 <_printf_i+0xfe>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	6820      	ldr	r0, [r4, #0]
 8007194:	1d19      	adds	r1, r3, #4
 8007196:	6029      	str	r1, [r5, #0]
 8007198:	0605      	lsls	r5, r0, #24
 800719a:	d501      	bpl.n	80071a0 <_printf_i+0xe8>
 800719c:	681e      	ldr	r6, [r3, #0]
 800719e:	e002      	b.n	80071a6 <_printf_i+0xee>
 80071a0:	0641      	lsls	r1, r0, #25
 80071a2:	d5fb      	bpl.n	800719c <_printf_i+0xe4>
 80071a4:	881e      	ldrh	r6, [r3, #0]
 80071a6:	2f6f      	cmp	r7, #111	; 0x6f
 80071a8:	bf0c      	ite	eq
 80071aa:	2308      	moveq	r3, #8
 80071ac:	230a      	movne	r3, #10
 80071ae:	4851      	ldr	r0, [pc, #324]	; (80072f4 <_printf_i+0x23c>)
 80071b0:	2100      	movs	r1, #0
 80071b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071b6:	6865      	ldr	r5, [r4, #4]
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	bfa8      	it	ge
 80071bc:	6821      	ldrge	r1, [r4, #0]
 80071be:	60a5      	str	r5, [r4, #8]
 80071c0:	bfa4      	itt	ge
 80071c2:	f021 0104 	bicge.w	r1, r1, #4
 80071c6:	6021      	strge	r1, [r4, #0]
 80071c8:	b90e      	cbnz	r6, 80071ce <_printf_i+0x116>
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	d04b      	beq.n	8007266 <_printf_i+0x1ae>
 80071ce:	4615      	mov	r5, r2
 80071d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80071d4:	fb03 6711 	mls	r7, r3, r1, r6
 80071d8:	5dc7      	ldrb	r7, [r0, r7]
 80071da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071de:	4637      	mov	r7, r6
 80071e0:	42bb      	cmp	r3, r7
 80071e2:	460e      	mov	r6, r1
 80071e4:	d9f4      	bls.n	80071d0 <_printf_i+0x118>
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d10b      	bne.n	8007202 <_printf_i+0x14a>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	07de      	lsls	r6, r3, #31
 80071ee:	d508      	bpl.n	8007202 <_printf_i+0x14a>
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	6861      	ldr	r1, [r4, #4]
 80071f4:	4299      	cmp	r1, r3
 80071f6:	bfde      	ittt	le
 80071f8:	2330      	movle	r3, #48	; 0x30
 80071fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007202:	1b52      	subs	r2, r2, r5
 8007204:	6122      	str	r2, [r4, #16]
 8007206:	464b      	mov	r3, r9
 8007208:	4621      	mov	r1, r4
 800720a:	4640      	mov	r0, r8
 800720c:	f8cd a000 	str.w	sl, [sp]
 8007210:	aa03      	add	r2, sp, #12
 8007212:	f7ff fedf 	bl	8006fd4 <_printf_common>
 8007216:	3001      	adds	r0, #1
 8007218:	d14a      	bne.n	80072b0 <_printf_i+0x1f8>
 800721a:	f04f 30ff 	mov.w	r0, #4294967295
 800721e:	b004      	add	sp, #16
 8007220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	f043 0320 	orr.w	r3, r3, #32
 800722a:	6023      	str	r3, [r4, #0]
 800722c:	2778      	movs	r7, #120	; 0x78
 800722e:	4832      	ldr	r0, [pc, #200]	; (80072f8 <_printf_i+0x240>)
 8007230:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	6829      	ldr	r1, [r5, #0]
 8007238:	061f      	lsls	r7, r3, #24
 800723a:	f851 6b04 	ldr.w	r6, [r1], #4
 800723e:	d402      	bmi.n	8007246 <_printf_i+0x18e>
 8007240:	065f      	lsls	r7, r3, #25
 8007242:	bf48      	it	mi
 8007244:	b2b6      	uxthmi	r6, r6
 8007246:	07df      	lsls	r7, r3, #31
 8007248:	bf48      	it	mi
 800724a:	f043 0320 	orrmi.w	r3, r3, #32
 800724e:	6029      	str	r1, [r5, #0]
 8007250:	bf48      	it	mi
 8007252:	6023      	strmi	r3, [r4, #0]
 8007254:	b91e      	cbnz	r6, 800725e <_printf_i+0x1a6>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f023 0320 	bic.w	r3, r3, #32
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	2310      	movs	r3, #16
 8007260:	e7a6      	b.n	80071b0 <_printf_i+0xf8>
 8007262:	4824      	ldr	r0, [pc, #144]	; (80072f4 <_printf_i+0x23c>)
 8007264:	e7e4      	b.n	8007230 <_printf_i+0x178>
 8007266:	4615      	mov	r5, r2
 8007268:	e7bd      	b.n	80071e6 <_printf_i+0x12e>
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	6826      	ldr	r6, [r4, #0]
 800726e:	1d18      	adds	r0, r3, #4
 8007270:	6961      	ldr	r1, [r4, #20]
 8007272:	6028      	str	r0, [r5, #0]
 8007274:	0635      	lsls	r5, r6, #24
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	d501      	bpl.n	800727e <_printf_i+0x1c6>
 800727a:	6019      	str	r1, [r3, #0]
 800727c:	e002      	b.n	8007284 <_printf_i+0x1cc>
 800727e:	0670      	lsls	r0, r6, #25
 8007280:	d5fb      	bpl.n	800727a <_printf_i+0x1c2>
 8007282:	8019      	strh	r1, [r3, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	4615      	mov	r5, r2
 8007288:	6123      	str	r3, [r4, #16]
 800728a:	e7bc      	b.n	8007206 <_printf_i+0x14e>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	2100      	movs	r1, #0
 8007290:	1d1a      	adds	r2, r3, #4
 8007292:	602a      	str	r2, [r5, #0]
 8007294:	681d      	ldr	r5, [r3, #0]
 8007296:	6862      	ldr	r2, [r4, #4]
 8007298:	4628      	mov	r0, r5
 800729a:	f000 f9b4 	bl	8007606 <memchr>
 800729e:	b108      	cbz	r0, 80072a4 <_printf_i+0x1ec>
 80072a0:	1b40      	subs	r0, r0, r5
 80072a2:	6060      	str	r0, [r4, #4]
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	2300      	movs	r3, #0
 80072aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ae:	e7aa      	b.n	8007206 <_printf_i+0x14e>
 80072b0:	462a      	mov	r2, r5
 80072b2:	4649      	mov	r1, r9
 80072b4:	4640      	mov	r0, r8
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	47d0      	blx	sl
 80072ba:	3001      	adds	r0, #1
 80072bc:	d0ad      	beq.n	800721a <_printf_i+0x162>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	079b      	lsls	r3, r3, #30
 80072c2:	d413      	bmi.n	80072ec <_printf_i+0x234>
 80072c4:	68e0      	ldr	r0, [r4, #12]
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	4298      	cmp	r0, r3
 80072ca:	bfb8      	it	lt
 80072cc:	4618      	movlt	r0, r3
 80072ce:	e7a6      	b.n	800721e <_printf_i+0x166>
 80072d0:	2301      	movs	r3, #1
 80072d2:	4632      	mov	r2, r6
 80072d4:	4649      	mov	r1, r9
 80072d6:	4640      	mov	r0, r8
 80072d8:	47d0      	blx	sl
 80072da:	3001      	adds	r0, #1
 80072dc:	d09d      	beq.n	800721a <_printf_i+0x162>
 80072de:	3501      	adds	r5, #1
 80072e0:	68e3      	ldr	r3, [r4, #12]
 80072e2:	9903      	ldr	r1, [sp, #12]
 80072e4:	1a5b      	subs	r3, r3, r1
 80072e6:	42ab      	cmp	r3, r5
 80072e8:	dcf2      	bgt.n	80072d0 <_printf_i+0x218>
 80072ea:	e7eb      	b.n	80072c4 <_printf_i+0x20c>
 80072ec:	2500      	movs	r5, #0
 80072ee:	f104 0619 	add.w	r6, r4, #25
 80072f2:	e7f5      	b.n	80072e0 <_printf_i+0x228>
 80072f4:	080093fe 	.word	0x080093fe
 80072f8:	0800940f 	.word	0x0800940f

080072fc <std>:
 80072fc:	2300      	movs	r3, #0
 80072fe:	b510      	push	{r4, lr}
 8007300:	4604      	mov	r4, r0
 8007302:	e9c0 3300 	strd	r3, r3, [r0]
 8007306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800730a:	6083      	str	r3, [r0, #8]
 800730c:	8181      	strh	r1, [r0, #12]
 800730e:	6643      	str	r3, [r0, #100]	; 0x64
 8007310:	81c2      	strh	r2, [r0, #14]
 8007312:	6183      	str	r3, [r0, #24]
 8007314:	4619      	mov	r1, r3
 8007316:	2208      	movs	r2, #8
 8007318:	305c      	adds	r0, #92	; 0x5c
 800731a:	f000 f8f4 	bl	8007506 <memset>
 800731e:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <std+0x58>)
 8007320:	6224      	str	r4, [r4, #32]
 8007322:	6263      	str	r3, [r4, #36]	; 0x24
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <std+0x5c>)
 8007326:	62a3      	str	r3, [r4, #40]	; 0x28
 8007328:	4b0c      	ldr	r3, [pc, #48]	; (800735c <std+0x60>)
 800732a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800732c:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <std+0x64>)
 800732e:	6323      	str	r3, [r4, #48]	; 0x30
 8007330:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <std+0x68>)
 8007332:	429c      	cmp	r4, r3
 8007334:	d006      	beq.n	8007344 <std+0x48>
 8007336:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800733a:	4294      	cmp	r4, r2
 800733c:	d002      	beq.n	8007344 <std+0x48>
 800733e:	33d0      	adds	r3, #208	; 0xd0
 8007340:	429c      	cmp	r4, r3
 8007342:	d105      	bne.n	8007350 <std+0x54>
 8007344:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800734c:	f000 b958 	b.w	8007600 <__retarget_lock_init_recursive>
 8007350:	bd10      	pop	{r4, pc}
 8007352:	bf00      	nop
 8007354:	08007481 	.word	0x08007481
 8007358:	080074a3 	.word	0x080074a3
 800735c:	080074db 	.word	0x080074db
 8007360:	080074ff 	.word	0x080074ff
 8007364:	200004c4 	.word	0x200004c4

08007368 <stdio_exit_handler>:
 8007368:	4a02      	ldr	r2, [pc, #8]	; (8007374 <stdio_exit_handler+0xc>)
 800736a:	4903      	ldr	r1, [pc, #12]	; (8007378 <stdio_exit_handler+0x10>)
 800736c:	4803      	ldr	r0, [pc, #12]	; (800737c <stdio_exit_handler+0x14>)
 800736e:	f000 b869 	b.w	8007444 <_fwalk_sglue>
 8007372:	bf00      	nop
 8007374:	2000000c 	.word	0x2000000c
 8007378:	08008ced 	.word	0x08008ced
 800737c:	20000018 	.word	0x20000018

08007380 <cleanup_stdio>:
 8007380:	6841      	ldr	r1, [r0, #4]
 8007382:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <cleanup_stdio+0x34>)
 8007384:	b510      	push	{r4, lr}
 8007386:	4299      	cmp	r1, r3
 8007388:	4604      	mov	r4, r0
 800738a:	d001      	beq.n	8007390 <cleanup_stdio+0x10>
 800738c:	f001 fcae 	bl	8008cec <_fflush_r>
 8007390:	68a1      	ldr	r1, [r4, #8]
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <cleanup_stdio+0x38>)
 8007394:	4299      	cmp	r1, r3
 8007396:	d002      	beq.n	800739e <cleanup_stdio+0x1e>
 8007398:	4620      	mov	r0, r4
 800739a:	f001 fca7 	bl	8008cec <_fflush_r>
 800739e:	68e1      	ldr	r1, [r4, #12]
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <cleanup_stdio+0x3c>)
 80073a2:	4299      	cmp	r1, r3
 80073a4:	d004      	beq.n	80073b0 <cleanup_stdio+0x30>
 80073a6:	4620      	mov	r0, r4
 80073a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ac:	f001 bc9e 	b.w	8008cec <_fflush_r>
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	bf00      	nop
 80073b4:	200004c4 	.word	0x200004c4
 80073b8:	2000052c 	.word	0x2000052c
 80073bc:	20000594 	.word	0x20000594

080073c0 <global_stdio_init.part.0>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <global_stdio_init.part.0+0x30>)
 80073c4:	4c0b      	ldr	r4, [pc, #44]	; (80073f4 <global_stdio_init.part.0+0x34>)
 80073c6:	4a0c      	ldr	r2, [pc, #48]	; (80073f8 <global_stdio_init.part.0+0x38>)
 80073c8:	4620      	mov	r0, r4
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	2104      	movs	r1, #4
 80073ce:	2200      	movs	r2, #0
 80073d0:	f7ff ff94 	bl	80072fc <std>
 80073d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80073d8:	2201      	movs	r2, #1
 80073da:	2109      	movs	r1, #9
 80073dc:	f7ff ff8e 	bl	80072fc <std>
 80073e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80073e4:	2202      	movs	r2, #2
 80073e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ea:	2112      	movs	r1, #18
 80073ec:	f7ff bf86 	b.w	80072fc <std>
 80073f0:	200005fc 	.word	0x200005fc
 80073f4:	200004c4 	.word	0x200004c4
 80073f8:	08007369 	.word	0x08007369

080073fc <__sfp_lock_acquire>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__sfp_lock_acquire+0x8>)
 80073fe:	f000 b900 	b.w	8007602 <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	20000605 	.word	0x20000605

08007408 <__sfp_lock_release>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__sfp_lock_release+0x8>)
 800740a:	f000 b8fb 	b.w	8007604 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	20000605 	.word	0x20000605

08007414 <__sinit>:
 8007414:	b510      	push	{r4, lr}
 8007416:	4604      	mov	r4, r0
 8007418:	f7ff fff0 	bl	80073fc <__sfp_lock_acquire>
 800741c:	6a23      	ldr	r3, [r4, #32]
 800741e:	b11b      	cbz	r3, 8007428 <__sinit+0x14>
 8007420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007424:	f7ff bff0 	b.w	8007408 <__sfp_lock_release>
 8007428:	4b04      	ldr	r3, [pc, #16]	; (800743c <__sinit+0x28>)
 800742a:	6223      	str	r3, [r4, #32]
 800742c:	4b04      	ldr	r3, [pc, #16]	; (8007440 <__sinit+0x2c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1f5      	bne.n	8007420 <__sinit+0xc>
 8007434:	f7ff ffc4 	bl	80073c0 <global_stdio_init.part.0>
 8007438:	e7f2      	b.n	8007420 <__sinit+0xc>
 800743a:	bf00      	nop
 800743c:	08007381 	.word	0x08007381
 8007440:	200005fc 	.word	0x200005fc

08007444 <_fwalk_sglue>:
 8007444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007448:	4607      	mov	r7, r0
 800744a:	4688      	mov	r8, r1
 800744c:	4614      	mov	r4, r2
 800744e:	2600      	movs	r6, #0
 8007450:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007454:	f1b9 0901 	subs.w	r9, r9, #1
 8007458:	d505      	bpl.n	8007466 <_fwalk_sglue+0x22>
 800745a:	6824      	ldr	r4, [r4, #0]
 800745c:	2c00      	cmp	r4, #0
 800745e:	d1f7      	bne.n	8007450 <_fwalk_sglue+0xc>
 8007460:	4630      	mov	r0, r6
 8007462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d907      	bls.n	800747c <_fwalk_sglue+0x38>
 800746c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007470:	3301      	adds	r3, #1
 8007472:	d003      	beq.n	800747c <_fwalk_sglue+0x38>
 8007474:	4629      	mov	r1, r5
 8007476:	4638      	mov	r0, r7
 8007478:	47c0      	blx	r8
 800747a:	4306      	orrs	r6, r0
 800747c:	3568      	adds	r5, #104	; 0x68
 800747e:	e7e9      	b.n	8007454 <_fwalk_sglue+0x10>

08007480 <__sread>:
 8007480:	b510      	push	{r4, lr}
 8007482:	460c      	mov	r4, r1
 8007484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007488:	f000 f86c 	bl	8007564 <_read_r>
 800748c:	2800      	cmp	r0, #0
 800748e:	bfab      	itete	ge
 8007490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007492:	89a3      	ldrhlt	r3, [r4, #12]
 8007494:	181b      	addge	r3, r3, r0
 8007496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800749a:	bfac      	ite	ge
 800749c:	6563      	strge	r3, [r4, #84]	; 0x54
 800749e:	81a3      	strhlt	r3, [r4, #12]
 80074a0:	bd10      	pop	{r4, pc}

080074a2 <__swrite>:
 80074a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a6:	461f      	mov	r7, r3
 80074a8:	898b      	ldrh	r3, [r1, #12]
 80074aa:	4605      	mov	r5, r0
 80074ac:	05db      	lsls	r3, r3, #23
 80074ae:	460c      	mov	r4, r1
 80074b0:	4616      	mov	r6, r2
 80074b2:	d505      	bpl.n	80074c0 <__swrite+0x1e>
 80074b4:	2302      	movs	r3, #2
 80074b6:	2200      	movs	r2, #0
 80074b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074bc:	f000 f840 	bl	8007540 <_lseek_r>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	4632      	mov	r2, r6
 80074c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074c8:	81a3      	strh	r3, [r4, #12]
 80074ca:	4628      	mov	r0, r5
 80074cc:	463b      	mov	r3, r7
 80074ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074d6:	f000 b857 	b.w	8007588 <_write_r>

080074da <__sseek>:
 80074da:	b510      	push	{r4, lr}
 80074dc:	460c      	mov	r4, r1
 80074de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e2:	f000 f82d 	bl	8007540 <_lseek_r>
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	bf15      	itete	ne
 80074ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80074ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074f6:	81a3      	strheq	r3, [r4, #12]
 80074f8:	bf18      	it	ne
 80074fa:	81a3      	strhne	r3, [r4, #12]
 80074fc:	bd10      	pop	{r4, pc}

080074fe <__sclose>:
 80074fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007502:	f000 b80d 	b.w	8007520 <_close_r>

08007506 <memset>:
 8007506:	4603      	mov	r3, r0
 8007508:	4402      	add	r2, r0
 800750a:	4293      	cmp	r3, r2
 800750c:	d100      	bne.n	8007510 <memset+0xa>
 800750e:	4770      	bx	lr
 8007510:	f803 1b01 	strb.w	r1, [r3], #1
 8007514:	e7f9      	b.n	800750a <memset+0x4>
	...

08007518 <_localeconv_r>:
 8007518:	4800      	ldr	r0, [pc, #0]	; (800751c <_localeconv_r+0x4>)
 800751a:	4770      	bx	lr
 800751c:	20000158 	.word	0x20000158

08007520 <_close_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	2300      	movs	r3, #0
 8007524:	4d05      	ldr	r5, [pc, #20]	; (800753c <_close_r+0x1c>)
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	602b      	str	r3, [r5, #0]
 800752c:	f7fb fc82 	bl	8002e34 <_close>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_close_r+0x1a>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b103      	cbz	r3, 800753a <_close_r+0x1a>
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	20000600 	.word	0x20000600

08007540 <_lseek_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	4608      	mov	r0, r1
 8007546:	4611      	mov	r1, r2
 8007548:	2200      	movs	r2, #0
 800754a:	4d05      	ldr	r5, [pc, #20]	; (8007560 <_lseek_r+0x20>)
 800754c:	602a      	str	r2, [r5, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	f7fb fc94 	bl	8002e7c <_lseek>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_lseek_r+0x1e>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_lseek_r+0x1e>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20000600 	.word	0x20000600

08007564 <_read_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	2200      	movs	r2, #0
 800756e:	4d05      	ldr	r5, [pc, #20]	; (8007584 <_read_r+0x20>)
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7fb fc25 	bl	8002dc2 <_read>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_read_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_read_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000600 	.word	0x20000600

08007588 <_write_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4604      	mov	r4, r0
 800758c:	4608      	mov	r0, r1
 800758e:	4611      	mov	r1, r2
 8007590:	2200      	movs	r2, #0
 8007592:	4d05      	ldr	r5, [pc, #20]	; (80075a8 <_write_r+0x20>)
 8007594:	602a      	str	r2, [r5, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f7fb fc30 	bl	8002dfc <_write>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_write_r+0x1e>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_write_r+0x1e>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20000600 	.word	0x20000600

080075ac <__errno>:
 80075ac:	4b01      	ldr	r3, [pc, #4]	; (80075b4 <__errno+0x8>)
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000064 	.word	0x20000064

080075b8 <__libc_init_array>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	2600      	movs	r6, #0
 80075bc:	4d0c      	ldr	r5, [pc, #48]	; (80075f0 <__libc_init_array+0x38>)
 80075be:	4c0d      	ldr	r4, [pc, #52]	; (80075f4 <__libc_init_array+0x3c>)
 80075c0:	1b64      	subs	r4, r4, r5
 80075c2:	10a4      	asrs	r4, r4, #2
 80075c4:	42a6      	cmp	r6, r4
 80075c6:	d109      	bne.n	80075dc <__libc_init_array+0x24>
 80075c8:	f001 fee0 	bl	800938c <_init>
 80075cc:	2600      	movs	r6, #0
 80075ce:	4d0a      	ldr	r5, [pc, #40]	; (80075f8 <__libc_init_array+0x40>)
 80075d0:	4c0a      	ldr	r4, [pc, #40]	; (80075fc <__libc_init_array+0x44>)
 80075d2:	1b64      	subs	r4, r4, r5
 80075d4:	10a4      	asrs	r4, r4, #2
 80075d6:	42a6      	cmp	r6, r4
 80075d8:	d105      	bne.n	80075e6 <__libc_init_array+0x2e>
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e0:	4798      	blx	r3
 80075e2:	3601      	adds	r6, #1
 80075e4:	e7ee      	b.n	80075c4 <__libc_init_array+0xc>
 80075e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ea:	4798      	blx	r3
 80075ec:	3601      	adds	r6, #1
 80075ee:	e7f2      	b.n	80075d6 <__libc_init_array+0x1e>
 80075f0:	08009764 	.word	0x08009764
 80075f4:	08009764 	.word	0x08009764
 80075f8:	08009764 	.word	0x08009764
 80075fc:	08009768 	.word	0x08009768

08007600 <__retarget_lock_init_recursive>:
 8007600:	4770      	bx	lr

08007602 <__retarget_lock_acquire_recursive>:
 8007602:	4770      	bx	lr

08007604 <__retarget_lock_release_recursive>:
 8007604:	4770      	bx	lr

08007606 <memchr>:
 8007606:	4603      	mov	r3, r0
 8007608:	b510      	push	{r4, lr}
 800760a:	b2c9      	uxtb	r1, r1
 800760c:	4402      	add	r2, r0
 800760e:	4293      	cmp	r3, r2
 8007610:	4618      	mov	r0, r3
 8007612:	d101      	bne.n	8007618 <memchr+0x12>
 8007614:	2000      	movs	r0, #0
 8007616:	e003      	b.n	8007620 <memchr+0x1a>
 8007618:	7804      	ldrb	r4, [r0, #0]
 800761a:	3301      	adds	r3, #1
 800761c:	428c      	cmp	r4, r1
 800761e:	d1f6      	bne.n	800760e <memchr+0x8>
 8007620:	bd10      	pop	{r4, pc}

08007622 <quorem>:
 8007622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007626:	6903      	ldr	r3, [r0, #16]
 8007628:	690c      	ldr	r4, [r1, #16]
 800762a:	4607      	mov	r7, r0
 800762c:	42a3      	cmp	r3, r4
 800762e:	db7f      	blt.n	8007730 <quorem+0x10e>
 8007630:	3c01      	subs	r4, #1
 8007632:	f100 0514 	add.w	r5, r0, #20
 8007636:	f101 0814 	add.w	r8, r1, #20
 800763a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007648:	3301      	adds	r3, #1
 800764a:	429a      	cmp	r2, r3
 800764c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007658:	d331      	bcc.n	80076be <quorem+0x9c>
 800765a:	f04f 0e00 	mov.w	lr, #0
 800765e:	4640      	mov	r0, r8
 8007660:	46ac      	mov	ip, r5
 8007662:	46f2      	mov	sl, lr
 8007664:	f850 2b04 	ldr.w	r2, [r0], #4
 8007668:	b293      	uxth	r3, r2
 800766a:	fb06 e303 	mla	r3, r6, r3, lr
 800766e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007672:	0c1a      	lsrs	r2, r3, #16
 8007674:	b29b      	uxth	r3, r3
 8007676:	fb06 220e 	mla	r2, r6, lr, r2
 800767a:	ebaa 0303 	sub.w	r3, sl, r3
 800767e:	f8dc a000 	ldr.w	sl, [ip]
 8007682:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007686:	fa1f fa8a 	uxth.w	sl, sl
 800768a:	4453      	add	r3, sl
 800768c:	f8dc a000 	ldr.w	sl, [ip]
 8007690:	b292      	uxth	r2, r2
 8007692:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007696:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076a0:	4581      	cmp	r9, r0
 80076a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076a6:	f84c 3b04 	str.w	r3, [ip], #4
 80076aa:	d2db      	bcs.n	8007664 <quorem+0x42>
 80076ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80076b0:	b92b      	cbnz	r3, 80076be <quorem+0x9c>
 80076b2:	9b01      	ldr	r3, [sp, #4]
 80076b4:	3b04      	subs	r3, #4
 80076b6:	429d      	cmp	r5, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	d32d      	bcc.n	8007718 <quorem+0xf6>
 80076bc:	613c      	str	r4, [r7, #16]
 80076be:	4638      	mov	r0, r7
 80076c0:	f001 f994 	bl	80089ec <__mcmp>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	db23      	blt.n	8007710 <quorem+0xee>
 80076c8:	4629      	mov	r1, r5
 80076ca:	2000      	movs	r0, #0
 80076cc:	3601      	adds	r6, #1
 80076ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80076d2:	f8d1 c000 	ldr.w	ip, [r1]
 80076d6:	b293      	uxth	r3, r2
 80076d8:	1ac3      	subs	r3, r0, r3
 80076da:	0c12      	lsrs	r2, r2, #16
 80076dc:	fa1f f08c 	uxth.w	r0, ip
 80076e0:	4403      	add	r3, r0
 80076e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80076e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f0:	45c1      	cmp	r9, r8
 80076f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076f6:	f841 3b04 	str.w	r3, [r1], #4
 80076fa:	d2e8      	bcs.n	80076ce <quorem+0xac>
 80076fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007704:	b922      	cbnz	r2, 8007710 <quorem+0xee>
 8007706:	3b04      	subs	r3, #4
 8007708:	429d      	cmp	r5, r3
 800770a:	461a      	mov	r2, r3
 800770c:	d30a      	bcc.n	8007724 <quorem+0x102>
 800770e:	613c      	str	r4, [r7, #16]
 8007710:	4630      	mov	r0, r6
 8007712:	b003      	add	sp, #12
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	3b04      	subs	r3, #4
 800771c:	2a00      	cmp	r2, #0
 800771e:	d1cd      	bne.n	80076bc <quorem+0x9a>
 8007720:	3c01      	subs	r4, #1
 8007722:	e7c8      	b.n	80076b6 <quorem+0x94>
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	3b04      	subs	r3, #4
 8007728:	2a00      	cmp	r2, #0
 800772a:	d1f0      	bne.n	800770e <quorem+0xec>
 800772c:	3c01      	subs	r4, #1
 800772e:	e7eb      	b.n	8007708 <quorem+0xe6>
 8007730:	2000      	movs	r0, #0
 8007732:	e7ee      	b.n	8007712 <quorem+0xf0>
 8007734:	0000      	movs	r0, r0
	...

08007738 <_dtoa_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	4616      	mov	r6, r2
 800773e:	461f      	mov	r7, r3
 8007740:	69c4      	ldr	r4, [r0, #28]
 8007742:	b099      	sub	sp, #100	; 0x64
 8007744:	4605      	mov	r5, r0
 8007746:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800774a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800774e:	b974      	cbnz	r4, 800776e <_dtoa_r+0x36>
 8007750:	2010      	movs	r0, #16
 8007752:	f000 fe1d 	bl	8008390 <malloc>
 8007756:	4602      	mov	r2, r0
 8007758:	61e8      	str	r0, [r5, #28]
 800775a:	b920      	cbnz	r0, 8007766 <_dtoa_r+0x2e>
 800775c:	21ef      	movs	r1, #239	; 0xef
 800775e:	4bac      	ldr	r3, [pc, #688]	; (8007a10 <_dtoa_r+0x2d8>)
 8007760:	48ac      	ldr	r0, [pc, #688]	; (8007a14 <_dtoa_r+0x2dc>)
 8007762:	f001 fb09 	bl	8008d78 <__assert_func>
 8007766:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800776a:	6004      	str	r4, [r0, #0]
 800776c:	60c4      	str	r4, [r0, #12]
 800776e:	69eb      	ldr	r3, [r5, #28]
 8007770:	6819      	ldr	r1, [r3, #0]
 8007772:	b151      	cbz	r1, 800778a <_dtoa_r+0x52>
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	2301      	movs	r3, #1
 8007778:	4093      	lsls	r3, r2
 800777a:	604a      	str	r2, [r1, #4]
 800777c:	608b      	str	r3, [r1, #8]
 800777e:	4628      	mov	r0, r5
 8007780:	f000 fefa 	bl	8008578 <_Bfree>
 8007784:	2200      	movs	r2, #0
 8007786:	69eb      	ldr	r3, [r5, #28]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	1e3b      	subs	r3, r7, #0
 800778c:	bfaf      	iteee	ge
 800778e:	2300      	movge	r3, #0
 8007790:	2201      	movlt	r2, #1
 8007792:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007796:	9305      	strlt	r3, [sp, #20]
 8007798:	bfa8      	it	ge
 800779a:	f8c8 3000 	strge.w	r3, [r8]
 800779e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80077a2:	4b9d      	ldr	r3, [pc, #628]	; (8007a18 <_dtoa_r+0x2e0>)
 80077a4:	bfb8      	it	lt
 80077a6:	f8c8 2000 	strlt.w	r2, [r8]
 80077aa:	ea33 0309 	bics.w	r3, r3, r9
 80077ae:	d119      	bne.n	80077e4 <_dtoa_r+0xac>
 80077b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80077b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077bc:	4333      	orrs	r3, r6
 80077be:	f000 8589 	beq.w	80082d4 <_dtoa_r+0xb9c>
 80077c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077c4:	b953      	cbnz	r3, 80077dc <_dtoa_r+0xa4>
 80077c6:	4b95      	ldr	r3, [pc, #596]	; (8007a1c <_dtoa_r+0x2e4>)
 80077c8:	e023      	b.n	8007812 <_dtoa_r+0xda>
 80077ca:	4b95      	ldr	r3, [pc, #596]	; (8007a20 <_dtoa_r+0x2e8>)
 80077cc:	9303      	str	r3, [sp, #12]
 80077ce:	3308      	adds	r3, #8
 80077d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	9803      	ldr	r0, [sp, #12]
 80077d6:	b019      	add	sp, #100	; 0x64
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077dc:	4b8f      	ldr	r3, [pc, #572]	; (8007a1c <_dtoa_r+0x2e4>)
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	3303      	adds	r3, #3
 80077e2:	e7f5      	b.n	80077d0 <_dtoa_r+0x98>
 80077e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80077e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80077ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077f0:	2200      	movs	r2, #0
 80077f2:	2300      	movs	r3, #0
 80077f4:	f7f9 f9f8 	bl	8000be8 <__aeabi_dcmpeq>
 80077f8:	4680      	mov	r8, r0
 80077fa:	b160      	cbz	r0, 8007816 <_dtoa_r+0xde>
 80077fc:	2301      	movs	r3, #1
 80077fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8562 	beq.w	80082ce <_dtoa_r+0xb96>
 800780a:	4b86      	ldr	r3, [pc, #536]	; (8007a24 <_dtoa_r+0x2ec>)
 800780c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	3b01      	subs	r3, #1
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	e7de      	b.n	80077d4 <_dtoa_r+0x9c>
 8007816:	ab16      	add	r3, sp, #88	; 0x58
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	ab17      	add	r3, sp, #92	; 0x5c
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	4628      	mov	r0, r5
 8007820:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007824:	f001 f98a 	bl	8008b3c <__d2b>
 8007828:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800782c:	4682      	mov	sl, r0
 800782e:	2c00      	cmp	r4, #0
 8007830:	d07e      	beq.n	8007930 <_dtoa_r+0x1f8>
 8007832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007838:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800783c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007840:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007844:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007848:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800784c:	4619      	mov	r1, r3
 800784e:	2200      	movs	r2, #0
 8007850:	4b75      	ldr	r3, [pc, #468]	; (8007a28 <_dtoa_r+0x2f0>)
 8007852:	f7f8 fda9 	bl	80003a8 <__aeabi_dsub>
 8007856:	a368      	add	r3, pc, #416	; (adr r3, 80079f8 <_dtoa_r+0x2c0>)
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f7f8 ff5c 	bl	8000718 <__aeabi_dmul>
 8007860:	a367      	add	r3, pc, #412	; (adr r3, 8007a00 <_dtoa_r+0x2c8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fda1 	bl	80003ac <__adddf3>
 800786a:	4606      	mov	r6, r0
 800786c:	4620      	mov	r0, r4
 800786e:	460f      	mov	r7, r1
 8007870:	f7f8 fee8 	bl	8000644 <__aeabi_i2d>
 8007874:	a364      	add	r3, pc, #400	; (adr r3, 8007a08 <_dtoa_r+0x2d0>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 ff4d 	bl	8000718 <__aeabi_dmul>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4630      	mov	r0, r6
 8007884:	4639      	mov	r1, r7
 8007886:	f7f8 fd91 	bl	80003ac <__adddf3>
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	f7f9 f9f3 	bl	8000c78 <__aeabi_d2iz>
 8007892:	2200      	movs	r2, #0
 8007894:	4683      	mov	fp, r0
 8007896:	2300      	movs	r3, #0
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f9 f9ae 	bl	8000bfc <__aeabi_dcmplt>
 80078a0:	b148      	cbz	r0, 80078b6 <_dtoa_r+0x17e>
 80078a2:	4658      	mov	r0, fp
 80078a4:	f7f8 fece 	bl	8000644 <__aeabi_i2d>
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	f7f9 f99c 	bl	8000be8 <__aeabi_dcmpeq>
 80078b0:	b908      	cbnz	r0, 80078b6 <_dtoa_r+0x17e>
 80078b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078b6:	f1bb 0f16 	cmp.w	fp, #22
 80078ba:	d857      	bhi.n	800796c <_dtoa_r+0x234>
 80078bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078c0:	4b5a      	ldr	r3, [pc, #360]	; (8007a2c <_dtoa_r+0x2f4>)
 80078c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	f7f9 f997 	bl	8000bfc <__aeabi_dcmplt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d04e      	beq.n	8007970 <_dtoa_r+0x238>
 80078d2:	2300      	movs	r3, #0
 80078d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80078da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078dc:	1b1b      	subs	r3, r3, r4
 80078de:	1e5a      	subs	r2, r3, #1
 80078e0:	bf46      	itte	mi
 80078e2:	f1c3 0901 	rsbmi	r9, r3, #1
 80078e6:	2300      	movmi	r3, #0
 80078e8:	f04f 0900 	movpl.w	r9, #0
 80078ec:	9209      	str	r2, [sp, #36]	; 0x24
 80078ee:	bf48      	it	mi
 80078f0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80078f2:	f1bb 0f00 	cmp.w	fp, #0
 80078f6:	db3d      	blt.n	8007974 <_dtoa_r+0x23c>
 80078f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80078fe:	445b      	add	r3, fp
 8007900:	9309      	str	r3, [sp, #36]	; 0x24
 8007902:	2300      	movs	r3, #0
 8007904:	930a      	str	r3, [sp, #40]	; 0x28
 8007906:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007908:	2b09      	cmp	r3, #9
 800790a:	d867      	bhi.n	80079dc <_dtoa_r+0x2a4>
 800790c:	2b05      	cmp	r3, #5
 800790e:	bfc4      	itt	gt
 8007910:	3b04      	subgt	r3, #4
 8007912:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007916:	bfc8      	it	gt
 8007918:	2400      	movgt	r4, #0
 800791a:	f1a3 0302 	sub.w	r3, r3, #2
 800791e:	bfd8      	it	le
 8007920:	2401      	movle	r4, #1
 8007922:	2b03      	cmp	r3, #3
 8007924:	f200 8086 	bhi.w	8007a34 <_dtoa_r+0x2fc>
 8007928:	e8df f003 	tbb	[pc, r3]
 800792c:	5637392c 	.word	0x5637392c
 8007930:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007934:	441c      	add	r4, r3
 8007936:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800793a:	2b20      	cmp	r3, #32
 800793c:	bfc1      	itttt	gt
 800793e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007942:	fa09 f903 	lslgt.w	r9, r9, r3
 8007946:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800794a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800794e:	bfd6      	itet	le
 8007950:	f1c3 0320 	rsble	r3, r3, #32
 8007954:	ea49 0003 	orrgt.w	r0, r9, r3
 8007958:	fa06 f003 	lslle.w	r0, r6, r3
 800795c:	f7f8 fe62 	bl	8000624 <__aeabi_ui2d>
 8007960:	2201      	movs	r2, #1
 8007962:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007966:	3c01      	subs	r4, #1
 8007968:	9213      	str	r2, [sp, #76]	; 0x4c
 800796a:	e76f      	b.n	800784c <_dtoa_r+0x114>
 800796c:	2301      	movs	r3, #1
 800796e:	e7b3      	b.n	80078d8 <_dtoa_r+0x1a0>
 8007970:	900f      	str	r0, [sp, #60]	; 0x3c
 8007972:	e7b2      	b.n	80078da <_dtoa_r+0x1a2>
 8007974:	f1cb 0300 	rsb	r3, fp, #0
 8007978:	930a      	str	r3, [sp, #40]	; 0x28
 800797a:	2300      	movs	r3, #0
 800797c:	eba9 090b 	sub.w	r9, r9, fp
 8007980:	930e      	str	r3, [sp, #56]	; 0x38
 8007982:	e7c0      	b.n	8007906 <_dtoa_r+0x1ce>
 8007984:	2300      	movs	r3, #0
 8007986:	930b      	str	r3, [sp, #44]	; 0x2c
 8007988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800798a:	2b00      	cmp	r3, #0
 800798c:	dc55      	bgt.n	8007a3a <_dtoa_r+0x302>
 800798e:	2301      	movs	r3, #1
 8007990:	461a      	mov	r2, r3
 8007992:	9306      	str	r3, [sp, #24]
 8007994:	9308      	str	r3, [sp, #32]
 8007996:	9223      	str	r2, [sp, #140]	; 0x8c
 8007998:	e00b      	b.n	80079b2 <_dtoa_r+0x27a>
 800799a:	2301      	movs	r3, #1
 800799c:	e7f3      	b.n	8007986 <_dtoa_r+0x24e>
 800799e:	2300      	movs	r3, #0
 80079a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079a4:	445b      	add	r3, fp
 80079a6:	9306      	str	r3, [sp, #24]
 80079a8:	3301      	adds	r3, #1
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	9308      	str	r3, [sp, #32]
 80079ae:	bfb8      	it	lt
 80079b0:	2301      	movlt	r3, #1
 80079b2:	2100      	movs	r1, #0
 80079b4:	2204      	movs	r2, #4
 80079b6:	69e8      	ldr	r0, [r5, #28]
 80079b8:	f102 0614 	add.w	r6, r2, #20
 80079bc:	429e      	cmp	r6, r3
 80079be:	d940      	bls.n	8007a42 <_dtoa_r+0x30a>
 80079c0:	6041      	str	r1, [r0, #4]
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 fd98 	bl	80084f8 <_Balloc>
 80079c8:	9003      	str	r0, [sp, #12]
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d13c      	bne.n	8007a48 <_dtoa_r+0x310>
 80079ce:	4602      	mov	r2, r0
 80079d0:	f240 11af 	movw	r1, #431	; 0x1af
 80079d4:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <_dtoa_r+0x2f8>)
 80079d6:	e6c3      	b.n	8007760 <_dtoa_r+0x28>
 80079d8:	2301      	movs	r3, #1
 80079da:	e7e1      	b.n	80079a0 <_dtoa_r+0x268>
 80079dc:	2401      	movs	r4, #1
 80079de:	2300      	movs	r3, #0
 80079e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80079e2:	9322      	str	r3, [sp, #136]	; 0x88
 80079e4:	f04f 33ff 	mov.w	r3, #4294967295
 80079e8:	2200      	movs	r2, #0
 80079ea:	9306      	str	r3, [sp, #24]
 80079ec:	9308      	str	r3, [sp, #32]
 80079ee:	2312      	movs	r3, #18
 80079f0:	e7d1      	b.n	8007996 <_dtoa_r+0x25e>
 80079f2:	bf00      	nop
 80079f4:	f3af 8000 	nop.w
 80079f8:	636f4361 	.word	0x636f4361
 80079fc:	3fd287a7 	.word	0x3fd287a7
 8007a00:	8b60c8b3 	.word	0x8b60c8b3
 8007a04:	3fc68a28 	.word	0x3fc68a28
 8007a08:	509f79fb 	.word	0x509f79fb
 8007a0c:	3fd34413 	.word	0x3fd34413
 8007a10:	0800942d 	.word	0x0800942d
 8007a14:	08009444 	.word	0x08009444
 8007a18:	7ff00000 	.word	0x7ff00000
 8007a1c:	08009429 	.word	0x08009429
 8007a20:	08009420 	.word	0x08009420
 8007a24:	080093fd 	.word	0x080093fd
 8007a28:	3ff80000 	.word	0x3ff80000
 8007a2c:	08009530 	.word	0x08009530
 8007a30:	0800949c 	.word	0x0800949c
 8007a34:	2301      	movs	r3, #1
 8007a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a38:	e7d4      	b.n	80079e4 <_dtoa_r+0x2ac>
 8007a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a3c:	9306      	str	r3, [sp, #24]
 8007a3e:	9308      	str	r3, [sp, #32]
 8007a40:	e7b7      	b.n	80079b2 <_dtoa_r+0x27a>
 8007a42:	3101      	adds	r1, #1
 8007a44:	0052      	lsls	r2, r2, #1
 8007a46:	e7b7      	b.n	80079b8 <_dtoa_r+0x280>
 8007a48:	69eb      	ldr	r3, [r5, #28]
 8007a4a:	9a03      	ldr	r2, [sp, #12]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	2b0e      	cmp	r3, #14
 8007a52:	f200 80a8 	bhi.w	8007ba6 <_dtoa_r+0x46e>
 8007a56:	2c00      	cmp	r4, #0
 8007a58:	f000 80a5 	beq.w	8007ba6 <_dtoa_r+0x46e>
 8007a5c:	f1bb 0f00 	cmp.w	fp, #0
 8007a60:	dd34      	ble.n	8007acc <_dtoa_r+0x394>
 8007a62:	4b9a      	ldr	r3, [pc, #616]	; (8007ccc <_dtoa_r+0x594>)
 8007a64:	f00b 020f 	and.w	r2, fp, #15
 8007a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a78:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007a7c:	d016      	beq.n	8007aac <_dtoa_r+0x374>
 8007a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a82:	4b93      	ldr	r3, [pc, #588]	; (8007cd0 <_dtoa_r+0x598>)
 8007a84:	2703      	movs	r7, #3
 8007a86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a8a:	f7f8 ff6f 	bl	800096c <__aeabi_ddiv>
 8007a8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a92:	f004 040f 	and.w	r4, r4, #15
 8007a96:	4e8e      	ldr	r6, [pc, #568]	; (8007cd0 <_dtoa_r+0x598>)
 8007a98:	b954      	cbnz	r4, 8007ab0 <_dtoa_r+0x378>
 8007a9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aa2:	f7f8 ff63 	bl	800096c <__aeabi_ddiv>
 8007aa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aaa:	e029      	b.n	8007b00 <_dtoa_r+0x3c8>
 8007aac:	2702      	movs	r7, #2
 8007aae:	e7f2      	b.n	8007a96 <_dtoa_r+0x35e>
 8007ab0:	07e1      	lsls	r1, r4, #31
 8007ab2:	d508      	bpl.n	8007ac6 <_dtoa_r+0x38e>
 8007ab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ab8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007abc:	f7f8 fe2c 	bl	8000718 <__aeabi_dmul>
 8007ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ac4:	3701      	adds	r7, #1
 8007ac6:	1064      	asrs	r4, r4, #1
 8007ac8:	3608      	adds	r6, #8
 8007aca:	e7e5      	b.n	8007a98 <_dtoa_r+0x360>
 8007acc:	f000 80a5 	beq.w	8007c1a <_dtoa_r+0x4e2>
 8007ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ad4:	f1cb 0400 	rsb	r4, fp, #0
 8007ad8:	4b7c      	ldr	r3, [pc, #496]	; (8007ccc <_dtoa_r+0x594>)
 8007ada:	f004 020f 	and.w	r2, r4, #15
 8007ade:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 fe17 	bl	8000718 <__aeabi_dmul>
 8007aea:	2702      	movs	r7, #2
 8007aec:	2300      	movs	r3, #0
 8007aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007af2:	4e77      	ldr	r6, [pc, #476]	; (8007cd0 <_dtoa_r+0x598>)
 8007af4:	1124      	asrs	r4, r4, #4
 8007af6:	2c00      	cmp	r4, #0
 8007af8:	f040 8084 	bne.w	8007c04 <_dtoa_r+0x4cc>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1d2      	bne.n	8007aa6 <_dtoa_r+0x36e>
 8007b00:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 8087 	beq.w	8007c1e <_dtoa_r+0x4e6>
 8007b10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b14:	2200      	movs	r2, #0
 8007b16:	4b6f      	ldr	r3, [pc, #444]	; (8007cd4 <_dtoa_r+0x59c>)
 8007b18:	f7f9 f870 	bl	8000bfc <__aeabi_dcmplt>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d07e      	beq.n	8007c1e <_dtoa_r+0x4e6>
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d07b      	beq.n	8007c1e <_dtoa_r+0x4e6>
 8007b26:	9b06      	ldr	r3, [sp, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	dd38      	ble.n	8007b9e <_dtoa_r+0x466>
 8007b2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b30:	2200      	movs	r2, #0
 8007b32:	4b69      	ldr	r3, [pc, #420]	; (8007cd8 <_dtoa_r+0x5a0>)
 8007b34:	f7f8 fdf0 	bl	8000718 <__aeabi_dmul>
 8007b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b3c:	9c06      	ldr	r4, [sp, #24]
 8007b3e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007b42:	3701      	adds	r7, #1
 8007b44:	4638      	mov	r0, r7
 8007b46:	f7f8 fd7d 	bl	8000644 <__aeabi_i2d>
 8007b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b4e:	f7f8 fde3 	bl	8000718 <__aeabi_dmul>
 8007b52:	2200      	movs	r2, #0
 8007b54:	4b61      	ldr	r3, [pc, #388]	; (8007cdc <_dtoa_r+0x5a4>)
 8007b56:	f7f8 fc29 	bl	80003ac <__adddf3>
 8007b5a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b62:	9611      	str	r6, [sp, #68]	; 0x44
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	d15d      	bne.n	8007c24 <_dtoa_r+0x4ec>
 8007b68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4b5c      	ldr	r3, [pc, #368]	; (8007ce0 <_dtoa_r+0x5a8>)
 8007b70:	f7f8 fc1a 	bl	80003a8 <__aeabi_dsub>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b7c:	4633      	mov	r3, r6
 8007b7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b80:	f7f9 f85a 	bl	8000c38 <__aeabi_dcmpgt>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f040 8295 	bne.w	80080b4 <_dtoa_r+0x97c>
 8007b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b94:	f7f9 f832 	bl	8000bfc <__aeabi_dcmplt>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f040 8289 	bne.w	80080b0 <_dtoa_r+0x978>
 8007b9e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007ba2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ba6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f2c0 8151 	blt.w	8007e50 <_dtoa_r+0x718>
 8007bae:	f1bb 0f0e 	cmp.w	fp, #14
 8007bb2:	f300 814d 	bgt.w	8007e50 <_dtoa_r+0x718>
 8007bb6:	4b45      	ldr	r3, [pc, #276]	; (8007ccc <_dtoa_r+0x594>)
 8007bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bc0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007bc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f280 80da 	bge.w	8007d80 <_dtoa_r+0x648>
 8007bcc:	9b08      	ldr	r3, [sp, #32]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f300 80d6 	bgt.w	8007d80 <_dtoa_r+0x648>
 8007bd4:	f040 826b 	bne.w	80080ae <_dtoa_r+0x976>
 8007bd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4b40      	ldr	r3, [pc, #256]	; (8007ce0 <_dtoa_r+0x5a8>)
 8007be0:	f7f8 fd9a 	bl	8000718 <__aeabi_dmul>
 8007be4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be8:	f7f9 f81c 	bl	8000c24 <__aeabi_dcmpge>
 8007bec:	9c08      	ldr	r4, [sp, #32]
 8007bee:	4626      	mov	r6, r4
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f040 8241 	bne.w	8008078 <_dtoa_r+0x940>
 8007bf6:	2331      	movs	r3, #49	; 0x31
 8007bf8:	9f03      	ldr	r7, [sp, #12]
 8007bfa:	f10b 0b01 	add.w	fp, fp, #1
 8007bfe:	f807 3b01 	strb.w	r3, [r7], #1
 8007c02:	e23d      	b.n	8008080 <_dtoa_r+0x948>
 8007c04:	07e2      	lsls	r2, r4, #31
 8007c06:	d505      	bpl.n	8007c14 <_dtoa_r+0x4dc>
 8007c08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c0c:	f7f8 fd84 	bl	8000718 <__aeabi_dmul>
 8007c10:	2301      	movs	r3, #1
 8007c12:	3701      	adds	r7, #1
 8007c14:	1064      	asrs	r4, r4, #1
 8007c16:	3608      	adds	r6, #8
 8007c18:	e76d      	b.n	8007af6 <_dtoa_r+0x3be>
 8007c1a:	2702      	movs	r7, #2
 8007c1c:	e770      	b.n	8007b00 <_dtoa_r+0x3c8>
 8007c1e:	46d8      	mov	r8, fp
 8007c20:	9c08      	ldr	r4, [sp, #32]
 8007c22:	e78f      	b.n	8007b44 <_dtoa_r+0x40c>
 8007c24:	9903      	ldr	r1, [sp, #12]
 8007c26:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <_dtoa_r+0x594>)
 8007c28:	4421      	add	r1, r4
 8007c2a:	9112      	str	r1, [sp, #72]	; 0x48
 8007c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c32:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007c36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c3a:	2900      	cmp	r1, #0
 8007c3c:	d054      	beq.n	8007ce8 <_dtoa_r+0x5b0>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	4928      	ldr	r1, [pc, #160]	; (8007ce4 <_dtoa_r+0x5ac>)
 8007c42:	f7f8 fe93 	bl	800096c <__aeabi_ddiv>
 8007c46:	463b      	mov	r3, r7
 8007c48:	4632      	mov	r2, r6
 8007c4a:	f7f8 fbad 	bl	80003a8 <__aeabi_dsub>
 8007c4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c52:	9f03      	ldr	r7, [sp, #12]
 8007c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c58:	f7f9 f80e 	bl	8000c78 <__aeabi_d2iz>
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	f7f8 fcf1 	bl	8000644 <__aeabi_i2d>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c6a:	f7f8 fb9d 	bl	80003a8 <__aeabi_dsub>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	3430      	adds	r4, #48	; 0x30
 8007c74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c7c:	f807 4b01 	strb.w	r4, [r7], #1
 8007c80:	f7f8 ffbc 	bl	8000bfc <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d173      	bne.n	8007d70 <_dtoa_r+0x638>
 8007c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	4911      	ldr	r1, [pc, #68]	; (8007cd4 <_dtoa_r+0x59c>)
 8007c90:	f7f8 fb8a 	bl	80003a8 <__aeabi_dsub>
 8007c94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c98:	f7f8 ffb0 	bl	8000bfc <__aeabi_dcmplt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f040 80b6 	bne.w	8007e0e <_dtoa_r+0x6d6>
 8007ca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ca4:	429f      	cmp	r7, r3
 8007ca6:	f43f af7a 	beq.w	8007b9e <_dtoa_r+0x466>
 8007caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <_dtoa_r+0x5a0>)
 8007cb2:	f7f8 fd31 	bl	8000718 <__aeabi_dmul>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <_dtoa_r+0x5a0>)
 8007cc2:	f7f8 fd29 	bl	8000718 <__aeabi_dmul>
 8007cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cca:	e7c3      	b.n	8007c54 <_dtoa_r+0x51c>
 8007ccc:	08009530 	.word	0x08009530
 8007cd0:	08009508 	.word	0x08009508
 8007cd4:	3ff00000 	.word	0x3ff00000
 8007cd8:	40240000 	.word	0x40240000
 8007cdc:	401c0000 	.word	0x401c0000
 8007ce0:	40140000 	.word	0x40140000
 8007ce4:	3fe00000 	.word	0x3fe00000
 8007ce8:	4630      	mov	r0, r6
 8007cea:	4639      	mov	r1, r7
 8007cec:	f7f8 fd14 	bl	8000718 <__aeabi_dmul>
 8007cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cf6:	9c03      	ldr	r4, [sp, #12]
 8007cf8:	9314      	str	r3, [sp, #80]	; 0x50
 8007cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cfe:	f7f8 ffbb 	bl	8000c78 <__aeabi_d2iz>
 8007d02:	9015      	str	r0, [sp, #84]	; 0x54
 8007d04:	f7f8 fc9e 	bl	8000644 <__aeabi_i2d>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d10:	f7f8 fb4a 	bl	80003a8 <__aeabi_dsub>
 8007d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d16:	4606      	mov	r6, r0
 8007d18:	3330      	adds	r3, #48	; 0x30
 8007d1a:	f804 3b01 	strb.w	r3, [r4], #1
 8007d1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d20:	460f      	mov	r7, r1
 8007d22:	429c      	cmp	r4, r3
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	d124      	bne.n	8007d74 <_dtoa_r+0x63c>
 8007d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d2e:	4baf      	ldr	r3, [pc, #700]	; (8007fec <_dtoa_r+0x8b4>)
 8007d30:	f7f8 fb3c 	bl	80003ac <__adddf3>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 ff7c 	bl	8000c38 <__aeabi_dcmpgt>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d163      	bne.n	8007e0c <_dtoa_r+0x6d4>
 8007d44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d48:	2000      	movs	r0, #0
 8007d4a:	49a8      	ldr	r1, [pc, #672]	; (8007fec <_dtoa_r+0x8b4>)
 8007d4c:	f7f8 fb2c 	bl	80003a8 <__aeabi_dsub>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f7f8 ff50 	bl	8000bfc <__aeabi_dcmplt>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	f43f af1e 	beq.w	8007b9e <_dtoa_r+0x466>
 8007d62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007d64:	1e7b      	subs	r3, r7, #1
 8007d66:	9314      	str	r3, [sp, #80]	; 0x50
 8007d68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007d6c:	2b30      	cmp	r3, #48	; 0x30
 8007d6e:	d0f8      	beq.n	8007d62 <_dtoa_r+0x62a>
 8007d70:	46c3      	mov	fp, r8
 8007d72:	e03b      	b.n	8007dec <_dtoa_r+0x6b4>
 8007d74:	4b9e      	ldr	r3, [pc, #632]	; (8007ff0 <_dtoa_r+0x8b8>)
 8007d76:	f7f8 fccf 	bl	8000718 <__aeabi_dmul>
 8007d7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d7e:	e7bc      	b.n	8007cfa <_dtoa_r+0x5c2>
 8007d80:	9f03      	ldr	r7, [sp, #12]
 8007d82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007d86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 fded 	bl	800096c <__aeabi_ddiv>
 8007d92:	f7f8 ff71 	bl	8000c78 <__aeabi_d2iz>
 8007d96:	4604      	mov	r4, r0
 8007d98:	f7f8 fc54 	bl	8000644 <__aeabi_i2d>
 8007d9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007da0:	f7f8 fcba 	bl	8000718 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	f7f8 fafc 	bl	80003a8 <__aeabi_dsub>
 8007db0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007db4:	f807 6b01 	strb.w	r6, [r7], #1
 8007db8:	9e03      	ldr	r6, [sp, #12]
 8007dba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007dbe:	1bbe      	subs	r6, r7, r6
 8007dc0:	45b4      	cmp	ip, r6
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	d136      	bne.n	8007e36 <_dtoa_r+0x6fe>
 8007dc8:	f7f8 faf0 	bl	80003ac <__adddf3>
 8007dcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	4689      	mov	r9, r1
 8007dd4:	f7f8 ff30 	bl	8000c38 <__aeabi_dcmpgt>
 8007dd8:	bb58      	cbnz	r0, 8007e32 <_dtoa_r+0x6fa>
 8007dda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 ff01 	bl	8000be8 <__aeabi_dcmpeq>
 8007de6:	b108      	cbz	r0, 8007dec <_dtoa_r+0x6b4>
 8007de8:	07e3      	lsls	r3, r4, #31
 8007dea:	d422      	bmi.n	8007e32 <_dtoa_r+0x6fa>
 8007dec:	4651      	mov	r1, sl
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 fbc2 	bl	8008578 <_Bfree>
 8007df4:	2300      	movs	r3, #0
 8007df6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007df8:	703b      	strb	r3, [r7, #0]
 8007dfa:	f10b 0301 	add.w	r3, fp, #1
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f43f ace6 	beq.w	80077d4 <_dtoa_r+0x9c>
 8007e08:	601f      	str	r7, [r3, #0]
 8007e0a:	e4e3      	b.n	80077d4 <_dtoa_r+0x9c>
 8007e0c:	4627      	mov	r7, r4
 8007e0e:	463b      	mov	r3, r7
 8007e10:	461f      	mov	r7, r3
 8007e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e16:	2a39      	cmp	r2, #57	; 0x39
 8007e18:	d107      	bne.n	8007e2a <_dtoa_r+0x6f2>
 8007e1a:	9a03      	ldr	r2, [sp, #12]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d1f7      	bne.n	8007e10 <_dtoa_r+0x6d8>
 8007e20:	2230      	movs	r2, #48	; 0x30
 8007e22:	9903      	ldr	r1, [sp, #12]
 8007e24:	f108 0801 	add.w	r8, r8, #1
 8007e28:	700a      	strb	r2, [r1, #0]
 8007e2a:	781a      	ldrb	r2, [r3, #0]
 8007e2c:	3201      	adds	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]
 8007e30:	e79e      	b.n	8007d70 <_dtoa_r+0x638>
 8007e32:	46d8      	mov	r8, fp
 8007e34:	e7eb      	b.n	8007e0e <_dtoa_r+0x6d6>
 8007e36:	2200      	movs	r2, #0
 8007e38:	4b6d      	ldr	r3, [pc, #436]	; (8007ff0 <_dtoa_r+0x8b8>)
 8007e3a:	f7f8 fc6d 	bl	8000718 <__aeabi_dmul>
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2300      	movs	r3, #0
 8007e42:	4680      	mov	r8, r0
 8007e44:	4689      	mov	r9, r1
 8007e46:	f7f8 fecf 	bl	8000be8 <__aeabi_dcmpeq>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d09b      	beq.n	8007d86 <_dtoa_r+0x64e>
 8007e4e:	e7cd      	b.n	8007dec <_dtoa_r+0x6b4>
 8007e50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	f000 80c4 	beq.w	8007fe0 <_dtoa_r+0x8a8>
 8007e58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e5a:	2a01      	cmp	r2, #1
 8007e5c:	f300 80a8 	bgt.w	8007fb0 <_dtoa_r+0x878>
 8007e60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	f000 80a0 	beq.w	8007fa8 <_dtoa_r+0x870>
 8007e68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e6c:	464f      	mov	r7, r9
 8007e6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e72:	2101      	movs	r1, #1
 8007e74:	441a      	add	r2, r3
 8007e76:	4628      	mov	r0, r5
 8007e78:	4499      	add	r9, r3
 8007e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e7c:	f000 fc32 	bl	80086e4 <__i2b>
 8007e80:	4606      	mov	r6, r0
 8007e82:	b15f      	cbz	r7, 8007e9c <_dtoa_r+0x764>
 8007e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dd08      	ble.n	8007e9c <_dtoa_r+0x764>
 8007e8a:	42bb      	cmp	r3, r7
 8007e8c:	bfa8      	it	ge
 8007e8e:	463b      	movge	r3, r7
 8007e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e92:	eba9 0903 	sub.w	r9, r9, r3
 8007e96:	1aff      	subs	r7, r7, r3
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9e:	b1f3      	cbz	r3, 8007ede <_dtoa_r+0x7a6>
 8007ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80a0 	beq.w	8007fe8 <_dtoa_r+0x8b0>
 8007ea8:	2c00      	cmp	r4, #0
 8007eaa:	dd10      	ble.n	8007ece <_dtoa_r+0x796>
 8007eac:	4631      	mov	r1, r6
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f000 fcd5 	bl	8008860 <__pow5mult>
 8007eb6:	4652      	mov	r2, sl
 8007eb8:	4601      	mov	r1, r0
 8007eba:	4606      	mov	r6, r0
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 fc27 	bl	8008710 <__multiply>
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	4651      	mov	r1, sl
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 fb56 	bl	8008578 <_Bfree>
 8007ecc:	46c2      	mov	sl, r8
 8007ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed0:	1b1a      	subs	r2, r3, r4
 8007ed2:	d004      	beq.n	8007ede <_dtoa_r+0x7a6>
 8007ed4:	4651      	mov	r1, sl
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fcc2 	bl	8008860 <__pow5mult>
 8007edc:	4682      	mov	sl, r0
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f000 fbff 	bl	80086e4 <__i2b>
 8007ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ee8:	4604      	mov	r4, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f340 8082 	ble.w	8007ff4 <_dtoa_r+0x8bc>
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f000 fcb3 	bl	8008860 <__pow5mult>
 8007efa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007efc:	4604      	mov	r4, r0
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	dd7b      	ble.n	8007ffa <_dtoa_r+0x8c2>
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f0c:	6918      	ldr	r0, [r3, #16]
 8007f0e:	f000 fb9b 	bl	8008648 <__hi0bits>
 8007f12:	f1c0 0020 	rsb	r0, r0, #32
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	4418      	add	r0, r3
 8007f1a:	f010 001f 	ands.w	r0, r0, #31
 8007f1e:	f000 8092 	beq.w	8008046 <_dtoa_r+0x90e>
 8007f22:	f1c0 0320 	rsb	r3, r0, #32
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	f340 8085 	ble.w	8008036 <_dtoa_r+0x8fe>
 8007f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2e:	f1c0 001c 	rsb	r0, r0, #28
 8007f32:	4403      	add	r3, r0
 8007f34:	4481      	add	r9, r0
 8007f36:	4407      	add	r7, r0
 8007f38:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3a:	f1b9 0f00 	cmp.w	r9, #0
 8007f3e:	dd05      	ble.n	8007f4c <_dtoa_r+0x814>
 8007f40:	4651      	mov	r1, sl
 8007f42:	464a      	mov	r2, r9
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 fce5 	bl	8008914 <__lshift>
 8007f4a:	4682      	mov	sl, r0
 8007f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dd05      	ble.n	8007f5e <_dtoa_r+0x826>
 8007f52:	4621      	mov	r1, r4
 8007f54:	461a      	mov	r2, r3
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 fcdc 	bl	8008914 <__lshift>
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d072      	beq.n	800804a <_dtoa_r+0x912>
 8007f64:	4621      	mov	r1, r4
 8007f66:	4650      	mov	r0, sl
 8007f68:	f000 fd40 	bl	80089ec <__mcmp>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	da6c      	bge.n	800804a <_dtoa_r+0x912>
 8007f70:	2300      	movs	r3, #0
 8007f72:	4651      	mov	r1, sl
 8007f74:	220a      	movs	r2, #10
 8007f76:	4628      	mov	r0, r5
 8007f78:	f000 fb20 	bl	80085bc <__multadd>
 8007f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f7e:	4682      	mov	sl, r0
 8007f80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 81ac 	beq.w	80082e2 <_dtoa_r+0xbaa>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	220a      	movs	r2, #10
 8007f90:	4628      	mov	r0, r5
 8007f92:	f000 fb13 	bl	80085bc <__multadd>
 8007f96:	9b06      	ldr	r3, [sp, #24]
 8007f98:	4606      	mov	r6, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f300 8093 	bgt.w	80080c6 <_dtoa_r+0x98e>
 8007fa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	dc59      	bgt.n	800805a <_dtoa_r+0x922>
 8007fa6:	e08e      	b.n	80080c6 <_dtoa_r+0x98e>
 8007fa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007faa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fae:	e75d      	b.n	8007e6c <_dtoa_r+0x734>
 8007fb0:	9b08      	ldr	r3, [sp, #32]
 8007fb2:	1e5c      	subs	r4, r3, #1
 8007fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb6:	42a3      	cmp	r3, r4
 8007fb8:	bfbf      	itttt	lt
 8007fba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007fbc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007fbe:	1ae3      	sublt	r3, r4, r3
 8007fc0:	18d2      	addlt	r2, r2, r3
 8007fc2:	bfa8      	it	ge
 8007fc4:	1b1c      	subge	r4, r3, r4
 8007fc6:	9b08      	ldr	r3, [sp, #32]
 8007fc8:	bfbe      	ittt	lt
 8007fca:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007fcc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007fce:	2400      	movlt	r4, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	bfb5      	itete	lt
 8007fd4:	eba9 0703 	sublt.w	r7, r9, r3
 8007fd8:	464f      	movge	r7, r9
 8007fda:	2300      	movlt	r3, #0
 8007fdc:	9b08      	ldrge	r3, [sp, #32]
 8007fde:	e747      	b.n	8007e70 <_dtoa_r+0x738>
 8007fe0:	464f      	mov	r7, r9
 8007fe2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fe4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007fe6:	e74c      	b.n	8007e82 <_dtoa_r+0x74a>
 8007fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fea:	e773      	b.n	8007ed4 <_dtoa_r+0x79c>
 8007fec:	3fe00000 	.word	0x3fe00000
 8007ff0:	40240000 	.word	0x40240000
 8007ff4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	dc18      	bgt.n	800802c <_dtoa_r+0x8f4>
 8007ffa:	9b04      	ldr	r3, [sp, #16]
 8007ffc:	b9b3      	cbnz	r3, 800802c <_dtoa_r+0x8f4>
 8007ffe:	9b05      	ldr	r3, [sp, #20]
 8008000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008004:	b993      	cbnz	r3, 800802c <_dtoa_r+0x8f4>
 8008006:	9b05      	ldr	r3, [sp, #20]
 8008008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800800c:	0d1b      	lsrs	r3, r3, #20
 800800e:	051b      	lsls	r3, r3, #20
 8008010:	b17b      	cbz	r3, 8008032 <_dtoa_r+0x8fa>
 8008012:	f04f 0801 	mov.w	r8, #1
 8008016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008018:	f109 0901 	add.w	r9, r9, #1
 800801c:	3301      	adds	r3, #1
 800801e:	9309      	str	r3, [sp, #36]	; 0x24
 8008020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008022:	2b00      	cmp	r3, #0
 8008024:	f47f af6f 	bne.w	8007f06 <_dtoa_r+0x7ce>
 8008028:	2001      	movs	r0, #1
 800802a:	e774      	b.n	8007f16 <_dtoa_r+0x7de>
 800802c:	f04f 0800 	mov.w	r8, #0
 8008030:	e7f6      	b.n	8008020 <_dtoa_r+0x8e8>
 8008032:	4698      	mov	r8, r3
 8008034:	e7f4      	b.n	8008020 <_dtoa_r+0x8e8>
 8008036:	d080      	beq.n	8007f3a <_dtoa_r+0x802>
 8008038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800803a:	331c      	adds	r3, #28
 800803c:	441a      	add	r2, r3
 800803e:	4499      	add	r9, r3
 8008040:	441f      	add	r7, r3
 8008042:	9209      	str	r2, [sp, #36]	; 0x24
 8008044:	e779      	b.n	8007f3a <_dtoa_r+0x802>
 8008046:	4603      	mov	r3, r0
 8008048:	e7f6      	b.n	8008038 <_dtoa_r+0x900>
 800804a:	9b08      	ldr	r3, [sp, #32]
 800804c:	2b00      	cmp	r3, #0
 800804e:	dc34      	bgt.n	80080ba <_dtoa_r+0x982>
 8008050:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008052:	2b02      	cmp	r3, #2
 8008054:	dd31      	ble.n	80080ba <_dtoa_r+0x982>
 8008056:	9b08      	ldr	r3, [sp, #32]
 8008058:	9306      	str	r3, [sp, #24]
 800805a:	9b06      	ldr	r3, [sp, #24]
 800805c:	b963      	cbnz	r3, 8008078 <_dtoa_r+0x940>
 800805e:	4621      	mov	r1, r4
 8008060:	2205      	movs	r2, #5
 8008062:	4628      	mov	r0, r5
 8008064:	f000 faaa 	bl	80085bc <__multadd>
 8008068:	4601      	mov	r1, r0
 800806a:	4604      	mov	r4, r0
 800806c:	4650      	mov	r0, sl
 800806e:	f000 fcbd 	bl	80089ec <__mcmp>
 8008072:	2800      	cmp	r0, #0
 8008074:	f73f adbf 	bgt.w	8007bf6 <_dtoa_r+0x4be>
 8008078:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800807a:	9f03      	ldr	r7, [sp, #12]
 800807c:	ea6f 0b03 	mvn.w	fp, r3
 8008080:	f04f 0800 	mov.w	r8, #0
 8008084:	4621      	mov	r1, r4
 8008086:	4628      	mov	r0, r5
 8008088:	f000 fa76 	bl	8008578 <_Bfree>
 800808c:	2e00      	cmp	r6, #0
 800808e:	f43f aead 	beq.w	8007dec <_dtoa_r+0x6b4>
 8008092:	f1b8 0f00 	cmp.w	r8, #0
 8008096:	d005      	beq.n	80080a4 <_dtoa_r+0x96c>
 8008098:	45b0      	cmp	r8, r6
 800809a:	d003      	beq.n	80080a4 <_dtoa_r+0x96c>
 800809c:	4641      	mov	r1, r8
 800809e:	4628      	mov	r0, r5
 80080a0:	f000 fa6a 	bl	8008578 <_Bfree>
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 fa66 	bl	8008578 <_Bfree>
 80080ac:	e69e      	b.n	8007dec <_dtoa_r+0x6b4>
 80080ae:	2400      	movs	r4, #0
 80080b0:	4626      	mov	r6, r4
 80080b2:	e7e1      	b.n	8008078 <_dtoa_r+0x940>
 80080b4:	46c3      	mov	fp, r8
 80080b6:	4626      	mov	r6, r4
 80080b8:	e59d      	b.n	8007bf6 <_dtoa_r+0x4be>
 80080ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80c8 	beq.w	8008252 <_dtoa_r+0xb1a>
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	9306      	str	r3, [sp, #24]
 80080c6:	2f00      	cmp	r7, #0
 80080c8:	dd05      	ble.n	80080d6 <_dtoa_r+0x99e>
 80080ca:	4631      	mov	r1, r6
 80080cc:	463a      	mov	r2, r7
 80080ce:	4628      	mov	r0, r5
 80080d0:	f000 fc20 	bl	8008914 <__lshift>
 80080d4:	4606      	mov	r6, r0
 80080d6:	f1b8 0f00 	cmp.w	r8, #0
 80080da:	d05b      	beq.n	8008194 <_dtoa_r+0xa5c>
 80080dc:	4628      	mov	r0, r5
 80080de:	6871      	ldr	r1, [r6, #4]
 80080e0:	f000 fa0a 	bl	80084f8 <_Balloc>
 80080e4:	4607      	mov	r7, r0
 80080e6:	b928      	cbnz	r0, 80080f4 <_dtoa_r+0x9bc>
 80080e8:	4602      	mov	r2, r0
 80080ea:	f240 21ef 	movw	r1, #751	; 0x2ef
 80080ee:	4b81      	ldr	r3, [pc, #516]	; (80082f4 <_dtoa_r+0xbbc>)
 80080f0:	f7ff bb36 	b.w	8007760 <_dtoa_r+0x28>
 80080f4:	6932      	ldr	r2, [r6, #16]
 80080f6:	f106 010c 	add.w	r1, r6, #12
 80080fa:	3202      	adds	r2, #2
 80080fc:	0092      	lsls	r2, r2, #2
 80080fe:	300c      	adds	r0, #12
 8008100:	f000 fe2c 	bl	8008d5c <memcpy>
 8008104:	2201      	movs	r2, #1
 8008106:	4639      	mov	r1, r7
 8008108:	4628      	mov	r0, r5
 800810a:	f000 fc03 	bl	8008914 <__lshift>
 800810e:	46b0      	mov	r8, r6
 8008110:	4606      	mov	r6, r0
 8008112:	9b03      	ldr	r3, [sp, #12]
 8008114:	9a03      	ldr	r2, [sp, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	9308      	str	r3, [sp, #32]
 800811a:	9b06      	ldr	r3, [sp, #24]
 800811c:	4413      	add	r3, r2
 800811e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008120:	9b04      	ldr	r3, [sp, #16]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	930a      	str	r3, [sp, #40]	; 0x28
 8008128:	9b08      	ldr	r3, [sp, #32]
 800812a:	4621      	mov	r1, r4
 800812c:	3b01      	subs	r3, #1
 800812e:	4650      	mov	r0, sl
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	f7ff fa76 	bl	8007622 <quorem>
 8008136:	4641      	mov	r1, r8
 8008138:	9006      	str	r0, [sp, #24]
 800813a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800813e:	4650      	mov	r0, sl
 8008140:	f000 fc54 	bl	80089ec <__mcmp>
 8008144:	4632      	mov	r2, r6
 8008146:	9009      	str	r0, [sp, #36]	; 0x24
 8008148:	4621      	mov	r1, r4
 800814a:	4628      	mov	r0, r5
 800814c:	f000 fc6a 	bl	8008a24 <__mdiff>
 8008150:	68c2      	ldr	r2, [r0, #12]
 8008152:	4607      	mov	r7, r0
 8008154:	bb02      	cbnz	r2, 8008198 <_dtoa_r+0xa60>
 8008156:	4601      	mov	r1, r0
 8008158:	4650      	mov	r0, sl
 800815a:	f000 fc47 	bl	80089ec <__mcmp>
 800815e:	4602      	mov	r2, r0
 8008160:	4639      	mov	r1, r7
 8008162:	4628      	mov	r0, r5
 8008164:	920c      	str	r2, [sp, #48]	; 0x30
 8008166:	f000 fa07 	bl	8008578 <_Bfree>
 800816a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800816c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800816e:	9f08      	ldr	r7, [sp, #32]
 8008170:	ea43 0102 	orr.w	r1, r3, r2
 8008174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008176:	4319      	orrs	r1, r3
 8008178:	d110      	bne.n	800819c <_dtoa_r+0xa64>
 800817a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800817e:	d029      	beq.n	80081d4 <_dtoa_r+0xa9c>
 8008180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008182:	2b00      	cmp	r3, #0
 8008184:	dd02      	ble.n	800818c <_dtoa_r+0xa54>
 8008186:	9b06      	ldr	r3, [sp, #24]
 8008188:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	f883 9000 	strb.w	r9, [r3]
 8008192:	e777      	b.n	8008084 <_dtoa_r+0x94c>
 8008194:	4630      	mov	r0, r6
 8008196:	e7ba      	b.n	800810e <_dtoa_r+0x9d6>
 8008198:	2201      	movs	r2, #1
 800819a:	e7e1      	b.n	8008160 <_dtoa_r+0xa28>
 800819c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819e:	2b00      	cmp	r3, #0
 80081a0:	db04      	blt.n	80081ac <_dtoa_r+0xa74>
 80081a2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80081a4:	430b      	orrs	r3, r1
 80081a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081a8:	430b      	orrs	r3, r1
 80081aa:	d120      	bne.n	80081ee <_dtoa_r+0xab6>
 80081ac:	2a00      	cmp	r2, #0
 80081ae:	dded      	ble.n	800818c <_dtoa_r+0xa54>
 80081b0:	4651      	mov	r1, sl
 80081b2:	2201      	movs	r2, #1
 80081b4:	4628      	mov	r0, r5
 80081b6:	f000 fbad 	bl	8008914 <__lshift>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4682      	mov	sl, r0
 80081be:	f000 fc15 	bl	80089ec <__mcmp>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	dc03      	bgt.n	80081ce <_dtoa_r+0xa96>
 80081c6:	d1e1      	bne.n	800818c <_dtoa_r+0xa54>
 80081c8:	f019 0f01 	tst.w	r9, #1
 80081cc:	d0de      	beq.n	800818c <_dtoa_r+0xa54>
 80081ce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081d2:	d1d8      	bne.n	8008186 <_dtoa_r+0xa4e>
 80081d4:	2339      	movs	r3, #57	; 0x39
 80081d6:	9a04      	ldr	r2, [sp, #16]
 80081d8:	7013      	strb	r3, [r2, #0]
 80081da:	463b      	mov	r3, r7
 80081dc:	461f      	mov	r7, r3
 80081de:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	2a39      	cmp	r2, #57	; 0x39
 80081e6:	d06b      	beq.n	80082c0 <_dtoa_r+0xb88>
 80081e8:	3201      	adds	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]
 80081ec:	e74a      	b.n	8008084 <_dtoa_r+0x94c>
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	dd07      	ble.n	8008202 <_dtoa_r+0xaca>
 80081f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081f6:	d0ed      	beq.n	80081d4 <_dtoa_r+0xa9c>
 80081f8:	9a04      	ldr	r2, [sp, #16]
 80081fa:	f109 0301 	add.w	r3, r9, #1
 80081fe:	7013      	strb	r3, [r2, #0]
 8008200:	e740      	b.n	8008084 <_dtoa_r+0x94c>
 8008202:	9b08      	ldr	r3, [sp, #32]
 8008204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008206:	f803 9c01 	strb.w	r9, [r3, #-1]
 800820a:	4293      	cmp	r3, r2
 800820c:	d042      	beq.n	8008294 <_dtoa_r+0xb5c>
 800820e:	4651      	mov	r1, sl
 8008210:	2300      	movs	r3, #0
 8008212:	220a      	movs	r2, #10
 8008214:	4628      	mov	r0, r5
 8008216:	f000 f9d1 	bl	80085bc <__multadd>
 800821a:	45b0      	cmp	r8, r6
 800821c:	4682      	mov	sl, r0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	f04f 020a 	mov.w	r2, #10
 8008226:	4641      	mov	r1, r8
 8008228:	4628      	mov	r0, r5
 800822a:	d107      	bne.n	800823c <_dtoa_r+0xb04>
 800822c:	f000 f9c6 	bl	80085bc <__multadd>
 8008230:	4680      	mov	r8, r0
 8008232:	4606      	mov	r6, r0
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	3301      	adds	r3, #1
 8008238:	9308      	str	r3, [sp, #32]
 800823a:	e775      	b.n	8008128 <_dtoa_r+0x9f0>
 800823c:	f000 f9be 	bl	80085bc <__multadd>
 8008240:	4631      	mov	r1, r6
 8008242:	4680      	mov	r8, r0
 8008244:	2300      	movs	r3, #0
 8008246:	220a      	movs	r2, #10
 8008248:	4628      	mov	r0, r5
 800824a:	f000 f9b7 	bl	80085bc <__multadd>
 800824e:	4606      	mov	r6, r0
 8008250:	e7f0      	b.n	8008234 <_dtoa_r+0xafc>
 8008252:	9b08      	ldr	r3, [sp, #32]
 8008254:	9306      	str	r3, [sp, #24]
 8008256:	9f03      	ldr	r7, [sp, #12]
 8008258:	4621      	mov	r1, r4
 800825a:	4650      	mov	r0, sl
 800825c:	f7ff f9e1 	bl	8007622 <quorem>
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008266:	f807 9b01 	strb.w	r9, [r7], #1
 800826a:	1afa      	subs	r2, r7, r3
 800826c:	9b06      	ldr	r3, [sp, #24]
 800826e:	4293      	cmp	r3, r2
 8008270:	dd07      	ble.n	8008282 <_dtoa_r+0xb4a>
 8008272:	4651      	mov	r1, sl
 8008274:	2300      	movs	r3, #0
 8008276:	220a      	movs	r2, #10
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f99f 	bl	80085bc <__multadd>
 800827e:	4682      	mov	sl, r0
 8008280:	e7ea      	b.n	8008258 <_dtoa_r+0xb20>
 8008282:	9b06      	ldr	r3, [sp, #24]
 8008284:	f04f 0800 	mov.w	r8, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfcc      	ite	gt
 800828c:	461f      	movgt	r7, r3
 800828e:	2701      	movle	r7, #1
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	441f      	add	r7, r3
 8008294:	4651      	mov	r1, sl
 8008296:	2201      	movs	r2, #1
 8008298:	4628      	mov	r0, r5
 800829a:	f000 fb3b 	bl	8008914 <__lshift>
 800829e:	4621      	mov	r1, r4
 80082a0:	4682      	mov	sl, r0
 80082a2:	f000 fba3 	bl	80089ec <__mcmp>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	dc97      	bgt.n	80081da <_dtoa_r+0xaa2>
 80082aa:	d102      	bne.n	80082b2 <_dtoa_r+0xb7a>
 80082ac:	f019 0f01 	tst.w	r9, #1
 80082b0:	d193      	bne.n	80081da <_dtoa_r+0xaa2>
 80082b2:	463b      	mov	r3, r7
 80082b4:	461f      	mov	r7, r3
 80082b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082ba:	2a30      	cmp	r2, #48	; 0x30
 80082bc:	d0fa      	beq.n	80082b4 <_dtoa_r+0xb7c>
 80082be:	e6e1      	b.n	8008084 <_dtoa_r+0x94c>
 80082c0:	9a03      	ldr	r2, [sp, #12]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d18a      	bne.n	80081dc <_dtoa_r+0xaa4>
 80082c6:	2331      	movs	r3, #49	; 0x31
 80082c8:	f10b 0b01 	add.w	fp, fp, #1
 80082cc:	e797      	b.n	80081fe <_dtoa_r+0xac6>
 80082ce:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <_dtoa_r+0xbc0>)
 80082d0:	f7ff ba9f 	b.w	8007812 <_dtoa_r+0xda>
 80082d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f47f aa77 	bne.w	80077ca <_dtoa_r+0x92>
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <_dtoa_r+0xbc4>)
 80082de:	f7ff ba98 	b.w	8007812 <_dtoa_r+0xda>
 80082e2:	9b06      	ldr	r3, [sp, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dcb6      	bgt.n	8008256 <_dtoa_r+0xb1e>
 80082e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	f73f aeb5 	bgt.w	800805a <_dtoa_r+0x922>
 80082f0:	e7b1      	b.n	8008256 <_dtoa_r+0xb1e>
 80082f2:	bf00      	nop
 80082f4:	0800949c 	.word	0x0800949c
 80082f8:	080093fc 	.word	0x080093fc
 80082fc:	08009420 	.word	0x08009420

08008300 <_free_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4605      	mov	r5, r0
 8008304:	2900      	cmp	r1, #0
 8008306:	d040      	beq.n	800838a <_free_r+0x8a>
 8008308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800830c:	1f0c      	subs	r4, r1, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfb8      	it	lt
 8008312:	18e4      	addlt	r4, r4, r3
 8008314:	f000 f8e4 	bl	80084e0 <__malloc_lock>
 8008318:	4a1c      	ldr	r2, [pc, #112]	; (800838c <_free_r+0x8c>)
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x2c>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	4628      	mov	r0, r5
 8008324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008328:	f000 b8e0 	b.w	80084ec <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x42>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	1821      	adds	r1, r4, r0
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1809      	addeq	r1, r1, r0
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x1e>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x4c>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x42>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1850      	adds	r0, r2, r1
 8008350:	42a0      	cmp	r0, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x6c>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	4401      	add	r1, r0
 8008358:	1850      	adds	r0, r2, r1
 800835a:	4283      	cmp	r3, r0
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x22>
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	4408      	add	r0, r1
 8008366:	6010      	str	r0, [r2, #0]
 8008368:	6053      	str	r3, [r2, #4]
 800836a:	e7da      	b.n	8008322 <_free_r+0x22>
 800836c:	d902      	bls.n	8008374 <_free_r+0x74>
 800836e:	230c      	movs	r3, #12
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x22>
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	1821      	adds	r1, r4, r0
 8008378:	428b      	cmp	r3, r1
 800837a:	bf01      	itttt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	1809      	addeq	r1, r1, r0
 8008382:	6021      	streq	r1, [r4, #0]
 8008384:	6063      	str	r3, [r4, #4]
 8008386:	6054      	str	r4, [r2, #4]
 8008388:	e7cb      	b.n	8008322 <_free_r+0x22>
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	20000608 	.word	0x20000608

08008390 <malloc>:
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <malloc+0xc>)
 8008392:	4601      	mov	r1, r0
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f000 b823 	b.w	80083e0 <_malloc_r>
 800839a:	bf00      	nop
 800839c:	20000064 	.word	0x20000064

080083a0 <sbrk_aligned>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4e0e      	ldr	r6, [pc, #56]	; (80083dc <sbrk_aligned+0x3c>)
 80083a4:	460c      	mov	r4, r1
 80083a6:	6831      	ldr	r1, [r6, #0]
 80083a8:	4605      	mov	r5, r0
 80083aa:	b911      	cbnz	r1, 80083b2 <sbrk_aligned+0x12>
 80083ac:	f000 fcc6 	bl	8008d3c <_sbrk_r>
 80083b0:	6030      	str	r0, [r6, #0]
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f000 fcc1 	bl	8008d3c <_sbrk_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d00a      	beq.n	80083d4 <sbrk_aligned+0x34>
 80083be:	1cc4      	adds	r4, r0, #3
 80083c0:	f024 0403 	bic.w	r4, r4, #3
 80083c4:	42a0      	cmp	r0, r4
 80083c6:	d007      	beq.n	80083d8 <sbrk_aligned+0x38>
 80083c8:	1a21      	subs	r1, r4, r0
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 fcb6 	bl	8008d3c <_sbrk_r>
 80083d0:	3001      	adds	r0, #1
 80083d2:	d101      	bne.n	80083d8 <sbrk_aligned+0x38>
 80083d4:	f04f 34ff 	mov.w	r4, #4294967295
 80083d8:	4620      	mov	r0, r4
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	2000060c 	.word	0x2000060c

080083e0 <_malloc_r>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	1ccd      	adds	r5, r1, #3
 80083e6:	f025 0503 	bic.w	r5, r5, #3
 80083ea:	3508      	adds	r5, #8
 80083ec:	2d0c      	cmp	r5, #12
 80083ee:	bf38      	it	cc
 80083f0:	250c      	movcc	r5, #12
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	4607      	mov	r7, r0
 80083f6:	db01      	blt.n	80083fc <_malloc_r+0x1c>
 80083f8:	42a9      	cmp	r1, r5
 80083fa:	d905      	bls.n	8008408 <_malloc_r+0x28>
 80083fc:	230c      	movs	r3, #12
 80083fe:	2600      	movs	r6, #0
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	4630      	mov	r0, r6
 8008404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008408:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084dc <_malloc_r+0xfc>
 800840c:	f000 f868 	bl	80084e0 <__malloc_lock>
 8008410:	f8d8 3000 	ldr.w	r3, [r8]
 8008414:	461c      	mov	r4, r3
 8008416:	bb5c      	cbnz	r4, 8008470 <_malloc_r+0x90>
 8008418:	4629      	mov	r1, r5
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff ffc0 	bl	80083a0 <sbrk_aligned>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	4604      	mov	r4, r0
 8008424:	d155      	bne.n	80084d2 <_malloc_r+0xf2>
 8008426:	f8d8 4000 	ldr.w	r4, [r8]
 800842a:	4626      	mov	r6, r4
 800842c:	2e00      	cmp	r6, #0
 800842e:	d145      	bne.n	80084bc <_malloc_r+0xdc>
 8008430:	2c00      	cmp	r4, #0
 8008432:	d048      	beq.n	80084c6 <_malloc_r+0xe6>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	4631      	mov	r1, r6
 8008438:	4638      	mov	r0, r7
 800843a:	eb04 0903 	add.w	r9, r4, r3
 800843e:	f000 fc7d 	bl	8008d3c <_sbrk_r>
 8008442:	4581      	cmp	r9, r0
 8008444:	d13f      	bne.n	80084c6 <_malloc_r+0xe6>
 8008446:	6821      	ldr	r1, [r4, #0]
 8008448:	4638      	mov	r0, r7
 800844a:	1a6d      	subs	r5, r5, r1
 800844c:	4629      	mov	r1, r5
 800844e:	f7ff ffa7 	bl	80083a0 <sbrk_aligned>
 8008452:	3001      	adds	r0, #1
 8008454:	d037      	beq.n	80084c6 <_malloc_r+0xe6>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	442b      	add	r3, r5
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	f8d8 3000 	ldr.w	r3, [r8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d038      	beq.n	80084d6 <_malloc_r+0xf6>
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	42a2      	cmp	r2, r4
 8008468:	d12b      	bne.n	80084c2 <_malloc_r+0xe2>
 800846a:	2200      	movs	r2, #0
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	e00f      	b.n	8008490 <_malloc_r+0xb0>
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	1b52      	subs	r2, r2, r5
 8008474:	d41f      	bmi.n	80084b6 <_malloc_r+0xd6>
 8008476:	2a0b      	cmp	r2, #11
 8008478:	d917      	bls.n	80084aa <_malloc_r+0xca>
 800847a:	1961      	adds	r1, r4, r5
 800847c:	42a3      	cmp	r3, r4
 800847e:	6025      	str	r5, [r4, #0]
 8008480:	bf18      	it	ne
 8008482:	6059      	strne	r1, [r3, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	bf08      	it	eq
 8008488:	f8c8 1000 	streq.w	r1, [r8]
 800848c:	5162      	str	r2, [r4, r5]
 800848e:	604b      	str	r3, [r1, #4]
 8008490:	4638      	mov	r0, r7
 8008492:	f104 060b 	add.w	r6, r4, #11
 8008496:	f000 f829 	bl	80084ec <__malloc_unlock>
 800849a:	f026 0607 	bic.w	r6, r6, #7
 800849e:	1d23      	adds	r3, r4, #4
 80084a0:	1af2      	subs	r2, r6, r3
 80084a2:	d0ae      	beq.n	8008402 <_malloc_r+0x22>
 80084a4:	1b9b      	subs	r3, r3, r6
 80084a6:	50a3      	str	r3, [r4, r2]
 80084a8:	e7ab      	b.n	8008402 <_malloc_r+0x22>
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	6862      	ldr	r2, [r4, #4]
 80084ae:	d1dd      	bne.n	800846c <_malloc_r+0x8c>
 80084b0:	f8c8 2000 	str.w	r2, [r8]
 80084b4:	e7ec      	b.n	8008490 <_malloc_r+0xb0>
 80084b6:	4623      	mov	r3, r4
 80084b8:	6864      	ldr	r4, [r4, #4]
 80084ba:	e7ac      	b.n	8008416 <_malloc_r+0x36>
 80084bc:	4634      	mov	r4, r6
 80084be:	6876      	ldr	r6, [r6, #4]
 80084c0:	e7b4      	b.n	800842c <_malloc_r+0x4c>
 80084c2:	4613      	mov	r3, r2
 80084c4:	e7cc      	b.n	8008460 <_malloc_r+0x80>
 80084c6:	230c      	movs	r3, #12
 80084c8:	4638      	mov	r0, r7
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	f000 f80e 	bl	80084ec <__malloc_unlock>
 80084d0:	e797      	b.n	8008402 <_malloc_r+0x22>
 80084d2:	6025      	str	r5, [r4, #0]
 80084d4:	e7dc      	b.n	8008490 <_malloc_r+0xb0>
 80084d6:	605b      	str	r3, [r3, #4]
 80084d8:	deff      	udf	#255	; 0xff
 80084da:	bf00      	nop
 80084dc:	20000608 	.word	0x20000608

080084e0 <__malloc_lock>:
 80084e0:	4801      	ldr	r0, [pc, #4]	; (80084e8 <__malloc_lock+0x8>)
 80084e2:	f7ff b88e 	b.w	8007602 <__retarget_lock_acquire_recursive>
 80084e6:	bf00      	nop
 80084e8:	20000604 	.word	0x20000604

080084ec <__malloc_unlock>:
 80084ec:	4801      	ldr	r0, [pc, #4]	; (80084f4 <__malloc_unlock+0x8>)
 80084ee:	f7ff b889 	b.w	8007604 <__retarget_lock_release_recursive>
 80084f2:	bf00      	nop
 80084f4:	20000604 	.word	0x20000604

080084f8 <_Balloc>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	69c6      	ldr	r6, [r0, #28]
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	b976      	cbnz	r6, 8008520 <_Balloc+0x28>
 8008502:	2010      	movs	r0, #16
 8008504:	f7ff ff44 	bl	8008390 <malloc>
 8008508:	4602      	mov	r2, r0
 800850a:	61e0      	str	r0, [r4, #28]
 800850c:	b920      	cbnz	r0, 8008518 <_Balloc+0x20>
 800850e:	216b      	movs	r1, #107	; 0x6b
 8008510:	4b17      	ldr	r3, [pc, #92]	; (8008570 <_Balloc+0x78>)
 8008512:	4818      	ldr	r0, [pc, #96]	; (8008574 <_Balloc+0x7c>)
 8008514:	f000 fc30 	bl	8008d78 <__assert_func>
 8008518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800851c:	6006      	str	r6, [r0, #0]
 800851e:	60c6      	str	r6, [r0, #12]
 8008520:	69e6      	ldr	r6, [r4, #28]
 8008522:	68f3      	ldr	r3, [r6, #12]
 8008524:	b183      	cbz	r3, 8008548 <_Balloc+0x50>
 8008526:	69e3      	ldr	r3, [r4, #28]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800852e:	b9b8      	cbnz	r0, 8008560 <_Balloc+0x68>
 8008530:	2101      	movs	r1, #1
 8008532:	fa01 f605 	lsl.w	r6, r1, r5
 8008536:	1d72      	adds	r2, r6, #5
 8008538:	4620      	mov	r0, r4
 800853a:	0092      	lsls	r2, r2, #2
 800853c:	f000 fc3a 	bl	8008db4 <_calloc_r>
 8008540:	b160      	cbz	r0, 800855c <_Balloc+0x64>
 8008542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008546:	e00e      	b.n	8008566 <_Balloc+0x6e>
 8008548:	2221      	movs	r2, #33	; 0x21
 800854a:	2104      	movs	r1, #4
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fc31 	bl	8008db4 <_calloc_r>
 8008552:	69e3      	ldr	r3, [r4, #28]
 8008554:	60f0      	str	r0, [r6, #12]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e4      	bne.n	8008526 <_Balloc+0x2e>
 800855c:	2000      	movs	r0, #0
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	6802      	ldr	r2, [r0, #0]
 8008562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008566:	2300      	movs	r3, #0
 8008568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800856c:	e7f7      	b.n	800855e <_Balloc+0x66>
 800856e:	bf00      	nop
 8008570:	0800942d 	.word	0x0800942d
 8008574:	080094ad 	.word	0x080094ad

08008578 <_Bfree>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	69c6      	ldr	r6, [r0, #28]
 800857c:	4605      	mov	r5, r0
 800857e:	460c      	mov	r4, r1
 8008580:	b976      	cbnz	r6, 80085a0 <_Bfree+0x28>
 8008582:	2010      	movs	r0, #16
 8008584:	f7ff ff04 	bl	8008390 <malloc>
 8008588:	4602      	mov	r2, r0
 800858a:	61e8      	str	r0, [r5, #28]
 800858c:	b920      	cbnz	r0, 8008598 <_Bfree+0x20>
 800858e:	218f      	movs	r1, #143	; 0x8f
 8008590:	4b08      	ldr	r3, [pc, #32]	; (80085b4 <_Bfree+0x3c>)
 8008592:	4809      	ldr	r0, [pc, #36]	; (80085b8 <_Bfree+0x40>)
 8008594:	f000 fbf0 	bl	8008d78 <__assert_func>
 8008598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800859c:	6006      	str	r6, [r0, #0]
 800859e:	60c6      	str	r6, [r0, #12]
 80085a0:	b13c      	cbz	r4, 80085b2 <_Bfree+0x3a>
 80085a2:	69eb      	ldr	r3, [r5, #28]
 80085a4:	6862      	ldr	r2, [r4, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085ac:	6021      	str	r1, [r4, #0]
 80085ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	0800942d 	.word	0x0800942d
 80085b8:	080094ad 	.word	0x080094ad

080085bc <__multadd>:
 80085bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c0:	4607      	mov	r7, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	461e      	mov	r6, r3
 80085c6:	2000      	movs	r0, #0
 80085c8:	690d      	ldr	r5, [r1, #16]
 80085ca:	f101 0c14 	add.w	ip, r1, #20
 80085ce:	f8dc 3000 	ldr.w	r3, [ip]
 80085d2:	3001      	adds	r0, #1
 80085d4:	b299      	uxth	r1, r3
 80085d6:	fb02 6101 	mla	r1, r2, r1, r6
 80085da:	0c1e      	lsrs	r6, r3, #16
 80085dc:	0c0b      	lsrs	r3, r1, #16
 80085de:	fb02 3306 	mla	r3, r2, r6, r3
 80085e2:	b289      	uxth	r1, r1
 80085e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085e8:	4285      	cmp	r5, r0
 80085ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ee:	f84c 1b04 	str.w	r1, [ip], #4
 80085f2:	dcec      	bgt.n	80085ce <__multadd+0x12>
 80085f4:	b30e      	cbz	r6, 800863a <__multadd+0x7e>
 80085f6:	68a3      	ldr	r3, [r4, #8]
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	dc19      	bgt.n	8008630 <__multadd+0x74>
 80085fc:	6861      	ldr	r1, [r4, #4]
 80085fe:	4638      	mov	r0, r7
 8008600:	3101      	adds	r1, #1
 8008602:	f7ff ff79 	bl	80084f8 <_Balloc>
 8008606:	4680      	mov	r8, r0
 8008608:	b928      	cbnz	r0, 8008616 <__multadd+0x5a>
 800860a:	4602      	mov	r2, r0
 800860c:	21ba      	movs	r1, #186	; 0xba
 800860e:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <__multadd+0x84>)
 8008610:	480c      	ldr	r0, [pc, #48]	; (8008644 <__multadd+0x88>)
 8008612:	f000 fbb1 	bl	8008d78 <__assert_func>
 8008616:	6922      	ldr	r2, [r4, #16]
 8008618:	f104 010c 	add.w	r1, r4, #12
 800861c:	3202      	adds	r2, #2
 800861e:	0092      	lsls	r2, r2, #2
 8008620:	300c      	adds	r0, #12
 8008622:	f000 fb9b 	bl	8008d5c <memcpy>
 8008626:	4621      	mov	r1, r4
 8008628:	4638      	mov	r0, r7
 800862a:	f7ff ffa5 	bl	8008578 <_Bfree>
 800862e:	4644      	mov	r4, r8
 8008630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008634:	3501      	adds	r5, #1
 8008636:	615e      	str	r6, [r3, #20]
 8008638:	6125      	str	r5, [r4, #16]
 800863a:	4620      	mov	r0, r4
 800863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008640:	0800949c 	.word	0x0800949c
 8008644:	080094ad 	.word	0x080094ad

08008648 <__hi0bits>:
 8008648:	0c02      	lsrs	r2, r0, #16
 800864a:	0412      	lsls	r2, r2, #16
 800864c:	4603      	mov	r3, r0
 800864e:	b9ca      	cbnz	r2, 8008684 <__hi0bits+0x3c>
 8008650:	0403      	lsls	r3, r0, #16
 8008652:	2010      	movs	r0, #16
 8008654:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008658:	bf04      	itt	eq
 800865a:	021b      	lsleq	r3, r3, #8
 800865c:	3008      	addeq	r0, #8
 800865e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008662:	bf04      	itt	eq
 8008664:	011b      	lsleq	r3, r3, #4
 8008666:	3004      	addeq	r0, #4
 8008668:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800866c:	bf04      	itt	eq
 800866e:	009b      	lsleq	r3, r3, #2
 8008670:	3002      	addeq	r0, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	db05      	blt.n	8008682 <__hi0bits+0x3a>
 8008676:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800867a:	f100 0001 	add.w	r0, r0, #1
 800867e:	bf08      	it	eq
 8008680:	2020      	moveq	r0, #32
 8008682:	4770      	bx	lr
 8008684:	2000      	movs	r0, #0
 8008686:	e7e5      	b.n	8008654 <__hi0bits+0xc>

08008688 <__lo0bits>:
 8008688:	6803      	ldr	r3, [r0, #0]
 800868a:	4602      	mov	r2, r0
 800868c:	f013 0007 	ands.w	r0, r3, #7
 8008690:	d00b      	beq.n	80086aa <__lo0bits+0x22>
 8008692:	07d9      	lsls	r1, r3, #31
 8008694:	d421      	bmi.n	80086da <__lo0bits+0x52>
 8008696:	0798      	lsls	r0, r3, #30
 8008698:	bf49      	itett	mi
 800869a:	085b      	lsrmi	r3, r3, #1
 800869c:	089b      	lsrpl	r3, r3, #2
 800869e:	2001      	movmi	r0, #1
 80086a0:	6013      	strmi	r3, [r2, #0]
 80086a2:	bf5c      	itt	pl
 80086a4:	2002      	movpl	r0, #2
 80086a6:	6013      	strpl	r3, [r2, #0]
 80086a8:	4770      	bx	lr
 80086aa:	b299      	uxth	r1, r3
 80086ac:	b909      	cbnz	r1, 80086b2 <__lo0bits+0x2a>
 80086ae:	2010      	movs	r0, #16
 80086b0:	0c1b      	lsrs	r3, r3, #16
 80086b2:	b2d9      	uxtb	r1, r3
 80086b4:	b909      	cbnz	r1, 80086ba <__lo0bits+0x32>
 80086b6:	3008      	adds	r0, #8
 80086b8:	0a1b      	lsrs	r3, r3, #8
 80086ba:	0719      	lsls	r1, r3, #28
 80086bc:	bf04      	itt	eq
 80086be:	091b      	lsreq	r3, r3, #4
 80086c0:	3004      	addeq	r0, #4
 80086c2:	0799      	lsls	r1, r3, #30
 80086c4:	bf04      	itt	eq
 80086c6:	089b      	lsreq	r3, r3, #2
 80086c8:	3002      	addeq	r0, #2
 80086ca:	07d9      	lsls	r1, r3, #31
 80086cc:	d403      	bmi.n	80086d6 <__lo0bits+0x4e>
 80086ce:	085b      	lsrs	r3, r3, #1
 80086d0:	f100 0001 	add.w	r0, r0, #1
 80086d4:	d003      	beq.n	80086de <__lo0bits+0x56>
 80086d6:	6013      	str	r3, [r2, #0]
 80086d8:	4770      	bx	lr
 80086da:	2000      	movs	r0, #0
 80086dc:	4770      	bx	lr
 80086de:	2020      	movs	r0, #32
 80086e0:	4770      	bx	lr
	...

080086e4 <__i2b>:
 80086e4:	b510      	push	{r4, lr}
 80086e6:	460c      	mov	r4, r1
 80086e8:	2101      	movs	r1, #1
 80086ea:	f7ff ff05 	bl	80084f8 <_Balloc>
 80086ee:	4602      	mov	r2, r0
 80086f0:	b928      	cbnz	r0, 80086fe <__i2b+0x1a>
 80086f2:	f240 1145 	movw	r1, #325	; 0x145
 80086f6:	4b04      	ldr	r3, [pc, #16]	; (8008708 <__i2b+0x24>)
 80086f8:	4804      	ldr	r0, [pc, #16]	; (800870c <__i2b+0x28>)
 80086fa:	f000 fb3d 	bl	8008d78 <__assert_func>
 80086fe:	2301      	movs	r3, #1
 8008700:	6144      	str	r4, [r0, #20]
 8008702:	6103      	str	r3, [r0, #16]
 8008704:	bd10      	pop	{r4, pc}
 8008706:	bf00      	nop
 8008708:	0800949c 	.word	0x0800949c
 800870c:	080094ad 	.word	0x080094ad

08008710 <__multiply>:
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	4691      	mov	r9, r2
 8008716:	690a      	ldr	r2, [r1, #16]
 8008718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800871c:	460c      	mov	r4, r1
 800871e:	429a      	cmp	r2, r3
 8008720:	bfbe      	ittt	lt
 8008722:	460b      	movlt	r3, r1
 8008724:	464c      	movlt	r4, r9
 8008726:	4699      	movlt	r9, r3
 8008728:	6927      	ldr	r7, [r4, #16]
 800872a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800872e:	68a3      	ldr	r3, [r4, #8]
 8008730:	6861      	ldr	r1, [r4, #4]
 8008732:	eb07 060a 	add.w	r6, r7, sl
 8008736:	42b3      	cmp	r3, r6
 8008738:	b085      	sub	sp, #20
 800873a:	bfb8      	it	lt
 800873c:	3101      	addlt	r1, #1
 800873e:	f7ff fedb 	bl	80084f8 <_Balloc>
 8008742:	b930      	cbnz	r0, 8008752 <__multiply+0x42>
 8008744:	4602      	mov	r2, r0
 8008746:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800874a:	4b43      	ldr	r3, [pc, #268]	; (8008858 <__multiply+0x148>)
 800874c:	4843      	ldr	r0, [pc, #268]	; (800885c <__multiply+0x14c>)
 800874e:	f000 fb13 	bl	8008d78 <__assert_func>
 8008752:	f100 0514 	add.w	r5, r0, #20
 8008756:	462b      	mov	r3, r5
 8008758:	2200      	movs	r2, #0
 800875a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800875e:	4543      	cmp	r3, r8
 8008760:	d321      	bcc.n	80087a6 <__multiply+0x96>
 8008762:	f104 0314 	add.w	r3, r4, #20
 8008766:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800876a:	f109 0314 	add.w	r3, r9, #20
 800876e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008772:	9202      	str	r2, [sp, #8]
 8008774:	1b3a      	subs	r2, r7, r4
 8008776:	3a15      	subs	r2, #21
 8008778:	f022 0203 	bic.w	r2, r2, #3
 800877c:	3204      	adds	r2, #4
 800877e:	f104 0115 	add.w	r1, r4, #21
 8008782:	428f      	cmp	r7, r1
 8008784:	bf38      	it	cc
 8008786:	2204      	movcc	r2, #4
 8008788:	9201      	str	r2, [sp, #4]
 800878a:	9a02      	ldr	r2, [sp, #8]
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	429a      	cmp	r2, r3
 8008790:	d80c      	bhi.n	80087ac <__multiply+0x9c>
 8008792:	2e00      	cmp	r6, #0
 8008794:	dd03      	ble.n	800879e <__multiply+0x8e>
 8008796:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800879a:	2b00      	cmp	r3, #0
 800879c:	d05a      	beq.n	8008854 <__multiply+0x144>
 800879e:	6106      	str	r6, [r0, #16]
 80087a0:	b005      	add	sp, #20
 80087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a6:	f843 2b04 	str.w	r2, [r3], #4
 80087aa:	e7d8      	b.n	800875e <__multiply+0x4e>
 80087ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80087b0:	f1ba 0f00 	cmp.w	sl, #0
 80087b4:	d023      	beq.n	80087fe <__multiply+0xee>
 80087b6:	46a9      	mov	r9, r5
 80087b8:	f04f 0c00 	mov.w	ip, #0
 80087bc:	f104 0e14 	add.w	lr, r4, #20
 80087c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087c4:	f8d9 1000 	ldr.w	r1, [r9]
 80087c8:	fa1f fb82 	uxth.w	fp, r2
 80087cc:	b289      	uxth	r1, r1
 80087ce:	fb0a 110b 	mla	r1, sl, fp, r1
 80087d2:	4461      	add	r1, ip
 80087d4:	f8d9 c000 	ldr.w	ip, [r9]
 80087d8:	0c12      	lsrs	r2, r2, #16
 80087da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80087de:	fb0a c202 	mla	r2, sl, r2, ip
 80087e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087e6:	b289      	uxth	r1, r1
 80087e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087ec:	4577      	cmp	r7, lr
 80087ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087f2:	f849 1b04 	str.w	r1, [r9], #4
 80087f6:	d8e3      	bhi.n	80087c0 <__multiply+0xb0>
 80087f8:	9a01      	ldr	r2, [sp, #4]
 80087fa:	f845 c002 	str.w	ip, [r5, r2]
 80087fe:	9a03      	ldr	r2, [sp, #12]
 8008800:	3304      	adds	r3, #4
 8008802:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008806:	f1b9 0f00 	cmp.w	r9, #0
 800880a:	d021      	beq.n	8008850 <__multiply+0x140>
 800880c:	46ae      	mov	lr, r5
 800880e:	f04f 0a00 	mov.w	sl, #0
 8008812:	6829      	ldr	r1, [r5, #0]
 8008814:	f104 0c14 	add.w	ip, r4, #20
 8008818:	f8bc b000 	ldrh.w	fp, [ip]
 800881c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008820:	b289      	uxth	r1, r1
 8008822:	fb09 220b 	mla	r2, r9, fp, r2
 8008826:	4452      	add	r2, sl
 8008828:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800882c:	f84e 1b04 	str.w	r1, [lr], #4
 8008830:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008834:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008838:	f8be 1000 	ldrh.w	r1, [lr]
 800883c:	4567      	cmp	r7, ip
 800883e:	fb09 110a 	mla	r1, r9, sl, r1
 8008842:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008846:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800884a:	d8e5      	bhi.n	8008818 <__multiply+0x108>
 800884c:	9a01      	ldr	r2, [sp, #4]
 800884e:	50a9      	str	r1, [r5, r2]
 8008850:	3504      	adds	r5, #4
 8008852:	e79a      	b.n	800878a <__multiply+0x7a>
 8008854:	3e01      	subs	r6, #1
 8008856:	e79c      	b.n	8008792 <__multiply+0x82>
 8008858:	0800949c 	.word	0x0800949c
 800885c:	080094ad 	.word	0x080094ad

08008860 <__pow5mult>:
 8008860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008864:	4615      	mov	r5, r2
 8008866:	f012 0203 	ands.w	r2, r2, #3
 800886a:	4606      	mov	r6, r0
 800886c:	460f      	mov	r7, r1
 800886e:	d007      	beq.n	8008880 <__pow5mult+0x20>
 8008870:	4c25      	ldr	r4, [pc, #148]	; (8008908 <__pow5mult+0xa8>)
 8008872:	3a01      	subs	r2, #1
 8008874:	2300      	movs	r3, #0
 8008876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800887a:	f7ff fe9f 	bl	80085bc <__multadd>
 800887e:	4607      	mov	r7, r0
 8008880:	10ad      	asrs	r5, r5, #2
 8008882:	d03d      	beq.n	8008900 <__pow5mult+0xa0>
 8008884:	69f4      	ldr	r4, [r6, #28]
 8008886:	b97c      	cbnz	r4, 80088a8 <__pow5mult+0x48>
 8008888:	2010      	movs	r0, #16
 800888a:	f7ff fd81 	bl	8008390 <malloc>
 800888e:	4602      	mov	r2, r0
 8008890:	61f0      	str	r0, [r6, #28]
 8008892:	b928      	cbnz	r0, 80088a0 <__pow5mult+0x40>
 8008894:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008898:	4b1c      	ldr	r3, [pc, #112]	; (800890c <__pow5mult+0xac>)
 800889a:	481d      	ldr	r0, [pc, #116]	; (8008910 <__pow5mult+0xb0>)
 800889c:	f000 fa6c 	bl	8008d78 <__assert_func>
 80088a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088a4:	6004      	str	r4, [r0, #0]
 80088a6:	60c4      	str	r4, [r0, #12]
 80088a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80088ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088b0:	b94c      	cbnz	r4, 80088c6 <__pow5mult+0x66>
 80088b2:	f240 2171 	movw	r1, #625	; 0x271
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff ff14 	bl	80086e4 <__i2b>
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80088c4:	6003      	str	r3, [r0, #0]
 80088c6:	f04f 0900 	mov.w	r9, #0
 80088ca:	07eb      	lsls	r3, r5, #31
 80088cc:	d50a      	bpl.n	80088e4 <__pow5mult+0x84>
 80088ce:	4639      	mov	r1, r7
 80088d0:	4622      	mov	r2, r4
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7ff ff1c 	bl	8008710 <__multiply>
 80088d8:	4680      	mov	r8, r0
 80088da:	4639      	mov	r1, r7
 80088dc:	4630      	mov	r0, r6
 80088de:	f7ff fe4b 	bl	8008578 <_Bfree>
 80088e2:	4647      	mov	r7, r8
 80088e4:	106d      	asrs	r5, r5, #1
 80088e6:	d00b      	beq.n	8008900 <__pow5mult+0xa0>
 80088e8:	6820      	ldr	r0, [r4, #0]
 80088ea:	b938      	cbnz	r0, 80088fc <__pow5mult+0x9c>
 80088ec:	4622      	mov	r2, r4
 80088ee:	4621      	mov	r1, r4
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff ff0d 	bl	8008710 <__multiply>
 80088f6:	6020      	str	r0, [r4, #0]
 80088f8:	f8c0 9000 	str.w	r9, [r0]
 80088fc:	4604      	mov	r4, r0
 80088fe:	e7e4      	b.n	80088ca <__pow5mult+0x6a>
 8008900:	4638      	mov	r0, r7
 8008902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008906:	bf00      	nop
 8008908:	080095f8 	.word	0x080095f8
 800890c:	0800942d 	.word	0x0800942d
 8008910:	080094ad 	.word	0x080094ad

08008914 <__lshift>:
 8008914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008918:	460c      	mov	r4, r1
 800891a:	4607      	mov	r7, r0
 800891c:	4691      	mov	r9, r2
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	6849      	ldr	r1, [r1, #4]
 8008922:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008926:	68a3      	ldr	r3, [r4, #8]
 8008928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800892c:	f108 0601 	add.w	r6, r8, #1
 8008930:	42b3      	cmp	r3, r6
 8008932:	db0b      	blt.n	800894c <__lshift+0x38>
 8008934:	4638      	mov	r0, r7
 8008936:	f7ff fddf 	bl	80084f8 <_Balloc>
 800893a:	4605      	mov	r5, r0
 800893c:	b948      	cbnz	r0, 8008952 <__lshift+0x3e>
 800893e:	4602      	mov	r2, r0
 8008940:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008944:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <__lshift+0xd0>)
 8008946:	4828      	ldr	r0, [pc, #160]	; (80089e8 <__lshift+0xd4>)
 8008948:	f000 fa16 	bl	8008d78 <__assert_func>
 800894c:	3101      	adds	r1, #1
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	e7ee      	b.n	8008930 <__lshift+0x1c>
 8008952:	2300      	movs	r3, #0
 8008954:	f100 0114 	add.w	r1, r0, #20
 8008958:	f100 0210 	add.w	r2, r0, #16
 800895c:	4618      	mov	r0, r3
 800895e:	4553      	cmp	r3, sl
 8008960:	db33      	blt.n	80089ca <__lshift+0xb6>
 8008962:	6920      	ldr	r0, [r4, #16]
 8008964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008968:	f104 0314 	add.w	r3, r4, #20
 800896c:	f019 091f 	ands.w	r9, r9, #31
 8008970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008974:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008978:	d02b      	beq.n	80089d2 <__lshift+0xbe>
 800897a:	468a      	mov	sl, r1
 800897c:	2200      	movs	r2, #0
 800897e:	f1c9 0e20 	rsb	lr, r9, #32
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	fa00 f009 	lsl.w	r0, r0, r9
 8008988:	4310      	orrs	r0, r2
 800898a:	f84a 0b04 	str.w	r0, [sl], #4
 800898e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008992:	459c      	cmp	ip, r3
 8008994:	fa22 f20e 	lsr.w	r2, r2, lr
 8008998:	d8f3      	bhi.n	8008982 <__lshift+0x6e>
 800899a:	ebac 0304 	sub.w	r3, ip, r4
 800899e:	3b15      	subs	r3, #21
 80089a0:	f023 0303 	bic.w	r3, r3, #3
 80089a4:	3304      	adds	r3, #4
 80089a6:	f104 0015 	add.w	r0, r4, #21
 80089aa:	4584      	cmp	ip, r0
 80089ac:	bf38      	it	cc
 80089ae:	2304      	movcc	r3, #4
 80089b0:	50ca      	str	r2, [r1, r3]
 80089b2:	b10a      	cbz	r2, 80089b8 <__lshift+0xa4>
 80089b4:	f108 0602 	add.w	r6, r8, #2
 80089b8:	3e01      	subs	r6, #1
 80089ba:	4638      	mov	r0, r7
 80089bc:	4621      	mov	r1, r4
 80089be:	612e      	str	r6, [r5, #16]
 80089c0:	f7ff fdda 	bl	8008578 <_Bfree>
 80089c4:	4628      	mov	r0, r5
 80089c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80089ce:	3301      	adds	r3, #1
 80089d0:	e7c5      	b.n	800895e <__lshift+0x4a>
 80089d2:	3904      	subs	r1, #4
 80089d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d8:	459c      	cmp	ip, r3
 80089da:	f841 2f04 	str.w	r2, [r1, #4]!
 80089de:	d8f9      	bhi.n	80089d4 <__lshift+0xc0>
 80089e0:	e7ea      	b.n	80089b8 <__lshift+0xa4>
 80089e2:	bf00      	nop
 80089e4:	0800949c 	.word	0x0800949c
 80089e8:	080094ad 	.word	0x080094ad

080089ec <__mcmp>:
 80089ec:	4603      	mov	r3, r0
 80089ee:	690a      	ldr	r2, [r1, #16]
 80089f0:	6900      	ldr	r0, [r0, #16]
 80089f2:	b530      	push	{r4, r5, lr}
 80089f4:	1a80      	subs	r0, r0, r2
 80089f6:	d10d      	bne.n	8008a14 <__mcmp+0x28>
 80089f8:	3314      	adds	r3, #20
 80089fa:	3114      	adds	r1, #20
 80089fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a0c:	4295      	cmp	r5, r2
 8008a0e:	d002      	beq.n	8008a16 <__mcmp+0x2a>
 8008a10:	d304      	bcc.n	8008a1c <__mcmp+0x30>
 8008a12:	2001      	movs	r0, #1
 8008a14:	bd30      	pop	{r4, r5, pc}
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	d3f4      	bcc.n	8008a04 <__mcmp+0x18>
 8008a1a:	e7fb      	b.n	8008a14 <__mcmp+0x28>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	e7f8      	b.n	8008a14 <__mcmp+0x28>
	...

08008a24 <__mdiff>:
 8008a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	460d      	mov	r5, r1
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4628      	mov	r0, r5
 8008a30:	4614      	mov	r4, r2
 8008a32:	f7ff ffdb 	bl	80089ec <__mcmp>
 8008a36:	1e06      	subs	r6, r0, #0
 8008a38:	d111      	bne.n	8008a5e <__mdiff+0x3a>
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff fd5b 	bl	80084f8 <_Balloc>
 8008a42:	4602      	mov	r2, r0
 8008a44:	b928      	cbnz	r0, 8008a52 <__mdiff+0x2e>
 8008a46:	f240 2137 	movw	r1, #567	; 0x237
 8008a4a:	4b3a      	ldr	r3, [pc, #232]	; (8008b34 <__mdiff+0x110>)
 8008a4c:	483a      	ldr	r0, [pc, #232]	; (8008b38 <__mdiff+0x114>)
 8008a4e:	f000 f993 	bl	8008d78 <__assert_func>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a58:	4610      	mov	r0, r2
 8008a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5e:	bfa4      	itt	ge
 8008a60:	4623      	movge	r3, r4
 8008a62:	462c      	movge	r4, r5
 8008a64:	4638      	mov	r0, r7
 8008a66:	6861      	ldr	r1, [r4, #4]
 8008a68:	bfa6      	itte	ge
 8008a6a:	461d      	movge	r5, r3
 8008a6c:	2600      	movge	r6, #0
 8008a6e:	2601      	movlt	r6, #1
 8008a70:	f7ff fd42 	bl	80084f8 <_Balloc>
 8008a74:	4602      	mov	r2, r0
 8008a76:	b918      	cbnz	r0, 8008a80 <__mdiff+0x5c>
 8008a78:	f240 2145 	movw	r1, #581	; 0x245
 8008a7c:	4b2d      	ldr	r3, [pc, #180]	; (8008b34 <__mdiff+0x110>)
 8008a7e:	e7e5      	b.n	8008a4c <__mdiff+0x28>
 8008a80:	f102 0814 	add.w	r8, r2, #20
 8008a84:	46c2      	mov	sl, r8
 8008a86:	f04f 0c00 	mov.w	ip, #0
 8008a8a:	6927      	ldr	r7, [r4, #16]
 8008a8c:	60c6      	str	r6, [r0, #12]
 8008a8e:	692e      	ldr	r6, [r5, #16]
 8008a90:	f104 0014 	add.w	r0, r4, #20
 8008a94:	f105 0914 	add.w	r9, r5, #20
 8008a98:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008a9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008aa0:	3410      	adds	r4, #16
 8008aa2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008aa6:	f859 3b04 	ldr.w	r3, [r9], #4
 8008aaa:	fa1f f18b 	uxth.w	r1, fp
 8008aae:	4461      	add	r1, ip
 8008ab0:	fa1f fc83 	uxth.w	ip, r3
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	eba1 010c 	sub.w	r1, r1, ip
 8008aba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008abe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ac2:	b289      	uxth	r1, r1
 8008ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008ac8:	454e      	cmp	r6, r9
 8008aca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008ace:	f84a 1b04 	str.w	r1, [sl], #4
 8008ad2:	d8e6      	bhi.n	8008aa2 <__mdiff+0x7e>
 8008ad4:	1b73      	subs	r3, r6, r5
 8008ad6:	3b15      	subs	r3, #21
 8008ad8:	f023 0303 	bic.w	r3, r3, #3
 8008adc:	3515      	adds	r5, #21
 8008ade:	3304      	adds	r3, #4
 8008ae0:	42ae      	cmp	r6, r5
 8008ae2:	bf38      	it	cc
 8008ae4:	2304      	movcc	r3, #4
 8008ae6:	4418      	add	r0, r3
 8008ae8:	4443      	add	r3, r8
 8008aea:	461e      	mov	r6, r3
 8008aec:	4605      	mov	r5, r0
 8008aee:	4575      	cmp	r5, lr
 8008af0:	d30e      	bcc.n	8008b10 <__mdiff+0xec>
 8008af2:	f10e 0103 	add.w	r1, lr, #3
 8008af6:	1a09      	subs	r1, r1, r0
 8008af8:	f021 0103 	bic.w	r1, r1, #3
 8008afc:	3803      	subs	r0, #3
 8008afe:	4586      	cmp	lr, r0
 8008b00:	bf38      	it	cc
 8008b02:	2100      	movcc	r1, #0
 8008b04:	440b      	add	r3, r1
 8008b06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b0a:	b189      	cbz	r1, 8008b30 <__mdiff+0x10c>
 8008b0c:	6117      	str	r7, [r2, #16]
 8008b0e:	e7a3      	b.n	8008a58 <__mdiff+0x34>
 8008b10:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b14:	fa1f f188 	uxth.w	r1, r8
 8008b18:	4461      	add	r1, ip
 8008b1a:	140c      	asrs	r4, r1, #16
 8008b1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b20:	b289      	uxth	r1, r1
 8008b22:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b26:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008b2a:	f846 1b04 	str.w	r1, [r6], #4
 8008b2e:	e7de      	b.n	8008aee <__mdiff+0xca>
 8008b30:	3f01      	subs	r7, #1
 8008b32:	e7e8      	b.n	8008b06 <__mdiff+0xe2>
 8008b34:	0800949c 	.word	0x0800949c
 8008b38:	080094ad 	.word	0x080094ad

08008b3c <__d2b>:
 8008b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b3e:	2101      	movs	r1, #1
 8008b40:	4617      	mov	r7, r2
 8008b42:	461c      	mov	r4, r3
 8008b44:	9e08      	ldr	r6, [sp, #32]
 8008b46:	f7ff fcd7 	bl	80084f8 <_Balloc>
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	b930      	cbnz	r0, 8008b5c <__d2b+0x20>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	f240 310f 	movw	r1, #783	; 0x30f
 8008b54:	4b22      	ldr	r3, [pc, #136]	; (8008be0 <__d2b+0xa4>)
 8008b56:	4823      	ldr	r0, [pc, #140]	; (8008be4 <__d2b+0xa8>)
 8008b58:	f000 f90e 	bl	8008d78 <__assert_func>
 8008b5c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008b60:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008b64:	bb24      	cbnz	r4, 8008bb0 <__d2b+0x74>
 8008b66:	2f00      	cmp	r7, #0
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	d026      	beq.n	8008bba <__d2b+0x7e>
 8008b6c:	4668      	mov	r0, sp
 8008b6e:	9700      	str	r7, [sp, #0]
 8008b70:	f7ff fd8a 	bl	8008688 <__lo0bits>
 8008b74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b78:	b1e8      	cbz	r0, 8008bb6 <__d2b+0x7a>
 8008b7a:	f1c0 0320 	rsb	r3, r0, #32
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	430b      	orrs	r3, r1
 8008b84:	40c2      	lsrs	r2, r0
 8008b86:	616b      	str	r3, [r5, #20]
 8008b88:	9201      	str	r2, [sp, #4]
 8008b8a:	9b01      	ldr	r3, [sp, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	bf14      	ite	ne
 8008b90:	2102      	movne	r1, #2
 8008b92:	2101      	moveq	r1, #1
 8008b94:	61ab      	str	r3, [r5, #24]
 8008b96:	6129      	str	r1, [r5, #16]
 8008b98:	b1bc      	cbz	r4, 8008bca <__d2b+0x8e>
 8008b9a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008b9e:	4404      	add	r4, r0
 8008ba0:	6034      	str	r4, [r6, #0]
 8008ba2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	6018      	str	r0, [r3, #0]
 8008baa:	4628      	mov	r0, r5
 8008bac:	b003      	add	sp, #12
 8008bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bb4:	e7d7      	b.n	8008b66 <__d2b+0x2a>
 8008bb6:	6169      	str	r1, [r5, #20]
 8008bb8:	e7e7      	b.n	8008b8a <__d2b+0x4e>
 8008bba:	a801      	add	r0, sp, #4
 8008bbc:	f7ff fd64 	bl	8008688 <__lo0bits>
 8008bc0:	9b01      	ldr	r3, [sp, #4]
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	616b      	str	r3, [r5, #20]
 8008bc6:	3020      	adds	r0, #32
 8008bc8:	e7e5      	b.n	8008b96 <__d2b+0x5a>
 8008bca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bce:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008bd2:	6030      	str	r0, [r6, #0]
 8008bd4:	6918      	ldr	r0, [r3, #16]
 8008bd6:	f7ff fd37 	bl	8008648 <__hi0bits>
 8008bda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008bde:	e7e2      	b.n	8008ba6 <__d2b+0x6a>
 8008be0:	0800949c 	.word	0x0800949c
 8008be4:	080094ad 	.word	0x080094ad

08008be8 <__sflush_r>:
 8008be8:	898a      	ldrh	r2, [r1, #12]
 8008bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bec:	4605      	mov	r5, r0
 8008bee:	0710      	lsls	r0, r2, #28
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	d457      	bmi.n	8008ca4 <__sflush_r+0xbc>
 8008bf4:	684b      	ldr	r3, [r1, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	dc04      	bgt.n	8008c04 <__sflush_r+0x1c>
 8008bfa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dc01      	bgt.n	8008c04 <__sflush_r+0x1c>
 8008c00:	2000      	movs	r0, #0
 8008c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c06:	2e00      	cmp	r6, #0
 8008c08:	d0fa      	beq.n	8008c00 <__sflush_r+0x18>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c10:	682f      	ldr	r7, [r5, #0]
 8008c12:	6a21      	ldr	r1, [r4, #32]
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	d032      	beq.n	8008c7e <__sflush_r+0x96>
 8008c18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	075a      	lsls	r2, r3, #29
 8008c1e:	d505      	bpl.n	8008c2c <__sflush_r+0x44>
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	1ac0      	subs	r0, r0, r3
 8008c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c26:	b10b      	cbz	r3, 8008c2c <__sflush_r+0x44>
 8008c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c2a:	1ac0      	subs	r0, r0, r3
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4602      	mov	r2, r0
 8008c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c32:	4628      	mov	r0, r5
 8008c34:	6a21      	ldr	r1, [r4, #32]
 8008c36:	47b0      	blx	r6
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	d106      	bne.n	8008c4c <__sflush_r+0x64>
 8008c3e:	6829      	ldr	r1, [r5, #0]
 8008c40:	291d      	cmp	r1, #29
 8008c42:	d82b      	bhi.n	8008c9c <__sflush_r+0xb4>
 8008c44:	4a28      	ldr	r2, [pc, #160]	; (8008ce8 <__sflush_r+0x100>)
 8008c46:	410a      	asrs	r2, r1
 8008c48:	07d6      	lsls	r6, r2, #31
 8008c4a:	d427      	bmi.n	8008c9c <__sflush_r+0xb4>
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	6062      	str	r2, [r4, #4]
 8008c50:	6922      	ldr	r2, [r4, #16]
 8008c52:	04d9      	lsls	r1, r3, #19
 8008c54:	6022      	str	r2, [r4, #0]
 8008c56:	d504      	bpl.n	8008c62 <__sflush_r+0x7a>
 8008c58:	1c42      	adds	r2, r0, #1
 8008c5a:	d101      	bne.n	8008c60 <__sflush_r+0x78>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b903      	cbnz	r3, 8008c62 <__sflush_r+0x7a>
 8008c60:	6560      	str	r0, [r4, #84]	; 0x54
 8008c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c64:	602f      	str	r7, [r5, #0]
 8008c66:	2900      	cmp	r1, #0
 8008c68:	d0ca      	beq.n	8008c00 <__sflush_r+0x18>
 8008c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c6e:	4299      	cmp	r1, r3
 8008c70:	d002      	beq.n	8008c78 <__sflush_r+0x90>
 8008c72:	4628      	mov	r0, r5
 8008c74:	f7ff fb44 	bl	8008300 <_free_r>
 8008c78:	2000      	movs	r0, #0
 8008c7a:	6360      	str	r0, [r4, #52]	; 0x34
 8008c7c:	e7c1      	b.n	8008c02 <__sflush_r+0x1a>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4628      	mov	r0, r5
 8008c82:	47b0      	blx	r6
 8008c84:	1c41      	adds	r1, r0, #1
 8008c86:	d1c8      	bne.n	8008c1a <__sflush_r+0x32>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d0c5      	beq.n	8008c1a <__sflush_r+0x32>
 8008c8e:	2b1d      	cmp	r3, #29
 8008c90:	d001      	beq.n	8008c96 <__sflush_r+0xae>
 8008c92:	2b16      	cmp	r3, #22
 8008c94:	d101      	bne.n	8008c9a <__sflush_r+0xb2>
 8008c96:	602f      	str	r7, [r5, #0]
 8008c98:	e7b2      	b.n	8008c00 <__sflush_r+0x18>
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	e7ae      	b.n	8008c02 <__sflush_r+0x1a>
 8008ca4:	690f      	ldr	r7, [r1, #16]
 8008ca6:	2f00      	cmp	r7, #0
 8008ca8:	d0aa      	beq.n	8008c00 <__sflush_r+0x18>
 8008caa:	0793      	lsls	r3, r2, #30
 8008cac:	bf18      	it	ne
 8008cae:	2300      	movne	r3, #0
 8008cb0:	680e      	ldr	r6, [r1, #0]
 8008cb2:	bf08      	it	eq
 8008cb4:	694b      	ldreq	r3, [r1, #20]
 8008cb6:	1bf6      	subs	r6, r6, r7
 8008cb8:	600f      	str	r7, [r1, #0]
 8008cba:	608b      	str	r3, [r1, #8]
 8008cbc:	2e00      	cmp	r6, #0
 8008cbe:	dd9f      	ble.n	8008c00 <__sflush_r+0x18>
 8008cc0:	4633      	mov	r3, r6
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	6a21      	ldr	r1, [r4, #32]
 8008cc8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008ccc:	47e0      	blx	ip
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	dc06      	bgt.n	8008ce0 <__sflush_r+0xf8>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	e790      	b.n	8008c02 <__sflush_r+0x1a>
 8008ce0:	4407      	add	r7, r0
 8008ce2:	1a36      	subs	r6, r6, r0
 8008ce4:	e7ea      	b.n	8008cbc <__sflush_r+0xd4>
 8008ce6:	bf00      	nop
 8008ce8:	dfbffffe 	.word	0xdfbffffe

08008cec <_fflush_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	690b      	ldr	r3, [r1, #16]
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	b913      	cbnz	r3, 8008cfc <_fflush_r+0x10>
 8008cf6:	2500      	movs	r5, #0
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	b118      	cbz	r0, 8008d06 <_fflush_r+0x1a>
 8008cfe:	6a03      	ldr	r3, [r0, #32]
 8008d00:	b90b      	cbnz	r3, 8008d06 <_fflush_r+0x1a>
 8008d02:	f7fe fb87 	bl	8007414 <__sinit>
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0f3      	beq.n	8008cf6 <_fflush_r+0xa>
 8008d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d10:	07d0      	lsls	r0, r2, #31
 8008d12:	d404      	bmi.n	8008d1e <_fflush_r+0x32>
 8008d14:	0599      	lsls	r1, r3, #22
 8008d16:	d402      	bmi.n	8008d1e <_fflush_r+0x32>
 8008d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1a:	f7fe fc72 	bl	8007602 <__retarget_lock_acquire_recursive>
 8008d1e:	4628      	mov	r0, r5
 8008d20:	4621      	mov	r1, r4
 8008d22:	f7ff ff61 	bl	8008be8 <__sflush_r>
 8008d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d28:	4605      	mov	r5, r0
 8008d2a:	07da      	lsls	r2, r3, #31
 8008d2c:	d4e4      	bmi.n	8008cf8 <_fflush_r+0xc>
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	059b      	lsls	r3, r3, #22
 8008d32:	d4e1      	bmi.n	8008cf8 <_fflush_r+0xc>
 8008d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d36:	f7fe fc65 	bl	8007604 <__retarget_lock_release_recursive>
 8008d3a:	e7dd      	b.n	8008cf8 <_fflush_r+0xc>

08008d3c <_sbrk_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	2300      	movs	r3, #0
 8008d40:	4d05      	ldr	r5, [pc, #20]	; (8008d58 <_sbrk_r+0x1c>)
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	f7fa f8a4 	bl	8002e94 <_sbrk>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_sbrk_r+0x1a>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_sbrk_r+0x1a>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	20000600 	.word	0x20000600

08008d5c <memcpy>:
 8008d5c:	440a      	add	r2, r1
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d64:	d100      	bne.n	8008d68 <memcpy+0xc>
 8008d66:	4770      	bx	lr
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d74:	d1f9      	bne.n	8008d6a <memcpy+0xe>
 8008d76:	bd10      	pop	{r4, pc}

08008d78 <__assert_func>:
 8008d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4b09      	ldr	r3, [pc, #36]	; (8008da4 <__assert_func+0x2c>)
 8008d80:	4605      	mov	r5, r0
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68d8      	ldr	r0, [r3, #12]
 8008d86:	b14c      	cbz	r4, 8008d9c <__assert_func+0x24>
 8008d88:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <__assert_func+0x30>)
 8008d8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d8e:	9100      	str	r1, [sp, #0]
 8008d90:	462b      	mov	r3, r5
 8008d92:	4906      	ldr	r1, [pc, #24]	; (8008dac <__assert_func+0x34>)
 8008d94:	f000 f842 	bl	8008e1c <fiprintf>
 8008d98:	f000 f852 	bl	8008e40 <abort>
 8008d9c:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <__assert_func+0x38>)
 8008d9e:	461c      	mov	r4, r3
 8008da0:	e7f3      	b.n	8008d8a <__assert_func+0x12>
 8008da2:	bf00      	nop
 8008da4:	20000064 	.word	0x20000064
 8008da8:	0800960e 	.word	0x0800960e
 8008dac:	0800961b 	.word	0x0800961b
 8008db0:	08009649 	.word	0x08009649

08008db4 <_calloc_r>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	fba1 5402 	umull	r5, r4, r1, r2
 8008dba:	b934      	cbnz	r4, 8008dca <_calloc_r+0x16>
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7ff fb0f 	bl	80083e0 <_malloc_r>
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	b928      	cbnz	r0, 8008dd2 <_calloc_r+0x1e>
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	220c      	movs	r2, #12
 8008dcc:	2600      	movs	r6, #0
 8008dce:	6002      	str	r2, [r0, #0]
 8008dd0:	e7f9      	b.n	8008dc6 <_calloc_r+0x12>
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7fe fb96 	bl	8007506 <memset>
 8008dda:	e7f4      	b.n	8008dc6 <_calloc_r+0x12>

08008ddc <__ascii_mbtowc>:
 8008ddc:	b082      	sub	sp, #8
 8008dde:	b901      	cbnz	r1, 8008de2 <__ascii_mbtowc+0x6>
 8008de0:	a901      	add	r1, sp, #4
 8008de2:	b142      	cbz	r2, 8008df6 <__ascii_mbtowc+0x1a>
 8008de4:	b14b      	cbz	r3, 8008dfa <__ascii_mbtowc+0x1e>
 8008de6:	7813      	ldrb	r3, [r2, #0]
 8008de8:	600b      	str	r3, [r1, #0]
 8008dea:	7812      	ldrb	r2, [r2, #0]
 8008dec:	1e10      	subs	r0, r2, #0
 8008dee:	bf18      	it	ne
 8008df0:	2001      	movne	r0, #1
 8008df2:	b002      	add	sp, #8
 8008df4:	4770      	bx	lr
 8008df6:	4610      	mov	r0, r2
 8008df8:	e7fb      	b.n	8008df2 <__ascii_mbtowc+0x16>
 8008dfa:	f06f 0001 	mvn.w	r0, #1
 8008dfe:	e7f8      	b.n	8008df2 <__ascii_mbtowc+0x16>

08008e00 <__ascii_wctomb>:
 8008e00:	4603      	mov	r3, r0
 8008e02:	4608      	mov	r0, r1
 8008e04:	b141      	cbz	r1, 8008e18 <__ascii_wctomb+0x18>
 8008e06:	2aff      	cmp	r2, #255	; 0xff
 8008e08:	d904      	bls.n	8008e14 <__ascii_wctomb+0x14>
 8008e0a:	228a      	movs	r2, #138	; 0x8a
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	4770      	bx	lr
 8008e14:	2001      	movs	r0, #1
 8008e16:	700a      	strb	r2, [r1, #0]
 8008e18:	4770      	bx	lr
	...

08008e1c <fiprintf>:
 8008e1c:	b40e      	push	{r1, r2, r3}
 8008e1e:	b503      	push	{r0, r1, lr}
 8008e20:	4601      	mov	r1, r0
 8008e22:	ab03      	add	r3, sp, #12
 8008e24:	4805      	ldr	r0, [pc, #20]	; (8008e3c <fiprintf+0x20>)
 8008e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2a:	6800      	ldr	r0, [r0, #0]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	f000 f835 	bl	8008e9c <_vfiprintf_r>
 8008e32:	b002      	add	sp, #8
 8008e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e38:	b003      	add	sp, #12
 8008e3a:	4770      	bx	lr
 8008e3c:	20000064 	.word	0x20000064

08008e40 <abort>:
 8008e40:	2006      	movs	r0, #6
 8008e42:	b508      	push	{r3, lr}
 8008e44:	f000 fa02 	bl	800924c <raise>
 8008e48:	2001      	movs	r0, #1
 8008e4a:	f7f9 ffb0 	bl	8002dae <_exit>

08008e4e <__sfputc_r>:
 8008e4e:	6893      	ldr	r3, [r2, #8]
 8008e50:	b410      	push	{r4}
 8008e52:	3b01      	subs	r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	6093      	str	r3, [r2, #8]
 8008e58:	da07      	bge.n	8008e6a <__sfputc_r+0x1c>
 8008e5a:	6994      	ldr	r4, [r2, #24]
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	db01      	blt.n	8008e64 <__sfputc_r+0x16>
 8008e60:	290a      	cmp	r1, #10
 8008e62:	d102      	bne.n	8008e6a <__sfputc_r+0x1c>
 8008e64:	bc10      	pop	{r4}
 8008e66:	f000 b933 	b.w	80090d0 <__swbuf_r>
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	1c58      	adds	r0, r3, #1
 8008e6e:	6010      	str	r0, [r2, #0]
 8008e70:	7019      	strb	r1, [r3, #0]
 8008e72:	4608      	mov	r0, r1
 8008e74:	bc10      	pop	{r4}
 8008e76:	4770      	bx	lr

08008e78 <__sfputs_r>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	4614      	mov	r4, r2
 8008e80:	18d5      	adds	r5, r2, r3
 8008e82:	42ac      	cmp	r4, r5
 8008e84:	d101      	bne.n	8008e8a <__sfputs_r+0x12>
 8008e86:	2000      	movs	r0, #0
 8008e88:	e007      	b.n	8008e9a <__sfputs_r+0x22>
 8008e8a:	463a      	mov	r2, r7
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e92:	f7ff ffdc 	bl	8008e4e <__sfputc_r>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	d1f3      	bne.n	8008e82 <__sfputs_r+0xa>
 8008e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e9c <_vfiprintf_r>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	4614      	mov	r4, r2
 8008ea4:	4698      	mov	r8, r3
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	b09d      	sub	sp, #116	; 0x74
 8008eaa:	b118      	cbz	r0, 8008eb4 <_vfiprintf_r+0x18>
 8008eac:	6a03      	ldr	r3, [r0, #32]
 8008eae:	b90b      	cbnz	r3, 8008eb4 <_vfiprintf_r+0x18>
 8008eb0:	f7fe fab0 	bl	8007414 <__sinit>
 8008eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_vfiprintf_r+0x2a>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_vfiprintf_r+0x2a>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ec2:	f7fe fb9e 	bl	8007602 <__retarget_lock_acquire_recursive>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	071b      	lsls	r3, r3, #28
 8008eca:	d501      	bpl.n	8008ed0 <_vfiprintf_r+0x34>
 8008ecc:	692b      	ldr	r3, [r5, #16]
 8008ece:	b99b      	cbnz	r3, 8008ef8 <_vfiprintf_r+0x5c>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 f93a 	bl	800914c <__swsetup_r>
 8008ed8:	b170      	cbz	r0, 8008ef8 <_vfiprintf_r+0x5c>
 8008eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008edc:	07dc      	lsls	r4, r3, #31
 8008ede:	d504      	bpl.n	8008eea <_vfiprintf_r+0x4e>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	b01d      	add	sp, #116	; 0x74
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	89ab      	ldrh	r3, [r5, #12]
 8008eec:	0598      	lsls	r0, r3, #22
 8008eee:	d4f7      	bmi.n	8008ee0 <_vfiprintf_r+0x44>
 8008ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ef2:	f7fe fb87 	bl	8007604 <__retarget_lock_release_recursive>
 8008ef6:	e7f3      	b.n	8008ee0 <_vfiprintf_r+0x44>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9309      	str	r3, [sp, #36]	; 0x24
 8008efc:	2320      	movs	r3, #32
 8008efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f02:	2330      	movs	r3, #48	; 0x30
 8008f04:	f04f 0901 	mov.w	r9, #1
 8008f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80090bc <_vfiprintf_r+0x220>
 8008f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f14:	4623      	mov	r3, r4
 8008f16:	469a      	mov	sl, r3
 8008f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f1c:	b10a      	cbz	r2, 8008f22 <_vfiprintf_r+0x86>
 8008f1e:	2a25      	cmp	r2, #37	; 0x25
 8008f20:	d1f9      	bne.n	8008f16 <_vfiprintf_r+0x7a>
 8008f22:	ebba 0b04 	subs.w	fp, sl, r4
 8008f26:	d00b      	beq.n	8008f40 <_vfiprintf_r+0xa4>
 8008f28:	465b      	mov	r3, fp
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f7ff ffa2 	bl	8008e78 <__sfputs_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	f000 80a9 	beq.w	800908c <_vfiprintf_r+0x1f0>
 8008f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f3c:	445a      	add	r2, fp
 8008f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f40:	f89a 3000 	ldrb.w	r3, [sl]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80a1 	beq.w	800908c <_vfiprintf_r+0x1f0>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f54:	f10a 0a01 	add.w	sl, sl, #1
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f60:	931a      	str	r3, [sp, #104]	; 0x68
 8008f62:	4654      	mov	r4, sl
 8008f64:	2205      	movs	r2, #5
 8008f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6a:	4854      	ldr	r0, [pc, #336]	; (80090bc <_vfiprintf_r+0x220>)
 8008f6c:	f7fe fb4b 	bl	8007606 <memchr>
 8008f70:	9a04      	ldr	r2, [sp, #16]
 8008f72:	b9d8      	cbnz	r0, 8008fac <_vfiprintf_r+0x110>
 8008f74:	06d1      	lsls	r1, r2, #27
 8008f76:	bf44      	itt	mi
 8008f78:	2320      	movmi	r3, #32
 8008f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f7e:	0713      	lsls	r3, r2, #28
 8008f80:	bf44      	itt	mi
 8008f82:	232b      	movmi	r3, #43	; 0x2b
 8008f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f88:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8e:	d015      	beq.n	8008fbc <_vfiprintf_r+0x120>
 8008f90:	4654      	mov	r4, sl
 8008f92:	2000      	movs	r0, #0
 8008f94:	f04f 0c0a 	mov.w	ip, #10
 8008f98:	9a07      	ldr	r2, [sp, #28]
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa0:	3b30      	subs	r3, #48	; 0x30
 8008fa2:	2b09      	cmp	r3, #9
 8008fa4:	d94d      	bls.n	8009042 <_vfiprintf_r+0x1a6>
 8008fa6:	b1b0      	cbz	r0, 8008fd6 <_vfiprintf_r+0x13a>
 8008fa8:	9207      	str	r2, [sp, #28]
 8008faa:	e014      	b.n	8008fd6 <_vfiprintf_r+0x13a>
 8008fac:	eba0 0308 	sub.w	r3, r0, r8
 8008fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	46a2      	mov	sl, r4
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	e7d2      	b.n	8008f62 <_vfiprintf_r+0xc6>
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	1d19      	adds	r1, r3, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	9103      	str	r1, [sp, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfbb      	ittet	lt
 8008fc8:	425b      	neglt	r3, r3
 8008fca:	f042 0202 	orrlt.w	r2, r2, #2
 8008fce:	9307      	strge	r3, [sp, #28]
 8008fd0:	9307      	strlt	r3, [sp, #28]
 8008fd2:	bfb8      	it	lt
 8008fd4:	9204      	strlt	r2, [sp, #16]
 8008fd6:	7823      	ldrb	r3, [r4, #0]
 8008fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8008fda:	d10c      	bne.n	8008ff6 <_vfiprintf_r+0x15a>
 8008fdc:	7863      	ldrb	r3, [r4, #1]
 8008fde:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe0:	d134      	bne.n	800904c <_vfiprintf_r+0x1b0>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	3402      	adds	r4, #2
 8008fe6:	1d1a      	adds	r2, r3, #4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	9203      	str	r2, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfb8      	it	lt
 8008ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090c0 <_vfiprintf_r+0x224>
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	4650      	mov	r0, sl
 8008ffe:	7821      	ldrb	r1, [r4, #0]
 8009000:	f7fe fb01 	bl	8007606 <memchr>
 8009004:	b138      	cbz	r0, 8009016 <_vfiprintf_r+0x17a>
 8009006:	2240      	movs	r2, #64	; 0x40
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	eba0 000a 	sub.w	r0, r0, sl
 800900e:	4082      	lsls	r2, r0
 8009010:	4313      	orrs	r3, r2
 8009012:	3401      	adds	r4, #1
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901a:	2206      	movs	r2, #6
 800901c:	4829      	ldr	r0, [pc, #164]	; (80090c4 <_vfiprintf_r+0x228>)
 800901e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009022:	f7fe faf0 	bl	8007606 <memchr>
 8009026:	2800      	cmp	r0, #0
 8009028:	d03f      	beq.n	80090aa <_vfiprintf_r+0x20e>
 800902a:	4b27      	ldr	r3, [pc, #156]	; (80090c8 <_vfiprintf_r+0x22c>)
 800902c:	bb1b      	cbnz	r3, 8009076 <_vfiprintf_r+0x1da>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	3307      	adds	r3, #7
 8009032:	f023 0307 	bic.w	r3, r3, #7
 8009036:	3308      	adds	r3, #8
 8009038:	9303      	str	r3, [sp, #12]
 800903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903c:	443b      	add	r3, r7
 800903e:	9309      	str	r3, [sp, #36]	; 0x24
 8009040:	e768      	b.n	8008f14 <_vfiprintf_r+0x78>
 8009042:	460c      	mov	r4, r1
 8009044:	2001      	movs	r0, #1
 8009046:	fb0c 3202 	mla	r2, ip, r2, r3
 800904a:	e7a6      	b.n	8008f9a <_vfiprintf_r+0xfe>
 800904c:	2300      	movs	r3, #0
 800904e:	f04f 0c0a 	mov.w	ip, #10
 8009052:	4619      	mov	r1, r3
 8009054:	3401      	adds	r4, #1
 8009056:	9305      	str	r3, [sp, #20]
 8009058:	4620      	mov	r0, r4
 800905a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800905e:	3a30      	subs	r2, #48	; 0x30
 8009060:	2a09      	cmp	r2, #9
 8009062:	d903      	bls.n	800906c <_vfiprintf_r+0x1d0>
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0c6      	beq.n	8008ff6 <_vfiprintf_r+0x15a>
 8009068:	9105      	str	r1, [sp, #20]
 800906a:	e7c4      	b.n	8008ff6 <_vfiprintf_r+0x15a>
 800906c:	4604      	mov	r4, r0
 800906e:	2301      	movs	r3, #1
 8009070:	fb0c 2101 	mla	r1, ip, r1, r2
 8009074:	e7f0      	b.n	8009058 <_vfiprintf_r+0x1bc>
 8009076:	ab03      	add	r3, sp, #12
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	462a      	mov	r2, r5
 800907c:	4630      	mov	r0, r6
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <_vfiprintf_r+0x230>)
 8009080:	a904      	add	r1, sp, #16
 8009082:	f7fd fd79 	bl	8006b78 <_printf_float>
 8009086:	4607      	mov	r7, r0
 8009088:	1c78      	adds	r0, r7, #1
 800908a:	d1d6      	bne.n	800903a <_vfiprintf_r+0x19e>
 800908c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908e:	07d9      	lsls	r1, r3, #31
 8009090:	d405      	bmi.n	800909e <_vfiprintf_r+0x202>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	059a      	lsls	r2, r3, #22
 8009096:	d402      	bmi.n	800909e <_vfiprintf_r+0x202>
 8009098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800909a:	f7fe fab3 	bl	8007604 <__retarget_lock_release_recursive>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	065b      	lsls	r3, r3, #25
 80090a2:	f53f af1d 	bmi.w	8008ee0 <_vfiprintf_r+0x44>
 80090a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090a8:	e71c      	b.n	8008ee4 <_vfiprintf_r+0x48>
 80090aa:	ab03      	add	r3, sp, #12
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	462a      	mov	r2, r5
 80090b0:	4630      	mov	r0, r6
 80090b2:	4b06      	ldr	r3, [pc, #24]	; (80090cc <_vfiprintf_r+0x230>)
 80090b4:	a904      	add	r1, sp, #16
 80090b6:	f7fd ffff 	bl	80070b8 <_printf_i>
 80090ba:	e7e4      	b.n	8009086 <_vfiprintf_r+0x1ea>
 80090bc:	0800974b 	.word	0x0800974b
 80090c0:	08009751 	.word	0x08009751
 80090c4:	08009755 	.word	0x08009755
 80090c8:	08006b79 	.word	0x08006b79
 80090cc:	08008e79 	.word	0x08008e79

080090d0 <__swbuf_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	4605      	mov	r5, r0
 80090d8:	b118      	cbz	r0, 80090e2 <__swbuf_r+0x12>
 80090da:	6a03      	ldr	r3, [r0, #32]
 80090dc:	b90b      	cbnz	r3, 80090e2 <__swbuf_r+0x12>
 80090de:	f7fe f999 	bl	8007414 <__sinit>
 80090e2:	69a3      	ldr	r3, [r4, #24]
 80090e4:	60a3      	str	r3, [r4, #8]
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	071a      	lsls	r2, r3, #28
 80090ea:	d525      	bpl.n	8009138 <__swbuf_r+0x68>
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	b31b      	cbz	r3, 8009138 <__swbuf_r+0x68>
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	6922      	ldr	r2, [r4, #16]
 80090f4:	b2f6      	uxtb	r6, r6
 80090f6:	1a98      	subs	r0, r3, r2
 80090f8:	6963      	ldr	r3, [r4, #20]
 80090fa:	4637      	mov	r7, r6
 80090fc:	4283      	cmp	r3, r0
 80090fe:	dc04      	bgt.n	800910a <__swbuf_r+0x3a>
 8009100:	4621      	mov	r1, r4
 8009102:	4628      	mov	r0, r5
 8009104:	f7ff fdf2 	bl	8008cec <_fflush_r>
 8009108:	b9e0      	cbnz	r0, 8009144 <__swbuf_r+0x74>
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	3b01      	subs	r3, #1
 800910e:	60a3      	str	r3, [r4, #8]
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	701e      	strb	r6, [r3, #0]
 8009118:	6962      	ldr	r2, [r4, #20]
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	429a      	cmp	r2, r3
 800911e:	d004      	beq.n	800912a <__swbuf_r+0x5a>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	07db      	lsls	r3, r3, #31
 8009124:	d506      	bpl.n	8009134 <__swbuf_r+0x64>
 8009126:	2e0a      	cmp	r6, #10
 8009128:	d104      	bne.n	8009134 <__swbuf_r+0x64>
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f7ff fddd 	bl	8008cec <_fflush_r>
 8009132:	b938      	cbnz	r0, 8009144 <__swbuf_r+0x74>
 8009134:	4638      	mov	r0, r7
 8009136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009138:	4621      	mov	r1, r4
 800913a:	4628      	mov	r0, r5
 800913c:	f000 f806 	bl	800914c <__swsetup_r>
 8009140:	2800      	cmp	r0, #0
 8009142:	d0d5      	beq.n	80090f0 <__swbuf_r+0x20>
 8009144:	f04f 37ff 	mov.w	r7, #4294967295
 8009148:	e7f4      	b.n	8009134 <__swbuf_r+0x64>
	...

0800914c <__swsetup_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4b2a      	ldr	r3, [pc, #168]	; (80091f8 <__swsetup_r+0xac>)
 8009150:	4605      	mov	r5, r0
 8009152:	6818      	ldr	r0, [r3, #0]
 8009154:	460c      	mov	r4, r1
 8009156:	b118      	cbz	r0, 8009160 <__swsetup_r+0x14>
 8009158:	6a03      	ldr	r3, [r0, #32]
 800915a:	b90b      	cbnz	r3, 8009160 <__swsetup_r+0x14>
 800915c:	f7fe f95a 	bl	8007414 <__sinit>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009166:	0718      	lsls	r0, r3, #28
 8009168:	d422      	bmi.n	80091b0 <__swsetup_r+0x64>
 800916a:	06d9      	lsls	r1, r3, #27
 800916c:	d407      	bmi.n	800917e <__swsetup_r+0x32>
 800916e:	2309      	movs	r3, #9
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	e034      	b.n	80091e8 <__swsetup_r+0x9c>
 800917e:	0758      	lsls	r0, r3, #29
 8009180:	d512      	bpl.n	80091a8 <__swsetup_r+0x5c>
 8009182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009184:	b141      	cbz	r1, 8009198 <__swsetup_r+0x4c>
 8009186:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800918a:	4299      	cmp	r1, r3
 800918c:	d002      	beq.n	8009194 <__swsetup_r+0x48>
 800918e:	4628      	mov	r0, r5
 8009190:	f7ff f8b6 	bl	8008300 <_free_r>
 8009194:	2300      	movs	r3, #0
 8009196:	6363      	str	r3, [r4, #52]	; 0x34
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800919e:	81a3      	strh	r3, [r4, #12]
 80091a0:	2300      	movs	r3, #0
 80091a2:	6063      	str	r3, [r4, #4]
 80091a4:	6923      	ldr	r3, [r4, #16]
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	f043 0308 	orr.w	r3, r3, #8
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	b94b      	cbnz	r3, 80091c8 <__swsetup_r+0x7c>
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091be:	d003      	beq.n	80091c8 <__swsetup_r+0x7c>
 80091c0:	4621      	mov	r1, r4
 80091c2:	4628      	mov	r0, r5
 80091c4:	f000 f883 	bl	80092ce <__smakebuf_r>
 80091c8:	89a0      	ldrh	r0, [r4, #12]
 80091ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ce:	f010 0301 	ands.w	r3, r0, #1
 80091d2:	d00a      	beq.n	80091ea <__swsetup_r+0x9e>
 80091d4:	2300      	movs	r3, #0
 80091d6:	60a3      	str	r3, [r4, #8]
 80091d8:	6963      	ldr	r3, [r4, #20]
 80091da:	425b      	negs	r3, r3
 80091dc:	61a3      	str	r3, [r4, #24]
 80091de:	6923      	ldr	r3, [r4, #16]
 80091e0:	b943      	cbnz	r3, 80091f4 <__swsetup_r+0xa8>
 80091e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091e6:	d1c4      	bne.n	8009172 <__swsetup_r+0x26>
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	0781      	lsls	r1, r0, #30
 80091ec:	bf58      	it	pl
 80091ee:	6963      	ldrpl	r3, [r4, #20]
 80091f0:	60a3      	str	r3, [r4, #8]
 80091f2:	e7f4      	b.n	80091de <__swsetup_r+0x92>
 80091f4:	2000      	movs	r0, #0
 80091f6:	e7f7      	b.n	80091e8 <__swsetup_r+0x9c>
 80091f8:	20000064 	.word	0x20000064

080091fc <_raise_r>:
 80091fc:	291f      	cmp	r1, #31
 80091fe:	b538      	push	{r3, r4, r5, lr}
 8009200:	4604      	mov	r4, r0
 8009202:	460d      	mov	r5, r1
 8009204:	d904      	bls.n	8009210 <_raise_r+0x14>
 8009206:	2316      	movs	r3, #22
 8009208:	6003      	str	r3, [r0, #0]
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009212:	b112      	cbz	r2, 800921a <_raise_r+0x1e>
 8009214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009218:	b94b      	cbnz	r3, 800922e <_raise_r+0x32>
 800921a:	4620      	mov	r0, r4
 800921c:	f000 f830 	bl	8009280 <_getpid_r>
 8009220:	462a      	mov	r2, r5
 8009222:	4601      	mov	r1, r0
 8009224:	4620      	mov	r0, r4
 8009226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800922a:	f000 b817 	b.w	800925c <_kill_r>
 800922e:	2b01      	cmp	r3, #1
 8009230:	d00a      	beq.n	8009248 <_raise_r+0x4c>
 8009232:	1c59      	adds	r1, r3, #1
 8009234:	d103      	bne.n	800923e <_raise_r+0x42>
 8009236:	2316      	movs	r3, #22
 8009238:	6003      	str	r3, [r0, #0]
 800923a:	2001      	movs	r0, #1
 800923c:	e7e7      	b.n	800920e <_raise_r+0x12>
 800923e:	2400      	movs	r4, #0
 8009240:	4628      	mov	r0, r5
 8009242:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009246:	4798      	blx	r3
 8009248:	2000      	movs	r0, #0
 800924a:	e7e0      	b.n	800920e <_raise_r+0x12>

0800924c <raise>:
 800924c:	4b02      	ldr	r3, [pc, #8]	; (8009258 <raise+0xc>)
 800924e:	4601      	mov	r1, r0
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	f7ff bfd3 	b.w	80091fc <_raise_r>
 8009256:	bf00      	nop
 8009258:	20000064 	.word	0x20000064

0800925c <_kill_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	2300      	movs	r3, #0
 8009260:	4d06      	ldr	r5, [pc, #24]	; (800927c <_kill_r+0x20>)
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	f7f9 fd90 	bl	8002d8e <_kill>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d102      	bne.n	8009278 <_kill_r+0x1c>
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	b103      	cbz	r3, 8009278 <_kill_r+0x1c>
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	bf00      	nop
 800927c:	20000600 	.word	0x20000600

08009280 <_getpid_r>:
 8009280:	f7f9 bd7e 	b.w	8002d80 <_getpid>

08009284 <__swhatbuf_r>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	460c      	mov	r4, r1
 8009288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928c:	4615      	mov	r5, r2
 800928e:	2900      	cmp	r1, #0
 8009290:	461e      	mov	r6, r3
 8009292:	b096      	sub	sp, #88	; 0x58
 8009294:	da0c      	bge.n	80092b0 <__swhatbuf_r+0x2c>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	2100      	movs	r1, #0
 800929a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800929e:	bf0c      	ite	eq
 80092a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092a4:	2340      	movne	r3, #64	; 0x40
 80092a6:	2000      	movs	r0, #0
 80092a8:	6031      	str	r1, [r6, #0]
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	b016      	add	sp, #88	; 0x58
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
 80092b0:	466a      	mov	r2, sp
 80092b2:	f000 f849 	bl	8009348 <_fstat_r>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	dbed      	blt.n	8009296 <__swhatbuf_r+0x12>
 80092ba:	9901      	ldr	r1, [sp, #4]
 80092bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092c4:	4259      	negs	r1, r3
 80092c6:	4159      	adcs	r1, r3
 80092c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092cc:	e7eb      	b.n	80092a6 <__swhatbuf_r+0x22>

080092ce <__smakebuf_r>:
 80092ce:	898b      	ldrh	r3, [r1, #12]
 80092d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092d2:	079d      	lsls	r5, r3, #30
 80092d4:	4606      	mov	r6, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	d507      	bpl.n	80092ea <__smakebuf_r+0x1c>
 80092da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	6123      	str	r3, [r4, #16]
 80092e2:	2301      	movs	r3, #1
 80092e4:	6163      	str	r3, [r4, #20]
 80092e6:	b002      	add	sp, #8
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
 80092ea:	466a      	mov	r2, sp
 80092ec:	ab01      	add	r3, sp, #4
 80092ee:	f7ff ffc9 	bl	8009284 <__swhatbuf_r>
 80092f2:	9900      	ldr	r1, [sp, #0]
 80092f4:	4605      	mov	r5, r0
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7ff f872 	bl	80083e0 <_malloc_r>
 80092fc:	b948      	cbnz	r0, 8009312 <__smakebuf_r+0x44>
 80092fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009302:	059a      	lsls	r2, r3, #22
 8009304:	d4ef      	bmi.n	80092e6 <__smakebuf_r+0x18>
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	f043 0302 	orr.w	r3, r3, #2
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	e7e3      	b.n	80092da <__smakebuf_r+0xc>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	6020      	str	r0, [r4, #0]
 8009316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	9b00      	ldr	r3, [sp, #0]
 800931e:	6120      	str	r0, [r4, #16]
 8009320:	6163      	str	r3, [r4, #20]
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	b15b      	cbz	r3, 800933e <__smakebuf_r+0x70>
 8009326:	4630      	mov	r0, r6
 8009328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800932c:	f000 f81e 	bl	800936c <_isatty_r>
 8009330:	b128      	cbz	r0, 800933e <__smakebuf_r+0x70>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	f043 0301 	orr.w	r3, r3, #1
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	431d      	orrs	r5, r3
 8009342:	81a5      	strh	r5, [r4, #12]
 8009344:	e7cf      	b.n	80092e6 <__smakebuf_r+0x18>
	...

08009348 <_fstat_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	2300      	movs	r3, #0
 800934c:	4d06      	ldr	r5, [pc, #24]	; (8009368 <_fstat_r+0x20>)
 800934e:	4604      	mov	r4, r0
 8009350:	4608      	mov	r0, r1
 8009352:	4611      	mov	r1, r2
 8009354:	602b      	str	r3, [r5, #0]
 8009356:	f7f9 fd78 	bl	8002e4a <_fstat>
 800935a:	1c43      	adds	r3, r0, #1
 800935c:	d102      	bne.n	8009364 <_fstat_r+0x1c>
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	b103      	cbz	r3, 8009364 <_fstat_r+0x1c>
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	bd38      	pop	{r3, r4, r5, pc}
 8009366:	bf00      	nop
 8009368:	20000600 	.word	0x20000600

0800936c <_isatty_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	2300      	movs	r3, #0
 8009370:	4d05      	ldr	r5, [pc, #20]	; (8009388 <_isatty_r+0x1c>)
 8009372:	4604      	mov	r4, r0
 8009374:	4608      	mov	r0, r1
 8009376:	602b      	str	r3, [r5, #0]
 8009378:	f7f9 fd76 	bl	8002e68 <_isatty>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_isatty_r+0x1a>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b103      	cbz	r3, 8009386 <_isatty_r+0x1a>
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	20000600 	.word	0x20000600

0800938c <_init>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr

08009398 <_fini>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr
