
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005100  08005100  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005108  08005108  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000000c  0800511c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  0800511c  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001054a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b32  00000000  00000000  000305c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  000330f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d60  00000000  00000000  00034240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200fd  00000000  00000000  00034fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016199  00000000  00000000  0005509d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd560  00000000  00000000  0006b236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004828  00000000  00000000  00128798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0012cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080050a4 	.word	0x080050a4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080050a4 	.word	0x080050a4

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295
 8000450:	f04f 30ff 	movne.w	r0, #4294967295
 8000454:	f000 b972 	b.w	800073c <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9e08      	ldr	r6, [sp, #32]
 8000476:	460d      	mov	r5, r1
 8000478:	4604      	mov	r4, r0
 800047a:	468e      	mov	lr, r1
 800047c:	2b00      	cmp	r3, #0
 800047e:	d14c      	bne.n	800051a <__udivmoddi4+0xaa>
 8000480:	428a      	cmp	r2, r1
 8000482:	4694      	mov	ip, r2
 8000484:	d967      	bls.n	8000556 <__udivmoddi4+0xe6>
 8000486:	fab2 f382 	clz	r3, r2
 800048a:	b153      	cbz	r3, 80004a2 <__udivmoddi4+0x32>
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	f1c3 0220 	rsb	r2, r3, #32
 8000494:	fa01 fe03 	lsl.w	lr, r1, r3
 8000498:	fa20 f202 	lsr.w	r2, r0, r2
 800049c:	ea42 0e0e 	orr.w	lr, r2, lr
 80004a0:	409c      	lsls	r4, r3
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fbbe f1f7 	udiv	r1, lr, r7
 80004aa:	fa1f f58c 	uxth.w	r5, ip
 80004ae:	fb07 ee11 	mls	lr, r7, r1, lr
 80004b2:	fb01 f005 	mul.w	r0, r1, r5
 80004b6:	0c22      	lsrs	r2, r4, #16
 80004b8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80004bc:	4290      	cmp	r0, r2
 80004be:	d90a      	bls.n	80004d6 <__udivmoddi4+0x66>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f101 3eff 	add.w	lr, r1, #4294967295
 80004c8:	f080 8119 	bcs.w	80006fe <__udivmoddi4+0x28e>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f240 8116 	bls.w	80006fe <__udivmoddi4+0x28e>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4462      	add	r2, ip
 80004d6:	1a12      	subs	r2, r2, r0
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	fb00 f505 	mul.w	r5, r0, r5
 80004e4:	b2a4      	uxth	r4, r4
 80004e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004ea:	42a5      	cmp	r5, r4
 80004ec:	d90a      	bls.n	8000504 <__udivmoddi4+0x94>
 80004ee:	eb1c 0404 	adds.w	r4, ip, r4
 80004f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f6:	f080 8104 	bcs.w	8000702 <__udivmoddi4+0x292>
 80004fa:	42a5      	cmp	r5, r4
 80004fc:	f240 8101 	bls.w	8000702 <__udivmoddi4+0x292>
 8000500:	4464      	add	r4, ip
 8000502:	3802      	subs	r0, #2
 8000504:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000508:	2100      	movs	r1, #0
 800050a:	1b64      	subs	r4, r4, r5
 800050c:	b11e      	cbz	r6, 8000516 <__udivmoddi4+0xa6>
 800050e:	40dc      	lsrs	r4, r3
 8000510:	2300      	movs	r3, #0
 8000512:	e9c6 4300 	strd	r4, r3, [r6]
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	428b      	cmp	r3, r1
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0xc0>
 800051e:	2e00      	cmp	r6, #0
 8000520:	f000 80ea 	beq.w	80006f8 <__udivmoddi4+0x288>
 8000524:	2100      	movs	r1, #0
 8000526:	e9c6 0500 	strd	r0, r5, [r6]
 800052a:	4608      	mov	r0, r1
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	fab3 f183 	clz	r1, r3
 8000534:	2900      	cmp	r1, #0
 8000536:	d148      	bne.n	80005ca <__udivmoddi4+0x15a>
 8000538:	42ab      	cmp	r3, r5
 800053a:	d302      	bcc.n	8000542 <__udivmoddi4+0xd2>
 800053c:	4282      	cmp	r2, r0
 800053e:	f200 80f8 	bhi.w	8000732 <__udivmoddi4+0x2c2>
 8000542:	1a84      	subs	r4, r0, r2
 8000544:	eb65 0203 	sbc.w	r2, r5, r3
 8000548:	2001      	movs	r0, #1
 800054a:	4696      	mov	lr, r2
 800054c:	2e00      	cmp	r6, #0
 800054e:	d0e2      	beq.n	8000516 <__udivmoddi4+0xa6>
 8000550:	e9c6 4e00 	strd	r4, lr, [r6]
 8000554:	e7df      	b.n	8000516 <__udivmoddi4+0xa6>
 8000556:	b902      	cbnz	r2, 800055a <__udivmoddi4+0xea>
 8000558:	deff      	udf	#255	; 0xff
 800055a:	fab2 f382 	clz	r3, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	f040 808e 	bne.w	8000680 <__udivmoddi4+0x210>
 8000564:	1a88      	subs	r0, r1, r2
 8000566:	2101      	movs	r1, #1
 8000568:	0c17      	lsrs	r7, r2, #16
 800056a:	fa1f fe82 	uxth.w	lr, r2
 800056e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000572:	fb07 0015 	mls	r0, r7, r5, r0
 8000576:	0c22      	lsrs	r2, r4, #16
 8000578:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800057c:	fb0e f005 	mul.w	r0, lr, r5
 8000580:	4290      	cmp	r0, r2
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x126>
 8000584:	eb1c 0202 	adds.w	r2, ip, r2
 8000588:	f105 38ff 	add.w	r8, r5, #4294967295
 800058c:	d202      	bcs.n	8000594 <__udivmoddi4+0x124>
 800058e:	4290      	cmp	r0, r2
 8000590:	f200 80cc 	bhi.w	800072c <__udivmoddi4+0x2bc>
 8000594:	4645      	mov	r5, r8
 8000596:	1a12      	subs	r2, r2, r0
 8000598:	fbb2 f0f7 	udiv	r0, r2, r7
 800059c:	fb07 2210 	mls	r2, r7, r0, r2
 80005a0:	fb0e fe00 	mul.w	lr, lr, r0
 80005a4:	b2a4      	uxth	r4, r4
 80005a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005aa:	45a6      	cmp	lr, r4
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x150>
 80005ae:	eb1c 0404 	adds.w	r4, ip, r4
 80005b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b6:	d202      	bcs.n	80005be <__udivmoddi4+0x14e>
 80005b8:	45a6      	cmp	lr, r4
 80005ba:	f200 80b4 	bhi.w	8000726 <__udivmoddi4+0x2b6>
 80005be:	4610      	mov	r0, r2
 80005c0:	eba4 040e 	sub.w	r4, r4, lr
 80005c4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005c8:	e7a0      	b.n	800050c <__udivmoddi4+0x9c>
 80005ca:	f1c1 0720 	rsb	r7, r1, #32
 80005ce:	408b      	lsls	r3, r1
 80005d0:	fa22 fc07 	lsr.w	ip, r2, r7
 80005d4:	ea4c 0c03 	orr.w	ip, ip, r3
 80005d8:	fa25 fa07 	lsr.w	sl, r5, r7
 80005dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005e0:	fbba f8f9 	udiv	r8, sl, r9
 80005e4:	408d      	lsls	r5, r1
 80005e6:	fa20 f307 	lsr.w	r3, r0, r7
 80005ea:	fb09 aa18 	mls	sl, r9, r8, sl
 80005ee:	fa1f fe8c 	uxth.w	lr, ip
 80005f2:	432b      	orrs	r3, r5
 80005f4:	fa00 f501 	lsl.w	r5, r0, r1
 80005f8:	fb08 f00e 	mul.w	r0, r8, lr
 80005fc:	0c1c      	lsrs	r4, r3, #16
 80005fe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000602:	42a0      	cmp	r0, r4
 8000604:	fa02 f201 	lsl.w	r2, r2, r1
 8000608:	d90b      	bls.n	8000622 <__udivmoddi4+0x1b2>
 800060a:	eb1c 0404 	adds.w	r4, ip, r4
 800060e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000612:	f080 8086 	bcs.w	8000722 <__udivmoddi4+0x2b2>
 8000616:	42a0      	cmp	r0, r4
 8000618:	f240 8083 	bls.w	8000722 <__udivmoddi4+0x2b2>
 800061c:	f1a8 0802 	sub.w	r8, r8, #2
 8000620:	4464      	add	r4, ip
 8000622:	1a24      	subs	r4, r4, r0
 8000624:	b298      	uxth	r0, r3
 8000626:	fbb4 f3f9 	udiv	r3, r4, r9
 800062a:	fb09 4413 	mls	r4, r9, r3, r4
 800062e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000632:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000636:	45a6      	cmp	lr, r4
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x1dc>
 800063a:	eb1c 0404 	adds.w	r4, ip, r4
 800063e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000642:	d26a      	bcs.n	800071a <__udivmoddi4+0x2aa>
 8000644:	45a6      	cmp	lr, r4
 8000646:	d968      	bls.n	800071a <__udivmoddi4+0x2aa>
 8000648:	3b02      	subs	r3, #2
 800064a:	4464      	add	r4, ip
 800064c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000650:	fba0 9302 	umull	r9, r3, r0, r2
 8000654:	eba4 040e 	sub.w	r4, r4, lr
 8000658:	429c      	cmp	r4, r3
 800065a:	46c8      	mov	r8, r9
 800065c:	469e      	mov	lr, r3
 800065e:	d354      	bcc.n	800070a <__udivmoddi4+0x29a>
 8000660:	d051      	beq.n	8000706 <__udivmoddi4+0x296>
 8000662:	2e00      	cmp	r6, #0
 8000664:	d067      	beq.n	8000736 <__udivmoddi4+0x2c6>
 8000666:	ebb5 0308 	subs.w	r3, r5, r8
 800066a:	eb64 040e 	sbc.w	r4, r4, lr
 800066e:	40cb      	lsrs	r3, r1
 8000670:	fa04 f707 	lsl.w	r7, r4, r7
 8000674:	431f      	orrs	r7, r3
 8000676:	40cc      	lsrs	r4, r1
 8000678:	e9c6 7400 	strd	r7, r4, [r6]
 800067c:	2100      	movs	r1, #0
 800067e:	e74a      	b.n	8000516 <__udivmoddi4+0xa6>
 8000680:	fa02 fc03 	lsl.w	ip, r2, r3
 8000684:	f1c3 0020 	rsb	r0, r3, #32
 8000688:	40c1      	lsrs	r1, r0
 800068a:	409d      	lsls	r5, r3
 800068c:	fa24 f000 	lsr.w	r0, r4, r0
 8000690:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000694:	4328      	orrs	r0, r5
 8000696:	fbb1 f5f7 	udiv	r5, r1, r7
 800069a:	fb07 1115 	mls	r1, r7, r5, r1
 800069e:	fa1f fe8c 	uxth.w	lr, ip
 80006a2:	0c02      	lsrs	r2, r0, #16
 80006a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006a8:	fb05 f10e 	mul.w	r1, r5, lr
 80006ac:	4291      	cmp	r1, r2
 80006ae:	fa04 f403 	lsl.w	r4, r4, r3
 80006b2:	d908      	bls.n	80006c6 <__udivmoddi4+0x256>
 80006b4:	eb1c 0202 	adds.w	r2, ip, r2
 80006b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80006bc:	d22f      	bcs.n	800071e <__udivmoddi4+0x2ae>
 80006be:	4291      	cmp	r1, r2
 80006c0:	d92d      	bls.n	800071e <__udivmoddi4+0x2ae>
 80006c2:	3d02      	subs	r5, #2
 80006c4:	4462      	add	r2, ip
 80006c6:	1a52      	subs	r2, r2, r1
 80006c8:	fbb2 f1f7 	udiv	r1, r2, r7
 80006cc:	fb07 2211 	mls	r2, r7, r1, r2
 80006d0:	b280      	uxth	r0, r0
 80006d2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80006d6:	fb01 f20e 	mul.w	r2, r1, lr
 80006da:	4282      	cmp	r2, r0
 80006dc:	d908      	bls.n	80006f0 <__udivmoddi4+0x280>
 80006de:	eb1c 0000 	adds.w	r0, ip, r0
 80006e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80006e6:	d216      	bcs.n	8000716 <__udivmoddi4+0x2a6>
 80006e8:	4282      	cmp	r2, r0
 80006ea:	d914      	bls.n	8000716 <__udivmoddi4+0x2a6>
 80006ec:	3902      	subs	r1, #2
 80006ee:	4460      	add	r0, ip
 80006f0:	1a80      	subs	r0, r0, r2
 80006f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006f6:	e73a      	b.n	800056e <__udivmoddi4+0xfe>
 80006f8:	4631      	mov	r1, r6
 80006fa:	4630      	mov	r0, r6
 80006fc:	e70b      	b.n	8000516 <__udivmoddi4+0xa6>
 80006fe:	4671      	mov	r1, lr
 8000700:	e6e9      	b.n	80004d6 <__udivmoddi4+0x66>
 8000702:	4610      	mov	r0, r2
 8000704:	e6fe      	b.n	8000504 <__udivmoddi4+0x94>
 8000706:	454d      	cmp	r5, r9
 8000708:	d2ab      	bcs.n	8000662 <__udivmoddi4+0x1f2>
 800070a:	ebb9 0802 	subs.w	r8, r9, r2
 800070e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000712:	3801      	subs	r0, #1
 8000714:	e7a5      	b.n	8000662 <__udivmoddi4+0x1f2>
 8000716:	4641      	mov	r1, r8
 8000718:	e7ea      	b.n	80006f0 <__udivmoddi4+0x280>
 800071a:	4603      	mov	r3, r0
 800071c:	e796      	b.n	800064c <__udivmoddi4+0x1dc>
 800071e:	4645      	mov	r5, r8
 8000720:	e7d1      	b.n	80006c6 <__udivmoddi4+0x256>
 8000722:	46d0      	mov	r8, sl
 8000724:	e77d      	b.n	8000622 <__udivmoddi4+0x1b2>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e749      	b.n	80005c0 <__udivmoddi4+0x150>
 800072c:	3d02      	subs	r5, #2
 800072e:	4462      	add	r2, ip
 8000730:	e731      	b.n	8000596 <__udivmoddi4+0x126>
 8000732:	4608      	mov	r0, r1
 8000734:	e70a      	b.n	800054c <__udivmoddi4+0xdc>
 8000736:	4631      	mov	r1, r6
 8000738:	e6ed      	b.n	8000516 <__udivmoddi4+0xa6>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MotorEnc_Init>:
 */
#include "Motors/motor_encoder.h"


void MotorEnc_Init(MotorEncoder_t *encoder, TIM_HandleTypeDef *htim)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	encoder->htimEnc = htim;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8000750:	213c      	movs	r1, #60	; 0x3c
 8000752:	6838      	ldr	r0, [r7, #0]
 8000754:	f003 fe10 	bl	8004378 <HAL_TIM_Encoder_Start>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MotorEnc_Uptade>:

void MotorEnc_Uptade(MotorEncoder_t *encoder)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint32_t NewCounter = encoder->htimEnc->Instance->CNT;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000770:	60fb      	str	r3, [r7, #12]
	int16_t TempPosition = encoder->Position;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	899b      	ldrh	r3, [r3, #12]
 8000776:	817b      	strh	r3, [r7, #10]

	if(NewCounter == encoder->LastCounter)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	429a      	cmp	r2, r3
 8000780:	d103      	bne.n	800078a <MotorEnc_Uptade+0x2a>
	{
		encoder->Velocity = 0;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	809a      	strh	r2, [r3, #4]
 8000788:	e052      	b.n	8000830 <MotorEnc_Uptade+0xd0>
	}
	else if(NewCounter > encoder->LastCounter)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	691b      	ldr	r3, [r3, #16]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	429a      	cmp	r2, r3
 8000792:	d924      	bls.n	80007de <MotorEnc_Uptade+0x7e>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))	//overflow happened
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 0310 	and.w	r3, r3, #16
 80007a0:	2b10      	cmp	r3, #16
 80007a2:	d111      	bne.n	80007c8 <MotorEnc_Uptade+0x68>
		{
			encoder->Velocity = - ( encoder->LastCounter + (encoder->htimEnc->Instance->ARR - NewCounter) );
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	809a      	strh	r2, [r3, #4]
 80007c6:	e033      	b.n	8000830 <MotorEnc_Uptade+0xd0>
		}
		else
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	809a      	strh	r2, [r3, #4]
 80007dc:	e028      	b.n	8000830 <MotorEnc_Uptade+0xd0>
		}
	}
	else if(NewCounter < encoder->LastCounter)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d223      	bcs.n	8000830 <MotorEnc_Uptade+0xd0>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	2b10      	cmp	r3, #16
 80007f6:	d10a      	bne.n	800080e <MotorEnc_Uptade+0xae>
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	b29b      	uxth	r3, r3
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	b21a      	sxth	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	809a      	strh	r2, [r3, #4]
 800080c:	e010      	b.n	8000830 <MotorEnc_Uptade+0xd0>
		}
		else																//overflow happened
		{
			encoder->Velocity = NewCounter + (encoder->htimEnc->Instance->ARR + encoder->LastCounter);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	b29a      	uxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	b29b      	uxth	r3, r3
 800081e:	4413      	add	r3, r2
 8000820:	b29a      	uxth	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	b29b      	uxth	r3, r3
 8000826:	4413      	add	r3, r2
 8000828:	b29b      	uxth	r3, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	809a      	strh	r2, [r3, #4]
		}
	}


	TempPosition = encoder->Position + encoder->Velocity;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000836:	b29a      	uxth	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800083e:	b29b      	uxth	r3, r3
 8000840:	4413      	add	r3, r2
 8000842:	b29b      	uxth	r3, r3
 8000844:	817b      	strh	r3, [r7, #10]

	if(encoder->Velocity != 0)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d024      	beq.n	800089a <MotorEnc_Uptade+0x13a>
	{
		if(TempPosition >= 0)
 8000850:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db16      	blt.n	8000886 <MotorEnc_Uptade+0x126>
		{
			encoder->Position = (encoder->Position + encoder->Velocity) % PULSES_PER_ROTATION;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800085e:	461a      	mov	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000866:	4413      	add	r3, r2
 8000868:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <MotorEnc_Uptade+0x170>)
 800086a:	fb82 1203 	smull	r1, r2, r2, r3
 800086e:	1251      	asrs	r1, r2, #9
 8000870:	17da      	asrs	r2, r3, #31
 8000872:	1a8a      	subs	r2, r1, r2
 8000874:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8000878:	fb01 f202 	mul.w	r2, r1, r2
 800087c:	1a9a      	subs	r2, r3, r2
 800087e:	b212      	sxth	r2, r2
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	819a      	strh	r2, [r3, #12]
 8000884:	e009      	b.n	800089a <MotorEnc_Uptade+0x13a>
		}
		else
		{
			encoder->Position = PULSES_PER_ROTATION + encoder->Velocity;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800088c:	b29b      	uxth	r3, r3
 800088e:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8000892:	b29b      	uxth	r3, r3
 8000894:	b21a      	sxth	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	819a      	strh	r2, [r3, #12]
		}
	}

	encoder->RPM = (encoder->Velocity * 6000) / 1400; //define constants
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008a0:	461a      	mov	r2, r3
 80008a2:	f241 7370 	movw	r3, #6000	; 0x1770
 80008a6:	fb02 f303 	mul.w	r3, r2, r3
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <MotorEnc_Uptade+0x170>)
 80008ac:	fb82 1203 	smull	r1, r2, r2, r3
 80008b0:	1252      	asrs	r2, r2, #9
 80008b2:	17db      	asrs	r3, r3, #31
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fd6e 	bl	8000398 <__aeabi_i2f>
 80008bc:	4602      	mov	r2, r0
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	609a      	str	r2, [r3, #8]
	encoder->LastCounter = NewCounter;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	611a      	str	r2, [r3, #16]

}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	5d9f7391 	.word	0x5d9f7391

080008d4 <DRV8836_Init>:
 *      Author: Michal Klebokowski
 */
#include "drv8836.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	4611      	mov	r1, r2
 80008e0:	461a      	mov	r2, r3
 80008e2:	460b      	mov	r3, r1
 80008e4:	80fb      	strh	r3, [r7, #6]
 80008e6:	4613      	mov	r3, r2
 80008e8:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	88fa      	ldrh	r2, [r7, #6]
 80008f4:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	88ba      	ldrh	r2, [r7, #4]
 80008fa:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	8b3a      	ldrh	r2, [r7, #24]
 8000900:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	8bba      	ldrh	r2, [r7, #28]
 8000906:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	891b      	ldrh	r3, [r3, #8]
 8000910:	4619      	mov	r1, r3
 8000912:	4610      	mov	r0, r2
 8000914:	f003 fbe4 	bl	80040e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	895b      	ldrh	r3, [r3, #10]
 8000920:	4619      	mov	r1, r3
 8000922:	4610      	mov	r0, r2
 8000924:	f003 fbdc 	bl	80040e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	899b      	ldrh	r3, [r3, #12]
 8000930:	4619      	mov	r1, r3
 8000932:	4610      	mov	r0, r2
 8000934:	f003 fbd4 	bl	80040e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	89db      	ldrh	r3, [r3, #14]
 8000940:	4619      	mov	r1, r3
 8000942:	4610      	mov	r0, r2
 8000944:	f003 fbcc 	bl	80040e0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d105      	bne.n	800095a <DRV8836_Init+0x86>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2200      	movs	r2, #0
 8000956:	635a      	str	r2, [r3, #52]	; 0x34
 8000958:	e016      	b.n	8000988 <DRV8836_Init+0xb4>
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	2b04      	cmp	r3, #4
 800095e:	d105      	bne.n	800096c <DRV8836_Init+0x98>
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	6393      	str	r3, [r2, #56]	; 0x38
 800096a:	e00d      	b.n	8000988 <DRV8836_Init+0xb4>
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	2b08      	cmp	r3, #8
 8000970:	d105      	bne.n	800097e <DRV8836_Init+0xaa>
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2300      	movs	r3, #0
 800097a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800097c:	e004      	b.n	8000988 <DRV8836_Init+0xb4>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 8000988:	88bb      	ldrh	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <DRV8836_Init+0xc6>
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
 8000998:	e016      	b.n	80009c8 <DRV8836_Init+0xf4>
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	2b04      	cmp	r3, #4
 800099e:	d105      	bne.n	80009ac <DRV8836_Init+0xd8>
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	2300      	movs	r3, #0
 80009a8:	6393      	str	r3, [r2, #56]	; 0x38
 80009aa:	e00d      	b.n	80009c8 <DRV8836_Init+0xf4>
 80009ac:	88bb      	ldrh	r3, [r7, #4]
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d105      	bne.n	80009be <DRV8836_Init+0xea>
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009bc:	e004      	b.n	80009c8 <DRV8836_Init+0xf4>
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	2300      	movs	r3, #0
 80009c6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 80009c8:	8b3b      	ldrh	r3, [r7, #24]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d105      	bne.n	80009da <DRV8836_Init+0x106>
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	635a      	str	r2, [r3, #52]	; 0x34
 80009d8:	e016      	b.n	8000a08 <DRV8836_Init+0x134>
 80009da:	8b3b      	ldrh	r3, [r7, #24]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d105      	bne.n	80009ec <DRV8836_Init+0x118>
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	2300      	movs	r3, #0
 80009e8:	6393      	str	r3, [r2, #56]	; 0x38
 80009ea:	e00d      	b.n	8000a08 <DRV8836_Init+0x134>
 80009ec:	8b3b      	ldrh	r3, [r7, #24]
 80009ee:	2b08      	cmp	r3, #8
 80009f0:	d105      	bne.n	80009fe <DRV8836_Init+0x12a>
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	2300      	movs	r3, #0
 80009fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80009fc:	e004      	b.n	8000a08 <DRV8836_Init+0x134>
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8000a08:	8bbb      	ldrh	r3, [r7, #28]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d105      	bne.n	8000a1a <DRV8836_Init+0x146>
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2200      	movs	r2, #0
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a18:	e016      	b.n	8000a48 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8000a1a:	8bbb      	ldrh	r3, [r7, #28]
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d105      	bne.n	8000a2c <DRV8836_Init+0x158>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	2300      	movs	r3, #0
 8000a28:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a2a:	e00d      	b.n	8000a48 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8000a2c:	8bbb      	ldrh	r3, [r7, #28]
 8000a2e:	2b08      	cmp	r3, #8
 8000a30:	d105      	bne.n	8000a3e <DRV8836_Init+0x16a>
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000a3c:	e004      	b.n	8000a48 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <DRV8836_SetMotor>:

void DRV8836_SetMotor(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction, uint16_t speed)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	4608      	mov	r0, r1
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4603      	mov	r3, r0
 8000a60:	70fb      	strb	r3, [r7, #3]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70bb      	strb	r3, [r7, #2]
 8000a66:	4613      	mov	r3, r2
 8000a68:	803b      	strh	r3, [r7, #0]
	uint16_t *TargetSpeed;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;


	if(Output_A == output)
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10c      	bne.n	8000a8a <DRV8836_SetMotor+0x3a>
	{
		TargetForwardChannel = ic->a_forward_channel;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	891b      	ldrh	r3, [r3, #8]
 8000a74:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->a_reverse_channel;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	895b      	ldrh	r3, [r3, #10]
 8000a7a:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->a_speed);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3310      	adds	r3, #16
 8000a80:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3314      	adds	r3, #20
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e00e      	b.n	8000aa8 <DRV8836_SetMotor+0x58>
	}
	else if(Output_B == output)
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10b      	bne.n	8000aa8 <DRV8836_SetMotor+0x58>
	{
		TargetForwardChannel = ic->b_forward_channel;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	899b      	ldrh	r3, [r3, #12]
 8000a94:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->b_reverse_channel;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	89db      	ldrh	r3, [r3, #14]
 8000a9a:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->b_speed);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3312      	adds	r3, #18
 8000aa0:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->b_direction);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3315      	adds	r3, #21
 8000aa6:	617b      	str	r3, [r7, #20]
	else
	{
		//error
	}

	switch(direction)
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	f200 8120 	bhi.w	8000cf0 <DRV8836_SetMotor+0x2a0>
 8000ab0:	a201      	add	r2, pc, #4	; (adr r2, 8000ab8 <DRV8836_SetMotor+0x68>)
 8000ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000ac9 	.word	0x08000ac9
 8000abc:	08000b4b 	.word	0x08000b4b
 8000ac0:	08000bcd 	.word	0x08000bcd
 8000ac4:	08000c4f 	.word	0x08000c4f
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d105      	bne.n	8000ada <DRV8836_SetMotor+0x8a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad8:	e016      	b.n	8000b08 <DRV8836_SetMotor+0xb8>
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d105      	bne.n	8000aec <DRV8836_SetMotor+0x9c>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	6393      	str	r3, [r2, #56]	; 0x38
 8000aea:	e00d      	b.n	8000b08 <DRV8836_SetMotor+0xb8>
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d105      	bne.n	8000afe <DRV8836_SetMotor+0xae>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	2300      	movs	r3, #0
 8000afa:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000afc:	e004      	b.n	8000b08 <DRV8836_SetMotor+0xb8>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2300      	movs	r3, #0
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000b08:	89bb      	ldrh	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d105      	bne.n	8000b1a <DRV8836_SetMotor+0xca>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000b18:	e0eb      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000b1a:	89bb      	ldrh	r3, [r7, #12]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d105      	bne.n	8000b2c <DRV8836_SetMotor+0xdc>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b2a:	e0e2      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000b2c:	89bb      	ldrh	r3, [r7, #12]
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d105      	bne.n	8000b3e <DRV8836_SetMotor+0xee>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b3c:	e0d9      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	2300      	movs	r3, #0
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b48:	e0d3      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8000b4a:	89fb      	ldrh	r3, [r7, #14]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d105      	bne.n	8000b5c <DRV8836_SetMotor+0x10c>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5a:	e016      	b.n	8000b8a <DRV8836_SetMotor+0x13a>
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d105      	bne.n	8000b6e <DRV8836_SetMotor+0x11e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	6393      	str	r3, [r2, #56]	; 0x38
 8000b6c:	e00d      	b.n	8000b8a <DRV8836_SetMotor+0x13a>
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	2b08      	cmp	r3, #8
 8000b72:	d105      	bne.n	8000b80 <DRV8836_SetMotor+0x130>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000b7e:	e004      	b.n	8000b8a <DRV8836_SetMotor+0x13a>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	2300      	movs	r3, #0
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8000b8a:	89bb      	ldrh	r3, [r7, #12]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d105      	bne.n	8000b9c <DRV8836_SetMotor+0x14c>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	883a      	ldrh	r2, [r7, #0]
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000b9a:	e0aa      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8000b9c:	89bb      	ldrh	r3, [r7, #12]
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	d105      	bne.n	8000bae <DRV8836_SetMotor+0x15e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	883b      	ldrh	r3, [r7, #0]
 8000baa:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000bac:	e0a1      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8000bae:	89bb      	ldrh	r3, [r7, #12]
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d105      	bne.n	8000bc0 <DRV8836_SetMotor+0x170>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	883b      	ldrh	r3, [r7, #0]
 8000bbc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000bbe:	e098      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	883b      	ldrh	r3, [r7, #0]
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000bca:	e092      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, speed);
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d105      	bne.n	8000bde <DRV8836_SetMotor+0x18e>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	883a      	ldrh	r2, [r7, #0]
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34
 8000bdc:	e016      	b.n	8000c0c <DRV8836_SetMotor+0x1bc>
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d105      	bne.n	8000bf0 <DRV8836_SetMotor+0x1a0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	883b      	ldrh	r3, [r7, #0]
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38
 8000bee:	e00d      	b.n	8000c0c <DRV8836_SetMotor+0x1bc>
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	2b08      	cmp	r3, #8
 8000bf4:	d105      	bne.n	8000c02 <DRV8836_SetMotor+0x1b2>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	883b      	ldrh	r3, [r7, #0]
 8000bfe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c00:	e004      	b.n	8000c0c <DRV8836_SetMotor+0x1bc>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	883b      	ldrh	r3, [r7, #0]
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000c0c:	89bb      	ldrh	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d105      	bne.n	8000c1e <DRV8836_SetMotor+0x1ce>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000c1c:	e069      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000c1e:	89bb      	ldrh	r3, [r7, #12]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d105      	bne.n	8000c30 <DRV8836_SetMotor+0x1e0>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000c2e:	e060      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	2b08      	cmp	r3, #8
 8000c34:	d105      	bne.n	8000c42 <DRV8836_SetMotor+0x1f2>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000c40:	e057      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000c4c:	e051      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d107      	bne.n	8000c64 <DRV8836_SetMotor+0x214>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68d2      	ldr	r2, [r2, #12]
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
 8000c62:	e01c      	b.n	8000c9e <DRV8836_SetMotor+0x24e>
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d107      	bne.n	8000c7a <DRV8836_SetMotor+0x22a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	6852      	ldr	r2, [r2, #4]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	6393      	str	r3, [r2, #56]	; 0x38
 8000c78:	e011      	b.n	8000c9e <DRV8836_SetMotor+0x24e>
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d107      	bne.n	8000c90 <DRV8836_SetMotor+0x240>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6852      	ldr	r2, [r2, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c8e:	e006      	b.n	8000c9e <DRV8836_SetMotor+0x24e>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	6852      	ldr	r2, [r2, #4]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8000c9e:	89bb      	ldrh	r3, [r7, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d107      	bne.n	8000cb4 <DRV8836_SetMotor+0x264>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68d2      	ldr	r2, [r2, #12]
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000cb2:	e01e      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8000cb4:	89bb      	ldrh	r3, [r7, #12]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d107      	bne.n	8000cca <DRV8836_SetMotor+0x27a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	6852      	ldr	r2, [r2, #4]
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000cc8:	e013      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8000cca:	89bb      	ldrh	r3, [r7, #12]
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d107      	bne.n	8000ce0 <DRV8836_SetMotor+0x290>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6852      	ldr	r2, [r2, #4]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000cde:	e008      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6852      	ldr	r2, [r2, #4]
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000cee:	e000      	b.n	8000cf2 <DRV8836_SetMotor+0x2a2>

	default:
		break;
 8000cf0:	bf00      	nop
	}

	*TargetDirection = direction;	//save set direction
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	78ba      	ldrb	r2, [r7, #2]
 8000cf6:	701a      	strb	r2, [r3, #0]
	*TargetSpeed = speed;
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	883a      	ldrh	r2, [r7, #0]
 8000cfc:	801a      	strh	r2, [r3, #0]

}
 8000cfe:	bf00      	nop
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	4b4f      	ldr	r3, [pc, #316]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a4e      	ldr	r2, [pc, #312]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b4c      	ldr	r3, [pc, #304]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d34:	4b49      	ldr	r3, [pc, #292]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a48      	ldr	r2, [pc, #288]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d3a:	f043 0320 	orr.w	r3, r3, #32
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0320 	and.w	r3, r3, #32
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a42      	ldr	r2, [pc, #264]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a3c      	ldr	r2, [pc, #240]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f246 0103 	movw	r1, #24579	; 0x6003
 8000d82:	4837      	ldr	r0, [pc, #220]	; (8000e60 <MX_GPIO_Init+0x158>)
 8000d84:	f001 fc7c 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	4835      	ldr	r0, [pc, #212]	; (8000e64 <MX_GPIO_Init+0x15c>)
 8000d8e:	f001 fc77 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2110      	movs	r1, #16
 8000d96:	4834      	ldr	r0, [pc, #208]	; (8000e68 <MX_GPIO_Init+0x160>)
 8000d98:	f001 fc72 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 8000d9c:	f246 0302 	movw	r3, #24578	; 0x6002
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	482a      	ldr	r0, [pc, #168]	; (8000e60 <MX_GPIO_Init+0x158>)
 8000db6:	f001 fadf 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4823      	ldr	r0, [pc, #140]	; (8000e60 <MX_GPIO_Init+0x158>)
 8000dd2:	f001 fad1 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	4820      	ldr	r0, [pc, #128]	; (8000e6c <MX_GPIO_Init+0x164>)
 8000dec:	f001 fac4 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_GPIO_Init+0x168>)
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4619      	mov	r1, r3
 8000e04:	4819      	ldr	r0, [pc, #100]	; (8000e6c <MX_GPIO_Init+0x164>)
 8000e06:	f001 fab7 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <MX_GPIO_Init+0x15c>)
 8000e22:	f001 faa9 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000e26:	2310      	movs	r3, #16
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480a      	ldr	r0, [pc, #40]	; (8000e68 <MX_GPIO_Init+0x160>)
 8000e3e:	f001 fa9b 	bl	8002378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2028      	movs	r0, #40	; 0x28
 8000e48:	f001 fa5f 	bl	800230a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e4c:	2028      	movs	r0, #40	; 0x28
 8000e4e:	f001 fa78 	bl	8002342 <HAL_NVIC_EnableIRQ>

}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40011400 	.word	0x40011400
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	10210000 	.word	0x10210000

08000e74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <MX_I2C1_Init+0x54>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e80:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_I2C1_Init+0x58>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000eb2:	f001 fc15 	bl	80026e0 <HAL_I2C_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ebc:	f000 f943 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000028 	.word	0x20000028
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	00061a80 	.word	0x00061a80

08000ed0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_I2C_MspInit+0x90>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d132      	bne.n	8000f56 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_I2C_MspInit+0x94>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <HAL_I2C_MspInit+0x94>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_I2C_MspInit+0x94>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4812      	ldr	r0, [pc, #72]	; (8000f68 <HAL_I2C_MspInit+0x98>)
 8000f1e:	f001 fa2b 	bl	8002378 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_I2C_MspInit+0x9c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <HAL_I2C_MspInit+0x9c>)
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_I2C_MspInit+0x94>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_I2C_MspInit+0x94>)
 8000f44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_I2C_MspInit+0x94>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40005400 	.word	0x40005400
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	40010000 	.word	0x40010000

08000f70 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 fc6f 	bl	800185c <nRF24_Init>

#ifdef ROBOT
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8000f7e:	4906      	ldr	r1, [pc, #24]	; (8000f98 <Radio_Init+0x28>)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 fb76 	bl	8001672 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <Radio_Init+0x2c>)
 8000f88:	f000 fbac 	bl	80016e4 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8000f8c:	f000 f9b0 	bl	80012f0 <nRF24_RX_Mode>
#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
	nRF24_SetTXAddress( (uint8_t*) "Bot");
	nRF24_TX_Mode();
#endif
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	080050bc 	.word	0x080050bc
 8000f9c:	080050c0 	.word	0x080050c0

08000fa0 <Radio_HandlerIRQ>:

//
//Klebot radio callbacks to use
//
void Radio_HandlerIRQ(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	nRF24_IRQ_Handler();
 8000fa4:	f000 fc4e 	bl	8001844 <nRF24_IRQ_Handler>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f001 f84d 	bl	8002050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb6:	f000 f855 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fba:	f7ff fea5 	bl	8000d08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fbe:	f7ff ff59 	bl	8000e74 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000fc2:	f000 fcb3 	bl	800192c <MX_SPI3_Init>
  MX_TIM1_Init();
 8000fc6:	f000 fdb5 	bl	8001b34 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fca:	f000 fe0b 	bl	8001be4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fce:	f000 fe9f 	bl	8001d10 <MX_TIM4_Init>
  MX_TIM7_Init();
 8000fd2:	f000 fef1 	bl	8001db8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  DRV8836_Init(&MotorDriver1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2308      	movs	r3, #8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2304      	movs	r3, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4915      	ldr	r1, [pc, #84]	; (8001038 <main+0x8c>)
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <main+0x90>)
 8000fe6:	f7ff fc75 	bl	80008d4 <DRV8836_Init>
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <main+0x94>)
 8000ff2:	f001 fb45 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <main+0x94>)
 8000ffe:	f001 fb3f 	bl	8002680 <HAL_GPIO_WritePin>

  MotorEnc_Init(&MotorEncoderA, &htim1);
 8001002:	4910      	ldr	r1, [pc, #64]	; (8001044 <main+0x98>)
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <main+0x9c>)
 8001006:	f7ff fb9b 	bl	8000740 <MotorEnc_Init>

  HAL_TIM_Base_Start_IT(&htim7);
 800100a:	4810      	ldr	r0, [pc, #64]	; (800104c <main+0xa0>)
 800100c:	f002 ffb6 	bl	8003f7c <HAL_TIM_Base_Start_IT>


  Radio_Init(&hspi3);
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <main+0xa4>)
 8001012:	f7ff ffad 	bl	8000f70 <Radio_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //KlebotScheduler();

	  DRV8836_SetMotor(&MotorDriver1, Output_A , Dir, Spd);
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <main+0xa8>)
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <main+0xac>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	2100      	movs	r1, #0
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <main+0x90>)
 8001022:	f7ff fd15 	bl	8000a50 <DRV8836_SetMotor>
	  DRV8836_SetMotor(&MotorDriver1, Output_B , Dir1, Spd1);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <main+0xb0>)
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <main+0xb4>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	2101      	movs	r1, #1
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <main+0x90>)
 8001032:	f7ff fd0d 	bl	8000a50 <DRV8836_SetMotor>
	  DRV8836_SetMotor(&MotorDriver1, Output_A , Dir, Spd);
 8001036:	e7ee      	b.n	8001016 <main+0x6a>
 8001038:	20000158 	.word	0x20000158
 800103c:	2000007c 	.word	0x2000007c
 8001040:	40011000 	.word	0x40011000
 8001044:	20000110 	.word	0x20000110
 8001048:	20000094 	.word	0x20000094
 800104c:	200001e8 	.word	0x200001e8
 8001050:	200000b8 	.word	0x200000b8
 8001054:	200000a8 	.word	0x200000a8
 8001058:	200000aa 	.word	0x200000aa
 800105c:	200000ac 	.word	0x200000ac
 8001060:	200000ae 	.word	0x200000ae

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	2238      	movs	r2, #56	; 0x38
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f003 ffea 	bl	800504c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001086:	2301      	movs	r3, #1
 8001088:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001090:	2301      	movs	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fc57 	bl	8002968 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80010c0:	f000 f841 	bl	8001146 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 ff58 	bl	8002f94 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010ea:	f000 f82c 	bl	8001146 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80010ee:	4b03      	ldr	r3, [pc, #12]	; (80010fc <SystemClock_Config+0x98>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3750      	adds	r7, #80	; 0x50
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	42420070 	.word	0x42420070

08001100 <HAL_TIM_PeriodElapsedCallback>:
		return 0;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d102      	bne.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		MotorEnc_Uptade(&MotorEncoderA);
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001114:	f7ff fb24 	bl	8000760 <MotorEnc_Uptade>
	}
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40001400 	.word	0x40001400
 8001124:	20000094 	.word	0x20000094

08001128 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001138:	d101      	bne.n	800113e <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 800113a:	f7ff ff31 	bl	8000fa0 <Radio_HandlerIRQ>
	}
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114a:	b672      	cpsid	i
}
 800114c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114e:	e7fe      	b.n	800114e <Error_Handler+0x8>

08001150 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 ffd9 	bl	8002114 <HAL_Delay>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <nRF24_SendSpi+0x28>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	b29a      	uxth	r2, r3
 8001180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	f002 f9a5 	bl	80034d4 <HAL_SPI_Transmit>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000b0 	.word	0x200000b0

08001198 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <nRF24_ReadSpi+0x28>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	f002 fad2 	bl	800375a <HAL_SPI_Receive>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000b0 	.word	0x200000b0

080011c4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80011d2:	2200      	movs	r2, #0
 80011d4:	2104      	movs	r1, #4
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <nRF24_ReadRegister+0x44>)
 80011d8:	f001 fa52 	bl	8002680 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	2101      	movs	r1, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffc3 	bl	800116c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 80011e6:	f107 030f 	add.w	r3, r7, #15
 80011ea:	2101      	movs	r1, #1
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ffd3 	bl	8001198 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 80011f2:	2201      	movs	r2, #1
 80011f4:	2104      	movs	r1, #4
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <nRF24_ReadRegister+0x44>)
 80011f8:	f001 fa42 	bl	8002680 <HAL_GPIO_WritePin>

	return result;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40011400 	.word	0x40011400

0800120c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001220:	2200      	movs	r2, #0
 8001222:	2104      	movs	r1, #4
 8001224:	480a      	ldr	r0, [pc, #40]	; (8001250 <nRF24_ReadRegisters+0x44>)
 8001226:	f001 fa2b 	bl	8002680 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff9c 	bl	800116c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	4619      	mov	r1, r3
 8001238:	6838      	ldr	r0, [r7, #0]
 800123a:	f7ff ffad 	bl	8001198 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 800123e:	2201      	movs	r2, #1
 8001240:	2104      	movs	r1, #4
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <nRF24_ReadRegisters+0x44>)
 8001244:	f001 fa1c 	bl	8002680 <HAL_GPIO_WritePin>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40011400 	.word	0x40011400

08001254 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f043 0320 	orr.w	r3, r3, #32
 800126a:	b2db      	uxtb	r3, r3
 800126c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001272:	2200      	movs	r2, #0
 8001274:	2104      	movs	r1, #4
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <nRF24_WriteRegister+0x48>)
 8001278:	f001 fa02 	bl	8002680 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2102      	movs	r1, #2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff72 	bl	800116c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001288:	2201      	movs	r2, #1
 800128a:	2104      	movs	r1, #4
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <nRF24_WriteRegister+0x48>)
 800128e:	f001 f9f7 	bl	8002680 <HAL_GPIO_WritePin>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40011400 	.word	0x40011400

080012a0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80012ba:	2200      	movs	r2, #0
 80012bc:	2104      	movs	r1, #4
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <nRF24_WriteRegisters+0x4c>)
 80012c0:	f001 f9de 	bl	8002680 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	2101      	movs	r1, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff4f 	bl	800116c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	4619      	mov	r1, r3
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff ff4a 	bl	800116c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80012d8:	2201      	movs	r2, #1
 80012da:	2104      	movs	r1, #4
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <nRF24_WriteRegisters+0x4c>)
 80012de:	f001 f9cf 	bl	8002680 <HAL_GPIO_WritePin>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40011400 	.word	0x40011400

080012f0 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 80012f6:	f000 f829 	bl	800134c <nRF24_ReadConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 80012fe:	4911      	ldr	r1, [pc, #68]	; (8001344 <nRF24_RX_Mode+0x54>)
 8001300:	2000      	movs	r0, #0
 8001302:	f000 f9b6 	bl	8001672 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f81f 	bl	800135c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 800131e:	2070      	movs	r0, #112	; 0x70
 8001320:	f000 f877 	bl	8001412 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001324:	f000 f884 	bl	8001430 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001328:	f000 f89c 	bl	8001464 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 800132c:	2201      	movs	r2, #1
 800132e:	2110      	movs	r1, #16
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <nRF24_RX_Mode+0x58>)
 8001332:	f001 f9a5 	bl	8002680 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff ff0a 	bl	8001150 <nRF24_Delay_ms>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000b4 	.word	0x200000b4
 8001348:	40010c00 	.word	0x40010c00

0800134c <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff ff37 	bl	80011c4 <nRF24_ReadRegister>
 8001356:	4603      	mov	r3, r0
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}

0800135c <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4619      	mov	r1, r3
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ff72 	bl	8001254 <nRF24_WriteRegister>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001382:	2006      	movs	r0, #6
 8001384:	f7ff ff1e 	bl	80011c4 <nRF24_ReadRegister>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	f023 0307 	bic.w	r3, r3, #7
 8001392:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	b25a      	sxtb	r2, r3
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	4313      	orrs	r3, r2
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	4619      	mov	r1, r3
 80013a8:	2006      	movs	r0, #6
 80013aa:	f7ff ff53 	bl	8001254 <nRF24_WriteRegister>
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80013c0:	2006      	movs	r0, #6
 80013c2:	f7ff feff 	bl	80011c4 <nRF24_ReadRegister>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80013d0:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d104      	bne.n	80013e2 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	f043 0320 	orr.w	r3, r3, #32
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e006      	b.n	80013f0 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d103      	bne.n	80013f0 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	4619      	mov	r1, r3
 80013f4:	2006      	movs	r0, #6
 80013f6:	f7ff ff2d 	bl	8001254 <nRF24_WriteRegister>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001406:	2007      	movs	r0, #7
 8001408:	f7ff fedc 	bl	80011c4 <nRF24_ReadRegister>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}

08001412 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	4619      	mov	r1, r3
 8001420:	2007      	movs	r0, #7
 8001422:	f7ff ff17 	bl	8001254 <nRF24_WriteRegister>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001436:	23e2      	movs	r3, #226	; 0xe2
 8001438:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800143a:	2200      	movs	r2, #0
 800143c:	2104      	movs	r1, #4
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <nRF24_FlushRX+0x30>)
 8001440:	f001 f91e 	bl	8002680 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe8f 	bl	800116c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800144e:	2201      	movs	r2, #1
 8001450:	2104      	movs	r1, #4
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <nRF24_FlushRX+0x30>)
 8001454:	f001 f914 	bl	8002680 <HAL_GPIO_WritePin>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40011400 	.word	0x40011400

08001464 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800146a:	23e1      	movs	r3, #225	; 0xe1
 800146c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800146e:	2200      	movs	r2, #0
 8001470:	2104      	movs	r1, #4
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <nRF24_FlushTX+0x30>)
 8001474:	f001 f904 	bl	8002680 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fe75 	bl	800116c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001482:	2201      	movs	r2, #1
 8001484:	2104      	movs	r1, #4
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <nRF24_FlushTX+0x30>)
 8001488:	f001 f8fa 	bl	8002680 <HAL_GPIO_WritePin>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40011400 	.word	0x40011400

08001498 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80014a2:	f7ff ff53 	bl	800134c <nRF24_ReadConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e003      	b.n	80014c2 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f023 0308 	bic.w	r3, r3, #8
 80014c0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff49 	bl	800135c <nRF24_WriteConfig>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80014dc:	f7ff ff36 	bl	800134c <nRF24_ReadConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d104      	bne.n	80014f4 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e003      	b.n	80014fc <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff2c 	bl	800135c <nRF24_WriteConfig>
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	b25a      	sxtb	r2, r3
 8001522:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25b      	sxtb	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	2004      	movs	r0, #4
 8001536:	f7ff fe8d 	bl	8001254 <nRF24_WriteRegister>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	2005      	movs	r0, #5
 8001558:	f7ff fe7c 	bl	8001254 <nRF24_WriteRegister>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d901      	bls.n	800157e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800157a:	2305      	movs	r3, #5
 800157c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800157e:	2002      	movs	r0, #2
 8001580:	f7ff fe20 	bl	80011c4 <nRF24_ReadRegister>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10a      	bne.n	80015a4 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2201      	movs	r2, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	b25a      	sxtb	r2, r3
 8001598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159c:	4313      	orrs	r3, r2
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	e00b      	b.n	80015bc <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2201      	movs	r2, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	b25a      	sxtb	r2, r3
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4013      	ands	r3, r2
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	4619      	mov	r1, r3
 80015c0:	2002      	movs	r0, #2
 80015c2:	f7ff fe47 	bl	8001254 <nRF24_WriteRegister>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	460a      	mov	r2, r1
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	4613      	mov	r3, r2
 80015dc:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d901      	bls.n	80015e8 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80015e4:	2305      	movs	r3, #5
 80015e6:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff fdeb 	bl	80011c4 <nRF24_ReadRegister>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10a      	bne.n	800160e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	2201      	movs	r2, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	b25a      	sxtb	r2, r3
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4313      	orrs	r3, r2
 8001608:	b25b      	sxtb	r3, r3
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e00b      	b.n	8001626 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2201      	movs	r2, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	b25b      	sxtb	r3, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	b25a      	sxtb	r2, r3
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001620:	4013      	ands	r3, r2
 8001622:	b25b      	sxtb	r3, r3
 8001624:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4619      	mov	r1, r3
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fe12 	bl	8001254 <nRF24_WriteRegister>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d901      	bls.n	800164c <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001648:	2305      	movs	r3, #5
 800164a:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d801      	bhi.n	8001656 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001652:	2303      	movs	r3, #3
 8001654:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	3b02      	subs	r3, #2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	2003      	movs	r0, #3
 8001666:	f7ff fdf5 	bl	8001254 <nRF24_WriteRegister>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	6039      	str	r1, [r7, #0]
 800167c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <nRF24_SetRXAddress+0x18>
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d11d      	bne.n	80016c6 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	e00d      	b.n	80016ac <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	441a      	add	r2, r3
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	f1c3 0302 	rsb	r3, r3, #2
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	3310      	adds	r3, #16
 80016a0:	443b      	add	r3, r7
 80016a2:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	3301      	adds	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d9ee      	bls.n	8001690 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	330a      	adds	r3, #10
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f107 010c 	add.w	r1, r7, #12
 80016bc:	2203      	movs	r2, #3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fdee 	bl	80012a0 <nRF24_WriteRegisters>
	{
 80016c4:	e00a      	b.n	80016dc <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	330a      	adds	r3, #10
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3302      	adds	r3, #2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	4610      	mov	r0, r2
 80016d6:	f7ff fdbd 	bl	8001254 <nRF24_WriteRegister>
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2203      	movs	r2, #3
 80016f2:	4619      	mov	r1, r3
 80016f4:	200a      	movs	r0, #10
 80016f6:	f7ff fd89 	bl	800120c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	e00c      	b.n	800171a <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	f1c3 0302 	rsb	r3, r3, #2
 8001708:	3210      	adds	r2, #16
 800170a:	443a      	add	r2, r7
 800170c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001710:	4a16      	ldr	r2, [pc, #88]	; (800176c <nRF24_SetTXAddress+0x88>)
 8001712:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	3301      	adds	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d9ef      	bls.n	8001700 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e00d      	b.n	8001742 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	441a      	add	r2, r3
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	f1c3 0302 	rsb	r3, r3, #2
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	3310      	adds	r3, #16
 8001736:	443b      	add	r3, r7
 8001738:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	3301      	adds	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d9ee      	bls.n	8001726 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2203      	movs	r2, #3
 800174e:	4619      	mov	r1, r3
 8001750:	200a      	movs	r0, #10
 8001752:	f7ff fda5 	bl	80012a0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	2203      	movs	r2, #3
 800175c:	4619      	mov	r1, r3
 800175e:	2010      	movs	r0, #16
 8001760:	f7ff fd9e 	bl	80012a0 <nRF24_WriteRegisters>

}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200000b4 	.word	0x200000b4

08001770 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001776:	f7ff fe44 	bl	8001402 <nRF24_ReadStatus>
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001784:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe42 	bl	8001412 <nRF24_WriteStatus>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <nRF24_EnableRXDataReadyIRQ>:
    }
    return result;
}

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80017a0:	f7ff fdd4 	bl	800134c <nRF24_ReadConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d104      	bne.n	80017b8 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e003      	b.n	80017c0 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017be:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fdca 	bl	800135c <nRF24_WriteConfig>
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80017da:	f7ff fdb7 	bl	800134c <nRF24_ReadConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	f043 0320 	orr.w	r3, r3, #32
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e003      	b.n	80017fa <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	f023 0320 	bic.w	r3, r3, #32
 80017f8:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fdad 	bl	800135c <nRF24_WriteConfig>
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001814:	f7ff fd9a 	bl	800134c <nRF24_ReadConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d104      	bne.n	800182c <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e003      	b.n	8001834 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	f023 0310 	bic.w	r3, r3, #16
 8001832:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fd90 	bl	800135c <nRF24_WriteConfig>
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <nRF24_IRQ_Handler+0x14>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200000b7 	.word	0x200000b7

0800185c <nRF24_Init>:
		nrf24_mr_flag = 0;
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001864:	4a2e      	ldr	r2, [pc, #184]	; (8001920 <nRF24_Init+0xc4>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800186a:	2200      	movs	r2, #0
 800186c:	2110      	movs	r1, #16
 800186e:	482d      	ldr	r0, [pc, #180]	; (8001924 <nRF24_Init+0xc8>)
 8001870:	f000 ff06 	bl	8002680 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001874:	2201      	movs	r2, #1
 8001876:	2104      	movs	r1, #4
 8001878:	482b      	ldr	r0, [pc, #172]	; (8001928 <nRF24_Init+0xcc>)
 800187a:	f000 ff01 	bl	8002680 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 800187e:	2005      	movs	r0, #5
 8001880:	f7ff fc66 	bl	8001150 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001884:	2003      	movs	r0, #3
 8001886:	f7ff fd77 	bl	8001378 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800188a:	2002      	movs	r0, #2
 800188c:	f7ff fd93 	bl	80013b6 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fe01 	bl	8001498 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff fe1b 	bl	80014d2 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 800189c:	2107      	movs	r1, #7
 800189e:	2004      	movs	r0, #4
 80018a0:	f7ff fe34 	bl	800150c <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80018a4:	201d      	movs	r0, #29
 80018a6:	f7ff fc8d 	bl	80011c4 <nRF24_ReadRegister>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4619      	mov	r1, r3
 80018b4:	201d      	movs	r0, #29
 80018b6:	f7ff fccd 	bl	8001254 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80018ba:	213f      	movs	r1, #63	; 0x3f
 80018bc:	201c      	movs	r0, #28
 80018be:	f7ff fcc9 	bl	8001254 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80018c2:	200a      	movs	r0, #10
 80018c4:	f7ff fe3d 	bl	8001542 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80018c8:	2101      	movs	r1, #1
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fe4a 	bl	8001564 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80018d0:	2101      	movs	r1, #1
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff fe7b 	bl	80015ce <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80018d8:	2003      	movs	r0, #3
 80018da:	f7ff fead 	bl	8001638 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff fc36 	bl	8001150 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f7ff ff56 	bl	8001796 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7ff ff70 	bl	80017d0 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7ff ff8a 	bl	800180a <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff fc2a 	bl	8001150 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80018fc:	f7ff ff38 	bl	8001770 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 8001900:	201d      	movs	r0, #29
 8001902:	f7ff fc5f 	bl	80011c4 <nRF24_ReadRegister>
 8001906:	4603      	mov	r3, r0
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	201d      	movs	r0, #29
 8001912:	f7ff fc9f 	bl	8001254 <nRF24_WriteRegister>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200000b0 	.word	0x200000b0
 8001924:	40010c00 	.word	0x40010c00
 8001928:	40011400 	.word	0x40011400

0800192c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_SPI3_Init+0x64>)
 8001932:	4a18      	ldr	r2, [pc, #96]	; (8001994 <MX_SPI3_Init+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_SPI3_Init+0x64>)
 8001938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800193c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_SPI3_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_SPI3_Init+0x64>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_SPI3_Init+0x64>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_SPI3_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_SPI3_Init+0x64>)
 8001958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_SPI3_Init+0x64>)
 8001960:	2218      	movs	r2, #24
 8001962:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <MX_SPI3_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_SPI3_Init+0x64>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <MX_SPI3_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_SPI3_Init+0x64>)
 8001978:	220a      	movs	r2, #10
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_SPI3_Init+0x64>)
 800197e:	f001 fd25 	bl	80033cc <HAL_SPI_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001988:	f7ff fbdd 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200000b8 	.word	0x200000b8
 8001994:	40003c00 	.word	0x40003c00

08001998 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <HAL_SPI_MspInit+0xa8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d13f      	bne.n	8001a38 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_SPI_MspInit+0xac>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <HAL_SPI_MspInit+0xac>)
 80019be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c2:	61d3      	str	r3, [r2, #28]
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_SPI_MspInit+0xac>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_SPI_MspInit+0xac>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <HAL_SPI_MspInit+0xac>)
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_SPI_MspInit+0xac>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 80019e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <HAL_SPI_MspInit+0xb0>)
 80019fe:	f000 fcbb 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 8001a02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	480c      	ldr	r0, [pc, #48]	; (8001a48 <HAL_SPI_MspInit+0xb0>)
 8001a18:	f000 fcae 	bl	8002378 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_SPI_MspInit+0xb4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
 8001a32:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_SPI_MspInit+0xb4>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40003c00 	.word	0x40003c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40010000 	.word	0x40010000

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_MspInit+0x5c>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_MspInit+0x5c>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6193      	str	r3, [r2, #24]
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_MspInit+0x5c>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_MspInit+0x5c>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_MspInit+0x5c>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_MspInit+0x5c>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_MspInit+0x60>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_MspInit+0x60>)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010000 	.word	0x40010000

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afa:	f000 faef 	bl	80020dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8001b06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b0a:	f000 fdd1 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM7_IRQHandler+0x10>)
 8001b1a:	f002 fcbb 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200001e8 	.word	0x200001e8

08001b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2224      	movs	r2, #36	; 0x24
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fa82 	bl	800504c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001b52:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <MX_TIM1_Init+0xac>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b80:	2302      	movs	r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b84:	2301      	movs	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b90:	2302      	movs	r3, #2
 8001b92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480d      	ldr	r0, [pc, #52]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001ba8:	f002 fb44 	bl	8004234 <HAL_TIM_Encoder_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001bb2:	f7ff fac8 	bl	8001146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <MX_TIM1_Init+0xa8>)
 8001bc4:	f003 f9ca 	bl	8004f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001bce:	f7ff faba 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	3730      	adds	r7, #48	; 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000110 	.word	0x20000110
 8001be0:	40012c00 	.word	0x40012c00

08001be4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	; 0x38
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]
 8001c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c14:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c16:	4a3d      	ldr	r2, [pc, #244]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c28:	22ff      	movs	r2, #255	; 0xff
 8001c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c38:	4833      	ldr	r0, [pc, #204]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c3a:	f002 f94f 	bl	8003edc <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001c44:	f7ff fa7f 	bl	8001146 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c52:	4619      	mov	r1, r3
 8001c54:	482c      	ldr	r0, [pc, #176]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c56:	f002 fde7 	bl	8004828 <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001c60:	f7ff fa71 	bl	8001146 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c64:	4828      	ldr	r0, [pc, #160]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c66:	f002 f9e3 	bl	8004030 <HAL_TIM_PWM_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001c70:	f7ff fa69 	bl	8001146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c7c:	f107 0320 	add.w	r3, r7, #32
 8001c80:	4619      	mov	r1, r3
 8001c82:	4821      	ldr	r0, [pc, #132]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001c84:	f003 f96a 	bl	8004f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001c8e:	f7ff fa5a 	bl	8001146 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c92:	2360      	movs	r3, #96	; 0x60
 8001c94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4817      	ldr	r0, [pc, #92]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001caa:	f002 fcfb 	bl	80046a4 <HAL_TIM_PWM_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001cb4:	f7ff fa47 	bl	8001146 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4812      	ldr	r0, [pc, #72]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001cc0:	f002 fcf0 	bl	80046a4 <HAL_TIM_PWM_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001cca:	f7ff fa3c 	bl	8001146 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001cd6:	f002 fce5 	bl	80046a4 <HAL_TIM_PWM_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001ce0:	f7ff fa31 	bl	8001146 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001cec:	f002 fcda 	bl	80046a4 <HAL_TIM_PWM_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001cf6:	f7ff fa26 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cfa:	4803      	ldr	r0, [pc, #12]	; (8001d08 <MX_TIM3_Init+0x124>)
 8001cfc:	f000 f93a 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 8001d00:	bf00      	nop
 8001d02:	3738      	adds	r7, #56	; 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000158 	.word	0x20000158
 8001d0c:	40000400 	.word	0x40000400

08001d10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 f994 	bl	800504c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <MX_TIM4_Init+0xa0>)
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <MX_TIM4_Init+0xa4>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <MX_TIM4_Init+0xa0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_TIM4_Init+0xa0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <MX_TIM4_Init+0xa0>)
 8001d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <MX_TIM4_Init+0xa0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <MX_TIM4_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d52:	2303      	movs	r3, #3
 8001d54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d56:	2302      	movs	r3, #2
 8001d58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_TIM4_Init+0xa0>)
 8001d7e:	f002 fa59 	bl	8004234 <HAL_TIM_Encoder_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d88:	f7ff f9dd 	bl	8001146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM4_Init+0xa0>)
 8001d9a:	f003 f8df 	bl	8004f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001da4:	f7ff f9cf 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3730      	adds	r7, #48	; 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200001a0 	.word	0x200001a0
 8001db4:	40000800 	.word	0x40000800

08001db8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <MX_TIM7_Init+0x68>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001dce:	2247      	movs	r2, #71	; 0x47
 8001dd0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001dda:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dde:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001de6:	480d      	ldr	r0, [pc, #52]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001de8:	f002 f878 	bl	8003edc <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001df2:	f7ff f9a8 	bl	8001146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dfe:	463b      	mov	r3, r7
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001e04:	f003 f8aa 	bl	8004f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001e0e:	f7ff f99a 	bl	8001146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200001e8 	.word	0x200001e8
 8001e20:	40001400 	.word	0x40001400

08001e24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0318 	add.w	r3, r7, #24
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d125      	bne.n	8001e90 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8001e74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0318 	add.w	r3, r7, #24
 8001e86:	4619      	mov	r1, r3
 8001e88:	481a      	ldr	r0, [pc, #104]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001e8a:	f000 fa75 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e8e:	e028      	b.n	8001ee2 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d123      	bne.n	8001ee2 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6193      	str	r3, [r2, #24]
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 8001eca:	23c0      	movs	r3, #192	; 0xc0
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f107 0318 	add.w	r3, r7, #24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4807      	ldr	r0, [pc, #28]	; (8001efc <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ede:	f000 fa4b 	bl	8002378 <HAL_GPIO_Init>
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40012c00 	.word	0x40012c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	40000800 	.word	0x40000800
 8001efc:	40010c00 	.word	0x40010c00

08001f00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_TIM_Base_MspInit+0x68>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10c      	bne.n	8001f2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_TIM_Base_MspInit+0x6c>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <HAL_TIM_Base_MspInit+0x6c>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_TIM_Base_MspInit+0x6c>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001f2a:	e018      	b.n	8001f5e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_TIM_Base_MspInit+0x70>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d113      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_TIM_Base_MspInit+0x6c>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_TIM_Base_MspInit+0x6c>)
 8001f3c:	f043 0320 	orr.w	r3, r3, #32
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_TIM_Base_MspInit+0x6c>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2037      	movs	r0, #55	; 0x37
 8001f54:	f000 f9d9 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f58:	2037      	movs	r0, #55	; 0x37
 8001f5a:	f000 f9f2 	bl	8002342 <HAL_NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40001400 	.word	0x40001400

08001f74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_TIM_MspPostInit+0x80>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d12a      	bne.n	8001fea <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_TIM_MspPostInit+0x84>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_TIM_MspPostInit+0x84>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_TIM_MspPostInit+0x84>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 8001fac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001fb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480e      	ldr	r0, [pc, #56]	; (8001ffc <HAL_TIM_MspPostInit+0x88>)
 8001fc2:	f000 f9d9 	bl	8002378 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_TIM_MspPostInit+0x8c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	4a06      	ldr	r2, [pc, #24]	; (8002000 <HAL_TIM_MspPostInit+0x8c>)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40010000 	.word	0x40010000

08002004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002004:	f7ff fd90 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800200a:	490c      	ldr	r1, [pc, #48]	; (800203c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002020:	4c09      	ldr	r4, [pc, #36]	; (8002048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800202e:	f003 f815 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002032:	f7fe ffbb 	bl	8000fac <main>
  bx lr
 8002036:	4770      	bx	lr
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002040:	08005110 	.word	0x08005110
  ldr r2, =_sbss
 8002044:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002048:	20000234 	.word	0x20000234

0800204c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC1_2_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_Init+0x28>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_Init+0x28>)
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 f947 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002066:	200f      	movs	r0, #15
 8002068:	f000 f808 	bl	800207c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206c:	f7ff fcf0 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x54>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0x58>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	fbb3 f3f1 	udiv	r3, r3, r1
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f95f 	bl	800235e <HAL_SYSTICK_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00e      	b.n	80020c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	d80a      	bhi.n	80020c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b0:	2200      	movs	r2, #0
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	f000 f927 	bl	800230a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020bc:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <HAL_InitTick+0x5c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000004 	.word	0x20000004

080020dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_IncTick+0x1c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_IncTick+0x20>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	4a03      	ldr	r2, [pc, #12]	; (80020fc <HAL_IncTick+0x20>)
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000008 	.word	0x20000008
 80020fc:	20000230 	.word	0x20000230

08002100 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_GetTick+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000230 	.word	0x20000230

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff fff0 	bl	8002100 <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffe0 	bl	8002100 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000008 	.word	0x20000008

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4906      	ldr	r1, [pc, #24]	; (80021f4 <__NVIC_EnableIRQ+0x34>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff90 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff2d 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff42 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff90 	bl	800224c <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5f 	bl	80021f8 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff35 	bl	80021c0 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa2 	bl	80022b0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b08b      	sub	sp, #44	; 0x2c
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238a:	e169      	b.n	8002660 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800238c:	2201      	movs	r2, #1
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	f040 8158 	bne.w	800265a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4a9a      	ldr	r2, [pc, #616]	; (8002618 <HAL_GPIO_Init+0x2a0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d05e      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023b4:	4a98      	ldr	r2, [pc, #608]	; (8002618 <HAL_GPIO_Init+0x2a0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d875      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023ba:	4a98      	ldr	r2, [pc, #608]	; (800261c <HAL_GPIO_Init+0x2a4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d058      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023c0:	4a96      	ldr	r2, [pc, #600]	; (800261c <HAL_GPIO_Init+0x2a4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d86f      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023c6:	4a96      	ldr	r2, [pc, #600]	; (8002620 <HAL_GPIO_Init+0x2a8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d052      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023cc:	4a94      	ldr	r2, [pc, #592]	; (8002620 <HAL_GPIO_Init+0x2a8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d869      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023d2:	4a94      	ldr	r2, [pc, #592]	; (8002624 <HAL_GPIO_Init+0x2ac>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d04c      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023d8:	4a92      	ldr	r2, [pc, #584]	; (8002624 <HAL_GPIO_Init+0x2ac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d863      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023de:	4a92      	ldr	r2, [pc, #584]	; (8002628 <HAL_GPIO_Init+0x2b0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d046      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
 80023e4:	4a90      	ldr	r2, [pc, #576]	; (8002628 <HAL_GPIO_Init+0x2b0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d85d      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023ea:	2b12      	cmp	r3, #18
 80023ec:	d82a      	bhi.n	8002444 <HAL_GPIO_Init+0xcc>
 80023ee:	2b12      	cmp	r3, #18
 80023f0:	d859      	bhi.n	80024a6 <HAL_GPIO_Init+0x12e>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <HAL_GPIO_Init+0x80>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002473 	.word	0x08002473
 80023fc:	0800244d 	.word	0x0800244d
 8002400:	0800245f 	.word	0x0800245f
 8002404:	080024a1 	.word	0x080024a1
 8002408:	080024a7 	.word	0x080024a7
 800240c:	080024a7 	.word	0x080024a7
 8002410:	080024a7 	.word	0x080024a7
 8002414:	080024a7 	.word	0x080024a7
 8002418:	080024a7 	.word	0x080024a7
 800241c:	080024a7 	.word	0x080024a7
 8002420:	080024a7 	.word	0x080024a7
 8002424:	080024a7 	.word	0x080024a7
 8002428:	080024a7 	.word	0x080024a7
 800242c:	080024a7 	.word	0x080024a7
 8002430:	080024a7 	.word	0x080024a7
 8002434:	080024a7 	.word	0x080024a7
 8002438:	080024a7 	.word	0x080024a7
 800243c:	08002455 	.word	0x08002455
 8002440:	08002469 	.word	0x08002469
 8002444:	4a79      	ldr	r2, [pc, #484]	; (800262c <HAL_GPIO_Init+0x2b4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800244a:	e02c      	b.n	80024a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	623b      	str	r3, [r7, #32]
          break;
 8002452:	e029      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	3304      	adds	r3, #4
 800245a:	623b      	str	r3, [r7, #32]
          break;
 800245c:	e024      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	3308      	adds	r3, #8
 8002464:	623b      	str	r3, [r7, #32]
          break;
 8002466:	e01f      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	330c      	adds	r3, #12
 800246e:	623b      	str	r3, [r7, #32]
          break;
 8002470:	e01a      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800247a:	2304      	movs	r3, #4
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e013      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002488:	2308      	movs	r3, #8
 800248a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	611a      	str	r2, [r3, #16]
          break;
 8002492:	e009      	b.n	80024a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002494:	2308      	movs	r3, #8
 8002496:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	615a      	str	r2, [r3, #20]
          break;
 800249e:	e003      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
          break;
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x130>
          break;
 80024a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2bff      	cmp	r3, #255	; 0xff
 80024ac:	d801      	bhi.n	80024b2 <HAL_GPIO_Init+0x13a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	e001      	b.n	80024b6 <HAL_GPIO_Init+0x13e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2bff      	cmp	r3, #255	; 0xff
 80024bc:	d802      	bhi.n	80024c4 <HAL_GPIO_Init+0x14c>
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	e002      	b.n	80024ca <HAL_GPIO_Init+0x152>
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	3b08      	subs	r3, #8
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	210f      	movs	r1, #15
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	401a      	ands	r2, r3
 80024dc:	6a39      	ldr	r1, [r7, #32]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80b1 	beq.w	800265a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024f8:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <HAL_GPIO_Init+0x2b8>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <HAL_GPIO_Init+0x2b8>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <HAL_GPIO_Init+0x2b8>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002510:	4a48      	ldr	r2, [pc, #288]	; (8002634 <HAL_GPIO_Init+0x2bc>)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a40      	ldr	r2, [pc, #256]	; (8002638 <HAL_GPIO_Init+0x2c0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d013      	beq.n	8002564 <HAL_GPIO_Init+0x1ec>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3f      	ldr	r2, [pc, #252]	; (800263c <HAL_GPIO_Init+0x2c4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00d      	beq.n	8002560 <HAL_GPIO_Init+0x1e8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3e      	ldr	r2, [pc, #248]	; (8002640 <HAL_GPIO_Init+0x2c8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0x1e4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a3d      	ldr	r2, [pc, #244]	; (8002644 <HAL_GPIO_Init+0x2cc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_GPIO_Init+0x1e0>
 8002554:	2303      	movs	r3, #3
 8002556:	e006      	b.n	8002566 <HAL_GPIO_Init+0x1ee>
 8002558:	2304      	movs	r3, #4
 800255a:	e004      	b.n	8002566 <HAL_GPIO_Init+0x1ee>
 800255c:	2302      	movs	r3, #2
 800255e:	e002      	b.n	8002566 <HAL_GPIO_Init+0x1ee>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_GPIO_Init+0x1ee>
 8002564:	2300      	movs	r3, #0
 8002566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002568:	f002 0203 	and.w	r2, r2, #3
 800256c:	0092      	lsls	r2, r2, #2
 800256e:	4093      	lsls	r3, r2
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002576:	492f      	ldr	r1, [pc, #188]	; (8002634 <HAL_GPIO_Init+0x2bc>)
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	492c      	ldr	r1, [pc, #176]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
 800259c:	e006      	b.n	80025ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4928      	ldr	r1, [pc, #160]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	4922      	ldr	r1, [pc, #136]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	491e      	ldr	r1, [pc, #120]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4918      	ldr	r1, [pc, #96]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	4914      	ldr	r1, [pc, #80]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d021      	beq.n	800264c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e021      	b.n	800265a <HAL_GPIO_Init+0x2e2>
 8002616:	bf00      	nop
 8002618:	10320000 	.word	0x10320000
 800261c:	10310000 	.word	0x10310000
 8002620:	10220000 	.word	0x10220000
 8002624:	10210000 	.word	0x10210000
 8002628:	10120000 	.word	0x10120000
 800262c:	10110000 	.word	0x10110000
 8002630:	40021000 	.word	0x40021000
 8002634:	40010000 	.word	0x40010000
 8002638:	40010800 	.word	0x40010800
 800263c:	40010c00 	.word	0x40010c00
 8002640:	40011000 	.word	0x40011000
 8002644:	40011400 	.word	0x40011400
 8002648:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_GPIO_Init+0x304>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	43db      	mvns	r3, r3
 8002654:	4909      	ldr	r1, [pc, #36]	; (800267c <HAL_GPIO_Init+0x304>)
 8002656:	4013      	ands	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	3301      	adds	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	f47f ae8e 	bne.w	800238c <HAL_GPIO_Init+0x14>
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	372c      	adds	r7, #44	; 0x2c
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	611a      	str	r2, [r3, #16]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fd2a 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e12b      	b.n	800294a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fbe2 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2224      	movs	r2, #36	; 0x24
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002744:	f000 fe10 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 8002748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a81      	ldr	r2, [pc, #516]	; (8002954 <HAL_I2C_Init+0x274>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d807      	bhi.n	8002764 <HAL_I2C_Init+0x84>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a80      	ldr	r2, [pc, #512]	; (8002958 <HAL_I2C_Init+0x278>)
 8002758:	4293      	cmp	r3, r2
 800275a:	bf94      	ite	ls
 800275c:	2301      	movls	r3, #1
 800275e:	2300      	movhi	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e006      	b.n	8002772 <HAL_I2C_Init+0x92>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a7d      	ldr	r2, [pc, #500]	; (800295c <HAL_I2C_Init+0x27c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	bf94      	ite	ls
 800276c:	2301      	movls	r3, #1
 800276e:	2300      	movhi	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0e7      	b.n	800294a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a78      	ldr	r2, [pc, #480]	; (8002960 <HAL_I2C_Init+0x280>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	0c9b      	lsrs	r3, r3, #18
 8002784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a6a      	ldr	r2, [pc, #424]	; (8002954 <HAL_I2C_Init+0x274>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d802      	bhi.n	80027b4 <HAL_I2C_Init+0xd4>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3301      	adds	r3, #1
 80027b2:	e009      	b.n	80027c8 <HAL_I2C_Init+0xe8>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	4a69      	ldr	r2, [pc, #420]	; (8002964 <HAL_I2C_Init+0x284>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	3301      	adds	r3, #1
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	495c      	ldr	r1, [pc, #368]	; (8002954 <HAL_I2C_Init+0x274>)
 80027e4:	428b      	cmp	r3, r1
 80027e6:	d819      	bhi.n	800281c <HAL_I2C_Init+0x13c>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e59      	subs	r1, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027f6:	1c59      	adds	r1, r3, #1
 80027f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027fc:	400b      	ands	r3, r1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_I2C_Init+0x138>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1e59      	subs	r1, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002816:	e051      	b.n	80028bc <HAL_I2C_Init+0x1dc>
 8002818:	2304      	movs	r3, #4
 800281a:	e04f      	b.n	80028bc <HAL_I2C_Init+0x1dc>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <HAL_I2C_Init+0x168>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e58      	subs	r0, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	440b      	add	r3, r1
 8002832:	fbb0 f3f3 	udiv	r3, r0, r3
 8002836:	3301      	adds	r3, #1
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e012      	b.n	800286e <HAL_I2C_Init+0x18e>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e58      	subs	r0, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	0099      	lsls	r1, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Init+0x196>
 8002872:	2301      	movs	r3, #1
 8002874:	e022      	b.n	80028bc <HAL_I2C_Init+0x1dc>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10e      	bne.n	800289c <HAL_I2C_Init+0x1bc>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e58      	subs	r0, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	440b      	add	r3, r1
 800288c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002890:	3301      	adds	r3, #1
 8002892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289a:	e00f      	b.n	80028bc <HAL_I2C_Init+0x1dc>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1e58      	subs	r0, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	0099      	lsls	r1, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	6809      	ldr	r1, [r1, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6911      	ldr	r1, [r2, #16]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68d2      	ldr	r2, [r2, #12]
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	000186a0 	.word	0x000186a0
 8002958:	001e847f 	.word	0x001e847f
 800295c:	003d08ff 	.word	0x003d08ff
 8002960:	431bde83 	.word	0x431bde83
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e304      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8087 	beq.w	8002a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002988:	4b92      	ldr	r3, [pc, #584]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	d00c      	beq.n	80029ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002994:	4b8f      	ldr	r3, [pc, #572]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d112      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5e>
 80029a0:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ae:	4b89      	ldr	r3, [pc, #548]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x12c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d168      	bne.n	8002a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e2de      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x76>
 80029d0:	4b80      	ldr	r3, [pc, #512]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a7f      	ldr	r2, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e02e      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x98>
 80029e6:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b78      	ldr	r3, [pc, #480]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a77      	ldr	r2, [pc, #476]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xbc>
 8002a0a:	4b72      	ldr	r3, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a71      	ldr	r2, [pc, #452]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b6f      	ldr	r3, [pc, #444]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xd4>
 8002a24:	4b6b      	ldr	r3, [pc, #428]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b68      	ldr	r3, [pc, #416]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a67      	ldr	r2, [pc, #412]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff fb5c 	bl	8002100 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7ff fb58 	bl	8002100 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e292      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe4>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff fb48 	bl	8002100 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff fb44 	bl	8002100 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e27e      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x10c>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d063      	beq.n	8002b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x18c>
 8002aba:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x176>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e252      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4939      	ldr	r1, [pc, #228]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x270>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7ff fafd 	bl	8002100 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7ff faf9 	bl	8002100 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e233      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4927      	ldr	r1, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCC_OscConfig+0x270>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff fadc 	bl	8002100 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7ff fad8 	bl	8002100 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e212      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03a      	beq.n	8002bec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d019      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7ff fabc 	bl	8002100 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7ff fab8 	bl	8002100 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e1f2      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002baa:	2001      	movs	r0, #1
 8002bac:	f000 fbf0 	bl	8003390 <RCC_Delay>
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_OscConfig+0x274>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb8:	f7ff faa2 	bl	8002100 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbe:	e00f      	b.n	8002be0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7ff fa9e 	bl	8002100 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d908      	bls.n	8002be0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1d8      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	42420000 	.word	0x42420000
 8002bdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	4b9b      	ldr	r3, [pc, #620]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e9      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a6 	beq.w	8002d46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b94      	ldr	r3, [pc, #592]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b91      	ldr	r3, [pc, #580]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a90      	ldr	r2, [pc, #576]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b8e      	ldr	r3, [pc, #568]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b8b      	ldr	r3, [pc, #556]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a87      	ldr	r2, [pc, #540]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7ff fa5f 	bl	8002100 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7ff fa5b 	bl	8002100 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e195      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b7e      	ldr	r3, [pc, #504]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x312>
 8002c6c:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a77      	ldr	r2, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e02d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x334>
 8002c82:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a72      	ldr	r2, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b70      	ldr	r3, [pc, #448]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a6f      	ldr	r2, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
 8002c9a:	e01c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x356>
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a69      	ldr	r2, [pc, #420]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a66      	ldr	r2, [pc, #408]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36e>
 8002cbe:	4b64      	ldr	r3, [pc, #400]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a63      	ldr	r2, [pc, #396]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a60      	ldr	r2, [pc, #384]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7ff fa0f 	bl	8002100 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7ff fa0b 	bl	8002100 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e143      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ee      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x37e>
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7ff f9f9 	bl	8002100 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7ff f9f5 	bl	8002100 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e12d      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ee      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a44      	ldr	r2, [pc, #272]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 808c 	beq.w	8002e68 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002d50:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d10e      	bne.n	8002d7c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d108      	bne.n	8002d7c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002d6a:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e103      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d14e      	bne.n	8002e22 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0ef      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002da4:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <HAL_RCC_OscConfig+0x4f0>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7ff f9a9 	bl	8002100 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002db2:	f7ff f9a5 	bl	8002100 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0df      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002dd0:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	491c      	ldr	r1, [pc, #112]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4918      	ldr	r1, [pc, #96]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_RCC_OscConfig+0x4f0>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff f981 	bl	8002100 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e02:	f7ff f97d 	bl	8002100 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b64      	cmp	r3, #100	; 0x64
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0b7      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x49a>
 8002e20:	e022      	b.n	8002e68 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_RCC_OscConfig+0x4f0>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7ff f964 	bl	8002100 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002e3a:	e00f      	b.n	8002e5c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e3c:	f7ff f960 	bl	8002100 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d908      	bls.n	8002e5c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e09a      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40007000 	.word	0x40007000
 8002e58:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e9      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8088 	beq.w	8002f82 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e72:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d068      	beq.n	8002f50 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d14d      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b42      	ldr	r3, [pc, #264]	; (8002f90 <HAL_RCC_OscConfig+0x628>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f938 	bl	8002100 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7ff f934 	bl	8002100 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e06e      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea6:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eba:	d10f      	bne.n	8002edc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002ebc:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4931      	ldr	r1, [pc, #196]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eca:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	492d      	ldr	r1, [pc, #180]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	430b      	orrs	r3, r1
 8002eee:	4927      	ldr	r1, [pc, #156]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <HAL_RCC_OscConfig+0x628>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7ff f901 	bl	8002100 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f02:	f7ff f8fd 	bl	8002100 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e037      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x59a>
 8002f20:	e02f      	b.n	8002f82 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x628>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff f8ea 	bl	8002100 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7ff f8e6 	bl	8002100 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e020      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x5c8>
 8002f4e:	e018      	b.n	8002f82 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e013      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_OscConfig+0x624>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	42420060 	.word	0x42420060

08002f94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0d0      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d910      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 0207 	bic.w	r2, r3, #7
 8002fbe:	4965      	ldr	r1, [pc, #404]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b8      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ffa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003012:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b50      	ldr	r3, [pc, #320]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	494d      	ldr	r1, [pc, #308]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d040      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d115      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07f      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	4b41      	ldr	r3, [pc, #260]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e073      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06b      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003072:	4b39      	ldr	r3, [pc, #228]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f023 0203 	bic.w	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4936      	ldr	r1, [pc, #216]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003084:	f7ff f83c 	bl	8002100 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308c:	f7ff f838 	bl	8002100 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e053      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 020c 	and.w	r2, r3, #12
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d1eb      	bne.n	800308c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d210      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4922      	ldr	r1, [pc, #136]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e032      	b.n	800314a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4916      	ldr	r1, [pc, #88]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	490e      	ldr	r1, [pc, #56]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003122:	f000 f821 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003126:	4602      	mov	r2, r0
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	490a      	ldr	r1, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	5ccb      	ldrb	r3, [r1, r3]
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_RCC_ClockConfig+0x1cc>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1d0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe ff9a 	bl	800207c <HAL_InitTick>

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40022000 	.word	0x40022000
 8003158:	40021000 	.word	0x40021000
 800315c:	080050c8 	.word	0x080050c8
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b092      	sub	sp, #72	; 0x48
 800316e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003174:	2300      	movs	r3, #0
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38
 8003178:	2300      	movs	r3, #0
 800317a:	647b      	str	r3, [r7, #68]	; 0x44
 800317c:	2300      	movs	r3, #0
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
 8003188:	2300      	movs	r3, #0
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800318c:	4b6b      	ldr	r3, [pc, #428]	; (800333c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b04      	cmp	r3, #4
 800319a:	d002      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800319c:	2b08      	cmp	r3, #8
 800319e:	d003      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x40>
 80031a0:	e0c3      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031a2:	4b67      	ldr	r3, [pc, #412]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80031a4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80031a6:	e0c3      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	0c9b      	lsrs	r3, r3, #18
 80031ac:	f003 020f 	and.w	r2, r3, #15
 80031b0:	4b64      	ldr	r3, [pc, #400]	; (8003344 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80031b2:	5c9b      	ldrb	r3, [r3, r2]
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80ac 	beq.w	800331a <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80031c2:	4b5e      	ldr	r3, [pc, #376]	; (800333c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	4b5f      	ldr	r3, [pc, #380]	; (8003348 <HAL_RCC_GetSysClockFreq+0x1e0>)
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80031d0:	4b5a      	ldr	r3, [pc, #360]	; (800333c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 808c 	beq.w	80032f6 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80031de:	4b57      	ldr	r3, [pc, #348]	; (800333c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	3301      	adds	r3, #1
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80031ec:	4b53      	ldr	r3, [pc, #332]	; (800333c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	3302      	adds	r3, #2
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	2200      	movs	r2, #0
 80031fe:	623b      	str	r3, [r7, #32]
 8003200:	627a      	str	r2, [r7, #36]	; 0x24
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	2200      	movs	r2, #0
 8003206:	4618      	mov	r0, r3
 8003208:	4611      	mov	r1, r2
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	fb00 f203 	mul.w	r2, r0, r3
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	fb03 f301 	mul.w	r3, r3, r1
 8003216:	4413      	add	r3, r2
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	fba2 4500 	umull	r4, r5, r2, r0
 800321e:	442b      	add	r3, r5
 8003220:	461d      	mov	r5, r3
 8003222:	4622      	mov	r2, r4
 8003224:	462b      	mov	r3, r5
 8003226:	f04f 0000 	mov.w	r0, #0
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	0159      	lsls	r1, r3, #5
 8003230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003234:	0150      	lsls	r0, r2, #5
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	ebb2 0a04 	subs.w	sl, r2, r4
 800323e:	eb63 0b05 	sbc.w	fp, r3, r5
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800324e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003252:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003256:	ebb2 080a 	subs.w	r8, r2, sl
 800325a:	eb63 090b 	sbc.w	r9, r3, fp
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800326a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003272:	4690      	mov	r8, r2
 8003274:	4699      	mov	r9, r3
 8003276:	eb18 0304 	adds.w	r3, r8, r4
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	eb49 0305 	adc.w	r3, r9, r5
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328e:	4629      	mov	r1, r5
 8003290:	028b      	lsls	r3, r1, #10
 8003292:	4620      	mov	r0, r4
 8003294:	4629      	mov	r1, r5
 8003296:	4604      	mov	r4, r0
 8003298:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800329c:	4601      	mov	r1, r0
 800329e:	028a      	lsls	r2, r1, #10
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	2200      	movs	r2, #0
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	617a      	str	r2, [r7, #20]
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	2200      	movs	r2, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	60fa      	str	r2, [r7, #12]
 80032b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032b8:	4622      	mov	r2, r4
 80032ba:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80032be:	4645      	mov	r5, r8
 80032c0:	fb05 f202 	mul.w	r2, r5, r2
 80032c4:	46cc      	mov	ip, r9
 80032c6:	4625      	mov	r5, r4
 80032c8:	461c      	mov	r4, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	fb03 f30c 	mul.w	r3, r3, ip
 80032d0:	4413      	add	r3, r2
 80032d2:	4622      	mov	r2, r4
 80032d4:	4644      	mov	r4, r8
 80032d6:	fba2 2404 	umull	r2, r4, r2, r4
 80032da:	61fc      	str	r4, [r7, #28]
 80032dc:	61ba      	str	r2, [r7, #24]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e8:	f7fd f8aa 	bl	8000440 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4613      	mov	r3, r2
 80032f2:	647b      	str	r3, [r7, #68]	; 0x44
 80032f4:	e007      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	4a11      	ldr	r2, [pc, #68]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80032fa:	fb03 f202 	mul.w	r2, r3, r2
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003308:	7b5b      	ldrb	r3, [r3, #13]
 800330a:	461a      	mov	r2, r3
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8003312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	647b      	str	r3, [r7, #68]	; 0x44
 8003318:	e004      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331c:	4a0b      	ldr	r2, [pc, #44]	; (800334c <HAL_RCC_GetSysClockFreq+0x1e4>)
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8003324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003328:	e002      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_GetSysClockFreq+0x1e8>)
 800332c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800332e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003332:	4618      	mov	r0, r3
 8003334:	3748      	adds	r7, #72	; 0x48
 8003336:	46bd      	mov	sp, r7
 8003338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	00f42400 	.word	0x00f42400
 8003344:	080050e0 	.word	0x080050e0
 8003348:	080050f0 	.word	0x080050f0
 800334c:	003d0900 	.word	0x003d0900
 8003350:	007a1200 	.word	0x007a1200

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b02      	ldr	r3, [pc, #8]	; (8003364 <HAL_RCC_GetHCLKFreq+0x10>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	20000000 	.word	0x20000000

08003368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800336c:	f7ff fff2 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4903      	ldr	r1, [pc, #12]	; (800338c <HAL_RCC_GetPCLK1Freq+0x24>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	080050d8 	.word	0x080050d8

08003390 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <RCC_Delay+0x34>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <RCC_Delay+0x38>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0a5b      	lsrs	r3, r3, #9
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033ac:	bf00      	nop
  }
  while (Delay --);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	60fa      	str	r2, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f9      	bne.n	80033ac <RCC_Delay+0x1c>
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	20000000 	.word	0x20000000
 80033c8:	10624dd3 	.word	0x10624dd3

080033cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e076      	b.n	80034cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ee:	d009      	beq.n	8003404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
 80033f6:	e005      	b.n	8003404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe faba 	bl	8001998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	ea42 0103 	orr.w	r1, r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	0c1a      	lsrs	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f002 0204 	and.w	r2, r2, #4
 80034aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_SPI_Transmit+0x22>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e12d      	b.n	8003752 <HAL_SPI_Transmit+0x27e>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034fe:	f7fe fdff 	bl	8002100 <HAL_GetTick>
 8003502:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d002      	beq.n	800351a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003514:	2302      	movs	r3, #2
 8003516:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003518:	e116      	b.n	8003748 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Transmit+0x52>
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	77fb      	strb	r3, [r7, #31]
    goto error;
 800352a:	e10d      	b.n	8003748 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2203      	movs	r2, #3
 8003530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003572:	d10f      	bne.n	8003594 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003582:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003592:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d007      	beq.n	80035b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ba:	d14f      	bne.n	800365c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_SPI_Transmit+0xf6>
 80035c4:	8afb      	ldrh	r3, [r7, #22]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d142      	bne.n	8003650 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	881a      	ldrh	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	1c9a      	adds	r2, r3, #2
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035ee:	e02f      	b.n	8003650 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d112      	bne.n	8003624 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	881a      	ldrh	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	1c9a      	adds	r2, r3, #2
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	86da      	strh	r2, [r3, #54]	; 0x36
 8003622:	e015      	b.n	8003650 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003624:	f7fe fd6c 	bl	8002100 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d803      	bhi.n	800363c <HAL_SPI_Transmit+0x168>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d102      	bne.n	8003642 <HAL_SPI_Transmit+0x16e>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800364e:	e07b      	b.n	8003748 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1ca      	bne.n	80035f0 <HAL_SPI_Transmit+0x11c>
 800365a:	e050      	b.n	80036fe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_SPI_Transmit+0x196>
 8003664:	8afb      	ldrh	r3, [r7, #22]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d144      	bne.n	80036f4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003690:	e030      	b.n	80036f4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d113      	bne.n	80036c8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80036c6:	e015      	b.n	80036f4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c8:	f7fe fd1a 	bl	8002100 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d803      	bhi.n	80036e0 <HAL_SPI_Transmit+0x20c>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d102      	bne.n	80036e6 <HAL_SPI_Transmit+0x212>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036f2:	e029      	b.n	8003748 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1c9      	bne.n	8003692 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fbcc 	bl	8003ea0 <SPI_EndRxTxTransaction>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	77fb      	strb	r3, [r7, #31]
 800373e:	e003      	b.n	8003748 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003750:	7ffb      	ldrb	r3, [r7, #31]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b088      	sub	sp, #32
 800375e:	af02      	add	r7, sp, #8
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d002      	beq.n	8003780 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800377e:	e0fb      	b.n	8003978 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003788:	d112      	bne.n	80037b0 <HAL_SPI_Receive+0x56>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10e      	bne.n	80037b0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2204      	movs	r2, #4
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f8ef 	bl	800398a <HAL_SPI_TransmitReceive>
 80037ac:	4603      	mov	r3, r0
 80037ae:	e0e8      	b.n	8003982 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Receive+0x64>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0e1      	b.n	8003982 <HAL_SPI_Receive+0x228>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c6:	f7fe fc9b 	bl	8002100 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_SPI_Receive+0x7e>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037dc:	e0cc      	b.n	8003978 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2204      	movs	r2, #4
 80037e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	d10f      	bne.n	8003846 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d007      	beq.n	8003864 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d16a      	bne.n	8003942 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800386c:	e032      	b.n	80038d4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d115      	bne.n	80038a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f103 020c 	add.w	r2, r3, #12
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038a6:	e015      	b.n	80038d4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038a8:	f7fe fc2a 	bl	8002100 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d803      	bhi.n	80038c0 <HAL_SPI_Receive+0x166>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d102      	bne.n	80038c6 <HAL_SPI_Receive+0x16c>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80038d2:	e051      	b.n	8003978 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1c7      	bne.n	800386e <HAL_SPI_Receive+0x114>
 80038de:	e035      	b.n	800394c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d113      	bne.n	8003916 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	b292      	uxth	r2, r2
 80038fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	1c9a      	adds	r2, r3, #2
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003914:	e015      	b.n	8003942 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003916:	f7fe fbf3 	bl	8002100 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d803      	bhi.n	800392e <HAL_SPI_Receive+0x1d4>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d102      	bne.n	8003934 <HAL_SPI_Receive+0x1da>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003940:	e01a      	b.n	8003978 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1c9      	bne.n	80038e0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fa53 	bl	8003dfc <SPI_EndRxTransaction>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
 800396e:	e003      	b.n	8003978 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b08c      	sub	sp, #48	; 0x30
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003998:	2301      	movs	r3, #1
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x26>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e198      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x358>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b8:	f7fe fba2 	bl	8002100 <HAL_GetTick>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d00f      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x70>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e0:	d107      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x68>
 80039ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d003      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039f8:	e16d      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x82>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x82>
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d103      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a12:	e160      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d003      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2205      	movs	r2, #5
 8003a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	887a      	ldrh	r2, [r7, #2]
 8003a3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	887a      	ldrh	r2, [r7, #2]
 8003a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d007      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a84:	d17c      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x10a>
 8003a8e:	8b7b      	ldrh	r3, [r7, #26]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d16a      	bne.n	8003b6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	881a      	ldrh	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	1c9a      	adds	r2, r3, #2
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab8:	e057      	b.n	8003b6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d11b      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x176>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x176>
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d113      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	1c9a      	adds	r2, r3, #2
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d119      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x1b8>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d014      	beq.n	8003b42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	b292      	uxth	r2, r2
 8003b24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	1c9a      	adds	r2, r3, #2
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b42:	f7fe fadd 	bl	8002100 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d80b      	bhi.n	8003b6a <HAL_SPI_TransmitReceive+0x1e0>
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d007      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003b68:	e0b5      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1a2      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x130>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d19d      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x130>
 8003b7e:	e080      	b.n	8003c82 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0x204>
 8003b88:	8b7b      	ldrh	r3, [r7, #26]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d16f      	bne.n	8003c6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb4:	e05b      	b.n	8003c6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d11c      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x274>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d017      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x274>
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d114      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d119      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x2b6>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d014      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c40:	f7fe fa5e 	bl	8002100 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d803      	bhi.n	8003c58 <HAL_SPI_TransmitReceive+0x2ce>
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d102      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x2d4>
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003c6c:	e033      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d19e      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x22c>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d199      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f90a 	bl	8003ea0 <SPI_EndRxTxTransaction>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c9e:	e01a      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ccc:	e003      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3730      	adds	r7, #48	; 0x30
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cfc:	f7fe fa00 	bl	8002100 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	4413      	add	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d0c:	f7fe f9f8 	bl	8002100 <HAL_GetTick>
 8003d10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d12:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	015b      	lsls	r3, r3, #5
 8003d18:	0d1b      	lsrs	r3, r3, #20
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	fb02 f303 	mul.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d22:	e054      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d050      	beq.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d2c:	f7fe f9e8 	bl	8002100 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d902      	bls.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d13d      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5a:	d111      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d64:	d004      	beq.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d107      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d88:	d10f      	bne.n	8003daa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e017      	b.n	8003dee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d19b      	bne.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000000 	.word	0x20000000

08003dfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e10:	d111      	bne.n	8003e36 <SPI_EndRxTransaction+0x3a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d004      	beq.n	8003e26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e24:	d107      	bne.n	8003e36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e34:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d117      	bne.n	8003e70 <SPI_EndRxTransaction+0x74>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e48:	d112      	bne.n	8003e70 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	2101      	movs	r1, #1
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff ff49 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01a      	beq.n	8003e96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e013      	b.n	8003e98 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff ff36 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e000      	b.n	8003e98 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2180      	movs	r1, #128	; 0x80
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff ff18 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e000      	b.n	8003ed4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e041      	b.n	8003f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fffc 	bl	8001f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 fd70 	bl	8004a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e03f      	b.n	8004014 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <HAL_TIM_Base_Start_IT+0xa4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d00e      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x62>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_TIM_Base_Start_IT+0xa8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a16      	ldr	r2, [pc, #88]	; (8004028 <HAL_TIM_Base_Start_IT+0xac>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x62>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a14      	ldr	r2, [pc, #80]	; (800402c <HAL_TIM_Base_Start_IT+0xb0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d111      	bne.n	8004002 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b06      	cmp	r3, #6
 8003fee:	d010      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	e007      	b.n	8004012 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00

08004030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e041      	b.n	80040c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f839 	bl	80040ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 fcc6 	bl	8004a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_TIM_PWM_Start+0x24>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e022      	b.n	800414a <HAL_TIM_PWM_Start+0x6a>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b04      	cmp	r3, #4
 8004108:	d109      	bne.n	800411e <HAL_TIM_PWM_Start+0x3e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e015      	b.n	800414a <HAL_TIM_PWM_Start+0x6a>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d109      	bne.n	8004138 <HAL_TIM_PWM_Start+0x58>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e008      	b.n	800414a <HAL_TIM_PWM_Start+0x6a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e063      	b.n	800421a <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0x82>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004160:	e013      	b.n	800418a <HAL_TIM_PWM_Start+0xaa>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0x92>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004170:	e00b      	b.n	800418a <HAL_TIM_PWM_Start+0xaa>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0xa2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004180:	e003      	b.n	800418a <HAL_TIM_PWM_Start+0xaa>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2201      	movs	r2, #1
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 febe 	bl	8004f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a21      	ldr	r2, [pc, #132]	; (8004224 <HAL_TIM_PWM_Start+0x144>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d107      	bne.n	80041b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <HAL_TIM_PWM_Start+0x144>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <HAL_TIM_PWM_Start+0x104>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d00e      	beq.n	80041e4 <HAL_TIM_PWM_Start+0x104>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_TIM_PWM_Start+0x148>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d009      	beq.n	80041e4 <HAL_TIM_PWM_Start+0x104>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_TIM_PWM_Start+0x14c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <HAL_TIM_PWM_Start+0x104>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a14      	ldr	r2, [pc, #80]	; (8004230 <HAL_TIM_PWM_Start+0x150>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d111      	bne.n	8004208 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b06      	cmp	r3, #6
 80041f4:	d010      	beq.n	8004218 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004206:	e007      	b.n	8004218 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800
 8004230:	40000c00 	.word	0x40000c00

08004234 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e093      	b.n	8004370 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fd fde1 	bl	8001e24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004278:	f023 0307 	bic.w	r3, r3, #7
 800427c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f000 fbb9 	bl	8004a00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	4313      	orrs	r3, r2
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042d4:	f023 030c 	bic.w	r3, r3, #12
 80042d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	4313      	orrs	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	011a      	lsls	r2, r3, #4
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	031b      	lsls	r3, r3, #12
 8004304:	4313      	orrs	r3, r2
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4313      	orrs	r3, r2
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004388:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004390:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004398:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d110      	bne.n	80043ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043ae:	7b7b      	ldrb	r3, [r7, #13]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d001      	beq.n	80043b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e069      	b.n	800448c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c8:	e031      	b.n	800442e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d110      	bne.n	80043f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d0:	7bbb      	ldrb	r3, [r7, #14]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043d6:	7b3b      	ldrb	r3, [r7, #12]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e055      	b.n	800448c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f0:	e01d      	b.n	800442e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d108      	bne.n	800440a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f8:	7bbb      	ldrb	r3, [r7, #14]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043fe:	7b7b      	ldrb	r3, [r7, #13]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004404:	7b3b      	ldrb	r3, [r7, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e03e      	b.n	800448c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_TIM_Encoder_Start+0xc4>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d008      	beq.n	800444c <HAL_TIM_Encoder_Start+0xd4>
 800443a:	e00f      	b.n	800445c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fd65 	bl	8004f14 <TIM_CCxChannelCmd>
      break;
 800444a:	e016      	b.n	800447a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	2104      	movs	r1, #4
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fd5d 	bl	8004f14 <TIM_CCxChannelCmd>
      break;
 800445a:	e00e      	b.n	800447a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fd55 	bl	8004f14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2201      	movs	r2, #1
 8004470:	2104      	movs	r1, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fd4e 	bl	8004f14 <TIM_CCxChannelCmd>
      break;
 8004478:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0202 	mvn.w	r2, #2
 80044c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa76 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa69 	bl	80049b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fa78 	bl	80049da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0204 	mvn.w	r2, #4
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa4c 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa3f 	bl	80049b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa4e 	bl	80049da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b08      	cmp	r3, #8
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0208 	mvn.w	r2, #8
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa22 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa15 	bl	80049b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fa24 	bl	80049da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d122      	bne.n	80045ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d11b      	bne.n	80045ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0210 	mvn.w	r2, #16
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2208      	movs	r2, #8
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9f8 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f9eb 	bl	80049b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f9fa 	bl	80049da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0201 	mvn.w	r2, #1
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fd74 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fcfb 	bl	800503a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d10e      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d107      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9be 	bl	80049ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d10e      	bne.n	800469c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b20      	cmp	r3, #32
 800468a:	d107      	bne.n	800469c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0220 	mvn.w	r2, #32
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fcc6 	bl	8005028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0ae      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	f200 809f 	bhi.w	8004810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	08004811 	.word	0x08004811
 80046e0:	08004811 	.word	0x08004811
 80046e4:	08004811 	.word	0x08004811
 80046e8:	0800474d 	.word	0x0800474d
 80046ec:	08004811 	.word	0x08004811
 80046f0:	08004811 	.word	0x08004811
 80046f4:	08004811 	.word	0x08004811
 80046f8:	0800478f 	.word	0x0800478f
 80046fc:	08004811 	.word	0x08004811
 8004700:	08004811 	.word	0x08004811
 8004704:	08004811 	.word	0x08004811
 8004708:	080047cf 	.word	0x080047cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f9e0 	bl	8004ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0208 	orr.w	r2, r2, #8
 8004726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0204 	bic.w	r2, r2, #4
 8004736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6999      	ldr	r1, [r3, #24]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	619a      	str	r2, [r3, #24]
      break;
 800474a:	e064      	b.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fa26 	bl	8004ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6999      	ldr	r1, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	021a      	lsls	r2, r3, #8
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	619a      	str	r2, [r3, #24]
      break;
 800478c:	e043      	b.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fa6f 	bl	8004c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0208 	orr.w	r2, r2, #8
 80047a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0204 	bic.w	r2, r2, #4
 80047b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69d9      	ldr	r1, [r3, #28]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	61da      	str	r2, [r3, #28]
      break;
 80047cc:	e023      	b.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fab9 	bl	8004d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69d9      	ldr	r1, [r3, #28]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	021a      	lsls	r2, r3, #8
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	61da      	str	r2, [r3, #28]
      break;
 800480e:	e002      	b.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
      break;
 8004814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_TIM_ConfigClockSource+0x1c>
 8004840:	2302      	movs	r3, #2
 8004842:	e0b4      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x186>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800486a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487c:	d03e      	beq.n	80048fc <HAL_TIM_ConfigClockSource+0xd4>
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004882:	f200 8087 	bhi.w	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488a:	f000 8086 	beq.w	800499a <HAL_TIM_ConfigClockSource+0x172>
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004892:	d87f      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b70      	cmp	r3, #112	; 0x70
 8004896:	d01a      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xa6>
 8004898:	2b70      	cmp	r3, #112	; 0x70
 800489a:	d87b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b60      	cmp	r3, #96	; 0x60
 800489e:	d050      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x11a>
 80048a0:	2b60      	cmp	r3, #96	; 0x60
 80048a2:	d877      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b50      	cmp	r3, #80	; 0x50
 80048a6:	d03c      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0xfa>
 80048a8:	2b50      	cmp	r3, #80	; 0x50
 80048aa:	d873      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d058      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x13a>
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d86f      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048b4:	2b30      	cmp	r3, #48	; 0x30
 80048b6:	d064      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048b8:	2b30      	cmp	r3, #48	; 0x30
 80048ba:	d86b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d060      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d867      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d05c      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d05a      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	e062      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048de:	f000 fafa 	bl	8004ed6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	609a      	str	r2, [r3, #8]
      break;
 80048fa:	e04f      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800490c:	f000 fae3 	bl	8004ed6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800491e:	609a      	str	r2, [r3, #8]
      break;
 8004920:	e03c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	461a      	mov	r2, r3
 8004930:	f000 fa5a 	bl	8004de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2150      	movs	r1, #80	; 0x50
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fab1 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004940:	e02c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800494e:	461a      	mov	r2, r3
 8004950:	f000 fa78 	bl	8004e44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2160      	movs	r1, #96	; 0x60
 800495a:	4618      	mov	r0, r3
 800495c:	f000 faa1 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004960:	e01c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	461a      	mov	r2, r3
 8004970:	f000 fa3a 	bl	8004de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2140      	movs	r1, #64	; 0x40
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fa91 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004980:	e00c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f000 fa88 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004992:	e003      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      break;
 8004998:	e000      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800499a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
	...

08004a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <TIM_Base_SetConfig+0xc8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00f      	beq.n	8004a38 <TIM_Base_SetConfig+0x38>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1e:	d00b      	beq.n	8004a38 <TIM_Base_SetConfig+0x38>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <TIM_Base_SetConfig+0xcc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <TIM_Base_SetConfig+0x38>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a29      	ldr	r2, [pc, #164]	; (8004ad0 <TIM_Base_SetConfig+0xd0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_Base_SetConfig+0x38>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a28      	ldr	r2, [pc, #160]	; (8004ad4 <TIM_Base_SetConfig+0xd4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d108      	bne.n	8004a4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <TIM_Base_SetConfig+0xc8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00f      	beq.n	8004a72 <TIM_Base_SetConfig+0x72>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d00b      	beq.n	8004a72 <TIM_Base_SetConfig+0x72>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <TIM_Base_SetConfig+0xcc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_Base_SetConfig+0x72>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <TIM_Base_SetConfig+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_Base_SetConfig+0x72>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <TIM_Base_SetConfig+0xd4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <TIM_Base_SetConfig+0xc8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d103      	bne.n	8004ab8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	615a      	str	r2, [r3, #20]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00

08004ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f023 0201 	bic.w	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f023 0302 	bic.w	r3, r3, #2
 8004b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ba0 <TIM_OC1_SetConfig+0xc8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10c      	bne.n	8004b4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0308 	bic.w	r3, r3, #8
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <TIM_OC1_SetConfig+0xc8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00

08004ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f023 0210 	bic.w	r2, r3, #16
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0320 	bic.w	r3, r3, #32
 8004bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <TIM_OC2_SetConfig+0xd0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d10d      	bne.n	8004c20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a14      	ldr	r2, [pc, #80]	; (8004c74 <TIM_OC2_SetConfig+0xd0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d113      	bne.n	8004c50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	40012c00 	.word	0x40012c00

08004c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <TIM_OC3_SetConfig+0xd0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d10d      	bne.n	8004cf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <TIM_OC3_SetConfig+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40012c00 	.word	0x40012c00

08004d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	031b      	lsls	r3, r3, #12
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <TIM_OC4_SetConfig+0x98>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d109      	bne.n	8004dc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	019b      	lsls	r3, r3, #6
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	40012c00 	.word	0x40012c00

08004de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 030a 	bic.w	r3, r3, #10
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0210 	bic.w	r2, r3, #16
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	031b      	lsls	r3, r3, #12
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f043 0307 	orr.w	r3, r3, #7
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b087      	sub	sp, #28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	021a      	lsls	r2, r3, #8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	609a      	str	r2, [r3, #8]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2201      	movs	r2, #1
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1a      	ldr	r2, [r3, #32]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	43db      	mvns	r3, r3
 8004f36:	401a      	ands	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a1a      	ldr	r2, [r3, #32]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e04b      	b.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a19      	ldr	r2, [pc, #100]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d00e      	beq.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a12      	ldr	r2, [pc, #72]	; (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10c      	bne.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40000c00 	.word	0x40000c00

08005028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <memset>:
 800504c:	4603      	mov	r3, r0
 800504e:	4402      	add	r2, r0
 8005050:	4293      	cmp	r3, r2
 8005052:	d100      	bne.n	8005056 <memset+0xa>
 8005054:	4770      	bx	lr
 8005056:	f803 1b01 	strb.w	r1, [r3], #1
 800505a:	e7f9      	b.n	8005050 <memset+0x4>

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	2600      	movs	r6, #0
 8005060:	4d0c      	ldr	r5, [pc, #48]	; (8005094 <__libc_init_array+0x38>)
 8005062:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005064:	1b64      	subs	r4, r4, r5
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	f000 f81a 	bl	80050a4 <_init>
 8005070:	2600      	movs	r6, #0
 8005072:	4d0a      	ldr	r5, [pc, #40]	; (800509c <__libc_init_array+0x40>)
 8005074:	4c0a      	ldr	r4, [pc, #40]	; (80050a0 <__libc_init_array+0x44>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f855 3b04 	ldr.w	r3, [r5], #4
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f855 3b04 	ldr.w	r3, [r5], #4
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	08005108 	.word	0x08005108
 8005098:	08005108 	.word	0x08005108
 800509c:	08005108 	.word	0x08005108
 80050a0:	0800510c 	.word	0x0800510c

080050a4 <_init>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr

080050b0 <_fini>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr
