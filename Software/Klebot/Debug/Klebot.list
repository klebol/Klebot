
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e220  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800e410  0800e410  0001e410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8d4  0800e8d4  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8d4  0800e8d4  0001e8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8dc  0800e8dc  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8dc  0800e8dc  0001e8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8e0  0800e8e0  0001e8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800e8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022dc  20000278  0800eb5c  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20002554  0800eb5c  00022554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ae8  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056dd  00000000  00000000  00040dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e28  00000000  00000000  000464b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001736  00000000  00000000  000482d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025316  00000000  00000000  00049a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025297  00000000  00000000  0006ed24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc154  00000000  00000000  00093fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009104  00000000  00000000  00160110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00169214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000278 	.word	0x20000278
 800020c:	00000000 	.word	0x00000000
 8000210:	0800e3f8 	.word	0x0800e3f8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000027c 	.word	0x2000027c
 800022c:	0800e3f8 	.word	0x0800e3f8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_fmul>:
 8000e64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e6c:	bf1e      	ittt	ne
 8000e6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e72:	ea92 0f0c 	teqne	r2, ip
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d06f      	beq.n	8000f5c <__aeabi_fmul+0xf8>
 8000e7c:	441a      	add	r2, r3
 8000e7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e8a:	d01e      	beq.n	8000eca <__aeabi_fmul+0x66>
 8000e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e98:	fba0 3101 	umull	r3, r1, r0, r1
 8000e9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ea4:	bf3e      	ittt	cc
 8000ea6:	0049      	lslcc	r1, r1, #1
 8000ea8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	ea40 0001 	orr.w	r0, r0, r1
 8000eb2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eb6:	2afd      	cmp	r2, #253	; 0xfd
 8000eb8:	d81d      	bhi.n	8000ef6 <__aeabi_fmul+0x92>
 8000eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ebe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec2:	bf08      	it	eq
 8000ec4:	f020 0001 	biceq.w	r0, r0, #1
 8000ec8:	4770      	bx	lr
 8000eca:	f090 0f00 	teq	r0, #0
 8000ece:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed2:	bf08      	it	eq
 8000ed4:	0249      	lsleq	r1, r1, #9
 8000ed6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ede:	3a7f      	subs	r2, #127	; 0x7f
 8000ee0:	bfc2      	ittt	gt
 8000ee2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eea:	4770      	bxgt	lr
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	dc5d      	bgt.n	8000fb4 <__aeabi_fmul+0x150>
 8000ef8:	f112 0f19 	cmn.w	r2, #25
 8000efc:	bfdc      	itt	le
 8000efe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f02:	4770      	bxle	lr
 8000f04:	f1c2 0200 	rsb	r2, r2, #0
 8000f08:	0041      	lsls	r1, r0, #1
 8000f0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f0e:	f1c2 0220 	rsb	r2, r2, #32
 8000f12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f1a:	f140 0000 	adc.w	r0, r0, #0
 8000f1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f22:	bf08      	it	eq
 8000f24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f28:	4770      	bx	lr
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fmul+0xce>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fmul+0xe6>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fmul+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	bf18      	it	ne
 8000f66:	ea93 0f0c 	teqne	r3, ip
 8000f6a:	d00a      	beq.n	8000f82 <__aeabi_fmul+0x11e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	d1d8      	bne.n	8000f2a <__aeabi_fmul+0xc6>
 8000f78:	ea80 0001 	eor.w	r0, r0, r1
 8000f7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f80:	4770      	bx	lr
 8000f82:	f090 0f00 	teq	r0, #0
 8000f86:	bf17      	itett	ne
 8000f88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f8c:	4608      	moveq	r0, r1
 8000f8e:	f091 0f00 	teqne	r1, #0
 8000f92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f96:	d014      	beq.n	8000fc2 <__aeabi_fmul+0x15e>
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_fmul+0x13e>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d10f      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fa2:	ea93 0f0c 	teq	r3, ip
 8000fa6:	d103      	bne.n	8000fb0 <__aeabi_fmul+0x14c>
 8000fa8:	024b      	lsls	r3, r1, #9
 8000faa:	bf18      	it	ne
 8000fac:	4608      	movne	r0, r1
 8000fae:	d108      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fb0:	ea80 0001 	eor.w	r0, r0, r1
 8000fb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fc0:	4770      	bx	lr
 8000fc2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fc6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fca:	4770      	bx	lr

08000fcc <__aeabi_fdiv>:
 8000fcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fd4:	bf1e      	ittt	ne
 8000fd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fda:	ea92 0f0c 	teqne	r2, ip
 8000fde:	ea93 0f0c 	teqne	r3, ip
 8000fe2:	d069      	beq.n	80010b8 <__aeabi_fdiv+0xec>
 8000fe4:	eba2 0203 	sub.w	r2, r2, r3
 8000fe8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fec:	0249      	lsls	r1, r1, #9
 8000fee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ff2:	d037      	beq.n	8001064 <__aeabi_fdiv+0x98>
 8000ff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ffc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001000:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001004:	428b      	cmp	r3, r1
 8001006:	bf38      	it	cc
 8001008:	005b      	lslcc	r3, r3, #1
 800100a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800100e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001012:	428b      	cmp	r3, r1
 8001014:	bf24      	itt	cs
 8001016:	1a5b      	subcs	r3, r3, r1
 8001018:	ea40 000c 	orrcs.w	r0, r0, ip
 800101c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001020:	bf24      	itt	cs
 8001022:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001026:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800102a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800102e:	bf24      	itt	cs
 8001030:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001034:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001038:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800103c:	bf24      	itt	cs
 800103e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001042:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	bf18      	it	ne
 800104a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800104e:	d1e0      	bne.n	8001012 <__aeabi_fdiv+0x46>
 8001050:	2afd      	cmp	r2, #253	; 0xfd
 8001052:	f63f af50 	bhi.w	8000ef6 <__aeabi_fmul+0x92>
 8001056:	428b      	cmp	r3, r1
 8001058:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800105c:	bf08      	it	eq
 800105e:	f020 0001 	biceq.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001068:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800106c:	327f      	adds	r2, #127	; 0x7f
 800106e:	bfc2      	ittt	gt
 8001070:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001074:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001078:	4770      	bxgt	lr
 800107a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	3a01      	subs	r2, #1
 8001084:	e737      	b.n	8000ef6 <__aeabi_fmul+0x92>
 8001086:	f092 0f00 	teq	r2, #0
 800108a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800108e:	bf02      	ittt	eq
 8001090:	0040      	lsleq	r0, r0, #1
 8001092:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001096:	3a01      	subeq	r2, #1
 8001098:	d0f9      	beq.n	800108e <__aeabi_fdiv+0xc2>
 800109a:	ea40 000c 	orr.w	r0, r0, ip
 800109e:	f093 0f00 	teq	r3, #0
 80010a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	bf02      	ittt	eq
 80010a8:	0049      	lsleq	r1, r1, #1
 80010aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010ae:	3b01      	subeq	r3, #1
 80010b0:	d0f9      	beq.n	80010a6 <__aeabi_fdiv+0xda>
 80010b2:	ea41 010c 	orr.w	r1, r1, ip
 80010b6:	e795      	b.n	8000fe4 <__aeabi_fdiv+0x18>
 80010b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010bc:	ea92 0f0c 	teq	r2, ip
 80010c0:	d108      	bne.n	80010d4 <__aeabi_fdiv+0x108>
 80010c2:	0242      	lsls	r2, r0, #9
 80010c4:	f47f af7d 	bne.w	8000fc2 <__aeabi_fmul+0x15e>
 80010c8:	ea93 0f0c 	teq	r3, ip
 80010cc:	f47f af70 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e776      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010d4:	ea93 0f0c 	teq	r3, ip
 80010d8:	d104      	bne.n	80010e4 <__aeabi_fdiv+0x118>
 80010da:	024b      	lsls	r3, r1, #9
 80010dc:	f43f af4c 	beq.w	8000f78 <__aeabi_fmul+0x114>
 80010e0:	4608      	mov	r0, r1
 80010e2:	e76e      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e8:	bf18      	it	ne
 80010ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010ee:	d1ca      	bne.n	8001086 <__aeabi_fdiv+0xba>
 80010f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010f4:	f47f af5c 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010fc:	f47f af3c 	bne.w	8000f78 <__aeabi_fmul+0x114>
 8001100:	e75f      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 8001102:	bf00      	nop

08001104 <__gesf2>:
 8001104:	f04f 3cff 	mov.w	ip, #4294967295
 8001108:	e006      	b.n	8001118 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__lesf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	e002      	b.n	8001118 <__cmpsf2+0x4>
 8001112:	bf00      	nop

08001114 <__cmpsf2>:
 8001114:	f04f 0c01 	mov.w	ip, #1
 8001118:	f84d cd04 	str.w	ip, [sp, #-4]!
 800111c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001120:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001124:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001128:	bf18      	it	ne
 800112a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800112e:	d011      	beq.n	8001154 <__cmpsf2+0x40>
 8001130:	b001      	add	sp, #4
 8001132:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001136:	bf18      	it	ne
 8001138:	ea90 0f01 	teqne	r0, r1
 800113c:	bf58      	it	pl
 800113e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001142:	bf88      	it	hi
 8001144:	17c8      	asrhi	r0, r1, #31
 8001146:	bf38      	it	cc
 8001148:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800114c:	bf18      	it	ne
 800114e:	f040 0001 	orrne.w	r0, r0, #1
 8001152:	4770      	bx	lr
 8001154:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001158:	d102      	bne.n	8001160 <__cmpsf2+0x4c>
 800115a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800115e:	d105      	bne.n	800116c <__cmpsf2+0x58>
 8001160:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001164:	d1e4      	bne.n	8001130 <__cmpsf2+0x1c>
 8001166:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800116a:	d0e1      	beq.n	8001130 <__cmpsf2+0x1c>
 800116c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <__aeabi_cfrcmple>:
 8001174:	4684      	mov	ip, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4661      	mov	r1, ip
 800117a:	e7ff      	b.n	800117c <__aeabi_cfcmpeq>

0800117c <__aeabi_cfcmpeq>:
 800117c:	b50f      	push	{r0, r1, r2, r3, lr}
 800117e:	f7ff ffc9 	bl	8001114 <__cmpsf2>
 8001182:	2800      	cmp	r0, #0
 8001184:	bf48      	it	mi
 8001186:	f110 0f00 	cmnmi.w	r0, #0
 800118a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800118c <__aeabi_fcmpeq>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff fff4 	bl	800117c <__aeabi_cfcmpeq>
 8001194:	bf0c      	ite	eq
 8001196:	2001      	moveq	r0, #1
 8001198:	2000      	movne	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmplt>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff ffea 	bl	800117c <__aeabi_cfcmpeq>
 80011a8:	bf34      	ite	cc
 80011aa:	2001      	movcc	r0, #1
 80011ac:	2000      	movcs	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmple>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffe0 	bl	800117c <__aeabi_cfcmpeq>
 80011bc:	bf94      	ite	ls
 80011be:	2001      	movls	r0, #1
 80011c0:	2000      	movhi	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmpge>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffd2 	bl	8001174 <__aeabi_cfrcmple>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpgt>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffc8 	bl	8001174 <__aeabi_cfrcmple>
 80011e4:	bf34      	ite	cc
 80011e6:	2001      	movcc	r0, #1
 80011e8:	2000      	movcs	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_f2iz>:
 80011f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f8:	d30f      	bcc.n	800121a <__aeabi_f2iz+0x2a>
 80011fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001202:	d90d      	bls.n	8001220 <__aeabi_f2iz+0x30>
 8001204:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800120c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001210:	fa23 f002 	lsr.w	r0, r3, r2
 8001214:	bf18      	it	ne
 8001216:	4240      	negne	r0, r0
 8001218:	4770      	bx	lr
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	4770      	bx	lr
 8001220:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001224:	d101      	bne.n	800122a <__aeabi_f2iz+0x3a>
 8001226:	0242      	lsls	r2, r0, #9
 8001228:	d105      	bne.n	8001236 <__aeabi_f2iz+0x46>
 800122a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800122e:	bf08      	it	eq
 8001230:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001234:	4770      	bx	lr
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	4770      	bx	lr

0800123c <__aeabi_uldivmod>:
 800123c:	b953      	cbnz	r3, 8001254 <__aeabi_uldivmod+0x18>
 800123e:	b94a      	cbnz	r2, 8001254 <__aeabi_uldivmod+0x18>
 8001240:	2900      	cmp	r1, #0
 8001242:	bf08      	it	eq
 8001244:	2800      	cmpeq	r0, #0
 8001246:	bf1c      	itt	ne
 8001248:	f04f 31ff 	movne.w	r1, #4294967295
 800124c:	f04f 30ff 	movne.w	r0, #4294967295
 8001250:	f000 b9aa 	b.w	80015a8 <__aeabi_idiv0>
 8001254:	f1ad 0c08 	sub.w	ip, sp, #8
 8001258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800125c:	f000 f83e 	bl	80012dc <__udivmoddi4>
 8001260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001268:	b004      	add	sp, #16
 800126a:	4770      	bx	lr

0800126c <__aeabi_d2lz>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4605      	mov	r5, r0
 8001270:	460c      	mov	r4, r1
 8001272:	2200      	movs	r2, #0
 8001274:	2300      	movs	r3, #0
 8001276:	4628      	mov	r0, r5
 8001278:	4621      	mov	r1, r4
 800127a:	f7ff fc0f 	bl	8000a9c <__aeabi_dcmplt>
 800127e:	b928      	cbnz	r0, 800128c <__aeabi_d2lz+0x20>
 8001280:	4628      	mov	r0, r5
 8001282:	4621      	mov	r1, r4
 8001284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001288:	f000 b80a 	b.w	80012a0 <__aeabi_d2ulz>
 800128c:	4628      	mov	r0, r5
 800128e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001292:	f000 f805 	bl	80012a0 <__aeabi_d2ulz>
 8001296:	4240      	negs	r0, r0
 8001298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800129c:	bd38      	pop	{r3, r4, r5, pc}
 800129e:	bf00      	nop

080012a0 <__aeabi_d2ulz>:
 80012a0:	b5d0      	push	{r4, r6, r7, lr}
 80012a2:	2200      	movs	r2, #0
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <__aeabi_d2ulz+0x34>)
 80012a6:	4606      	mov	r6, r0
 80012a8:	460f      	mov	r7, r1
 80012aa:	f7ff f985 	bl	80005b8 <__aeabi_dmul>
 80012ae:	f7ff fc5b 	bl	8000b68 <__aeabi_d2uiz>
 80012b2:	4604      	mov	r4, r0
 80012b4:	f7ff f906 	bl	80004c4 <__aeabi_ui2d>
 80012b8:	2200      	movs	r2, #0
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <__aeabi_d2ulz+0x38>)
 80012bc:	f7ff f97c 	bl	80005b8 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4630      	mov	r0, r6
 80012c6:	4639      	mov	r1, r7
 80012c8:	f7fe ffbe 	bl	8000248 <__aeabi_dsub>
 80012cc:	f7ff fc4c 	bl	8000b68 <__aeabi_d2uiz>
 80012d0:	4621      	mov	r1, r4
 80012d2:	bdd0      	pop	{r4, r6, r7, pc}
 80012d4:	3df00000 	.word	0x3df00000
 80012d8:	41f00000 	.word	0x41f00000

080012dc <__udivmoddi4>:
 80012dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e0:	9e08      	ldr	r6, [sp, #32]
 80012e2:	460d      	mov	r5, r1
 80012e4:	4604      	mov	r4, r0
 80012e6:	468e      	mov	lr, r1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d14c      	bne.n	8001386 <__udivmoddi4+0xaa>
 80012ec:	428a      	cmp	r2, r1
 80012ee:	4694      	mov	ip, r2
 80012f0:	d967      	bls.n	80013c2 <__udivmoddi4+0xe6>
 80012f2:	fab2 f382 	clz	r3, r2
 80012f6:	b153      	cbz	r3, 800130e <__udivmoddi4+0x32>
 80012f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80012fc:	f1c3 0220 	rsb	r2, r3, #32
 8001300:	fa01 fe03 	lsl.w	lr, r1, r3
 8001304:	fa20 f202 	lsr.w	r2, r0, r2
 8001308:	ea42 0e0e 	orr.w	lr, r2, lr
 800130c:	409c      	lsls	r4, r3
 800130e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001312:	fbbe f1f7 	udiv	r1, lr, r7
 8001316:	fa1f f58c 	uxth.w	r5, ip
 800131a:	fb07 ee11 	mls	lr, r7, r1, lr
 800131e:	fb01 f005 	mul.w	r0, r1, r5
 8001322:	0c22      	lsrs	r2, r4, #16
 8001324:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001328:	4290      	cmp	r0, r2
 800132a:	d90a      	bls.n	8001342 <__udivmoddi4+0x66>
 800132c:	eb1c 0202 	adds.w	r2, ip, r2
 8001330:	f101 3eff 	add.w	lr, r1, #4294967295
 8001334:	f080 8119 	bcs.w	800156a <__udivmoddi4+0x28e>
 8001338:	4290      	cmp	r0, r2
 800133a:	f240 8116 	bls.w	800156a <__udivmoddi4+0x28e>
 800133e:	3902      	subs	r1, #2
 8001340:	4462      	add	r2, ip
 8001342:	1a12      	subs	r2, r2, r0
 8001344:	fbb2 f0f7 	udiv	r0, r2, r7
 8001348:	fb07 2210 	mls	r2, r7, r0, r2
 800134c:	fb00 f505 	mul.w	r5, r0, r5
 8001350:	b2a4      	uxth	r4, r4
 8001352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001356:	42a5      	cmp	r5, r4
 8001358:	d90a      	bls.n	8001370 <__udivmoddi4+0x94>
 800135a:	eb1c 0404 	adds.w	r4, ip, r4
 800135e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001362:	f080 8104 	bcs.w	800156e <__udivmoddi4+0x292>
 8001366:	42a5      	cmp	r5, r4
 8001368:	f240 8101 	bls.w	800156e <__udivmoddi4+0x292>
 800136c:	4464      	add	r4, ip
 800136e:	3802      	subs	r0, #2
 8001370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001374:	2100      	movs	r1, #0
 8001376:	1b64      	subs	r4, r4, r5
 8001378:	b11e      	cbz	r6, 8001382 <__udivmoddi4+0xa6>
 800137a:	40dc      	lsrs	r4, r3
 800137c:	2300      	movs	r3, #0
 800137e:	e9c6 4300 	strd	r4, r3, [r6]
 8001382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001386:	428b      	cmp	r3, r1
 8001388:	d908      	bls.n	800139c <__udivmoddi4+0xc0>
 800138a:	2e00      	cmp	r6, #0
 800138c:	f000 80ea 	beq.w	8001564 <__udivmoddi4+0x288>
 8001390:	2100      	movs	r1, #0
 8001392:	e9c6 0500 	strd	r0, r5, [r6]
 8001396:	4608      	mov	r0, r1
 8001398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139c:	fab3 f183 	clz	r1, r3
 80013a0:	2900      	cmp	r1, #0
 80013a2:	d148      	bne.n	8001436 <__udivmoddi4+0x15a>
 80013a4:	42ab      	cmp	r3, r5
 80013a6:	d302      	bcc.n	80013ae <__udivmoddi4+0xd2>
 80013a8:	4282      	cmp	r2, r0
 80013aa:	f200 80f8 	bhi.w	800159e <__udivmoddi4+0x2c2>
 80013ae:	1a84      	subs	r4, r0, r2
 80013b0:	eb65 0203 	sbc.w	r2, r5, r3
 80013b4:	2001      	movs	r0, #1
 80013b6:	4696      	mov	lr, r2
 80013b8:	2e00      	cmp	r6, #0
 80013ba:	d0e2      	beq.n	8001382 <__udivmoddi4+0xa6>
 80013bc:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c0:	e7df      	b.n	8001382 <__udivmoddi4+0xa6>
 80013c2:	b902      	cbnz	r2, 80013c6 <__udivmoddi4+0xea>
 80013c4:	deff      	udf	#255	; 0xff
 80013c6:	fab2 f382 	clz	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 808e 	bne.w	80014ec <__udivmoddi4+0x210>
 80013d0:	1a88      	subs	r0, r1, r2
 80013d2:	2101      	movs	r1, #1
 80013d4:	0c17      	lsrs	r7, r2, #16
 80013d6:	fa1f fe82 	uxth.w	lr, r2
 80013da:	fbb0 f5f7 	udiv	r5, r0, r7
 80013de:	fb07 0015 	mls	r0, r7, r5, r0
 80013e2:	0c22      	lsrs	r2, r4, #16
 80013e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80013e8:	fb0e f005 	mul.w	r0, lr, r5
 80013ec:	4290      	cmp	r0, r2
 80013ee:	d908      	bls.n	8001402 <__udivmoddi4+0x126>
 80013f0:	eb1c 0202 	adds.w	r2, ip, r2
 80013f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80013f8:	d202      	bcs.n	8001400 <__udivmoddi4+0x124>
 80013fa:	4290      	cmp	r0, r2
 80013fc:	f200 80cc 	bhi.w	8001598 <__udivmoddi4+0x2bc>
 8001400:	4645      	mov	r5, r8
 8001402:	1a12      	subs	r2, r2, r0
 8001404:	fbb2 f0f7 	udiv	r0, r2, r7
 8001408:	fb07 2210 	mls	r2, r7, r0, r2
 800140c:	fb0e fe00 	mul.w	lr, lr, r0
 8001410:	b2a4      	uxth	r4, r4
 8001412:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001416:	45a6      	cmp	lr, r4
 8001418:	d908      	bls.n	800142c <__udivmoddi4+0x150>
 800141a:	eb1c 0404 	adds.w	r4, ip, r4
 800141e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001422:	d202      	bcs.n	800142a <__udivmoddi4+0x14e>
 8001424:	45a6      	cmp	lr, r4
 8001426:	f200 80b4 	bhi.w	8001592 <__udivmoddi4+0x2b6>
 800142a:	4610      	mov	r0, r2
 800142c:	eba4 040e 	sub.w	r4, r4, lr
 8001430:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001434:	e7a0      	b.n	8001378 <__udivmoddi4+0x9c>
 8001436:	f1c1 0720 	rsb	r7, r1, #32
 800143a:	408b      	lsls	r3, r1
 800143c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001440:	ea4c 0c03 	orr.w	ip, ip, r3
 8001444:	fa25 fa07 	lsr.w	sl, r5, r7
 8001448:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800144c:	fbba f8f9 	udiv	r8, sl, r9
 8001450:	408d      	lsls	r5, r1
 8001452:	fa20 f307 	lsr.w	r3, r0, r7
 8001456:	fb09 aa18 	mls	sl, r9, r8, sl
 800145a:	fa1f fe8c 	uxth.w	lr, ip
 800145e:	432b      	orrs	r3, r5
 8001460:	fa00 f501 	lsl.w	r5, r0, r1
 8001464:	fb08 f00e 	mul.w	r0, r8, lr
 8001468:	0c1c      	lsrs	r4, r3, #16
 800146a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800146e:	42a0      	cmp	r0, r4
 8001470:	fa02 f201 	lsl.w	r2, r2, r1
 8001474:	d90b      	bls.n	800148e <__udivmoddi4+0x1b2>
 8001476:	eb1c 0404 	adds.w	r4, ip, r4
 800147a:	f108 3aff 	add.w	sl, r8, #4294967295
 800147e:	f080 8086 	bcs.w	800158e <__udivmoddi4+0x2b2>
 8001482:	42a0      	cmp	r0, r4
 8001484:	f240 8083 	bls.w	800158e <__udivmoddi4+0x2b2>
 8001488:	f1a8 0802 	sub.w	r8, r8, #2
 800148c:	4464      	add	r4, ip
 800148e:	1a24      	subs	r4, r4, r0
 8001490:	b298      	uxth	r0, r3
 8001492:	fbb4 f3f9 	udiv	r3, r4, r9
 8001496:	fb09 4413 	mls	r4, r9, r3, r4
 800149a:	fb03 fe0e 	mul.w	lr, r3, lr
 800149e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80014a2:	45a6      	cmp	lr, r4
 80014a4:	d908      	bls.n	80014b8 <__udivmoddi4+0x1dc>
 80014a6:	eb1c 0404 	adds.w	r4, ip, r4
 80014aa:	f103 30ff 	add.w	r0, r3, #4294967295
 80014ae:	d26a      	bcs.n	8001586 <__udivmoddi4+0x2aa>
 80014b0:	45a6      	cmp	lr, r4
 80014b2:	d968      	bls.n	8001586 <__udivmoddi4+0x2aa>
 80014b4:	3b02      	subs	r3, #2
 80014b6:	4464      	add	r4, ip
 80014b8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80014bc:	fba0 9302 	umull	r9, r3, r0, r2
 80014c0:	eba4 040e 	sub.w	r4, r4, lr
 80014c4:	429c      	cmp	r4, r3
 80014c6:	46c8      	mov	r8, r9
 80014c8:	469e      	mov	lr, r3
 80014ca:	d354      	bcc.n	8001576 <__udivmoddi4+0x29a>
 80014cc:	d051      	beq.n	8001572 <__udivmoddi4+0x296>
 80014ce:	2e00      	cmp	r6, #0
 80014d0:	d067      	beq.n	80015a2 <__udivmoddi4+0x2c6>
 80014d2:	ebb5 0308 	subs.w	r3, r5, r8
 80014d6:	eb64 040e 	sbc.w	r4, r4, lr
 80014da:	40cb      	lsrs	r3, r1
 80014dc:	fa04 f707 	lsl.w	r7, r4, r7
 80014e0:	431f      	orrs	r7, r3
 80014e2:	40cc      	lsrs	r4, r1
 80014e4:	e9c6 7400 	strd	r7, r4, [r6]
 80014e8:	2100      	movs	r1, #0
 80014ea:	e74a      	b.n	8001382 <__udivmoddi4+0xa6>
 80014ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80014f0:	f1c3 0020 	rsb	r0, r3, #32
 80014f4:	40c1      	lsrs	r1, r0
 80014f6:	409d      	lsls	r5, r3
 80014f8:	fa24 f000 	lsr.w	r0, r4, r0
 80014fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001500:	4328      	orrs	r0, r5
 8001502:	fbb1 f5f7 	udiv	r5, r1, r7
 8001506:	fb07 1115 	mls	r1, r7, r5, r1
 800150a:	fa1f fe8c 	uxth.w	lr, ip
 800150e:	0c02      	lsrs	r2, r0, #16
 8001510:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001514:	fb05 f10e 	mul.w	r1, r5, lr
 8001518:	4291      	cmp	r1, r2
 800151a:	fa04 f403 	lsl.w	r4, r4, r3
 800151e:	d908      	bls.n	8001532 <__udivmoddi4+0x256>
 8001520:	eb1c 0202 	adds.w	r2, ip, r2
 8001524:	f105 38ff 	add.w	r8, r5, #4294967295
 8001528:	d22f      	bcs.n	800158a <__udivmoddi4+0x2ae>
 800152a:	4291      	cmp	r1, r2
 800152c:	d92d      	bls.n	800158a <__udivmoddi4+0x2ae>
 800152e:	3d02      	subs	r5, #2
 8001530:	4462      	add	r2, ip
 8001532:	1a52      	subs	r2, r2, r1
 8001534:	fbb2 f1f7 	udiv	r1, r2, r7
 8001538:	fb07 2211 	mls	r2, r7, r1, r2
 800153c:	b280      	uxth	r0, r0
 800153e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001542:	fb01 f20e 	mul.w	r2, r1, lr
 8001546:	4282      	cmp	r2, r0
 8001548:	d908      	bls.n	800155c <__udivmoddi4+0x280>
 800154a:	eb1c 0000 	adds.w	r0, ip, r0
 800154e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001552:	d216      	bcs.n	8001582 <__udivmoddi4+0x2a6>
 8001554:	4282      	cmp	r2, r0
 8001556:	d914      	bls.n	8001582 <__udivmoddi4+0x2a6>
 8001558:	3902      	subs	r1, #2
 800155a:	4460      	add	r0, ip
 800155c:	1a80      	subs	r0, r0, r2
 800155e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001562:	e73a      	b.n	80013da <__udivmoddi4+0xfe>
 8001564:	4631      	mov	r1, r6
 8001566:	4630      	mov	r0, r6
 8001568:	e70b      	b.n	8001382 <__udivmoddi4+0xa6>
 800156a:	4671      	mov	r1, lr
 800156c:	e6e9      	b.n	8001342 <__udivmoddi4+0x66>
 800156e:	4610      	mov	r0, r2
 8001570:	e6fe      	b.n	8001370 <__udivmoddi4+0x94>
 8001572:	454d      	cmp	r5, r9
 8001574:	d2ab      	bcs.n	80014ce <__udivmoddi4+0x1f2>
 8001576:	ebb9 0802 	subs.w	r8, r9, r2
 800157a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800157e:	3801      	subs	r0, #1
 8001580:	e7a5      	b.n	80014ce <__udivmoddi4+0x1f2>
 8001582:	4641      	mov	r1, r8
 8001584:	e7ea      	b.n	800155c <__udivmoddi4+0x280>
 8001586:	4603      	mov	r3, r0
 8001588:	e796      	b.n	80014b8 <__udivmoddi4+0x1dc>
 800158a:	4645      	mov	r5, r8
 800158c:	e7d1      	b.n	8001532 <__udivmoddi4+0x256>
 800158e:	46d0      	mov	r8, sl
 8001590:	e77d      	b.n	800148e <__udivmoddi4+0x1b2>
 8001592:	4464      	add	r4, ip
 8001594:	3802      	subs	r0, #2
 8001596:	e749      	b.n	800142c <__udivmoddi4+0x150>
 8001598:	3d02      	subs	r5, #2
 800159a:	4462      	add	r2, ip
 800159c:	e731      	b.n	8001402 <__udivmoddi4+0x126>
 800159e:	4608      	mov	r0, r1
 80015a0:	e70a      	b.n	80013b8 <__udivmoddi4+0xdc>
 80015a2:	4631      	mov	r1, r6
 80015a4:	e6ed      	b.n	8001382 <__udivmoddi4+0xa6>
 80015a6:	bf00      	nop

080015a8 <__aeabi_idiv0>:
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop

080015ac <FIRFilter_Init>:




void FIRFilter_Init(FIRFilter *fir)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e008      	b.n	80015cc <FIRFilter_Init+0x20>
	{
		fir->buf[n] = 0.0f;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b18      	cmp	r3, #24
 80015d0:	d9f3      	bls.n	80015ba <FIRFilter_Init+0xe>
	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	/* Clear filter output */
	fir->out = 0.0f;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80015fc:	4619      	mov	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800160c:	3301      	adds	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	if(fir->bufIndex == FIR_FILTER_LENGTH)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800161c:	2b19      	cmp	r3, #25
 800161e:	d103      	bne.n	8001628 <FIRFilter_Update+0x3c>
	{
		fir->bufIndex = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	}

	/* Compute new output sample (via convulation) */
	fir->out = 0.0f;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	669a      	str	r2, [r3, #104]	; 0x68

	uint8_t sumIndex = fir->bufIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001636:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8001638:	2300      	movs	r3, #0
 800163a:	73bb      	strb	r3, [r7, #14]
 800163c:	e021      	b.n	8001682 <FIRFilter_Update+0x96>
	{
		/* Decrement index and wrap if necessary */
		if (sumIndex > 0)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <FIRFilter_Update+0x60>
		{
			sumIndex--;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	3b01      	subs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
 800164a:	e001      	b.n	8001650 <FIRFilter_Update+0x64>
		}
		else
		{
			sumIndex = FIR_FILTER_LENGTH - 1;
 800164c:	2318      	movs	r3, #24
 800164e:	73fb      	strb	r3, [r7, #15]
		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <FIRFilter_Update+0xa8>)
 8001658:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fbfd 	bl	8000e64 <__aeabi_fmul>
 800166a:	4603      	mov	r3, r0
 800166c:	4619      	mov	r1, r3
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff faf0 	bl	8000c54 <__addsf3>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	669a      	str	r2, [r3, #104]	; 0x68
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	3301      	adds	r3, #1
 8001680:	73bb      	strb	r3, [r7, #14]
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	2b18      	cmp	r3, #24
 8001686:	d9da      	bls.n	800163e <FIRFilter_Update+0x52>
	}

	/* Return filtered output */
	return fir->out;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	20000000 	.word	0x20000000

08001698 <PID_SetGains>:
 */

#include "PID.h"

void PID_SetGains(PID_Controller_t *instance, float p, float i, float d)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
	instance->kp = p;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
	instance->ki = i;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
	instance->kp = p;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <PID_ResetTemps>:
	instance->kp = 0;
	instance->IntegralError = 0;
}

void PID_ResetTemps(PID_Controller_t *instance)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	instance->Output = 0;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	829a      	strh	r2, [r3, #20]
	instance->LastError = 0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	819a      	strh	r2, [r3, #12]
	instance->IntegralError = 0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <PID_Update>:


int16_t PID_Update(PID_Controller_t *instance, int16_t input_error, uint16_t sampling_rate_hz)
{
 80016e6:	b5b0      	push	{r4, r5, r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	807b      	strh	r3, [r7, #2]
 80016f2:	4613      	mov	r3, r2
 80016f4:	803b      	strh	r3, [r7, #0]
	/* Update integral error */
	if(instance->ki > 0)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fd6c 	bl	80011dc <__aeabi_fcmpgt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <PID_Update+0x32>
	{
		instance->IntegralError += input_error;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001712:	441a      	add	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	611a      	str	r2, [r3, #16]
	}
	/* Secure integral error */
	if(instance->IntegralError > instance->MaxIntegralError)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	429a      	cmp	r2, r3
 8001722:	dd04      	ble.n	800172e <PID_Update+0x48>
	{
		instance->IntegralError = instance->MaxIntegralError;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	e00b      	b.n	8001746 <PID_Update+0x60>
	}
	else if(instance->IntegralError < -instance->MaxIntegralError)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	425b      	negs	r3, r3
 8001738:	429a      	cmp	r2, r3
 800173a:	da04      	bge.n	8001746 <PID_Update+0x60>
	{
		instance->IntegralError = -instance->MaxIntegralError;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	425a      	negs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	611a      	str	r2, [r3, #16]
	}

	/*Calculate the PID output */
	instance->Output = (instance->kp * input_error) +
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681c      	ldr	r4, [r3, #0]
 800174a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb34 	bl	8000dbc <__aeabi_i2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4619      	mov	r1, r3
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fb83 	bl	8000e64 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	461d      	mov	r5, r3
			(instance->ki * (instance->IntegralError) / sampling_rate_hz) +
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685c      	ldr	r4, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fb26 	bl	8000dbc <__aeabi_i2f>
 8001770:	4603      	mov	r3, r0
 8001772:	4619      	mov	r1, r3
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff fb75 	bl	8000e64 <__aeabi_fmul>
 800177a:	4603      	mov	r3, r0
 800177c:	461c      	mov	r4, r3
 800177e:	883b      	ldrh	r3, [r7, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fb1b 	bl	8000dbc <__aeabi_i2f>
 8001786:	4603      	mov	r3, r0
 8001788:	4619      	mov	r1, r3
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff fc1e 	bl	8000fcc <__aeabi_fdiv>
 8001790:	4603      	mov	r3, r0
	instance->Output = (instance->kp * input_error) +
 8001792:	4619      	mov	r1, r3
 8001794:	4628      	mov	r0, r5
 8001796:	f7ff fa5d 	bl	8000c54 <__addsf3>
 800179a:	4603      	mov	r3, r0
 800179c:	461d      	mov	r5, r3
			(instance->kd * sampling_rate_hz * (input_error - instance->LastError) );
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689c      	ldr	r4, [r3, #8]
 80017a2:	883b      	ldrh	r3, [r7, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb09 	bl	8000dbc <__aeabi_i2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fb58 	bl	8000e64 <__aeabi_fmul>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461c      	mov	r4, r3
 80017b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff faf9 	bl	8000dbc <__aeabi_i2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4619      	mov	r1, r3
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fb48 	bl	8000e64 <__aeabi_fmul>
 80017d4:	4603      	mov	r3, r0
			(instance->ki * (instance->IntegralError) / sampling_rate_hz) +
 80017d6:	4619      	mov	r1, r3
 80017d8:	4628      	mov	r0, r5
 80017da:	f7ff fa3b 	bl	8000c54 <__addsf3>
 80017de:	4603      	mov	r3, r0
	instance->Output = (instance->kp * input_error) +
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fd05 	bl	80011f0 <__aeabi_f2iz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	829a      	strh	r2, [r3, #20]


	/* Secure output */
	if(instance->Output >= instance->MaxOutput)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	db05      	blt.n	800180a <PID_Update+0x124>
	{
		instance->Output = instance->MaxOutput;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	829a      	strh	r2, [r3, #20]
 8001808:	e012      	b.n	8001830 <PID_Update+0x14a>
	}
	else if(instance->Output <= -instance->MaxOutput)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001818:	425b      	negs	r3, r3
 800181a:	429a      	cmp	r2, r3
 800181c:	dc08      	bgt.n	8001830 <PID_Update+0x14a>
	{
		instance->Output = -instance->MaxOutput;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001824:	b29b      	uxth	r3, r3
 8001826:	425b      	negs	r3, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	b21a      	sxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	829a      	strh	r2, [r3, #20]
	}

	/* Save error */
	instance->LastError = input_error;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	819a      	strh	r2, [r3, #12]

	return instance->Output;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}

08001844 <DRV8836_Init>:
 */
#include "drv8836.h"
#include "tim.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	460b      	mov	r3, r1
 8001854:	80fb      	strh	r3, [r7, #6]
 8001856:	4613      	mov	r3, r2
 8001858:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	88fa      	ldrh	r2, [r7, #6]
 8001864:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	88ba      	ldrh	r2, [r7, #4]
 800186a:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8bba      	ldrh	r2, [r7, #28]
 8001876:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	891b      	ldrh	r3, [r3, #8]
 8001880:	4619      	mov	r1, r3
 8001882:	4610      	mov	r0, r2
 8001884:	f004 fe40 	bl	8006508 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	895b      	ldrh	r3, [r3, #10]
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f004 fe38 	bl	8006508 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	899b      	ldrh	r3, [r3, #12]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f004 fe30 	bl	8006508 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	89db      	ldrh	r3, [r3, #14]
 80018b0:	4619      	mov	r1, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	f004 fe28 	bl	8006508 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d105      	bne.n	80018ca <DRV8836_Init+0x86>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
 80018c8:	e016      	b.n	80018f8 <DRV8836_Init+0xb4>
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d105      	bne.n	80018dc <DRV8836_Init+0x98>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	6393      	str	r3, [r2, #56]	; 0x38
 80018da:	e00d      	b.n	80018f8 <DRV8836_Init+0xb4>
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d105      	bne.n	80018ee <DRV8836_Init+0xaa>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	63d3      	str	r3, [r2, #60]	; 0x3c
 80018ec:	e004      	b.n	80018f8 <DRV8836_Init+0xb4>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d105      	bne.n	800190a <DRV8836_Init+0xc6>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	635a      	str	r2, [r3, #52]	; 0x34
 8001908:	e016      	b.n	8001938 <DRV8836_Init+0xf4>
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d105      	bne.n	800191c <DRV8836_Init+0xd8>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	6393      	str	r3, [r2, #56]	; 0x38
 800191a:	e00d      	b.n	8001938 <DRV8836_Init+0xf4>
 800191c:	88bb      	ldrh	r3, [r7, #4]
 800191e:	2b08      	cmp	r3, #8
 8001920:	d105      	bne.n	800192e <DRV8836_Init+0xea>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2300      	movs	r3, #0
 800192a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800192c:	e004      	b.n	8001938 <DRV8836_Init+0xf4>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2300      	movs	r3, #0
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 8001938:	8b3b      	ldrh	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d105      	bne.n	800194a <DRV8836_Init+0x106>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2200      	movs	r2, #0
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
 8001948:	e016      	b.n	8001978 <DRV8836_Init+0x134>
 800194a:	8b3b      	ldrh	r3, [r7, #24]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d105      	bne.n	800195c <DRV8836_Init+0x118>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	6393      	str	r3, [r2, #56]	; 0x38
 800195a:	e00d      	b.n	8001978 <DRV8836_Init+0x134>
 800195c:	8b3b      	ldrh	r3, [r7, #24]
 800195e:	2b08      	cmp	r3, #8
 8001960:	d105      	bne.n	800196e <DRV8836_Init+0x12a>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800196c:	e004      	b.n	8001978 <DRV8836_Init+0x134>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8001978:	8bbb      	ldrh	r3, [r7, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <DRV8836_Init+0x146>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001988:	e016      	b.n	80019b8 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800198a:	8bbb      	ldrh	r3, [r7, #28]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d105      	bne.n	800199c <DRV8836_Init+0x158>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	6393      	str	r3, [r2, #56]	; 0x38
}
 800199a:	e00d      	b.n	80019b8 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800199c:	8bbb      	ldrh	r3, [r7, #28]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d105      	bne.n	80019ae <DRV8836_Init+0x16a>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2300      	movs	r3, #0
 80019aa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80019ac:	e004      	b.n	80019b8 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2300      	movs	r3, #0
 80019b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <DRV8836_SetMotor>:

DRV8836_Error_t DRV8836_SetMotor(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction, uint16_t speed)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	70fb      	strb	r3, [r7, #3]
 80019d2:	460b      	mov	r3, r1
 80019d4:	70bb      	strb	r3, [r7, #2]
 80019d6:	4613      	mov	r3, r2
 80019d8:	803b      	strh	r3, [r7, #0]
	DRV8836_Direction_t *TargetDirection;
	uint16_t *TargetSpeed;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;

	if(speed > ic->drv_htim->Instance->ARR) //check if pwm value fit the counter period range
 80019da:	883a      	ldrh	r2, [r7, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d901      	bls.n	80019ec <DRV8836_SetMotor+0x2c>
	{
		return DRV8836_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e14e      	b.n	8001c8a <DRV8836_SetMotor+0x2ca>
	}

	if(MOTOR_A == output)
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <DRV8836_SetMotor+0x4c>
	{
		TargetForwardChannel = ic->a_forward_channel;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	891b      	ldrh	r3, [r3, #8]
 80019f6:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->a_reverse_channel;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	895b      	ldrh	r3, [r3, #10]
 80019fc:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->a_speed);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3310      	adds	r3, #16
 8001a02:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3314      	adds	r3, #20
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e011      	b.n	8001a30 <DRV8836_SetMotor+0x70>
	}
	else if(MOTOR_B == output)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10c      	bne.n	8001a2c <DRV8836_SetMotor+0x6c>
	{
		TargetForwardChannel = ic->b_forward_channel;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	899b      	ldrh	r3, [r3, #12]
 8001a16:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->b_reverse_channel;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	89db      	ldrh	r3, [r3, #14]
 8001a1c:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->b_speed);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3312      	adds	r3, #18
 8001a22:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->b_direction);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3315      	adds	r3, #21
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e001      	b.n	8001a30 <DRV8836_SetMotor+0x70>
	}
	else
	{
		return DRV8836_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e12c      	b.n	8001c8a <DRV8836_SetMotor+0x2ca>
	}

	switch(direction)
 8001a30:	78bb      	ldrb	r3, [r7, #2]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	f200 8120 	bhi.w	8001c78 <DRV8836_SetMotor+0x2b8>
 8001a38:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <DRV8836_SetMotor+0x80>)
 8001a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3e:	bf00      	nop
 8001a40:	08001a51 	.word	0x08001a51
 8001a44:	08001ad3 	.word	0x08001ad3
 8001a48:	08001b55 	.word	0x08001b55
 8001a4c:	08001bd7 	.word	0x08001bd7
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8001a50:	89fb      	ldrh	r3, [r7, #14]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d105      	bne.n	8001a62 <DRV8836_SetMotor+0xa2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a60:	e016      	b.n	8001a90 <DRV8836_SetMotor+0xd0>
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d105      	bne.n	8001a74 <DRV8836_SetMotor+0xb4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	6393      	str	r3, [r2, #56]	; 0x38
 8001a72:	e00d      	b.n	8001a90 <DRV8836_SetMotor+0xd0>
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d105      	bne.n	8001a86 <DRV8836_SetMotor+0xc6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2300      	movs	r3, #0
 8001a82:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a84:	e004      	b.n	8001a90 <DRV8836_SetMotor+0xd0>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001a90:	89bb      	ldrh	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <DRV8836_SetMotor+0xe2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001aa0:	e0ec      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001aa2:	89bb      	ldrh	r3, [r7, #12]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d105      	bne.n	8001ab4 <DRV8836_SetMotor+0xf4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001ab2:	e0e3      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001ab4:	89bb      	ldrh	r3, [r7, #12]
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d105      	bne.n	8001ac6 <DRV8836_SetMotor+0x106>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001ac4:	e0da      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2300      	movs	r3, #0
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001ad0:	e0d4      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8001ad2:	89fb      	ldrh	r3, [r7, #14]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <DRV8836_SetMotor+0x124>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae2:	e016      	b.n	8001b12 <DRV8836_SetMotor+0x152>
 8001ae4:	89fb      	ldrh	r3, [r7, #14]
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d105      	bne.n	8001af6 <DRV8836_SetMotor+0x136>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2300      	movs	r3, #0
 8001af2:	6393      	str	r3, [r2, #56]	; 0x38
 8001af4:	e00d      	b.n	8001b12 <DRV8836_SetMotor+0x152>
 8001af6:	89fb      	ldrh	r3, [r7, #14]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d105      	bne.n	8001b08 <DRV8836_SetMotor+0x148>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001b06:	e004      	b.n	8001b12 <DRV8836_SetMotor+0x152>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001b12:	89bb      	ldrh	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <DRV8836_SetMotor+0x164>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	883a      	ldrh	r2, [r7, #0]
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001b22:	e0ab      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001b24:	89bb      	ldrh	r3, [r7, #12]
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d105      	bne.n	8001b36 <DRV8836_SetMotor+0x176>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	883b      	ldrh	r3, [r7, #0]
 8001b32:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001b34:	e0a2      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001b36:	89bb      	ldrh	r3, [r7, #12]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d105      	bne.n	8001b48 <DRV8836_SetMotor+0x188>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	883b      	ldrh	r3, [r7, #0]
 8001b44:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001b46:	e099      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	883b      	ldrh	r3, [r7, #0]
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001b52:	e093      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, speed);
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <DRV8836_SetMotor+0x1a6>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	883a      	ldrh	r2, [r7, #0]
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34
 8001b64:	e016      	b.n	8001b94 <DRV8836_SetMotor+0x1d4>
 8001b66:	89fb      	ldrh	r3, [r7, #14]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d105      	bne.n	8001b78 <DRV8836_SetMotor+0x1b8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	883b      	ldrh	r3, [r7, #0]
 8001b74:	6393      	str	r3, [r2, #56]	; 0x38
 8001b76:	e00d      	b.n	8001b94 <DRV8836_SetMotor+0x1d4>
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d105      	bne.n	8001b8a <DRV8836_SetMotor+0x1ca>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	883b      	ldrh	r3, [r7, #0]
 8001b86:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001b88:	e004      	b.n	8001b94 <DRV8836_SetMotor+0x1d4>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	883b      	ldrh	r3, [r7, #0]
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001b94:	89bb      	ldrh	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <DRV8836_SetMotor+0x1e6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001ba4:	e06a      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001ba6:	89bb      	ldrh	r3, [r7, #12]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d105      	bne.n	8001bb8 <DRV8836_SetMotor+0x1f8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001bb6:	e061      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001bb8:	89bb      	ldrh	r3, [r7, #12]
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d105      	bne.n	8001bca <DRV8836_SetMotor+0x20a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001bc8:	e058      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001bd4:	e052      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d107      	bne.n	8001bec <DRV8836_SetMotor+0x22c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68d2      	ldr	r2, [r2, #12]
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bea:	e01c      	b.n	8001c26 <DRV8836_SetMotor+0x266>
 8001bec:	89fb      	ldrh	r3, [r7, #14]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d107      	bne.n	8001c02 <DRV8836_SetMotor+0x242>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6852      	ldr	r2, [r2, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	6393      	str	r3, [r2, #56]	; 0x38
 8001c00:	e011      	b.n	8001c26 <DRV8836_SetMotor+0x266>
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d107      	bne.n	8001c18 <DRV8836_SetMotor+0x258>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6852      	ldr	r2, [r2, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c16:	e006      	b.n	8001c26 <DRV8836_SetMotor+0x266>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6852      	ldr	r2, [r2, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d107      	bne.n	8001c3c <DRV8836_SetMotor+0x27c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68d2      	ldr	r2, [r2, #12]
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001c3a:	e01f      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001c3c:	89bb      	ldrh	r3, [r7, #12]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d107      	bne.n	8001c52 <DRV8836_SetMotor+0x292>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6852      	ldr	r2, [r2, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001c50:	e014      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001c52:	89bb      	ldrh	r3, [r7, #12]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d107      	bne.n	8001c68 <DRV8836_SetMotor+0x2a8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6852      	ldr	r2, [r2, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001c66:	e009      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6852      	ldr	r2, [r2, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001c76:	e001      	b.n	8001c7c <DRV8836_SetMotor+0x2bc>

	default:
		return DRV8836_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e006      	b.n	8001c8a <DRV8836_SetMotor+0x2ca>
		break;
	}

	*TargetDirection = direction;	//save set direction and speed to struct
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	78ba      	ldrb	r2, [r7, #2]
 8001c80:	701a      	strb	r2, [r3, #0]
	*TargetSpeed = speed;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	883a      	ldrh	r2, [r7, #0]
 8001c86:	801a      	strh	r2, [r3, #0]

	return DRV8836_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	4b4f      	ldr	r3, [pc, #316]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a4e      	ldr	r2, [pc, #312]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cae:	f043 0310 	orr.w	r3, r3, #16
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cc6:	f043 0320 	orr.w	r3, r3, #32
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a3c      	ldr	r2, [pc, #240]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <MX_GPIO_Init+0x154>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f246 0103 	movw	r1, #24579	; 0x6003
 8001d0e:	4837      	ldr	r0, [pc, #220]	; (8001dec <MX_GPIO_Init+0x158>)
 8001d10:	f002 fe6c 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2104      	movs	r1, #4
 8001d18:	4835      	ldr	r0, [pc, #212]	; (8001df0 <MX_GPIO_Init+0x15c>)
 8001d1a:	f002 fe67 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2110      	movs	r1, #16
 8001d22:	4834      	ldr	r0, [pc, #208]	; (8001df4 <MX_GPIO_Init+0x160>)
 8001d24:	f002 fe62 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 8001d28:	f246 0302 	movw	r3, #24578	; 0x6002
 8001d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	482a      	ldr	r0, [pc, #168]	; (8001dec <MX_GPIO_Init+0x158>)
 8001d42:	f002 fccf 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4823      	ldr	r0, [pc, #140]	; (8001dec <MX_GPIO_Init+0x158>)
 8001d5e:	f002 fcc1 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	4820      	ldr	r0, [pc, #128]	; (8001df8 <MX_GPIO_Init+0x164>)
 8001d78:	f002 fcb4 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <MX_GPIO_Init+0x168>)
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4819      	ldr	r0, [pc, #100]	; (8001df8 <MX_GPIO_Init+0x164>)
 8001d92:	f002 fca7 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8001d96:	2304      	movs	r3, #4
 8001d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	4619      	mov	r1, r3
 8001dac:	4810      	ldr	r0, [pc, #64]	; (8001df0 <MX_GPIO_Init+0x15c>)
 8001dae:	f002 fc99 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001db2:	2310      	movs	r3, #16
 8001db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <MX_GPIO_Init+0x160>)
 8001dca:	f002 fc8b 	bl	80046e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2105      	movs	r1, #5
 8001dd2:	2028      	movs	r0, #40	; 0x28
 8001dd4:	f002 fc5b 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dd8:	2028      	movs	r0, #40	; 0x28
 8001dda:	f002 fc74 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40011000 	.word	0x40011000
 8001df0:	40011400 	.word	0x40011400
 8001df4:	40010c00 	.word	0x40010c00
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	10210000 	.word	0x10210000

08001e00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e06:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <MX_I2C1_Init+0x54>)
 8001e08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <MX_I2C1_Init+0x58>)
 8001e0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_I2C1_Init+0x50>)
 8001e3e:	f002 fe1f 	bl	8004a80 <HAL_I2C_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e48:	f000 f948 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000294 	.word	0x20000294
 8001e54:	40005400 	.word	0x40005400
 8001e58:	00061a80 	.word	0x00061a80

08001e5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_I2C_MspInit+0x90>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d132      	bne.n	8001ee2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_I2C_MspInit+0x94>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_I2C_MspInit+0x94>)
 8001e82:	f043 0308 	orr.w	r3, r3, #8
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_I2C_MspInit+0x94>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9a:	2312      	movs	r3, #18
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <HAL_I2C_MspInit+0x98>)
 8001eaa:	f002 fc1b 	bl	80046e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_I2C_MspInit+0x9c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_I2C_MspInit+0x9c>)
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_I2C_MspInit+0x94>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_I2C_MspInit+0x94>)
 8001ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_I2C_MspInit+0x94>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010c00 	.word	0x40010c00
 8001ef8:	40010000 	.word	0x40010000

08001efc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001f1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f24:	e000      	b.n	8001f28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f9      	beq.n	8001f26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4e:	f002 fa93 	bl	8004478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f52:	f000 f83d 	bl	8001fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f56:	f7ff fe9d 	bl	8001c94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f5a:	f7ff ff51 	bl	8001e00 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001f5e:	f001 fae1 	bl	8003524 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001f62:	f001 fd1f 	bl	80039a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001f66:	f001 fd75 	bl	8003a54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f6a:	f001 fe09 	bl	8003b80 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001f6e:	f001 fe5b 	bl	8003c28 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8001f72:	f001 ff7f 	bl	8003e74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7c:	4810      	ldr	r0, [pc, #64]	; (8001fc0 <main+0x78>)
 8001f7e:	f002 fd35 	bl	80049ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <main+0x78>)
 8001f8a:	f002 fd2f 	bl	80049ec <HAL_GPIO_WritePin>


  Motors_Init();
 8001f8e:	f000 f91b 	bl	80021c8 <Motors_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8001f92:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <main+0x7c>)
 8001f94:	f004 fa06 	bl	80063a4 <HAL_TIM_Base_Start_IT>


  Parser_TaskInit();
 8001f98:	f001 f97e 	bl	8003298 <Parser_TaskInit>
  Radio_TaskInit();
 8001f9c:	f001 f9f2 	bl	8003384 <Radio_TaskInit>
  Programs_TaskInit();
 8001fa0:	f002 f9f6 	bl	8004390 <Programs_TaskInit>


  //TODO: UNIFY FRAME FORMAT, TAKE CARE OF PROGRAMS MODULE - START AND STOP PROGRAMS.

  xTaskCreate(vTaskOnboardDiode, "PCB Diode Task", 128, NULL, 1, NULL);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	2301      	movs	r3, #1
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2300      	movs	r3, #0
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	4905      	ldr	r1, [pc, #20]	; (8001fc8 <main+0x80>)
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <main+0x84>)
 8001fb4:	f006 fa8e 	bl	80084d4 <xTaskCreate>

  vTaskStartScheduler();
 8001fb8:	f006 fbfc 	bl	80087b4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <main+0x74>
 8001fbe:	bf00      	nop
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	20000624 	.word	0x20000624
 8001fc8:	0800e410 	.word	0x0800e410
 8001fcc:	08003115 	.word	0x08003115

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b094      	sub	sp, #80	; 0x50
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 0318 	add.w	r3, r7, #24
 8001fda:	2238      	movs	r2, #56	; 0x38
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f009 fc85 	bl	800b8ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002000:	2301      	movs	r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002008:	2302      	movs	r3, #2
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002012:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8002018:	2300      	movs	r3, #0
 800201a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fe71 	bl	8004d08 <HAL_RCC_OscConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800202c:	f000 f856 	bl	80020dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002030:	230f      	movs	r3, #15
 8002032:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002034:	2302      	movs	r3, #2
 8002036:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800203c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2102      	movs	r1, #2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 f972 	bl	8005334 <HAL_RCC_ClockConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002056:	f000 f841 	bl	80020dc <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800205a:	4b03      	ldr	r3, [pc, #12]	; (8002068 <SystemClock_Config+0x98>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3750      	adds	r7, #80	; 0x50
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	42420070 	.word	0x42420070

0800206c <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff40 	bl	8001efc <ITM_SendChar>

	return ch;
 800207c:	687b      	ldr	r3, [r7, #4]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002096:	d101      	bne.n	800209c <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 8002098:	f001 f99e 	bl	80033d8 <Radio_HandlerIRQ>

	}
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d102      	bne.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80020b6:	f002 f9f5 	bl	80044a4 <HAL_IncTick>
  {
	  /* Encoder sampling */
	  Motors_EncoderSample();
  }
  /* USER CODE END Callback 1 */
}
 80020ba:	e006      	b.n	80020ca <HAL_TIM_PeriodElapsedCallback+0x26>
  else if(htim->Instance == TIM7)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_PeriodElapsedCallback+0x26>
	  Motors_EncoderSample();
 80020c6:	f000 f935 	bl	8002334 <Motors_EncoderSample>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40001000 	.word	0x40001000
 80020d8:	40001400 	.word	0x40001400

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <Error_Handler+0x8>

080020e6 <MotorEnc_Init>:
int32_t FilterSum;
uint16_t OldestMember;


void MotorEnc_Init(MotorEncoder_t *encoder, TIM_HandleTypeDef *htim)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
	encoder->htimEnc = htim;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80020f6:	213c      	movs	r1, #60	; 0x3c
 80020f8:	6838      	ldr	r0, [r7, #0]
 80020fa:	f004 fb51 	bl	80067a0 <HAL_TIM_Encoder_Start>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <MotorEnc_Update>:


void MotorEnc_Update(MotorEncoder_t *encoder)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	int16_t TempPosition = encoder->Position;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	899b      	ldrh	r3, [r3, #12]
 8002114:	81fb      	strh	r3, [r7, #14]

	/* Calculate counter difference */
	int CounterDif = encoder->htimEnc->Instance->CNT - encoder->LastCounter;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	60bb      	str	r3, [r7, #8]
	/* Check if counter has changed */
	if(CounterDif >= 1 || CounterDif <= -1)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	dc02      	bgt.n	8002132 <MotorEnc_Update+0x2a>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	da0a      	bge.n	8002148 <MotorEnc_Update+0x40>
	{
		/* Velocity is equal to difference, very important type casting! */
		/* Casting uint32_t to int8_t solves overflow problem in fast and correct way */
		encoder->Velocity = (int8_t)(CounterDif);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	b25a      	sxtb	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	711a      	strb	r2, [r3, #4]
		encoder->LastCounter = encoder->htimEnc->Instance->CNT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	e002      	b.n	800214e <MotorEnc_Update+0x46>
	}
	else
	{
		encoder->Velocity = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	711a      	strb	r2, [r3, #4]
	}

	TempPosition = encoder->Position + encoder->Velocity;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002154:	b29a      	uxth	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4413      	add	r3, r2
 8002160:	b29b      	uxth	r3, r3
 8002162:	81fb      	strh	r3, [r7, #14]

	if(encoder->Velocity != 0)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d024      	beq.n	80021b8 <MotorEnc_Update+0xb0>
	{
		if(TempPosition >= 0)
 800216e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db16      	blt.n	80021a4 <MotorEnc_Update+0x9c>
		{
			encoder->Position = (encoder->Position + encoder->Velocity) % PULSES_PER_ROTATION;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002184:	4413      	add	r3, r2
 8002186:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <MotorEnc_Update+0xbc>)
 8002188:	fb82 1203 	smull	r1, r2, r2, r3
 800218c:	1251      	asrs	r1, r2, #9
 800218e:	17da      	asrs	r2, r3, #31
 8002190:	1a8a      	subs	r2, r1, r2
 8002192:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8002196:	fb01 f202 	mul.w	r2, r1, r2
 800219a:	1a9a      	subs	r2, r3, r2
 800219c:	b212      	sxth	r2, r2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	819a      	strh	r2, [r3, #12]


	//TODO: calculate RPM, position and start working on PID
	// 300RPM, 1:50 ratio,

}
 80021a2:	e009      	b.n	80021b8 <MotorEnc_Update+0xb0>
			encoder->Position = PULSES_PER_ROTATION + encoder->Velocity;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b21a      	sxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	819a      	strh	r2, [r3, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	5d9f7391 	.word	0x5d9f7391

080021c8 <Motors_Init>:
//
// -- Init --
//

void Motors_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af02      	add	r7, sp, #8
	DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80021ce:	230c      	movs	r3, #12
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2308      	movs	r3, #8
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2304      	movs	r3, #4
 80021d8:	2200      	movs	r2, #0
 80021da:	490a      	ldr	r1, [pc, #40]	; (8002204 <Motors_Init+0x3c>)
 80021dc:	480a      	ldr	r0, [pc, #40]	; (8002208 <Motors_Init+0x40>)
 80021de:	f7ff fb31 	bl	8001844 <DRV8836_Init>
	MotorEnc_Init(&MotorEncoderA, &htim1);
 80021e2:	490a      	ldr	r1, [pc, #40]	; (800220c <Motors_Init+0x44>)
 80021e4:	480a      	ldr	r0, [pc, #40]	; (8002210 <Motors_Init+0x48>)
 80021e6:	f7ff ff7e 	bl	80020e6 <MotorEnc_Init>
	MotorEnc_Init(&MotorEncoderB, &htim4);
 80021ea:	490a      	ldr	r1, [pc, #40]	; (8002214 <Motors_Init+0x4c>)
 80021ec:	480a      	ldr	r0, [pc, #40]	; (8002218 <Motors_Init+0x50>)
 80021ee:	f7ff ff7a 	bl	80020e6 <MotorEnc_Init>

	FIRFilter_Init(&EncoderFilterA);
 80021f2:	480a      	ldr	r0, [pc, #40]	; (800221c <Motors_Init+0x54>)
 80021f4:	f7ff f9da 	bl	80015ac <FIRFilter_Init>
	FIRFilter_Init(&EncoderFilterB);
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <Motors_Init+0x58>)
 80021fa:	f7ff f9d7 	bl	80015ac <FIRFilter_Init>
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000594 	.word	0x20000594
 8002208:	200002e8 	.word	0x200002e8
 800220c:	2000054c 	.word	0x2000054c
 8002210:	20000300 	.word	0x20000300
 8002214:	200005dc 	.word	0x200005dc
 8002218:	20000318 	.word	0x20000318
 800221c:	20000330 	.word	0x20000330
 8002220:	2000039c 	.word	0x2000039c

08002224 <Motors_SetMotor>:
//
// -- Setters --
//

void Motors_SetMotor(DRV8836_Output_t motorAB, DRV8836_Direction_t direction, uint16_t speed)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	460b      	mov	r3, r1
 8002230:	71bb      	strb	r3, [r7, #6]
 8002232:	4613      	mov	r3, r2
 8002234:	80bb      	strh	r3, [r7, #4]
	DRV8836_SetMotor(&MotorDriver, motorAB, direction, speed);
 8002236:	88bb      	ldrh	r3, [r7, #4]
 8002238:	79ba      	ldrb	r2, [r7, #6]
 800223a:	79f9      	ldrb	r1, [r7, #7]
 800223c:	4803      	ldr	r0, [pc, #12]	; (800224c <Motors_SetMotor+0x28>)
 800223e:	f7ff fbbf 	bl	80019c0 <DRV8836_SetMotor>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200002e8 	.word	0x200002e8

08002250 <Motors_SetMotorPWM>:

Motors_Error_t Motors_SetMotorPWM(DRV8836_Output_t motorAB, uint16_t speed)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	460a      	mov	r2, r1
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	4613      	mov	r3, r2
 800225e:	80bb      	strh	r3, [r7, #4]
	switch(motorAB)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <Motors_SetMotorPWM+0x1c>
 8002266:	2b01      	cmp	r3, #1
 8002268:	d009      	beq.n	800227e <Motors_SetMotorPWM+0x2e>
 800226a:	e011      	b.n	8002290 <Motors_SetMotorPWM+0x40>
	{
	case MOTOR_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.a_direction, speed);
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <Motors_SetMotorPWM+0x4c>)
 800226e:	7d1a      	ldrb	r2, [r3, #20]
 8002270:	88bb      	ldrh	r3, [r7, #4]
 8002272:	79f9      	ldrb	r1, [r7, #7]
 8002274:	4809      	ldr	r0, [pc, #36]	; (800229c <Motors_SetMotorPWM+0x4c>)
 8002276:	f7ff fba3 	bl	80019c0 <DRV8836_SetMotor>
 800227a:	4603      	mov	r3, r0
 800227c:	e009      	b.n	8002292 <Motors_SetMotorPWM+0x42>
		break;

	case MOTOR_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.b_direction, speed);
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <Motors_SetMotorPWM+0x4c>)
 8002280:	7d5a      	ldrb	r2, [r3, #21]
 8002282:	88bb      	ldrh	r3, [r7, #4]
 8002284:	79f9      	ldrb	r1, [r7, #7]
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <Motors_SetMotorPWM+0x4c>)
 8002288:	f7ff fb9a 	bl	80019c0 <DRV8836_SetMotor>
 800228c:	4603      	mov	r3, r0
 800228e:	e000      	b.n	8002292 <Motors_SetMotorPWM+0x42>
		break;

	default:
		return MOTORS_ERROR;
 8002290:	2301      	movs	r3, #1
		break;
	}
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002e8 	.word	0x200002e8

080022a0 <Motors_SetMotorDirection>:

Motors_Error_t Motors_SetMotorDirection(DRV8836_Output_t motorAB, DRV8836_Direction_t direction)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	460a      	mov	r2, r1
 80022aa:	71fb      	strb	r3, [r7, #7]
 80022ac:	4613      	mov	r3, r2
 80022ae:	71bb      	strb	r3, [r7, #6]
	switch(motorAB)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <Motors_SetMotorDirection+0x1c>
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d009      	beq.n	80022ce <Motors_SetMotorDirection+0x2e>
 80022ba:	e011      	b.n	80022e0 <Motors_SetMotorDirection+0x40>
	{
	case MOTOR_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.a_speed);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <Motors_SetMotorDirection+0x4c>)
 80022be:	8a1b      	ldrh	r3, [r3, #16]
 80022c0:	79ba      	ldrb	r2, [r7, #6]
 80022c2:	79f9      	ldrb	r1, [r7, #7]
 80022c4:	4809      	ldr	r0, [pc, #36]	; (80022ec <Motors_SetMotorDirection+0x4c>)
 80022c6:	f7ff fb7b 	bl	80019c0 <DRV8836_SetMotor>
 80022ca:	4603      	mov	r3, r0
 80022cc:	e009      	b.n	80022e2 <Motors_SetMotorDirection+0x42>
		break;

	case MOTOR_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.b_speed);
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <Motors_SetMotorDirection+0x4c>)
 80022d0:	8a5b      	ldrh	r3, [r3, #18]
 80022d2:	79ba      	ldrb	r2, [r7, #6]
 80022d4:	79f9      	ldrb	r1, [r7, #7]
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <Motors_SetMotorDirection+0x4c>)
 80022d8:	f7ff fb72 	bl	80019c0 <DRV8836_SetMotor>
 80022dc:	4603      	mov	r3, r0
 80022de:	e000      	b.n	80022e2 <Motors_SetMotorDirection+0x42>
		break;

	default:
		return MOTORS_ERROR;
 80022e0:	2301      	movs	r3, #1
		break;
	}
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200002e8 	.word	0x200002e8

080022f0 <Motors_SetMotorsOff>:

Motors_Error_t Motors_SetMotorsOff(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
	Motors_Error_t status = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, MOTOR_A, Coast, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <Motors_SetMotorsOff+0x40>)
 8002302:	f7ff fb5d 	bl	80019c0 <DRV8836_SetMotor>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	4313      	orrs	r3, r2
 800230e:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, MOTOR_B, Coast, 0);
 8002310:	2300      	movs	r3, #0
 8002312:	2200      	movs	r2, #0
 8002314:	2101      	movs	r1, #1
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <Motors_SetMotorsOff+0x40>)
 8002318:	f7ff fb52 	bl	80019c0 <DRV8836_SetMotor>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	4313      	orrs	r3, r2
 8002324:	71fb      	strb	r3, [r7, #7]
	return status;
 8002326:	79fb      	ldrb	r3, [r7, #7]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200002e8 	.word	0x200002e8

08002334 <Motors_EncoderSample>:
//
// -- Encoder routine --
//

void Motors_EncoderSample(void)						//call this function with encoder sampling frequency
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	/* Read encoder values and calculate velocity */
	MotorEnc_Update(&MotorEncoderA);
 8002338:	4875      	ldr	r0, [pc, #468]	; (8002510 <Motors_EncoderSample+0x1dc>)
 800233a:	f7ff fee5 	bl	8002108 <MotorEnc_Update>
	MotorEnc_Update(&MotorEncoderB);
 800233e:	4875      	ldr	r0, [pc, #468]	; (8002514 <Motors_EncoderSample+0x1e0>)
 8002340:	f7ff fee2 	bl	8002108 <MotorEnc_Update>

	/* Filter velocity values */
	MotorEncoderA.VelocityFiltered = FIRFilter_Update(&EncoderFilterA, MotorEncoderA.Velocity);
 8002344:	4b72      	ldr	r3, [pc, #456]	; (8002510 <Motors_EncoderSample+0x1dc>)
 8002346:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fd36 	bl	8000dbc <__aeabi_i2f>
 8002350:	4603      	mov	r3, r0
 8002352:	4619      	mov	r1, r3
 8002354:	4870      	ldr	r0, [pc, #448]	; (8002518 <Motors_EncoderSample+0x1e4>)
 8002356:	f7ff f949 	bl	80015ec <FIRFilter_Update>
 800235a:	4603      	mov	r3, r0
 800235c:	4a6c      	ldr	r2, [pc, #432]	; (8002510 <Motors_EncoderSample+0x1dc>)
 800235e:	6093      	str	r3, [r2, #8]
	MotorEncoderB.VelocityFiltered = FIRFilter_Update(&EncoderFilterB, MotorEncoderB.Velocity);
 8002360:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <Motors_EncoderSample+0x1e0>)
 8002362:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fd28 	bl	8000dbc <__aeabi_i2f>
 800236c:	4603      	mov	r3, r0
 800236e:	4619      	mov	r1, r3
 8002370:	486a      	ldr	r0, [pc, #424]	; (800251c <Motors_EncoderSample+0x1e8>)
 8002372:	f7ff f93b 	bl	80015ec <FIRFilter_Update>
 8002376:	4603      	mov	r3, r0
 8002378:	4a66      	ldr	r2, [pc, #408]	; (8002514 <Motors_EncoderSample+0x1e0>)
 800237a:	6093      	str	r3, [r2, #8]

	/* Calculate RPM */
	//MotorEncoderB.RPM = (MotorEncoderB.Velocity * 60 * (1000/ENCODER_SAMPLING_TIME_MS)) / PULSES_PER_ROTATION;

	if(MotorsControllPID == 1)
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <Motors_EncoderSample+0x1ec>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	f040 80a6 	bne.w	80024d2 <Motors_EncoderSample+0x19e>
	{
		/* Update motor's A PID if any of its gains its greater than 0 */
		if(MotorPID_A.kp > 0 || MotorPID_A.ki > 0|| MotorPID_A.kd > 0)
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <Motors_EncoderSample+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe ff24 	bl	80011dc <__aeabi_fcmpgt>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d113      	bne.n	80023c2 <Motors_EncoderSample+0x8e>
 800239a:	4b62      	ldr	r3, [pc, #392]	; (8002524 <Motors_EncoderSample+0x1f0>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ff1a 	bl	80011dc <__aeabi_fcmpgt>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <Motors_EncoderSample+0x8e>
 80023ae:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <Motors_EncoderSample+0x1f0>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe ff10 	bl	80011dc <__aeabi_fcmpgt>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d034      	beq.n	800242c <Motors_EncoderSample+0xf8>
		{
			PID_Update(&MotorPID_A, TargetVelocityA - MotorEncoderA.VelocityFiltered , 1000 / ENCODER_SAMPLING_TIME_MS);
 80023c2:	4b59      	ldr	r3, [pc, #356]	; (8002528 <Motors_EncoderSample+0x1f4>)
 80023c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fcf7 	bl	8000dbc <__aeabi_i2f>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b4f      	ldr	r3, [pc, #316]	; (8002510 <Motors_EncoderSample+0x1dc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f7fe fc3a 	bl	8000c50 <__aeabi_fsub>
 80023dc:	4603      	mov	r3, r0
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe ff06 	bl	80011f0 <__aeabi_f2iz>
 80023e4:	4603      	mov	r3, r0
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	2264      	movs	r2, #100	; 0x64
 80023ea:	4619      	mov	r1, r3
 80023ec:	484d      	ldr	r0, [pc, #308]	; (8002524 <Motors_EncoderSample+0x1f0>)
 80023ee:	f7ff f97a 	bl	80016e6 <PID_Update>

			if(MotorPID_A.Output > 0)
 80023f2:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <Motors_EncoderSample+0x1f0>)
 80023f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	dd0b      	ble.n	8002414 <Motors_EncoderSample+0xe0>
			{
				Motors_SetMotor(MOTOR_A, Reverse, DEAD_PWM_OFFSET + MotorPID_A.Output);
 80023fc:	4b49      	ldr	r3, [pc, #292]	; (8002524 <Motors_EncoderSample+0x1f0>)
 80023fe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002402:	b29b      	uxth	r3, r3
 8002404:	3396      	adds	r3, #150	; 0x96
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	2101      	movs	r1, #1
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff ff09 	bl	8002224 <Motors_SetMotor>
 8002412:	e00b      	b.n	800242c <Motors_EncoderSample+0xf8>
			}
			else
			{
				Motors_SetMotor(MOTOR_A, Forward, DEAD_PWM_OFFSET + (-MotorPID_A.Output) );
 8002414:	4b43      	ldr	r3, [pc, #268]	; (8002524 <Motors_EncoderSample+0x1f0>)
 8002416:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800241a:	b29b      	uxth	r3, r3
 800241c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	2102      	movs	r1, #2
 8002426:	2000      	movs	r0, #0
 8002428:	f7ff fefc 	bl	8002224 <Motors_SetMotor>
			}
		}
		/* Same for motor B */
		if(MotorPID_B.kp > 0 || MotorPID_B.ki > 0|| MotorPID_B.kd > 0)
 800242c:	4b3f      	ldr	r3, [pc, #252]	; (800252c <Motors_EncoderSample+0x1f8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f04f 0100 	mov.w	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fed1 	bl	80011dc <__aeabi_fcmpgt>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d113      	bne.n	8002468 <Motors_EncoderSample+0x134>
 8002440:	4b3a      	ldr	r3, [pc, #232]	; (800252c <Motors_EncoderSample+0x1f8>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fec7 	bl	80011dc <__aeabi_fcmpgt>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <Motors_EncoderSample+0x134>
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <Motors_EncoderSample+0x1f8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe febd 	bl	80011dc <__aeabi_fcmpgt>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d034      	beq.n	80024d2 <Motors_EncoderSample+0x19e>
		{
			PID_Update(&MotorPID_B, TargetVelocityB - MotorEncoderB.VelocityFiltered , 1000 / ENCODER_SAMPLING_TIME_MS);
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <Motors_EncoderSample+0x1fc>)
 800246a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fca4 	bl	8000dbc <__aeabi_i2f>
 8002474:	4602      	mov	r2, r0
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <Motors_EncoderSample+0x1e0>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7fe fbe7 	bl	8000c50 <__aeabi_fsub>
 8002482:	4603      	mov	r3, r0
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe feb3 	bl	80011f0 <__aeabi_f2iz>
 800248a:	4603      	mov	r3, r0
 800248c:	b21b      	sxth	r3, r3
 800248e:	2264      	movs	r2, #100	; 0x64
 8002490:	4619      	mov	r1, r3
 8002492:	4826      	ldr	r0, [pc, #152]	; (800252c <Motors_EncoderSample+0x1f8>)
 8002494:	f7ff f927 	bl	80016e6 <PID_Update>

			if(MotorPID_B.Output > 0)
 8002498:	4b24      	ldr	r3, [pc, #144]	; (800252c <Motors_EncoderSample+0x1f8>)
 800249a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	dd0b      	ble.n	80024ba <Motors_EncoderSample+0x186>
			{
				Motors_SetMotor(MOTOR_B, Reverse, DEAD_PWM_OFFSET + MotorPID_B.Output);
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <Motors_EncoderSample+0x1f8>)
 80024a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3396      	adds	r3, #150	; 0x96
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	2101      	movs	r1, #1
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7ff feb6 	bl	8002224 <Motors_SetMotor>
 80024b8:	e00b      	b.n	80024d2 <Motors_EncoderSample+0x19e>
			}
			else
			{
				Motors_SetMotor(MOTOR_B, Forward, DEAD_PWM_OFFSET + (-MotorPID_B.Output) );
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <Motors_EncoderSample+0x1f8>)
 80024bc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	2102      	movs	r1, #2
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7ff fea9 	bl	8002224 <Motors_SetMotor>
	}



	/* Debug UART print */
	UartBufferLength = sprintf((char*) UartBuffer, "$%d %d;",(int16_t) MotorEncoderB.VelocityFiltered, MotorPID_B.Output );
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <Motors_EncoderSample+0x1e0>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fe8a 	bl	80011f0 <__aeabi_f2iz>
 80024dc:	4603      	mov	r3, r0
 80024de:	b21b      	sxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <Motors_EncoderSample+0x1f8>)
 80024e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80024e8:	4912      	ldr	r1, [pc, #72]	; (8002534 <Motors_EncoderSample+0x200>)
 80024ea:	4813      	ldr	r0, [pc, #76]	; (8002538 <Motors_EncoderSample+0x204>)
 80024ec:	f009 f99c 	bl	800b828 <siprintf>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <Motors_EncoderSample+0x208>)
 80024f6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, UartBuffer, UartBufferLength, 500);
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <Motors_EncoderSample+0x208>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002502:	490d      	ldr	r1, [pc, #52]	; (8002538 <Motors_EncoderSample+0x204>)
 8002504:	480e      	ldr	r0, [pc, #56]	; (8002540 <Motors_EncoderSample+0x20c>)
 8002506:	f005 f805 	bl	8007514 <HAL_UART_Transmit>

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000300 	.word	0x20000300
 8002514:	20000318 	.word	0x20000318
 8002518:	20000330 	.word	0x20000330
 800251c:	2000039c 	.word	0x2000039c
 8002520:	20000408 	.word	0x20000408
 8002524:	20000410 	.word	0x20000410
 8002528:	2000040a 	.word	0x2000040a
 800252c:	20000430 	.word	0x20000430
 8002530:	2000040c 	.word	0x2000040c
 8002534:	0800e420 	.word	0x0800e420
 8002538:	20000450 	.word	0x20000450
 800253c:	20000460 	.word	0x20000460
 8002540:	2000066c 	.word	0x2000066c

08002544 <Motors_SetControllPID>:
// PID Related functions
//

/* Enable or disable PID controll */
Motors_Error_t Motors_SetControllPID(uint8_t ONOFF)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
	if(ONOFF != PID_ON && ONOFF != PID_OFF)
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d004      	beq.n	800255e <Motors_SetControllPID+0x1a>
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <Motors_SetControllPID+0x1a>
	{
		return MOTORS_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e003      	b.n	8002566 <Motors_SetControllPID+0x22>
	}

	MotorsControllPID = ONOFF;
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <Motors_SetControllPID+0x2c>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	7013      	strb	r3, [r2, #0]
	return MOTORS_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	20000408 	.word	0x20000408

08002574 <Motors_SetPIDTarget>:


/* Set target speed for motor */
Motors_Error_t Motors_SetPIDTarget(DRV8836_Output_t motorAB, int16_t Target)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	460a      	mov	r2, r1
 800257e:	71fb      	strb	r3, [r7, #7]
 8002580:	4613      	mov	r3, r2
 8002582:	80bb      	strh	r3, [r7, #4]
	if(Target > MAX_VELOCITY_VALUE || Target < -MAX_VELOCITY_VALUE)
 8002584:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002588:	2b46      	cmp	r3, #70	; 0x46
 800258a:	dc04      	bgt.n	8002596 <Motors_SetPIDTarget+0x22>
 800258c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002590:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8002594:	da01      	bge.n	800259a <Motors_SetPIDTarget+0x26>
	{
		return MOTORS_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e01c      	b.n	80025d4 <Motors_SetPIDTarget+0x60>
	}

	switch(motorAB)
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d010      	beq.n	80025c2 <Motors_SetPIDTarget+0x4e>
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	dc16      	bgt.n	80025d2 <Motors_SetPIDTarget+0x5e>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <Motors_SetPIDTarget+0x3a>
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d005      	beq.n	80025b8 <Motors_SetPIDTarget+0x44>
 80025ac:	e011      	b.n	80025d2 <Motors_SetPIDTarget+0x5e>
	{
	case MOTOR_A:
		TargetVelocityA = Target;
 80025ae:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <Motors_SetPIDTarget+0x6c>)
 80025b0:	88bb      	ldrh	r3, [r7, #4]
 80025b2:	8013      	strh	r3, [r2, #0]
		return MOTORS_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e00d      	b.n	80025d4 <Motors_SetPIDTarget+0x60>

	case MOTOR_B:
		TargetVelocityB = Target;
 80025b8:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <Motors_SetPIDTarget+0x70>)
 80025ba:	88bb      	ldrh	r3, [r7, #4]
 80025bc:	8013      	strh	r3, [r2, #0]
		return MOTORS_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e008      	b.n	80025d4 <Motors_SetPIDTarget+0x60>

	case MOTOR_ALL:
		TargetVelocityA = Target;
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <Motors_SetPIDTarget+0x6c>)
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	8013      	strh	r3, [r2, #0]
		TargetVelocityB = Target;
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <Motors_SetPIDTarget+0x70>)
 80025ca:	88bb      	ldrh	r3, [r7, #4]
 80025cc:	8013      	strh	r3, [r2, #0]
		return MOTORS_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <Motors_SetPIDTarget+0x60>

	default:
		return MOTORS_ERROR;
 80025d2:	2301      	movs	r3, #1
	}
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	2000040a 	.word	0x2000040a
 80025e4:	2000040c 	.word	0x2000040c

080025e8 <Motors_SetKP>:
// Gains set & get
//

/* KP */
Motors_Error_t Motors_SetKP(DRV8836_Output_t motorAB, float p)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
	switch(motorAB)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d01a      	beq.n	8002630 <Motors_SetKP+0x48>
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	dc2a      	bgt.n	8002654 <Motors_SetKP+0x6c>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <Motors_SetKP+0x20>
 8002602:	2b01      	cmp	r3, #1
 8002604:	d00a      	beq.n	800261c <Motors_SetKP+0x34>
 8002606:	e025      	b.n	8002654 <Motors_SetKP+0x6c>
	{
	case MOTOR_A:
		PID_SetGains(&MotorPID_A, p, MotorPID_A.ki, MotorPID_A.kd);
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <Motors_SetKP+0x78>)
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <Motors_SetKP+0x78>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	4813      	ldr	r0, [pc, #76]	; (8002660 <Motors_SetKP+0x78>)
 8002614:	f7ff f840 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e01c      	b.n	8002656 <Motors_SetKP+0x6e>

	case MOTOR_B:
		PID_SetGains(&MotorPID_B, p, MotorPID_B.ki, MotorPID_B.kd);
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <Motors_SetKP+0x7c>)
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <Motors_SetKP+0x7c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	480f      	ldr	r0, [pc, #60]	; (8002664 <Motors_SetKP+0x7c>)
 8002628:	f7ff f836 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e012      	b.n	8002656 <Motors_SetKP+0x6e>

	case MOTOR_ALL:
		PID_SetGains(&MotorPID_A, p, MotorPID_A.ki, MotorPID_A.kd);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <Motors_SetKP+0x78>)
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <Motors_SetKP+0x78>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	6839      	ldr	r1, [r7, #0]
 800263a:	4809      	ldr	r0, [pc, #36]	; (8002660 <Motors_SetKP+0x78>)
 800263c:	f7ff f82c 	bl	8001698 <PID_SetGains>
		PID_SetGains(&MotorPID_B, p, MotorPID_B.ki, MotorPID_B.kd);
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <Motors_SetKP+0x7c>)
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <Motors_SetKP+0x7c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	4806      	ldr	r0, [pc, #24]	; (8002664 <Motors_SetKP+0x7c>)
 800264c:	f7ff f824 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <Motors_SetKP+0x6e>

	default:
		return MOTORS_ERROR;
 8002654:	2301      	movs	r3, #1
	}
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000410 	.word	0x20000410
 8002664:	20000430 	.word	0x20000430

08002668 <Motors_SetKI>:
	}
}

/* KI */
Motors_Error_t Motors_SetKI(DRV8836_Output_t motorAB, float i)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
	switch(motorAB)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d01a      	beq.n	80026b0 <Motors_SetKI+0x48>
 800267a:	2b02      	cmp	r3, #2
 800267c:	dc2a      	bgt.n	80026d4 <Motors_SetKI+0x6c>
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <Motors_SetKI+0x20>
 8002682:	2b01      	cmp	r3, #1
 8002684:	d00a      	beq.n	800269c <Motors_SetKI+0x34>
 8002686:	e025      	b.n	80026d4 <Motors_SetKI+0x6c>
	{
	case MOTOR_A:
		PID_SetGains(&MotorPID_A, MotorPID_A.kp, i, MotorPID_A.kd);
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <Motors_SetKI+0x78>)
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <Motors_SetKI+0x78>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	4813      	ldr	r0, [pc, #76]	; (80026e0 <Motors_SetKI+0x78>)
 8002694:	f7ff f800 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e01c      	b.n	80026d6 <Motors_SetKI+0x6e>

	case MOTOR_B:
		PID_SetGains(&MotorPID_B, MotorPID_B.kp, i, MotorPID_B.kd);
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <Motors_SetKI+0x7c>)
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <Motors_SetKI+0x7c>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	480f      	ldr	r0, [pc, #60]	; (80026e4 <Motors_SetKI+0x7c>)
 80026a8:	f7fe fff6 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e012      	b.n	80026d6 <Motors_SetKI+0x6e>

	case MOTOR_ALL:
		PID_SetGains(&MotorPID_A, MotorPID_A.kp, i, MotorPID_A.kd);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <Motors_SetKI+0x78>)
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <Motors_SetKI+0x78>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4809      	ldr	r0, [pc, #36]	; (80026e0 <Motors_SetKI+0x78>)
 80026bc:	f7fe ffec 	bl	8001698 <PID_SetGains>
		PID_SetGains(&MotorPID_B, MotorPID_B.kp, i, MotorPID_B.kd);
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <Motors_SetKI+0x7c>)
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <Motors_SetKI+0x7c>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	4806      	ldr	r0, [pc, #24]	; (80026e4 <Motors_SetKI+0x7c>)
 80026cc:	f7fe ffe4 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <Motors_SetKI+0x6e>

	default:
		return MOTORS_ERROR;
 80026d4:	2301      	movs	r3, #1
	}
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000410 	.word	0x20000410
 80026e4:	20000430 	.word	0x20000430

080026e8 <Motors_SetKD>:
	}
}

/* KD */
Motors_Error_t Motors_SetKD(DRV8836_Output_t motorAB, float d)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
	switch(motorAB)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d01a      	beq.n	8002730 <Motors_SetKD+0x48>
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	dc2a      	bgt.n	8002754 <Motors_SetKD+0x6c>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <Motors_SetKD+0x20>
 8002702:	2b01      	cmp	r3, #1
 8002704:	d00a      	beq.n	800271c <Motors_SetKD+0x34>
 8002706:	e025      	b.n	8002754 <Motors_SetKD+0x6c>
	{
	case MOTOR_A:
		PID_SetGains(&MotorPID_A, MotorPID_A.kp, MotorPID_A.ki, d);
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <Motors_SetKD+0x78>)
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <Motors_SetKD+0x78>)
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4813      	ldr	r0, [pc, #76]	; (8002760 <Motors_SetKD+0x78>)
 8002714:	f7fe ffc0 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e01c      	b.n	8002756 <Motors_SetKD+0x6e>

	case MOTOR_B:
		PID_SetGains(&MotorPID_B, MotorPID_B.kp, MotorPID_B.ki, d);
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <Motors_SetKD+0x7c>)
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <Motors_SetKD+0x7c>)
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	480f      	ldr	r0, [pc, #60]	; (8002764 <Motors_SetKD+0x7c>)
 8002728:	f7fe ffb6 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e012      	b.n	8002756 <Motors_SetKD+0x6e>

	case MOTOR_ALL:
		PID_SetGains(&MotorPID_A, MotorPID_A.kp, MotorPID_A.ki, d);
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <Motors_SetKD+0x78>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <Motors_SetKD+0x78>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4809      	ldr	r0, [pc, #36]	; (8002760 <Motors_SetKD+0x78>)
 800273c:	f7fe ffac 	bl	8001698 <PID_SetGains>
		PID_SetGains(&MotorPID_B, MotorPID_B.kp, MotorPID_B.ki, d);
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <Motors_SetKD+0x7c>)
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <Motors_SetKD+0x7c>)
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4806      	ldr	r0, [pc, #24]	; (8002764 <Motors_SetKD+0x7c>)
 800274c:	f7fe ffa4 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <Motors_SetKD+0x6e>

	default:
		return MOTORS_ERROR;
 8002754:	2301      	movs	r3, #1
	}
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000410 	.word	0x20000410
 8002764:	20000430 	.word	0x20000430

08002768 <Motors_ResetTemps>:
	}
}

/* Reset temporary PID's variables */
Motors_Error_t Motors_ResetTemps(DRV8836_Output_t motorAB)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
	switch(motorAB)
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d010      	beq.n	800279a <Motors_ResetTemps+0x32>
 8002778:	2b02      	cmp	r3, #2
 800277a:	dc16      	bgt.n	80027aa <Motors_ResetTemps+0x42>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <Motors_ResetTemps+0x1e>
 8002780:	2b01      	cmp	r3, #1
 8002782:	d005      	beq.n	8002790 <Motors_ResetTemps+0x28>
 8002784:	e011      	b.n	80027aa <Motors_ResetTemps+0x42>
	{
	case MOTOR_A:
		PID_ResetTemps(&MotorPID_A);
 8002786:	480b      	ldr	r0, [pc, #44]	; (80027b4 <Motors_ResetTemps+0x4c>)
 8002788:	f7fe ff9b 	bl	80016c2 <PID_ResetTemps>
		return MOTORS_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e00d      	b.n	80027ac <Motors_ResetTemps+0x44>

	case MOTOR_B:
		PID_ResetTemps(&MotorPID_B);
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <Motors_ResetTemps+0x50>)
 8002792:	f7fe ff96 	bl	80016c2 <PID_ResetTemps>
		return MOTORS_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e008      	b.n	80027ac <Motors_ResetTemps+0x44>

	case MOTOR_ALL:
		PID_ResetTemps(&MotorPID_A);
 800279a:	4806      	ldr	r0, [pc, #24]	; (80027b4 <Motors_ResetTemps+0x4c>)
 800279c:	f7fe ff91 	bl	80016c2 <PID_ResetTemps>
		PID_ResetTemps(&MotorPID_B);
 80027a0:	4805      	ldr	r0, [pc, #20]	; (80027b8 <Motors_ResetTemps+0x50>)
 80027a2:	f7fe ff8e 	bl	80016c2 <PID_ResetTemps>
		return MOTORS_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <Motors_ResetTemps+0x44>

	default:
		return MOTORS_ERROR;
 80027aa:	2301      	movs	r3, #1
	}
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000410 	.word	0x20000410
 80027b8:	20000430 	.word	0x20000430

080027bc <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 fe87 	bl	80044dc <HAL_Delay>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <nRF24_SendSpi+0x28>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	f003 f883 	bl	80058fc <HAL_SPI_Transmit>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000464 	.word	0x20000464

08002804 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <nRF24_ReadSpi+0x28>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	b29a      	uxth	r2, r3
 8002818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	f003 f9b0 	bl	8005b82 <HAL_SPI_Receive>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000464 	.word	0x20000464

08002830 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800283e:	2200      	movs	r2, #0
 8002840:	2104      	movs	r1, #4
 8002842:	480c      	ldr	r0, [pc, #48]	; (8002874 <nRF24_ReadRegister+0x44>)
 8002844:	f002 f8d2 	bl	80049ec <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ffc3 	bl	80027d8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8002852:	f107 030f 	add.w	r3, r7, #15
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ffd3 	bl	8002804 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800285e:	2201      	movs	r2, #1
 8002860:	2104      	movs	r1, #4
 8002862:	4804      	ldr	r0, [pc, #16]	; (8002874 <nRF24_ReadRegister+0x44>)
 8002864:	f002 f8c2 	bl	80049ec <HAL_GPIO_WritePin>

	return result;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40011400 	.word	0x40011400

08002878 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	4613      	mov	r3, r2
 8002886:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800288c:	2200      	movs	r2, #0
 800288e:	2104      	movs	r1, #4
 8002890:	480a      	ldr	r0, [pc, #40]	; (80028bc <nRF24_ReadRegisters+0x44>)
 8002892:	f002 f8ab 	bl	80049ec <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	2101      	movs	r1, #1
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff9c 	bl	80027d8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80028a0:	79bb      	ldrb	r3, [r7, #6]
 80028a2:	4619      	mov	r1, r3
 80028a4:	6838      	ldr	r0, [r7, #0]
 80028a6:	f7ff ffad 	bl	8002804 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80028aa:	2201      	movs	r2, #1
 80028ac:	2104      	movs	r1, #4
 80028ae:	4803      	ldr	r0, [pc, #12]	; (80028bc <nRF24_ReadRegisters+0x44>)
 80028b0:	f002 f89c 	bl	80049ec <HAL_GPIO_WritePin>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40011400 	.word	0x40011400

080028c0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	460a      	mov	r2, r1
 80028ca:	71fb      	strb	r3, [r7, #7]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f043 0320 	orr.w	r3, r3, #32
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80028da:	79bb      	ldrb	r3, [r7, #6]
 80028dc:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80028de:	2200      	movs	r2, #0
 80028e0:	2104      	movs	r1, #4
 80028e2:	4809      	ldr	r0, [pc, #36]	; (8002908 <nRF24_WriteRegister+0x48>)
 80028e4:	f002 f882 	bl	80049ec <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	2102      	movs	r1, #2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff72 	bl	80027d8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80028f4:	2201      	movs	r2, #1
 80028f6:	2104      	movs	r1, #4
 80028f8:	4803      	ldr	r0, [pc, #12]	; (8002908 <nRF24_WriteRegister+0x48>)
 80028fa:	f002 f877 	bl	80049ec <HAL_GPIO_WritePin>
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40011400 	.word	0x40011400

0800290c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	4613      	mov	r3, r2
 800291a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f043 0320 	orr.w	r3, r3, #32
 8002922:	b2db      	uxtb	r3, r3
 8002924:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002926:	2200      	movs	r2, #0
 8002928:	2104      	movs	r1, #4
 800292a:	480b      	ldr	r0, [pc, #44]	; (8002958 <nRF24_WriteRegisters+0x4c>)
 800292c:	f002 f85e 	bl	80049ec <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff4f 	bl	80027d8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800293a:	79bb      	ldrb	r3, [r7, #6]
 800293c:	4619      	mov	r1, r3
 800293e:	6838      	ldr	r0, [r7, #0]
 8002940:	f7ff ff4a 	bl	80027d8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002944:	2201      	movs	r2, #1
 8002946:	2104      	movs	r1, #4
 8002948:	4803      	ldr	r0, [pc, #12]	; (8002958 <nRF24_WriteRegisters+0x4c>)
 800294a:	f002 f84f 	bl	80049ec <HAL_GPIO_WritePin>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40011400 	.word	0x40011400

0800295c <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8002962:	f000 f829 	bl	80029b8 <nRF24_ReadConfig>
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 800296a:	4911      	ldr	r1, [pc, #68]	; (80029b0 <nRF24_RX_Mode+0x54>)
 800296c:	2000      	movs	r0, #0
 800296e:	f000 f9b6 	bl	8002cde <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 f81f 	bl	80029c8 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 800298a:	2070      	movs	r0, #112	; 0x70
 800298c:	f000 f877 	bl	8002a7e <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8002990:	f000 f884 	bl	8002a9c <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8002994:	f000 f89c 	bl	8002ad0 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8002998:	2201      	movs	r2, #1
 800299a:	2110      	movs	r1, #16
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <nRF24_RX_Mode+0x58>)
 800299e:	f002 f825 	bl	80049ec <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7ff ff0a 	bl	80027bc <nRF24_Delay_ms>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000468 	.word	0x20000468
 80029b4:	40010c00 	.word	0x40010c00

080029b8 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff ff37 	bl	8002830 <nRF24_ReadRegister>
 80029c2:	4603      	mov	r3, r0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4619      	mov	r1, r3
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7ff ff72 	bl	80028c0 <nRF24_WriteRegister>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80029ee:	2006      	movs	r0, #6
 80029f0:	f7ff ff1e 	bl	8002830 <nRF24_ReadRegister>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	f023 0307 	bic.w	r3, r3, #7
 80029fe:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	b25a      	sxtb	r2, r3
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	4619      	mov	r1, r3
 8002a14:	2006      	movs	r0, #6
 8002a16:	f7ff ff53 	bl	80028c0 <nRF24_WriteRegister>
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002a2c:	2006      	movs	r0, #6
 8002a2e:	f7ff feff 	bl	8002830 <nRF24_ReadRegister>
 8002a32:	4603      	mov	r3, r0
 8002a34:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002a3c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d104      	bne.n	8002a4e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	e006      	b.n	8002a5c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d103      	bne.n	8002a5c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	f043 0308 	orr.w	r3, r3, #8
 8002a5a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	2006      	movs	r0, #6
 8002a62:	f7ff ff2d 	bl	80028c0 <nRF24_WriteRegister>
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8002a72:	2007      	movs	r0, #7
 8002a74:	f7ff fedc 	bl	8002830 <nRF24_ReadRegister>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	2007      	movs	r0, #7
 8002a8e:	f7ff ff17 	bl	80028c0 <nRF24_WriteRegister>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8002aa2:	23e2      	movs	r3, #226	; 0xe2
 8002aa4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	4808      	ldr	r0, [pc, #32]	; (8002acc <nRF24_FlushRX+0x30>)
 8002aac:	f001 ff9e 	bl	80049ec <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002ab0:	1dfb      	adds	r3, r7, #7
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fe8f 	bl	80027d8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002aba:	2201      	movs	r2, #1
 8002abc:	2104      	movs	r1, #4
 8002abe:	4803      	ldr	r0, [pc, #12]	; (8002acc <nRF24_FlushRX+0x30>)
 8002ac0:	f001 ff94 	bl	80049ec <HAL_GPIO_WritePin>
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40011400 	.word	0x40011400

08002ad0 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002ad6:	23e1      	movs	r3, #225	; 0xe1
 8002ad8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002ada:	2200      	movs	r2, #0
 8002adc:	2104      	movs	r1, #4
 8002ade:	4808      	ldr	r0, [pc, #32]	; (8002b00 <nRF24_FlushTX+0x30>)
 8002ae0:	f001 ff84 	bl	80049ec <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fe75 	bl	80027d8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002aee:	2201      	movs	r2, #1
 8002af0:	2104      	movs	r1, #4
 8002af2:	4803      	ldr	r0, [pc, #12]	; (8002b00 <nRF24_FlushTX+0x30>)
 8002af4:	f001 ff7a 	bl	80049ec <HAL_GPIO_WritePin>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40011400 	.word	0x40011400

08002b04 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002b0e:	f7ff ff53 	bl	80029b8 <nRF24_ReadConfig>
 8002b12:	4603      	mov	r3, r0
 8002b14:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	f043 0308 	orr.w	r3, r3, #8
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e003      	b.n	8002b2e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	f023 0308 	bic.w	r3, r3, #8
 8002b2c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff49 	bl	80029c8 <nRF24_WriteConfig>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002b48:	f7ff ff36 	bl	80029b8 <nRF24_ReadConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d104      	bne.n	8002b60 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	e003      	b.n	8002b68 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff2c 	bl	80029c8 <nRF24_WriteConfig>
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	460a      	mov	r2, r1
 8002b82:	71fb      	strb	r3, [r7, #7]
 8002b84:	4613      	mov	r3, r2
 8002b86:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	b25b      	sxtb	r3, r3
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	2004      	movs	r0, #4
 8002ba2:	f7ff fe8d 	bl	80028c0 <nRF24_WriteRegister>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	2005      	movs	r0, #5
 8002bc4:	f7ff fe7c 	bl	80028c0 <nRF24_WriteRegister>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	460a      	mov	r2, r1
 8002bda:	71fb      	strb	r3, [r7, #7]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d901      	bls.n	8002bea <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002be6:	2305      	movs	r3, #5
 8002be8:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8002bea:	2002      	movs	r0, #2
 8002bec:	f7ff fe20 	bl	8002830 <nRF24_ReadRegister>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002bf4:	79bb      	ldrb	r3, [r7, #6]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10a      	bne.n	8002c10 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	b25a      	sxtb	r2, r3
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	b25b      	sxtb	r3, r3
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e00b      	b.n	8002c28 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2201      	movs	r2, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	b25a      	sxtb	r2, r3
 8002c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c22:	4013      	ands	r3, r2
 8002c24:	b25b      	sxtb	r3, r3
 8002c26:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	2002      	movs	r0, #2
 8002c2e:	f7ff fe47 	bl	80028c0 <nRF24_WriteRegister>
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	460a      	mov	r2, r1
 8002c44:	71fb      	strb	r3, [r7, #7]
 8002c46:	4613      	mov	r3, r2
 8002c48:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d901      	bls.n	8002c54 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002c50:	2305      	movs	r3, #5
 8002c52:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7ff fdeb 	bl	8002830 <nRF24_ReadRegister>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002c5e:	79bb      	ldrb	r3, [r7, #6]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10a      	bne.n	8002c7a <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2201      	movs	r2, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	b25a      	sxtb	r2, r3
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	e00b      	b.n	8002c92 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	b25a      	sxtb	r2, r3
 8002c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	4619      	mov	r1, r3
 8002c96:	2001      	movs	r0, #1
 8002c98:	f7ff fe12 	bl	80028c0 <nRF24_WriteRegister>
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d901      	bls.n	8002cb8 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d801      	bhi.n	8002cc2 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	3b02      	subs	r3, #2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f7ff fdf5 	bl	80028c0 <nRF24_WriteRegister>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	6039      	str	r1, [r7, #0]
 8002ce8:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <nRF24_SetRXAddress+0x18>
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d11d      	bne.n	8002d32 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	e00d      	b.n	8002d18 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	441a      	add	r2, r3
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	f1c3 0302 	rsb	r3, r3, #2
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	3310      	adds	r3, #16
 8002d0c:	443b      	add	r3, r7
 8002d0e:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	3301      	adds	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d9ee      	bls.n	8002cfc <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	330a      	adds	r3, #10
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f107 010c 	add.w	r1, r7, #12
 8002d28:	2203      	movs	r2, #3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fdee 	bl	800290c <nRF24_WriteRegisters>
	{
 8002d30:	e00a      	b.n	8002d48 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	330a      	adds	r3, #10
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f7ff fdbd 	bl	80028c0 <nRF24_WriteRegister>
}
 8002d46:	bf00      	nop
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002d58:	f107 030c 	add.w	r3, r7, #12
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	200a      	movs	r0, #10
 8002d62:	f7ff fd89 	bl	8002878 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e00c      	b.n	8002d86 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	f1c3 0302 	rsb	r3, r3, #2
 8002d74:	3210      	adds	r2, #16
 8002d76:	443a      	add	r2, r7
 8002d78:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002d7c:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <nRF24_SetTXAddress+0x88>)
 8002d7e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	3301      	adds	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d9ef      	bls.n	8002d6c <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e00d      	b.n	8002dae <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	441a      	add	r2, r3
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	f1c3 0302 	rsb	r3, r3, #2
 8002d9e:	7812      	ldrb	r2, [r2, #0]
 8002da0:	3310      	adds	r3, #16
 8002da2:	443b      	add	r3, r7
 8002da4:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	3301      	adds	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d9ee      	bls.n	8002d92 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	2203      	movs	r2, #3
 8002dba:	4619      	mov	r1, r3
 8002dbc:	200a      	movs	r0, #10
 8002dbe:	f7ff fda5 	bl	800290c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	4619      	mov	r1, r3
 8002dca:	2010      	movs	r0, #16
 8002dcc:	f7ff fd9e 	bl	800290c <nRF24_WriteRegisters>

}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000468 	.word	0x20000468

08002ddc <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002de2:	f7ff fe44 	bl	8002a6e <nRF24_ReadStatus>
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002df0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fe42 	bl	8002a7e <nRF24_WriteStatus>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8002e0c:	2060      	movs	r0, #96	; 0x60
 8002e0e:	f7ff fd0f 	bl	8002830 <nRF24_ReadRegister>
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d906      	bls.n	8002e2a <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8002e1c:	f7ff fe3e 	bl	8002a9c <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8002e20:	2002      	movs	r0, #2
 8002e22:	f7ff fccb 	bl	80027bc <nRF24_Delay_ms>
        return 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002e3e:	f7ff fdbb 	bl	80029b8 <nRF24_ReadConfig>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d104      	bne.n	8002e56 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	e003      	b.n	8002e5e <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e5c:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fdb1 	bl	80029c8 <nRF24_WriteConfig>
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002e78:	f7ff fd9e 	bl	80029b8 <nRF24_ReadConfig>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	f043 0320 	orr.w	r3, r3, #32
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e003      	b.n	8002e98 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	f023 0320 	bic.w	r3, r3, #32
 8002e96:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fd94 	bl	80029c8 <nRF24_WriteConfig>
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002eb2:	f7ff fd81 	bl	80029b8 <nRF24_ReadConfig>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	f043 0310 	orr.w	r3, r3, #16
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e003      	b.n	8002ed2 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	f023 0310 	bic.w	r3, r3, #16
 8002ed0:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fd77 	bl	80029c8 <nRF24_WriteConfig>
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8002eec:	f7ff ff89 	bl	8002e02 <nRF24_GetDynamicPayloadSize>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	2061      	movs	r0, #97	; 0x61
 8002f02:	f7ff fcb9 	bl	8002878 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <nRF24_IRQ_Handler+0x14>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	2000046e 	.word	0x2000046e

08002f28 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <nRF24_IRQ_Read+0x7c>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d130      	bne.n	8002f9a <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <nRF24_IRQ_Read+0x7c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8002f3e:	f7ff fd96 	bl	8002a6e <nRF24_ReadStatus>
 8002f42:	4603      	mov	r3, r0
 8002f44:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8002f4a:	79bb      	ldrb	r3, [r7, #6]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002f54:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <nRF24_IRQ_Read+0x80>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f60:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8002f62:	79bb      	ldrb	r3, [r7, #6]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <nRF24_IRQ_Read+0x84>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f043 0320 	orr.w	r3, r3, #32
 8002f78:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8002f7a:	79bb      	ldrb	r3, [r7, #6]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <nRF24_IRQ_Read+0x88>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f043 0310 	orr.w	r3, r3, #16
 8002f90:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fd72 	bl	8002a7e <nRF24_WriteStatus>
	}
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000046e 	.word	0x2000046e
 8002fa8:	2000046b 	.word	0x2000046b
 8002fac:	2000046c 	.word	0x2000046c
 8002fb0:	2000046d 	.word	0x2000046d

08002fb4 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8002fb8:	f7ff ffb6 	bl	8002f28 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <nRF24_Event+0x44>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8002fc4:	f000 fa78 	bl	80034b8 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <nRF24_Event+0x44>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <nRF24_Event+0x48>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8002fd6:	f000 fa5f 	bl	8003498 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <nRF24_Event+0x48>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <nRF24_Event+0x4c>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8002fe8:	f000 fa90 	bl	800350c <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <nRF24_Event+0x4c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
	}
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000046b 	.word	0x2000046b
 8002ffc:	2000046c 	.word	0x2000046c
 8003000:	2000046d 	.word	0x2000046d

08003004 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 800300c:	4a2e      	ldr	r2, [pc, #184]	; (80030c8 <nRF24_Init+0xc4>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8003012:	2200      	movs	r2, #0
 8003014:	2110      	movs	r1, #16
 8003016:	482d      	ldr	r0, [pc, #180]	; (80030cc <nRF24_Init+0xc8>)
 8003018:	f001 fce8 	bl	80049ec <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800301c:	2201      	movs	r2, #1
 800301e:	2104      	movs	r1, #4
 8003020:	482b      	ldr	r0, [pc, #172]	; (80030d0 <nRF24_Init+0xcc>)
 8003022:	f001 fce3 	bl	80049ec <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8003026:	2005      	movs	r0, #5
 8003028:	f7ff fbc8 	bl	80027bc <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800302c:	2003      	movs	r0, #3
 800302e:	f7ff fcd9 	bl	80029e4 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8003032:	2002      	movs	r0, #2
 8003034:	f7ff fcf5 	bl	8002a22 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8003038:	2001      	movs	r0, #1
 800303a:	f7ff fd63 	bl	8002b04 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800303e:	2000      	movs	r0, #0
 8003040:	f7ff fd7d 	bl	8002b3e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8003044:	2107      	movs	r1, #7
 8003046:	2004      	movs	r0, #4
 8003048:	f7ff fd96 	bl	8002b78 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 800304c:	201d      	movs	r0, #29
 800304e:	f7ff fbef 	bl	8002830 <nRF24_ReadRegister>
 8003052:	4603      	mov	r3, r0
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	b2db      	uxtb	r3, r3
 800305a:	4619      	mov	r1, r3
 800305c:	201d      	movs	r0, #29
 800305e:	f7ff fc2f 	bl	80028c0 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8003062:	213f      	movs	r1, #63	; 0x3f
 8003064:	201c      	movs	r0, #28
 8003066:	f7ff fc2b 	bl	80028c0 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 800306a:	200a      	movs	r0, #10
 800306c:	f7ff fd9f 	bl	8002bae <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8003070:	2101      	movs	r1, #1
 8003072:	2000      	movs	r0, #0
 8003074:	f7ff fdac 	bl	8002bd0 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8003078:	2101      	movs	r1, #1
 800307a:	2000      	movs	r0, #0
 800307c:	f7ff fddd 	bl	8002c3a <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8003080:	2003      	movs	r0, #3
 8003082:	f7ff fe0f 	bl	8002ca4 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8003086:	2001      	movs	r0, #1
 8003088:	f7ff fb98 	bl	80027bc <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 800308c:	2001      	movs	r0, #1
 800308e:	f7ff fed1 	bl	8002e34 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8003092:	2001      	movs	r0, #1
 8003094:	f7ff feeb 	bl	8002e6e <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8003098:	2001      	movs	r0, #1
 800309a:	f7ff ff05 	bl	8002ea8 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 800309e:	2001      	movs	r0, #1
 80030a0:	f7ff fb8c 	bl	80027bc <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80030a4:	f7ff fe9a 	bl	8002ddc <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 80030a8:	201d      	movs	r0, #29
 80030aa:	f7ff fbc1 	bl	8002830 <nRF24_ReadRegister>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4619      	mov	r1, r3
 80030b8:	201d      	movs	r0, #29
 80030ba:	f7ff fc01 	bl	80028c0 <nRF24_WriteRegister>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000464 	.word	0x20000464
 80030cc:	40010c00 	.word	0x40010c00
 80030d0:	40011400 	.word	0x40011400

080030d4 <nRF24_WriteAckPayload>:
//
//
//

nRF24_TX_Status nRF24_WriteAckPayload(uint8_t pipe, uint8_t *data, uint8_t size)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
 80030e0:	4613      	mov	r3, r2
 80030e2:	71bb      	strb	r3, [r7, #6]
	if(size > 32)
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d901      	bls.n	80030ee <nRF24_WriteAckPayload+0x1a>
		return NRF24_NO_TRANSMITTED_PACKET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00d      	b.n	800310a <nRF24_WriteAckPayload+0x36>

	pipe &= 0x07;
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegisters((NRF24_CMD_W_ACK_PAYLOAD | pipe), data, size);
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	f063 0357 	orn	r3, r3, #87	; 0x57
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	79ba      	ldrb	r2, [r7, #6]
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fc02 	bl	800290c <nRF24_WriteRegisters>

	return NRF24_TRANSMITTED_PACKET;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <vTaskOnboardDiode>:




void vTaskOnboardDiode(void *pvParameters)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800311c:	2101      	movs	r1, #1
 800311e:	4804      	ldr	r0, [pc, #16]	; (8003130 <vTaskOnboardDiode+0x1c>)
 8003120:	f001 fc7c 	bl	8004a1c <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8003124:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003128:	f005 fb10 	bl	800874c <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800312c:	e7f6      	b.n	800311c <vTaskOnboardDiode+0x8>
 800312e:	bf00      	nop
 8003130:	40011000 	.word	0x40011000

08003134 <Parser_ParseProgramLaunchCommand>:
//
// Programs side Parsers
//

void Parser_ParseProgramLaunchCommand(uint8_t ProgramID)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	/* Launch proper program */
	/* When another program is currently running, launch function will return error */
	switch(ProgramID)
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2bd2      	cmp	r3, #210	; 0xd2
 8003142:	d010      	beq.n	8003166 <Parser_ParseProgramLaunchCommand+0x32>
 8003144:	2bd2      	cmp	r3, #210	; 0xd2
 8003146:	dc12      	bgt.n	800316e <Parser_ParseProgramLaunchCommand+0x3a>
 8003148:	2bd0      	cmp	r3, #208	; 0xd0
 800314a:	d002      	beq.n	8003152 <Parser_ParseProgramLaunchCommand+0x1e>
 800314c:	2bd1      	cmp	r3, #209	; 0xd1
 800314e:	d005      	beq.n	800315c <Parser_ParseProgramLaunchCommand+0x28>
 8003150:	e00d      	b.n	800316e <Parser_ParseProgramLaunchCommand+0x3a>
	{
	case DIODE_TEST:
		status = Prog_DiodeTest_Launch();
 8003152:	f001 f81b 	bl	800418c <Prog_DiodeTest_Launch>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]
		break;
 800315a:	e00b      	b.n	8003174 <Parser_ParseProgramLaunchCommand+0x40>

	case MOTORS_DEBUG:
		status = Prog_MotorsDebug_Launch();
 800315c:	f001 f86a 	bl	8004234 <Prog_MotorsDebug_Launch>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]
		break;
 8003164:	e006      	b.n	8003174 <Parser_ParseProgramLaunchCommand+0x40>

	case PID_CALIBRATION:
		status = Prog_CalibPID_Launch();
 8003166:	f000 ff0f 	bl	8003f88 <Prog_CalibPID_Launch>
 800316a:	4603      	mov	r3, r0
 800316c:	73fb      	strb	r3, [r7, #15]

	default:
		status = PROGRAMS_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
		break;
 8003172:	bf00      	nop
	}

	/* Send ACK to controller */
	if(status == PROGRAMS_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <Parser_ParseProgramLaunchCommand+0x52>
	{
		Programs_SendProgramStartedACK(ProgramID, ACK);		//TODO: Maybe ACK should be sent after each program Init function ?
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	21f0      	movs	r1, #240	; 0xf0
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f91e 	bl	80043c0 <Programs_SendProgramStartedACK>
	}
	else
	{
		Programs_SendProgramStartedACK(ProgramID, NACK);
	}
}
 8003184:	e004      	b.n	8003190 <Parser_ParseProgramLaunchCommand+0x5c>
		Programs_SendProgramStartedACK(ProgramID, NACK);
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	21f1      	movs	r1, #241	; 0xf1
 800318a:	4618      	mov	r0, r3
 800318c:	f001 f918 	bl	80043c0 <Programs_SendProgramStartedACK>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <Parser_ProgramParser>:

Parser_Error_t Parser_ProgramParser(uint8_t* cmd, uint8_t length)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = cmd;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	617b      	str	r3, [r7, #20]
	uint8_t Length = length;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	74fb      	strb	r3, [r7, #19]
	Programs_Program_t* CurrentProgram = Programs_GetProgram();
 80031ac:	f001 f8b0 	bl	8004310 <Programs_GetProgram>
 80031b0:	60f8      	str	r0, [r7, #12]

	/* If the command header is currently running program's ID, then pass the rest fo the command to it's parser */
	if(NULL != CurrentProgram && *CurrentByte == CurrentProgram->ProgramID)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <Parser_ProgramParser+0x46>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	7c1b      	ldrb	r3, [r3, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d10c      	bne.n	80031de <Parser_ProgramParser+0x46>
	{
		CurrentByte++;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3301      	adds	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
		Length--;
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	74fb      	strb	r3, [r7, #19]
		/* Frame: [ProgramID, Specific program commands...] */
		CurrentProgram->ProgramParser(CurrentByte, Length);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	7cfa      	ldrb	r2, [r7, #19]
 80031d6:	4611      	mov	r1, r2
 80031d8:	6978      	ldr	r0, [r7, #20]
 80031da:	4798      	blx	r3
 80031dc:	e014      	b.n	8003208 <Parser_ProgramParser+0x70>
	}
	else
	/* If command header is different, check if it is launch/exit commands */
	{
		switch(*CurrentByte)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d002      	beq.n	80031ec <Parser_ProgramParser+0x54>
 80031e6:	2b11      	cmp	r3, #17
 80031e8:	d008      	beq.n	80031fc <Parser_ProgramParser+0x64>
			break;

		default:
			/* Incorrect command! */

			break;
 80031ea:	e00d      	b.n	8003208 <Parser_ProgramParser+0x70>
			uint8_t ProgramToLaunch = *(CurrentByte + 1);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	72fb      	strb	r3, [r7, #11]
			Parser_ParseProgramLaunchCommand(ProgramToLaunch);
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff9d 	bl	8003134 <Parser_ParseProgramLaunchCommand>
			break;
 80031fa:	e005      	b.n	8003208 <Parser_ProgramParser+0x70>
			Programs_ExitProgram();
 80031fc:	f001 f878 	bl	80042f0 <Programs_ExitProgram>
			Programs_SendProgramExitACK(ACK);
 8003200:	20f0      	movs	r0, #240	; 0xf0
 8003202:	f001 f8fa 	bl	80043fa <Programs_SendProgramExitACK>
			break;
 8003206:	bf00      	nop
		}
	}
	return PARSER_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <Parser_HardwareParser>:
//
// Hardware side parsers
//

Parser_Error_t Parser_HardwareParser(uint8_t* cmd, uint8_t length)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	70fb      	strb	r3, [r7, #3]
	//uint8_t *Command = cmd;
	return PARSER_OK;
 800321e:	2300      	movs	r3, #0



}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
	...

0800322c <vTaskParser>:
//
// The Task
//

void vTaskParser(void *pvParameters)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	QueueParser = xQueueCreate(10, sizeof(Parser_Command_t));
 8003234:	2200      	movs	r2, #0
 8003236:	2122      	movs	r1, #34	; 0x22
 8003238:	200a      	movs	r0, #10
 800323a:	f004 fcac 	bl	8007b96 <xQueueGenericCreate>
 800323e:	4603      	mov	r3, r0
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <vTaskParser+0x68>)
 8003242:	6013      	str	r3, [r2, #0]
	Parser_Command_t CommandBuffer;

	for(;;)
	{
		/* Wait for frame to parse */
		xQueueReceive(QueueParser, &CommandBuffer, portMAX_DELAY);
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <vTaskParser+0x68>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f107 010c 	add.w	r1, r7, #12
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	4618      	mov	r0, r3
 8003252:	f004 fe97 	bl	8007f84 <xQueueReceive>
		/* Check header */
		switch(CommandBuffer.data[0])
 8003256:	7b3b      	ldrb	r3, [r7, #12]
 8003258:	2b12      	cmp	r3, #18
 800325a:	d002      	beq.n	8003262 <vTaskParser+0x36>
 800325c:	2b13      	cmp	r3, #19
 800325e:	d00c      	beq.n	800327a <vTaskParser+0x4e>
		case HARDWARE_CMD:
			Parser_HardwareParser((CommandBuffer.data) + 1, CommandBuffer.length - 1 );
			break;

		default:
			break;
 8003260:	e017      	b.n	8003292 <vTaskParser+0x66>
			Parser_ProgramParser((CommandBuffer.data) + 1, CommandBuffer.length - 1 );
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	3301      	adds	r3, #1
 8003268:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800326c:	3a01      	subs	r2, #1
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff90 	bl	8003198 <Parser_ProgramParser>
			break;
 8003278:	e00b      	b.n	8003292 <vTaskParser+0x66>
			Parser_HardwareParser((CommandBuffer.data) + 1, CommandBuffer.length - 1 );
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	3301      	adds	r3, #1
 8003280:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003284:	3a01      	subs	r2, #1
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ffc1 	bl	8003212 <Parser_HardwareParser>
			break;
 8003290:	bf00      	nop
		xQueueReceive(QueueParser, &CommandBuffer, portMAX_DELAY);
 8003292:	e7d7      	b.n	8003244 <vTaskParser+0x18>
 8003294:	20000470 	.word	0x20000470

08003298 <Parser_TaskInit>:
		}
	}
}

void Parser_TaskInit(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af02      	add	r7, sp, #8
	xTaskCreate(vTaskParser, "Parser Task", 512, NULL, 1, NULL);
 800329e:	2300      	movs	r3, #0
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	2301      	movs	r3, #1
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ac:	4903      	ldr	r1, [pc, #12]	; (80032bc <Parser_TaskInit+0x24>)
 80032ae:	4804      	ldr	r0, [pc, #16]	; (80032c0 <Parser_TaskInit+0x28>)
 80032b0:	f005 f910 	bl	80084d4 <xTaskCreate>
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	0800e428 	.word	0x0800e428
 80032c0:	0800322d 	.word	0x0800322d

080032c4 <Parser_WriteCommand>:
	return PARSER_OK;
}

/* Put command into queue for parser to execute */
Parser_Error_t Parser_WriteCommand(Parser_Command_t* cmd, Parser_Origin_t source)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
	cmd->origin = source;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	if(xQueueSendToBack( QueueParser, cmd, (TickType_t)10 ) != pdTRUE )
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <Parser_WriteCommand+0x38>)
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	220a      	movs	r2, #10
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	f004 fcb9 	bl	8007c58 <xQueueGenericSend>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d001      	beq.n	80032f0 <Parser_WriteCommand+0x2c>
	{
		/* If put to queue failed */
		return PARSER_ERROR;
 80032ec:	2302      	movs	r3, #2
 80032ee:	e000      	b.n	80032f2 <Parser_WriteCommand+0x2e>
	}

	return PARSER_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000470 	.word	0x20000470

08003300 <vTaskRadio>:
//
// -- The task --
//

void vTaskRadio(void *pvParameters)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	/* Create queue for transmission (TX) */
	QueueRadioTX = xQueueCreate(3, sizeof(Radio_Frame_t));
 8003308:	2200      	movs	r2, #0
 800330a:	2121      	movs	r1, #33	; 0x21
 800330c:	2003      	movs	r0, #3
 800330e:	f004 fc42 	bl	8007b96 <xQueueGenericCreate>
 8003312:	4603      	mov	r3, r0
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <vTaskRadio+0x74>)
 8003316:	6013      	str	r3, [r2, #0]

	for(;;)
	{
		/* Block the task untill notification from NRF IRQ arrives */
		if(xTaskNotifyWait(0, 0, NULL, RADIO_TIMEOUT_TICKS) == pdTRUE)
 8003318:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800331c:	2200      	movs	r2, #0
 800331e:	2100      	movs	r1, #0
 8003320:	2000      	movs	r0, #0
 8003322:	f005 ff1f 	bl	8009164 <xTaskNotifyWait>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11f      	bne.n	800336c <vTaskRadio+0x6c>
		{
			/* Check kind of IRQ and take related actions (callbacks) */
			nRF24_Event();
 800332c:	f7ff fe42 	bl	8002fb4 <nRF24_Event>
			/* Take massage from TX Queue and send it via next ACK Payload */
			if(TxStatus == RADIO_OK && ConnectionStatus == RADIO_OK)
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <vTaskRadio+0x78>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ef      	bne.n	8003318 <vTaskRadio+0x18>
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <vTaskRadio+0x7c>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1eb      	bne.n	8003318 <vTaskRadio+0x18>
			{
				if( xQueueReceive(QueueRadioTX, &FrameToSend, 0 ) == pdPASS )
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <vTaskRadio+0x74>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	490e      	ldr	r1, [pc, #56]	; (8003380 <vTaskRadio+0x80>)
 8003348:	4618      	mov	r0, r3
 800334a:	f004 fe1b 	bl	8007f84 <xQueueReceive>
 800334e:	4603      	mov	r3, r0
 8003350:	2b01      	cmp	r3, #1
 8003352:	d1e1      	bne.n	8003318 <vTaskRadio+0x18>
				{
					nRF24_WriteAckPayload(0, FrameToSend.data, FrameToSend.length);
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <vTaskRadio+0x80>)
 8003356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335a:	461a      	mov	r2, r3
 800335c:	4908      	ldr	r1, [pc, #32]	; (8003380 <vTaskRadio+0x80>)
 800335e:	2000      	movs	r0, #0
 8003360:	f7ff feb8 	bl	80030d4 <nRF24_WriteAckPayload>
					/* Radio busy to prevent overwriting ack payload with next frame untill TX Callback arrives */
					TxStatus = RADIO_BUSY;
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <vTaskRadio+0x78>)
 8003366:	2202      	movs	r2, #2
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	e7d5      	b.n	8003318 <vTaskRadio+0x18>
			}
		}
		else
		/* If any interrupt haven't came during RADIO_TIMEOUT_TICKS period, communication is lost */
		{
			ConnectionStatus = RADIO_ERROR;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <vTaskRadio+0x7c>)
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
		if(xTaskNotifyWait(0, 0, NULL, RADIO_TIMEOUT_TICKS) == pdTRUE)
 8003372:	e7d1      	b.n	8003318 <vTaskRadio+0x18>
 8003374:	20000480 	.word	0x20000480
 8003378:	20000475 	.word	0x20000475
 800337c:	20000474 	.word	0x20000474
 8003380:	20000484 	.word	0x20000484

08003384 <Radio_TaskInit>:
// -- API Functions to use in main.c --
//

/* Init, to use before scheduler start */
void Radio_TaskInit(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af02      	add	r7, sp, #8
	/* Transceiver init */
	nRF24_Init(&hspi3);
 800338a:	480d      	ldr	r0, [pc, #52]	; (80033c0 <Radio_TaskInit+0x3c>)
 800338c:	f7ff fe3a 	bl	8003004 <nRF24_Init>
	/* Set communication addresses */
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <Radio_TaskInit+0x40>)
 8003392:	2000      	movs	r0, #0
 8003394:	f7ff fca3 	bl	8002cde <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 8003398:	480b      	ldr	r0, [pc, #44]	; (80033c8 <Radio_TaskInit+0x44>)
 800339a:	f7ff fcd9 	bl	8002d50 <nRF24_SetTXAddress>
	/* Enable RX mode */
	nRF24_RX_Mode();
 800339e:	f7ff fadd 	bl	800295c <nRF24_RX_Mode>
	/* Task creation */
	xTaskCreate(vTaskRadio, "NRF24 Task", 512, NULL, 1, &xTaskRadioHandle);
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <Radio_TaskInit+0x48>)
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	2301      	movs	r3, #1
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	2300      	movs	r3, #0
 80033ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b0:	4907      	ldr	r1, [pc, #28]	; (80033d0 <Radio_TaskInit+0x4c>)
 80033b2:	4808      	ldr	r0, [pc, #32]	; (80033d4 <Radio_TaskInit+0x50>)
 80033b4:	f005 f88e 	bl	80084d4 <xTaskCreate>
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200004a8 	.word	0x200004a8
 80033c4:	0800e434 	.word	0x0800e434
 80033c8:	0800e438 	.word	0x0800e438
 80033cc:	2000047c 	.word	0x2000047c
 80033d0:	0800e43c 	.word	0x0800e43c
 80033d4:	08003301 	.word	0x08003301

080033d8 <Radio_HandlerIRQ>:

/* Interrupt handler to put in EXTI routine */
/* Whole interrupt mechanism should be more optimised for RTOS usage but now I want to just get it just work... */
void Radio_HandlerIRQ(void)	//TODO: Check priorities later
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
	/* Set Interrupt Flag to 1 */
	nRF24_IRQ_Handler();
 80033e2:	f7ff fd95 	bl	8002f10 <nRF24_IRQ_Handler>

	Radio_Frame_t TestFrame;
	TestFrame.data[0] = 0xFF;
 80033e6:	23ff      	movs	r3, #255	; 0xff
 80033e8:	703b      	strb	r3, [r7, #0]
	TestFrame.length = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3020 	strb.w	r3, [r7, #32]

	xQueueSendToBackFromISR( QueueRadioTX, &TestFrame, NULL );
 80033f0:	4b0e      	ldr	r3, [pc, #56]	; (800342c <Radio_HandlerIRQ+0x54>)
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	4639      	mov	r1, r7
 80033f6:	2300      	movs	r3, #0
 80033f8:	2200      	movs	r2, #0
 80033fa:	f004 fd2b 	bl	8007e54 <xQueueGenericSendFromISR>


	/* Notify the radio Task */
	vTaskNotifyGiveFromISR(xTaskRadioHandle, &xHigherPriorityTaskWoken);
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <Radio_HandlerIRQ+0x58>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f005 ff05 	bl	8009218 <vTaskNotifyGiveFromISR>
	/* yield if unblocked task (radio) has higher priority than current task */
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <Radio_HandlerIRQ+0x4c>
 8003414:	4b07      	ldr	r3, [pc, #28]	; (8003434 <Radio_HandlerIRQ+0x5c>)
 8003416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	f3bf 8f6f 	isb	sy
}
 8003424:	bf00      	nop
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000480 	.word	0x20000480
 8003430:	2000047c 	.word	0x2000047c
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <Radio_TxPutFrame>:
// -- API Functions for other tasks --
//

/* Function to put the frame into the queue, frame will be sent in ACK Payload after receiving next message from controller */
Radio_Status_t Radio_TxPutFrame(Radio_Frame_t* FrameToPut)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	/* Return error if there is no connection */
	if(ConnectionStatus == RADIO_ERROR)
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <Radio_TxPutFrame+0x58>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <Radio_TxPutFrame+0x14>
	{
		return RADIO_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e01d      	b.n	8003488 <Radio_TxPutFrame+0x50>
	}

	Radio_Status_t Status = RADIO_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]

	/* Add end of command identifier to frame */
	FrameToPut->data[FrameToPut->length] = COMM_END;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003456:	461a      	mov	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2104      	movs	r1, #4
 800345c:	5499      	strb	r1, [r3, r2]
	FrameToPut->length++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003464:	3301      	adds	r3, #1
 8003466:	b2da      	uxtb	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f883 2020 	strb.w	r2, [r3, #32]

	/* Put the frame into TX queue */
	if(xQueueSendToBack( QueueRadioTX, FrameToPut, (TickType_t)10 ) != pdTRUE )
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <Radio_TxPutFrame+0x5c>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	2300      	movs	r3, #0
 8003474:	220a      	movs	r2, #10
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	f004 fbee 	bl	8007c58 <xQueueGenericSend>
 800347c:	4603      	mov	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <Radio_TxPutFrame+0x4e>
	{
		/* If put to queue failed */
		Status = RADIO_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
	}

	return Status;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000474 	.word	0x20000474
 8003494:	20000480 	.word	0x20000480

08003498 <nRF24_EventTxCallback>:
//
// -- NRF24 Event Callbacks --
//

void nRF24_EventTxCallback(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
	/* Unlock sending next TX ACK Payload */
	TxStatus = RADIO_OK;
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <nRF24_EventTxCallback+0x18>)
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
	/* Radio OK - connection is live */
	ConnectionStatus = RADIO_OK;
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <nRF24_EventTxCallback+0x1c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	20000475 	.word	0x20000475
 80034b4:	20000474 	.word	0x20000474

080034b8 <nRF24_EventRxCallback>:


void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
	/* Parser command type for receiving data */
	Parser_Command_t ReceivedCmd;
	/* Read data */
	nRF24_ReadRXPaylaod(ReceivedCmd.data, &ReceivedCmd.length);
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	f103 0220 	add.w	r2, r3, #32
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fd0a 	bl	8002ee2 <nRF24_ReadRXPaylaod>
	/* If new RX is available, that means the connection is OK */
	ConnectionStatus = RADIO_OK;
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <nRF24_EventRxCallback+0x48>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
	/* Save tick for connection lost timeot */
	ConnectionTimeoutCounter = xTaskGetTickCount();
 80034d4:	f005 fa80 	bl	80089d8 <xTaskGetTickCount>
 80034d8:	4603      	mov	r3, r0
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <nRF24_EventRxCallback+0x4c>)
 80034dc:	6013      	str	r3, [r2, #0]

	/* Note: ACK Payload !propably! is cleared from nRF buffer after send, so there is no need to prevent
	 *  sending the same frame in ACK payload again and again when no new frame was written to send */

	/* Ingore if it is connection hold (it's only important for controller side */
	if(CONNECTION_HOLD == ReceivedCmd.data[0]) return;
 80034de:	793b      	ldrb	r3, [r7, #4]
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d008      	beq.n	80034f6 <nRF24_EventRxCallback+0x3e>

	/* Write received frame to parser queue */
	if( Parser_WriteCommand(&ReceivedCmd, RADIO_SOURCE) == PARSER_ERROR )
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff feeb 	bl	80032c4 <Parser_WriteCommand>
	{
		//TODO: FAILED TO PUT COMMAND INTO PARSER QUEUE
	}

	RxStatus = RADIO_NEW_RX;
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <nRF24_EventRxCallback+0x50>)
 80034f0:	2203      	movs	r2, #3
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e000      	b.n	80034f8 <nRF24_EventRxCallback+0x40>
	if(CONNECTION_HOLD == ReceivedCmd.data[0]) return;
 80034f6:	bf00      	nop
}
 80034f8:	3728      	adds	r7, #40	; 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000474 	.word	0x20000474
 8003504:	20000478 	.word	0x20000478
 8003508:	20000476 	.word	0x20000476

0800350c <nRF24_EventMrCallback>:

/* This callback means connection lost */
void nRF24_EventMrCallback(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <nRF24_EventMrCallback+0x14>)
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
	//TODO: Check if this has any sense on robot
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000474 	.word	0x20000474

08003524 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003528:	4b17      	ldr	r3, [pc, #92]	; (8003588 <MX_SPI3_Init+0x64>)
 800352a:	4a18      	ldr	r2, [pc, #96]	; (800358c <MX_SPI3_Init+0x68>)
 800352c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <MX_SPI3_Init+0x64>)
 8003530:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003534:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <MX_SPI3_Init+0x64>)
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <MX_SPI3_Init+0x64>)
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <MX_SPI3_Init+0x64>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <MX_SPI3_Init+0x64>)
 800354a:	2200      	movs	r2, #0
 800354c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <MX_SPI3_Init+0x64>)
 8003550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003554:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <MX_SPI3_Init+0x64>)
 8003558:	2218      	movs	r2, #24
 800355a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <MX_SPI3_Init+0x64>)
 800355e:	2200      	movs	r2, #0
 8003560:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <MX_SPI3_Init+0x64>)
 8003564:	2200      	movs	r2, #0
 8003566:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <MX_SPI3_Init+0x64>)
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <MX_SPI3_Init+0x64>)
 8003570:	220a      	movs	r2, #10
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003574:	4804      	ldr	r0, [pc, #16]	; (8003588 <MX_SPI3_Init+0x64>)
 8003576:	f002 f93d 	bl	80057f4 <HAL_SPI_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003580:	f7fe fdac 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}
 8003588:	200004a8 	.word	0x200004a8
 800358c:	40003c00 	.word	0x40003c00

08003590 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_SPI_MspInit+0xa8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d13f      	bne.n	8003630 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035b0:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_SPI_MspInit+0xac>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	4a21      	ldr	r2, [pc, #132]	; (800363c <HAL_SPI_MspInit+0xac>)
 80035b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ba:	61d3      	str	r3, [r2, #28]
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_SPI_MspInit+0xac>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c8:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_SPI_MspInit+0xac>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <HAL_SPI_MspInit+0xac>)
 80035ce:	f043 0310 	orr.w	r3, r3, #16
 80035d2:	6193      	str	r3, [r2, #24]
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_SPI_MspInit+0xac>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 80035e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	4812      	ldr	r0, [pc, #72]	; (8003640 <HAL_SPI_MspInit+0xb0>)
 80035f6:	f001 f875 	bl	80046e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 80035fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	480c      	ldr	r0, [pc, #48]	; (8003640 <HAL_SPI_MspInit+0xb0>)
 8003610:	f001 f868 	bl	80046e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_SPI_MspInit+0xb4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	4a06      	ldr	r2, [pc, #24]	; (8003644 <HAL_SPI_MspInit+0xb4>)
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003630:	bf00      	nop
 8003632:	3728      	adds	r7, #40	; 0x28
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40003c00 	.word	0x40003c00
 800363c:	40021000 	.word	0x40021000
 8003640:	40011000 	.word	0x40011000
 8003644:	40010000 	.word	0x40010000

08003648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_MspInit+0x68>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <HAL_MspInit+0x68>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6193      	str	r3, [r2, #24]
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_MspInit+0x68>)
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_MspInit+0x68>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_MspInit+0x68>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003670:	61d3      	str	r3, [r2, #28]
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_MspInit+0x68>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	210f      	movs	r1, #15
 8003682:	f06f 0001 	mvn.w	r0, #1
 8003686:	f001 f802 	bl	800468e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_MspInit+0x6c>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <HAL_MspInit+0x6c>)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40010000 	.word	0x40010000

080036b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	; 0x38
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036ce:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_InitTick+0xe8>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4a33      	ldr	r2, [pc, #204]	; (80037a0 <HAL_InitTick+0xe8>)
 80036d4:	f043 0310 	orr.w	r3, r3, #16
 80036d8:	61d3      	str	r3, [r2, #28]
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_InitTick+0xe8>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036e6:	f107 0210 	add.w	r2, r7, #16
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 f831 	bl	8005758 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003700:	f002 f802 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 8003704:	6378      	str	r0, [r7, #52]	; 0x34
 8003706:	e004      	b.n	8003712 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003708:	f001 fffe 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 800370c:	4603      	mov	r3, r0
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <HAL_InitTick+0xec>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0c9b      	lsrs	r3, r3, #18
 800371c:	3b01      	subs	r3, #1
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_InitTick+0xf0>)
 8003722:	4a22      	ldr	r2, [pc, #136]	; (80037ac <HAL_InitTick+0xf4>)
 8003724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_InitTick+0xf0>)
 8003728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800372c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800372e:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <HAL_InitTick+0xf0>)
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003734:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_InitTick+0xf0>)
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_InitTick+0xf0>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_InitTick+0xf0>)
 8003742:	2200      	movs	r2, #0
 8003744:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003746:	4818      	ldr	r0, [pc, #96]	; (80037a8 <HAL_InitTick+0xf0>)
 8003748:	f002 fddc 	bl	8006304 <HAL_TIM_Base_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11b      	bne.n	8003792 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800375a:	4813      	ldr	r0, [pc, #76]	; (80037a8 <HAL_InitTick+0xf0>)
 800375c:	f002 fe22 	bl	80063a4 <HAL_TIM_Base_Start_IT>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800376a:	2b00      	cmp	r3, #0
 800376c:	d111      	bne.n	8003792 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800376e:	2036      	movs	r0, #54	; 0x36
 8003770:	f000 ffa9 	bl	80046c6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b0f      	cmp	r3, #15
 8003778:	d808      	bhi.n	800378c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800377a:	2200      	movs	r2, #0
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	2036      	movs	r0, #54	; 0x36
 8003780:	f000 ff85 	bl	800468e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_InitTick+0xf8>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e002      	b.n	8003792 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003796:	4618      	mov	r0, r3
 8003798:	3738      	adds	r7, #56	; 0x38
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	431bde83 	.word	0x431bde83
 80037a8:	20000500 	.word	0x20000500
 80037ac:	40001000 	.word	0x40001000
 80037b0:	200000a4 	.word	0x200000a4

080037b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <NMI_Handler+0x4>

080037ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037be:	e7fe      	b.n	80037be <HardFault_Handler+0x4>

080037c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037c4:	e7fe      	b.n	80037c4 <MemManage_Handler+0x4>

080037c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037ca:	e7fe      	b.n	80037ca <BusFault_Handler+0x4>

080037cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <UsageFault_Handler+0x4>

080037d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80037e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80037e6:	f001 f933 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <TIM6_IRQHandler+0x10>)
 80037f6:	f003 f861 	bl	80068bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000500 	.word	0x20000500

08003804 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <TIM7_IRQHandler+0x10>)
 800380a:	f003 f857 	bl	80068bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000624 	.word	0x20000624

08003818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return 1;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <_kill>:

int _kill(int pid, int sig)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003830:	f008 f8c2 	bl	800b9b8 <__errno>
 8003834:	4603      	mov	r3, r0
 8003836:	2216      	movs	r2, #22
 8003838:	601a      	str	r2, [r3, #0]
  return -1;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_exit>:

void _exit (int status)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800384e:	f04f 31ff 	mov.w	r1, #4294967295
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ffe7 	bl	8003826 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003858:	e7fe      	b.n	8003858 <_exit+0x12>

0800385a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e00a      	b.n	8003882 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800386c:	f3af 8000 	nop.w
 8003870:	4601      	mov	r1, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	60ba      	str	r2, [r7, #8]
 8003878:	b2ca      	uxtb	r2, r1
 800387a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	3301      	adds	r3, #1
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	dbf0      	blt.n	800386c <_read+0x12>
  }

  return len;
 800388a:	687b      	ldr	r3, [r7, #4]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e009      	b.n	80038ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	60ba      	str	r2, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fbdc 	bl	800206c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3301      	adds	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	dbf1      	blt.n	80038a6 <_write+0x12>
  }
  return len;
 80038c2:	687b      	ldr	r3, [r7, #4]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_close>:

int _close(int file)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038f2:	605a      	str	r2, [r3, #4]
  return 0;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <_isatty>:

int _isatty(int file)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003908:	2301      	movs	r3, #1
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <_sbrk+0x5c>)
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <_sbrk+0x60>)
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <_sbrk+0x64>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <_sbrk+0x64>)
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <_sbrk+0x68>)
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <_sbrk+0x64>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	429a      	cmp	r2, r3
 800395a:	d207      	bcs.n	800396c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800395c:	f008 f82c 	bl	800b9b8 <__errno>
 8003960:	4603      	mov	r3, r0
 8003962:	220c      	movs	r2, #12
 8003964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	e009      	b.n	8003980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <_sbrk+0x64>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <_sbrk+0x64>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <_sbrk+0x64>)
 800397c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20010000 	.word	0x20010000
 800398c:	00001000 	.word	0x00001000
 8003990:	20000548 	.word	0x20000548
 8003994:	20002558 	.word	0x20002558

08003998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	; 0x30
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80039aa:	f107 030c 	add.w	r3, r7, #12
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f007 ff9b 	bl	800b8ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039c0:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <MX_TIM1_Init+0xa8>)
 80039c2:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <MX_TIM1_Init+0xac>)
 80039c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80039c6:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <MX_TIM1_Init+0xa8>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039cc:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <MX_TIM1_Init+0xa8>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <MX_TIM1_Init+0xa8>)
 80039d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <MX_TIM1_Init+0xa8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <MX_TIM1_Init+0xa8>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <MX_TIM1_Init+0xa8>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039ec:	2303      	movs	r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a00:	2300      	movs	r3, #0
 8003a02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a04:	2301      	movs	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	4619      	mov	r1, r3
 8003a16:	480d      	ldr	r0, [pc, #52]	; (8003a4c <MX_TIM1_Init+0xa8>)
 8003a18:	f002 fe20 	bl	800665c <HAL_TIM_Encoder_Init>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003a22:	f7fe fb5b 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4806      	ldr	r0, [pc, #24]	; (8003a4c <MX_TIM1_Init+0xa8>)
 8003a34:	f003 fca6 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003a3e:	f7fe fb4d 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	3730      	adds	r7, #48	; 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2000054c 	.word	0x2000054c
 8003a50:	40012c00 	.word	0x40012c00

08003a54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08e      	sub	sp, #56	; 0x38
 8003a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a68:	f107 0320 	add.w	r3, r7, #32
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
 8003a80:	615a      	str	r2, [r3, #20]
 8003a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a84:	4b3c      	ldr	r3, [pc, #240]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003a86:	4a3d      	ldr	r2, [pc, #244]	; (8003b7c <MX_TIM3_Init+0x128>)
 8003a88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a90:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8003a96:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003a98:	22ff      	movs	r2, #255	; 0xff
 8003a9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa2:	4b35      	ldr	r3, [pc, #212]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003aa8:	4833      	ldr	r0, [pc, #204]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003aaa:	f002 fc2b 	bl	8006304 <HAL_TIM_Base_Init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003ab4:	f7fe fb12 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	482c      	ldr	r0, [pc, #176]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003ac6:	f003 f8c3 	bl	8006c50 <HAL_TIM_ConfigClockSource>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003ad0:	f7fe fb04 	bl	80020dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ad4:	4828      	ldr	r0, [pc, #160]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003ad6:	f002 fcbf 	bl	8006458 <HAL_TIM_PWM_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003ae0:	f7fe fafc 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003aec:	f107 0320 	add.w	r3, r7, #32
 8003af0:	4619      	mov	r1, r3
 8003af2:	4821      	ldr	r0, [pc, #132]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003af4:	f003 fc46 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003afe:	f7fe faed 	bl	80020dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b02:	2360      	movs	r3, #96	; 0x60
 8003b04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	2200      	movs	r2, #0
 8003b16:	4619      	mov	r1, r3
 8003b18:	4817      	ldr	r0, [pc, #92]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003b1a:	f002 ffd7 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003b24:	f7fe fada 	bl	80020dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4812      	ldr	r0, [pc, #72]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003b30:	f002 ffcc 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8003b3a:	f7fe facf 	bl	80020dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	2208      	movs	r2, #8
 8003b42:	4619      	mov	r1, r3
 8003b44:	480c      	ldr	r0, [pc, #48]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003b46:	f002 ffc1 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8003b50:	f7fe fac4 	bl	80020dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	220c      	movs	r2, #12
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4807      	ldr	r0, [pc, #28]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003b5c:	f002 ffb6 	bl	8006acc <HAL_TIM_PWM_ConfigChannel>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8003b66:	f7fe fab9 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b6a:	4803      	ldr	r0, [pc, #12]	; (8003b78 <MX_TIM3_Init+0x124>)
 8003b6c:	f000 f93a 	bl	8003de4 <HAL_TIM_MspPostInit>

}
 8003b70:	bf00      	nop
 8003b72:	3738      	adds	r7, #56	; 0x38
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000594 	.word	0x20000594
 8003b7c:	40000400 	.word	0x40000400

08003b80 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	; 0x30
 8003b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b86:	f107 030c 	add.w	r3, r7, #12
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f007 fead 	bl	800b8ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b94:	1d3b      	adds	r3, r7, #4
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b9c:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <MX_TIM4_Init+0xa0>)
 8003b9e:	4a21      	ldr	r2, [pc, #132]	; (8003c24 <MX_TIM4_Init+0xa4>)
 8003ba0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <MX_TIM4_Init+0xa0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <MX_TIM4_Init+0xa0>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003bae:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <MX_TIM4_Init+0xa0>)
 8003bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <MX_TIM4_Init+0xa0>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bbc:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <MX_TIM4_Init+0xa0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bde:	2300      	movs	r3, #0
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003be6:	f107 030c 	add.w	r3, r7, #12
 8003bea:	4619      	mov	r1, r3
 8003bec:	480c      	ldr	r0, [pc, #48]	; (8003c20 <MX_TIM4_Init+0xa0>)
 8003bee:	f002 fd35 	bl	800665c <HAL_TIM_Encoder_Init>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003bf8:	f7fe fa70 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4805      	ldr	r0, [pc, #20]	; (8003c20 <MX_TIM4_Init+0xa0>)
 8003c0a:	f003 fbbb 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003c14:	f7fe fa62 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003c18:	bf00      	nop
 8003c1a:	3730      	adds	r7, #48	; 0x30
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	200005dc 	.word	0x200005dc
 8003c24:	40000800 	.word	0x40000800

08003c28 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c2e:	463b      	mov	r3, r7
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <MX_TIM7_Init+0x68>)
 8003c3a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c3e:	2247      	movs	r2, #71	; 0x47
 8003c40:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8003c48:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c4a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c4e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c56:	480d      	ldr	r0, [pc, #52]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c58:	f002 fb54 	bl	8006304 <HAL_TIM_Base_Init>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003c62:	f7fe fa3b 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c6e:	463b      	mov	r3, r7
 8003c70:	4619      	mov	r1, r3
 8003c72:	4806      	ldr	r0, [pc, #24]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c74:	f003 fb86 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003c7e:	f7fe fa2d 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000624 	.word	0x20000624
 8003c90:	40001400 	.word	0x40001400

08003c94 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	f107 0318 	add.w	r3, r7, #24
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a2b      	ldr	r2, [pc, #172]	; (8003d5c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d125      	bne.n	8003d00 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	4a29      	ldr	r2, [pc, #164]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003cba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cbe:	6193      	str	r3, [r2, #24]
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	6193      	str	r3, [r2, #24]
 8003cd8:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8003ce4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf2:	f107 0318 	add.w	r3, r7, #24
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	481a      	ldr	r0, [pc, #104]	; (8003d64 <HAL_TIM_Encoder_MspInit+0xd0>)
 8003cfa:	f000 fcf3 	bl	80046e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003cfe:	e028      	b.n	8003d52 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_TIM_Encoder_MspInit+0xd4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d123      	bne.n	8003d52 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	61d3      	str	r3, [r2, #28]
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003d28:	f043 0308 	orr.w	r3, r3, #8
 8003d2c:	6193      	str	r3, [r2, #24]
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 8003d3a:	23c0      	movs	r3, #192	; 0xc0
 8003d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d46:	f107 0318 	add.w	r3, r7, #24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4807      	ldr	r0, [pc, #28]	; (8003d6c <HAL_TIM_Encoder_MspInit+0xd8>)
 8003d4e:	f000 fcc9 	bl	80046e4 <HAL_GPIO_Init>
}
 8003d52:	bf00      	nop
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40010800 	.word	0x40010800
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40010c00 	.word	0x40010c00

08003d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <HAL_TIM_Base_MspInit+0x68>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10c      	bne.n	8003d9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_TIM_Base_MspInit+0x6c>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_TIM_Base_MspInit+0x6c>)
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	61d3      	str	r3, [r2, #28]
 8003d8e:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <HAL_TIM_Base_MspInit+0x6c>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003d9a:	e018      	b.n	8003dce <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <HAL_TIM_Base_MspInit+0x70>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d113      	bne.n	8003dce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_TIM_Base_MspInit+0x6c>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <HAL_TIM_Base_MspInit+0x6c>)
 8003dac:	f043 0320 	orr.w	r3, r3, #32
 8003db0:	61d3      	str	r3, [r2, #28]
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_TIM_Base_MspInit+0x6c>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2105      	movs	r1, #5
 8003dc2:	2037      	movs	r0, #55	; 0x37
 8003dc4:	f000 fc63 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003dc8:	2037      	movs	r0, #55	; 0x37
 8003dca:	f000 fc7c 	bl	80046c6 <HAL_NVIC_EnableIRQ>
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40001400 	.word	0x40001400

08003de4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_TIM_MspPostInit+0x80>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d12a      	bne.n	8003e5a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e04:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <HAL_TIM_MspPostInit+0x84>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <HAL_TIM_MspPostInit+0x84>)
 8003e0a:	f043 0310 	orr.w	r3, r3, #16
 8003e0e:	6193      	str	r3, [r2, #24]
 8003e10:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_TIM_MspPostInit+0x84>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 8003e1c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003e20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e26:	2303      	movs	r3, #3
 8003e28:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	4619      	mov	r1, r3
 8003e30:	480e      	ldr	r0, [pc, #56]	; (8003e6c <HAL_TIM_MspPostInit+0x88>)
 8003e32:	f000 fc57 	bl	80046e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <HAL_TIM_MspPostInit+0x8c>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	4a06      	ldr	r2, [pc, #24]	; (8003e70 <HAL_TIM_MspPostInit+0x8c>)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e5a:	bf00      	nop
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40010000 	.word	0x40010000

08003e74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <MX_USART2_UART_Init+0x50>)
 8003e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003eaa:	4805      	ldr	r0, [pc, #20]	; (8003ec0 <MX_USART2_UART_Init+0x4c>)
 8003eac:	f003 fae2 	bl	8007474 <HAL_UART_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003eb6:	f7fe f911 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	2000066c 	.word	0x2000066c
 8003ec4:	40004400 	.word	0x40004400

08003ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed0:	f107 0310 	add.w	r3, r7, #16
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_UART_MspInit+0x88>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d12f      	bne.n	8003f48 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <HAL_UART_MspInit+0x8c>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_UART_MspInit+0x8c>)
 8003eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef2:	61d3      	str	r3, [r2, #28]
 8003ef4:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <HAL_UART_MspInit+0x8c>)
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_UART_MspInit+0x8c>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <HAL_UART_MspInit+0x8c>)
 8003f06:	f043 0304 	orr.w	r3, r3, #4
 8003f0a:	6193      	str	r3, [r2, #24]
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_UART_MspInit+0x8c>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f18:	2304      	movs	r3, #4
 8003f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f20:	2303      	movs	r3, #3
 8003f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f24:	f107 0310 	add.w	r3, r7, #16
 8003f28:	4619      	mov	r1, r3
 8003f2a:	480b      	ldr	r0, [pc, #44]	; (8003f58 <HAL_UART_MspInit+0x90>)
 8003f2c:	f000 fbda 	bl	80046e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f30:	2308      	movs	r3, #8
 8003f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3c:	f107 0310 	add.w	r3, r7, #16
 8003f40:	4619      	mov	r1, r3
 8003f42:	4805      	ldr	r0, [pc, #20]	; (8003f58 <HAL_UART_MspInit+0x90>)
 8003f44:	f000 fbce 	bl	80046e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40004400 	.word	0x40004400
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40010800 	.word	0x40010800

08003f5c <Prog_CalibPID_Init>:
//
// -- Init & Deinit functions for Diode Test Program --
//

Programs_error_t Prog_CalibPID_Init(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0

	return PROGRAMS_OK;
 8003f60:	2300      	movs	r3, #0

}
 8003f62:	4618      	mov	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <Prog_CalibPID_Deinit>:

Programs_error_t Prog_CalibPID_Deinit(void)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
	return PROGRAMS_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <Prog_CalibPID_Program>:
//
// -- Main Diode Test Program for Robot --
//

Programs_error_t Prog_CalibPID_Program(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
	/* Main program "loop" */




	return PROGRAMS_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
	...

08003f88 <Prog_CalibPID_Launch>:
//
// -- Set / Launch function --
//

Programs_error_t Prog_CalibPID_Launch(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
	return Programs_SetProgram(&CalibPIDProgram);
 8003f8c:	4802      	ldr	r0, [pc, #8]	; (8003f98 <Prog_CalibPID_Launch+0x10>)
 8003f8e:	f000 f98d 	bl	80042ac <Programs_SetProgram>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000068 	.word	0x20000068

08003f9c <Prog_CalibPID_Parser>:
//
// -- Diode Test Program Parser --
//

void Prog_CalibPID_Parser(uint8_t *command, uint8_t length)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	623b      	str	r3, [r7, #32]
	uint8_t Buffer[3];
	uint8_t ExeResult = _OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char GainBuffer[7];
	float Gain;
	DRV8836_Output_t MotorID;
	int16_t Target;

	switch(*CurrentByte)
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	3b20      	subs	r3, #32
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	f200 80c7 	bhi.w	800414c <Prog_CalibPID_Parser+0x1b0>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <Prog_CalibPID_Parser+0x28>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	0800414d 	.word	0x0800414d
 8003fcc:	0800414d 	.word	0x0800414d
 8003fd0:	0800414d 	.word	0x0800414d
 8003fd4:	0800414d 	.word	0x0800414d
 8003fd8:	08004097 	.word	0x08004097
 8003fdc:	0800410d 	.word	0x0800410d
 8003fe0:	08004121 	.word	0x08004121
 8003fe4:	080040f9 	.word	0x080040f9
	{
	case PID_SET_GAIN:
		/* Frame: [... , PID_SET_GAIN, Motor ID, (ASCII, 7 bytes), Gain type  */
		/* Get motor ID */
		CurrentByte++;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	3301      	adds	r3, #1
 8003fec:	623b      	str	r3, [r7, #32]
		MotorID = *CurrentByte;
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	77fb      	strb	r3, [r7, #31]
		if(MotorID > MOTOR_ALL)
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <Prog_CalibPID_Parser+0x64>
		{
			ExeResult = _ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		/* Get Gain in ASCII */
		CurrentByte++;
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	3301      	adds	r3, #1
 8004004:	623b      	str	r3, [r7, #32]
		memcpy(GainBuffer, CurrentByte, 7);	//TODO: AWARE HERE
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	f107 030c 	add.w	r3, r7, #12
 800400c:	6810      	ldr	r0, [r2, #0]
 800400e:	6018      	str	r0, [r3, #0]
 8004010:	8891      	ldrh	r1, [r2, #4]
 8004012:	7992      	ldrb	r2, [r2, #6]
 8004014:	8099      	strh	r1, [r3, #4]
 8004016:	719a      	strb	r2, [r3, #6]
		/* Convert ASCII to float */
		Gain = atof(GainBuffer);
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	4618      	mov	r0, r3
 800401e:	f006 f8bd 	bl	800a19c <atof>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f7fc fdbd 	bl	8000ba8 <__aeabi_d2f>
 800402e:	4603      	mov	r3, r0
 8004030:	61bb      	str	r3, [r7, #24]
		/* Get gain type */
		CurrentByte += 7;
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	3307      	adds	r3, #7
 8004036:	623b      	str	r3, [r7, #32]
		GainType = *CurrentByte;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	75fb      	strb	r3, [r7, #23]
		/* Set proper gain */
		if(ExeResult == _OK)
 800403e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11f      	bne.n	8004086 <Prog_CalibPID_Parser+0xea>
		{
			switch(GainType)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b32      	cmp	r3, #50	; 0x32
 800404a:	d012      	beq.n	8004072 <Prog_CalibPID_Parser+0xd6>
 800404c:	2b32      	cmp	r3, #50	; 0x32
 800404e:	dc16      	bgt.n	800407e <Prog_CalibPID_Parser+0xe2>
 8004050:	2b30      	cmp	r3, #48	; 0x30
 8004052:	d002      	beq.n	800405a <Prog_CalibPID_Parser+0xbe>
 8004054:	2b31      	cmp	r3, #49	; 0x31
 8004056:	d006      	beq.n	8004066 <Prog_CalibPID_Parser+0xca>
 8004058:	e011      	b.n	800407e <Prog_CalibPID_Parser+0xe2>
			{
			case KP:
				Motors_SetKP(MotorID, Gain);
 800405a:	7ffb      	ldrb	r3, [r7, #31]
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fac2 	bl	80025e8 <Motors_SetKP>
				break;
 8004064:	e00f      	b.n	8004086 <Prog_CalibPID_Parser+0xea>
			case KI:
				Motors_SetKI(MotorID, Gain);
 8004066:	7ffb      	ldrb	r3, [r7, #31]
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fafc 	bl	8002668 <Motors_SetKI>
				break;
 8004070:	e009      	b.n	8004086 <Prog_CalibPID_Parser+0xea>

			case KD:
				Motors_SetKD(MotorID, Gain);
 8004072:	7ffb      	ldrb	r3, [r7, #31]
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fb36 	bl	80026e8 <Motors_SetKD>
				break;
 800407c:	e003      	b.n	8004086 <Prog_CalibPID_Parser+0xea>
			default:
				ExeResult = _ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8004084:	bf00      	nop
			}
		}
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 8004086:	23d2      	movs	r3, #210	; 0xd2
 8004088:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_SET_GAIN;
 800408a:	2320      	movs	r3, #32
 800408c:	757b      	strb	r3, [r7, #21]
		Buffer[2] = ExeResult;
 800408e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004092:	75bb      	strb	r3, [r7, #22]
		//Radio_TxBufferPut(Buffer, 3);
		break;
 8004094:	e05b      	b.n	800414e <Prog_CalibPID_Parser+0x1b2>

	case PID_SET_TARGET:
		/* Frame: [... , PID_SET_TARGET, Motor ID, Target */
		/* Get Motor ID */
		CurrentByte++;
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	3301      	adds	r3, #1
 800409a:	623b      	str	r3, [r7, #32]
		MotorID = *CurrentByte;
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	77fb      	strb	r3, [r7, #31]
		if(MotorID > MOTOR_ALL)
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d902      	bls.n	80040ae <Prog_CalibPID_Parser+0x112>
		{
			ExeResult = _ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		/* Get target value */
		CurrentByte++;
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	3301      	adds	r3, #1
 80040b2:	623b      	str	r3, [r7, #32]
		Target = *CurrentByte;
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	83bb      	strh	r3, [r7, #28]
		if(Target > MAX_VELOCITY_VALUE && Target < -MAX_VELOCITY_VALUE)
 80040ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80040be:	2b46      	cmp	r3, #70	; 0x46
 80040c0:	dd07      	ble.n	80040d2 <Prog_CalibPID_Parser+0x136>
 80040c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80040c6:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80040ca:	da02      	bge.n	80040d2 <Prog_CalibPID_Parser+0x136>
		{
			ExeResult = _ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if(ExeResult == _OK)
 80040d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <Prog_CalibPID_Parser+0x14c>
		{
			Motors_SetPIDTarget(MotorID, Target);
 80040da:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80040de:	7ffb      	ldrb	r3, [r7, #31]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fa46 	bl	8002574 <Motors_SetPIDTarget>
		}
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 80040e8:	23d2      	movs	r3, #210	; 0xd2
 80040ea:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_SET_TARGET;
 80040ec:	2325      	movs	r3, #37	; 0x25
 80040ee:	757b      	strb	r3, [r7, #21]
		Buffer[2] = ExeResult;
 80040f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040f4:	75bb      	strb	r3, [r7, #22]
		//Radio_TxBufferPut(Buffer, 3);
		break;
 80040f6:	e02a      	b.n	800414e <Prog_CalibPID_Parser+0x1b2>

	case PID_RESET_TEMPS:
		/* Frame: [... , PID_RESET_TEMPS ] */
		Motors_ResetTemps(MOTOR_ALL);
 80040f8:	2002      	movs	r0, #2
 80040fa:	f7fe fb35 	bl	8002768 <Motors_ResetTemps>
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 80040fe:	23d2      	movs	r3, #210	; 0xd2
 8004100:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_RESET_TEMPS;
 8004102:	2328      	movs	r3, #40	; 0x28
 8004104:	757b      	strb	r3, [r7, #21]
		Buffer[2] = _OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75bb      	strb	r3, [r7, #22]
		//Radio_TxBufferPut(Buffer, 3);
		break;
 800410a:	e020      	b.n	800414e <Prog_CalibPID_Parser+0x1b2>

	case PID_START_IMPULSE:
		/* Frame: [..., PID_START_IMPULSE ] */
		/* Turn on PID */
		Motors_SetControllPID(1);
 800410c:	2001      	movs	r0, #1
 800410e:	f7fe fa19 	bl	8002544 <Motors_SetControllPID>
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 8004112:	23d2      	movs	r3, #210	; 0xd2
 8004114:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_START_IMPULSE;
 8004116:	2326      	movs	r3, #38	; 0x26
 8004118:	757b      	strb	r3, [r7, #21]
		Buffer[2] = _OK;
 800411a:	2300      	movs	r3, #0
 800411c:	75bb      	strb	r3, [r7, #22]
		//Radio_TxBufferPut(Buffer, 3);
		break;
 800411e:	e016      	b.n	800414e <Prog_CalibPID_Parser+0x1b2>

	case PID_STOP_MOTOR:
		/* Frame: [..., PID_STOP_MOTOR ] */
		/* Turn off PID */
		Motors_SetControllPID(0);
 8004120:	2000      	movs	r0, #0
 8004122:	f7fe fa0f 	bl	8002544 <Motors_SetControllPID>
		/* Stop motors */
		Motors_SetMotor(MOTOR_A, Coast, 0);
 8004126:	2200      	movs	r2, #0
 8004128:	2100      	movs	r1, #0
 800412a:	2000      	movs	r0, #0
 800412c:	f7fe f87a 	bl	8002224 <Motors_SetMotor>
		Motors_SetMotor(MOTOR_B, Coast, 0);
 8004130:	2200      	movs	r2, #0
 8004132:	2100      	movs	r1, #0
 8004134:	2001      	movs	r0, #1
 8004136:	f7fe f875 	bl	8002224 <Motors_SetMotor>
		/* Reset PID temps */
		Motors_ResetTemps(MOTOR_ALL);
 800413a:	2002      	movs	r0, #2
 800413c:	f7fe fb14 	bl	8002768 <Motors_ResetTemps>
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 8004140:	23d2      	movs	r3, #210	; 0xd2
 8004142:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_STOP_MOTOR;
 8004144:	2327      	movs	r3, #39	; 0x27
 8004146:	757b      	strb	r3, [r7, #21]
		Buffer[2] = _OK;
 8004148:	2300      	movs	r3, #0
 800414a:	75bb      	strb	r3, [r7, #22]
		//Radio_TxBufferPut(Buffer, 3);
	default:
		break;
 800414c:	bf00      	nop
	}

}
 800414e:	bf00      	nop
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <Prog_DiodeTest_Init>:
//
// -- Init & Deinit functions for Diode Test Program --
//

Programs_error_t Prog_DiodeTest_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800415c:	2201      	movs	r2, #1
 800415e:	2101      	movs	r1, #1
 8004160:	4802      	ldr	r0, [pc, #8]	; (800416c <Prog_DiodeTest_Init+0x14>)
 8004162:	f000 fc43 	bl	80049ec <HAL_GPIO_WritePin>
	return PROGRAMS_OK;
 8004166:	2300      	movs	r3, #0

}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40011000 	.word	0x40011000

08004170 <Prog_DiodeTest_Deinit>:

Programs_error_t Prog_DiodeTest_Deinit(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
	return PROGRAMS_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <Prog_DiodeTest_Program>:
//
// -- Main Diode Test Program for Robot --
//

Programs_error_t Prog_DiodeTest_Program(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0
	/* Main program "loop" */
	return PROGRAMS_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <Prog_DiodeTest_Launch>:
//
// -- Set / Launch function --
//

Programs_error_t Prog_DiodeTest_Launch(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
	return Programs_SetProgram(&DiodeTestProgram);
 8004190:	4802      	ldr	r0, [pc, #8]	; (800419c <Prog_DiodeTest_Launch+0x10>)
 8004192:	f000 f88b 	bl	80042ac <Programs_SetProgram>
 8004196:	4603      	mov	r3, r0
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	2000007c 	.word	0x2000007c

080041a0 <Prog_DiodeTest_Parser>:
//
// -- Diode Test Program Parser --
//

void Prog_DiodeTest_Parser(uint8_t *command, uint8_t length)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60fb      	str	r3, [r7, #12]
	uint8_t Buffer[3];

	switch(*CurrentByte)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d002      	beq.n	80041be <Prog_DiodeTest_Parser+0x1e>
 80041b8:	2b21      	cmp	r3, #33	; 0x21
 80041ba:	d00c      	beq.n	80041d6 <Prog_DiodeTest_Parser+0x36>
		Buffer[2] = 0;
		//Radio_TxBufferPut(Buffer, 3);
		break;

	default:
		break;
 80041bc:	e017      	b.n	80041ee <Prog_DiodeTest_Parser+0x4e>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80041be:	2200      	movs	r2, #0
 80041c0:	2101      	movs	r1, #1
 80041c2:	480d      	ldr	r0, [pc, #52]	; (80041f8 <Prog_DiodeTest_Parser+0x58>)
 80041c4:	f000 fc12 	bl	80049ec <HAL_GPIO_WritePin>
		Buffer[0] = DIODE_TEST;
 80041c8:	23d0      	movs	r3, #208	; 0xd0
 80041ca:	723b      	strb	r3, [r7, #8]
		Buffer[1] = DIODE_REAL_STATE;
 80041cc:	2322      	movs	r3, #34	; 0x22
 80041ce:	727b      	strb	r3, [r7, #9]
		Buffer[2] = 1;				//TODO: USE READPIN HERE
 80041d0:	2301      	movs	r3, #1
 80041d2:	72bb      	strb	r3, [r7, #10]
		break;
 80041d4:	e00b      	b.n	80041ee <Prog_DiodeTest_Parser+0x4e>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80041d6:	2201      	movs	r2, #1
 80041d8:	2101      	movs	r1, #1
 80041da:	4807      	ldr	r0, [pc, #28]	; (80041f8 <Prog_DiodeTest_Parser+0x58>)
 80041dc:	f000 fc06 	bl	80049ec <HAL_GPIO_WritePin>
		Buffer[0] = DIODE_TEST;
 80041e0:	23d0      	movs	r3, #208	; 0xd0
 80041e2:	723b      	strb	r3, [r7, #8]
		Buffer[1] = DIODE_REAL_STATE;
 80041e4:	2322      	movs	r3, #34	; 0x22
 80041e6:	727b      	strb	r3, [r7, #9]
		Buffer[2] = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	72bb      	strb	r3, [r7, #10]
		break;
 80041ec:	bf00      	nop
	}

}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40011000 	.word	0x40011000

080041fc <Prog_MotorsDebug_Init>:
//
// -- Init & Deinit functions for Diode Test Program --
//

Programs_error_t Prog_MotorsDebug_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004200:	2201      	movs	r2, #1
 8004202:	2101      	movs	r1, #1
 8004204:	4803      	ldr	r0, [pc, #12]	; (8004214 <Prog_MotorsDebug_Init+0x18>)
 8004206:	f000 fbf1 	bl	80049ec <HAL_GPIO_WritePin>
	Motors_SetMotorsOff();
 800420a:	f7fe f871 	bl	80022f0 <Motors_SetMotorsOff>
	return PROGRAMS_OK;
 800420e:	2300      	movs	r3, #0

}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40011000 	.word	0x40011000

08004218 <Prog_MotorsDebug_Deinit>:

Programs_error_t Prog_MotorsDebug_Deinit(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
	Motors_SetMotorsOff();
 800421c:	f7fe f868 	bl	80022f0 <Motors_SetMotorsOff>
	return PROGRAMS_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	bd80      	pop	{r7, pc}

08004226 <Prog_MotorsDebug_Program>:
//
// -- Main Diode Test Program for Robot --
//

Programs_error_t Prog_MotorsDebug_Program(void)
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0
	/* Main program "loop" */

	return PROGRAMS_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <Prog_MotorsDebug_Launch>:
//
// -- Set / Launch function --
//

Programs_error_t Prog_MotorsDebug_Launch(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
	return Programs_SetProgram(&MotorsDebugProgram);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <Prog_MotorsDebug_Launch+0x10>)
 800423a:	f000 f837 	bl	80042ac <Programs_SetProgram>
 800423e:	4603      	mov	r3, r0
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000090 	.word	0x20000090

08004248 <Prog_MotorsDebug_Parser>:
//
// -- Diode Test Program Parser --
//

void Prog_MotorsDebug_Parser(uint8_t *command, uint8_t length)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60fb      	str	r3, [r7, #12]

	DRV8836_Output_t Motor;
	DRV8836_Direction_t ReceivedDir;
	uint8_t ReceivedPWM;

	switch(*CurrentByte)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b20      	cmp	r3, #32
 800425e:	d002      	beq.n	8004266 <Prog_MotorsDebug_Parser+0x1e>
 8004260:	2b21      	cmp	r3, #33	; 0x21
 8004262:	d00f      	beq.n	8004284 <Prog_MotorsDebug_Parser+0x3c>
		Motors_SetMotorDirection(Motor, ReceivedDir);
		break;

	default:
		/* Unknown command! */
		break;
 8004264:	e01d      	b.n	80042a2 <Prog_MotorsDebug_Parser+0x5a>
		Motor = *(CurrentByte + 1);									//TODO: The same value writing safety
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	72fb      	strb	r3, [r7, #11]
		ReceivedPWM = *(CurrentByte + 2);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	789b      	ldrb	r3, [r3, #2]
 8004272:	727b      	strb	r3, [r7, #9]
		Motors_SetMotorPWM(Motor, ReceivedPWM);
 8004274:	7a7b      	ldrb	r3, [r7, #9]
 8004276:	b29a      	uxth	r2, r3
 8004278:	7afb      	ldrb	r3, [r7, #11]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7fd ffe7 	bl	8002250 <Motors_SetMotorPWM>
		break;
 8004282:	e00e      	b.n	80042a2 <Prog_MotorsDebug_Parser+0x5a>
		Motor = *(CurrentByte + 1);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3301      	adds	r3, #1
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	72fb      	strb	r3, [r7, #11]
		ReceivedDir = *(CurrentByte + 2);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3302      	adds	r3, #2
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	72bb      	strb	r3, [r7, #10]
		Motors_SetMotorDirection(Motor, ReceivedDir);
 8004294:	7aba      	ldrb	r2, [r7, #10]
 8004296:	7afb      	ldrb	r3, [r7, #11]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe f800 	bl	80022a0 <Motors_SetMotorDirection>
		break;
 80042a0:	bf00      	nop
	}

}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <Programs_SetProgram>:
//

/* Function starting a launch of specific program by setting current pointer
 * to program and calling it's init function				*/
Programs_error_t Programs_SetProgram(Programs_Program_t *ProgramToSet)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToSet)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <Programs_SetProgram+0x12>
	{
		return PROGRAMS_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e010      	b.n	80042e0 <Programs_SetProgram+0x34>
	}

	if(NULL == CurrentlyRunningProg)
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <Programs_SetProgram+0x3c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <Programs_SetProgram+0x32>
	{
		/* Set current program pointer */
		CurrentlyRunningProg = ProgramToSet;
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <Programs_SetProgram+0x3c>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6013      	str	r3, [r2, #0]
		/* Call it's init function */
		CurrentlyRunningProg->ProgramInitFunction();
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <Programs_SetProgram+0x3c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4798      	blx	r3
		/* Change state to program in progrss, it will allow it to run in perfom fun */
		ProgramState = PROGRAM_IN_PROGRESS;
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <Programs_SetProgram+0x40>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
		return PROGRAMS_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <Programs_SetProgram+0x34>
	}
	else
	{
		/* another program is running */
		return PROGRAMS_ERROR;
 80042de:	2301      	movs	r3, #1
	}
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	200006b8 	.word	0x200006b8
 80042ec:	200006bc 	.word	0x200006bc

080042f0 <Programs_ExitProgram>:

/* Function starting a exit program process */
void Programs_ExitProgram(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	/* Call program DeInit function */
	CurrentlyRunningProg->ProgramExitFunction();
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <Programs_ExitProgram+0x18>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4798      	blx	r3
	/* Change state to program completed */
	ProgramState = PROGRAM_COMPLETED;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <Programs_ExitProgram+0x1c>)
 80042fe:	2202      	movs	r2, #2
 8004300:	701a      	strb	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200006b8 	.word	0x200006b8
 800430c:	200006bc 	.word	0x200006bc

08004310 <Programs_GetProgram>:

/* Function which returns current pointer to program */
Programs_Program_t* Programs_GetProgram(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
	return CurrentlyRunningProg;
 8004314:	4b02      	ldr	r3, [pc, #8]	; (8004320 <Programs_GetProgram+0x10>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	200006b8 	.word	0x200006b8

08004324 <Programs_ClearProgram>:

/* Clearing the program pointer and status variable */
void Programs_ClearProgram(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
	CurrentlyRunningProg = NULL;
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <Programs_ClearProgram+0x18>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
	ProgramState = NO_PROGRAM_SET;
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <Programs_ClearProgram+0x1c>)
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	200006b8 	.word	0x200006b8
 8004340:	200006bc 	.word	0x200006bc

08004344 <vTaskPrograms>:

//
// Programs Task
//
void vTaskPrograms(void *pvParameters)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		switch(ProgramState)
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <vTaskPrograms+0x44>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d010      	beq.n	8004376 <vTaskPrograms+0x32>
 8004354:	2b02      	cmp	r3, #2
 8004356:	dc11      	bgt.n	800437c <vTaskPrograms+0x38>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d011      	beq.n	8004380 <vTaskPrograms+0x3c>
 800435c:	2b01      	cmp	r3, #1
 800435e:	d000      	beq.n	8004362 <vTaskPrograms+0x1e>
			/* Clear the program after completing*/
			Programs_ClearProgram();
			break;

		default:
			break;
 8004360:	e00c      	b.n	800437c <vTaskPrograms+0x38>
			if(NULL != CurrentlyRunningProg->ProgramRoutine)
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <vTaskPrograms+0x48>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <vTaskPrograms+0x40>
				CurrentlyRunningProg->ProgramRoutine();
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <vTaskPrograms+0x48>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	4798      	blx	r3
			break;
 8004374:	e006      	b.n	8004384 <vTaskPrograms+0x40>
			Programs_ClearProgram();
 8004376:	f7ff ffd5 	bl	8004324 <Programs_ClearProgram>
			break;
 800437a:	e004      	b.n	8004386 <vTaskPrograms+0x42>
			break;
 800437c:	bf00      	nop
 800437e:	e7e5      	b.n	800434c <vTaskPrograms+0x8>
			break;
 8004380:	bf00      	nop
 8004382:	e7e3      	b.n	800434c <vTaskPrograms+0x8>
			break;
 8004384:	bf00      	nop
		switch(ProgramState)
 8004386:	e7e1      	b.n	800434c <vTaskPrograms+0x8>
 8004388:	200006bc 	.word	0x200006bc
 800438c:	200006b8 	.word	0x200006b8

08004390 <Programs_TaskInit>:
		}
	}
}

void Programs_TaskInit(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af02      	add	r7, sp, #8
	xTaskCreate(vTaskPrograms, "Programs Task", 512, NULL, 1, &xTaskProgramsHandle);
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <Programs_TaskInit+0x24>)
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	2301      	movs	r3, #1
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	2300      	movs	r3, #0
 80043a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a4:	4904      	ldr	r1, [pc, #16]	; (80043b8 <Programs_TaskInit+0x28>)
 80043a6:	4805      	ldr	r0, [pc, #20]	; (80043bc <Programs_TaskInit+0x2c>)
 80043a8:	f004 f894 	bl	80084d4 <xTaskCreate>
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	200006b4 	.word	0x200006b4
 80043b8:	0800e448 	.word	0x0800e448
 80043bc:	08004345 	.word	0x08004345

080043c0 <Programs_SendProgramStartedACK>:
//

/* This functions are called after program launch / exit. Sending it is needed for controller to proper functionality and sync with robot */

Programs_error_t Programs_SendProgramStartedACK(uint8_t ProgramID, uint8_t ACKorNACK)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	; 0x30
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	460a      	mov	r2, r1
 80043ca:	71fb      	strb	r3, [r7, #7]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71bb      	strb	r3, [r7, #6]
	Radio_Frame_t Buffer;
	Buffer.data[0] = PROGRAM_CMD;
 80043d0:	2312      	movs	r3, #18
 80043d2:	733b      	strb	r3, [r7, #12]
	Buffer.data[1] = START_PROGRAM;
 80043d4:	2310      	movs	r3, #16
 80043d6:	737b      	strb	r3, [r7, #13]
	Buffer.data[2] = ProgramID;
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	73bb      	strb	r3, [r7, #14]
	Buffer.data[3] = ACKorNACK;
 80043dc:	79bb      	ldrb	r3, [r7, #6]
 80043de:	73fb      	strb	r3, [r7, #15]
	Buffer.length = 4;
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	return Radio_TxPutFrame(&Buffer);
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff f824 	bl	8003438 <Radio_TxPutFrame>
 80043f0:	4603      	mov	r3, r0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3730      	adds	r7, #48	; 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <Programs_SendProgramExitACK>:

Programs_error_t Programs_SendProgramExitACK(uint8_t ACKorNACK)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b08c      	sub	sp, #48	; 0x30
 80043fe:	af00      	add	r7, sp, #0
 8004400:	4603      	mov	r3, r0
 8004402:	71fb      	strb	r3, [r7, #7]
	Radio_Frame_t Buffer;
	Buffer.data[0] = PROGRAM_CMD;
 8004404:	2312      	movs	r3, #18
 8004406:	733b      	strb	r3, [r7, #12]
	Buffer.data[1] = EXIT_PROGRAM;
 8004408:	2311      	movs	r3, #17
 800440a:	737b      	strb	r3, [r7, #13]
	Buffer.data[2] = ACKorNACK;
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	73bb      	strb	r3, [r7, #14]
	Buffer.length = 3;
 8004410:	2303      	movs	r3, #3
 8004412:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	return Radio_TxPutFrame(&Buffer);
 8004416:	f107 030c 	add.w	r3, r7, #12
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff f80c 	bl	8003438 <Radio_TxPutFrame>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3730      	adds	r7, #48	; 0x30
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800442c:	f7ff fab4 	bl	8003998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004430:	480b      	ldr	r0, [pc, #44]	; (8004460 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004432:	490c      	ldr	r1, [pc, #48]	; (8004464 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004434:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004438:	e002      	b.n	8004440 <LoopCopyDataInit>

0800443a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800443a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800443c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800443e:	3304      	adds	r3, #4

08004440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004444:	d3f9      	bcc.n	800443a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004446:	4a09      	ldr	r2, [pc, #36]	; (800446c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004448:	4c09      	ldr	r4, [pc, #36]	; (8004470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800444a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800444c:	e001      	b.n	8004452 <LoopFillZerobss>

0800444e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800444e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004450:	3204      	adds	r2, #4

08004452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004454:	d3fb      	bcc.n	800444e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8004456:	f007 fab5 	bl	800b9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800445a:	f7fd fd75 	bl	8001f48 <main>
  bx lr
 800445e:	4770      	bx	lr
  ldr r0, =_sdata
 8004460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004464:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8004468:	0800e8e4 	.word	0x0800e8e4
  ldr r2, =_sbss
 800446c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8004470:	20002554 	.word	0x20002554

08004474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004474:	e7fe      	b.n	8004474 <ADC1_2_IRQHandler>
	...

08004478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800447c:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <HAL_Init+0x28>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <HAL_Init+0x28>)
 8004482:	f043 0310 	orr.w	r3, r3, #16
 8004486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004488:	2003      	movs	r0, #3
 800448a:	f000 f8f5 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800448e:	200f      	movs	r0, #15
 8004490:	f7ff f912 	bl	80036b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004494:	f7ff f8d8 	bl	8003648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40022000 	.word	0x40022000

080044a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_IncTick+0x1c>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_IncTick+0x20>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4413      	add	r3, r2
 80044b4:	4a03      	ldr	r2, [pc, #12]	; (80044c4 <HAL_IncTick+0x20>)
 80044b6:	6013      	str	r3, [r2, #0]
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	200000a8 	.word	0x200000a8
 80044c4:	200006c0 	.word	0x200006c0

080044c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return uwTick;
 80044cc:	4b02      	ldr	r3, [pc, #8]	; (80044d8 <HAL_GetTick+0x10>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	200006c0 	.word	0x200006c0

080044dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_GetTick>
 80044e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d005      	beq.n	8004502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <HAL_Delay+0x44>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004502:	bf00      	nop
 8004504:	f7ff ffe0 	bl	80044c8 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	429a      	cmp	r2, r3
 8004512:	d8f7      	bhi.n	8004504 <HAL_Delay+0x28>
  {
  }
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200000a8 	.word	0x200000a8

08004524 <__NVIC_SetPriorityGrouping>:
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <__NVIC_SetPriorityGrouping+0x44>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004540:	4013      	ands	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800454c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004556:	4a04      	ldr	r2, [pc, #16]	; (8004568 <__NVIC_SetPriorityGrouping+0x44>)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	60d3      	str	r3, [r2, #12]
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <__NVIC_GetPriorityGrouping>:
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <__NVIC_GetPriorityGrouping+0x18>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	f003 0307 	and.w	r3, r3, #7
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <__NVIC_EnableIRQ>:
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	db0b      	blt.n	80045b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	4906      	ldr	r1, [pc, #24]	; (80045bc <__NVIC_EnableIRQ+0x34>)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	2001      	movs	r0, #1
 80045aa:	fa00 f202 	lsl.w	r2, r0, r2
 80045ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	e000e100 	.word	0xe000e100

080045c0 <__NVIC_SetPriority>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db0a      	blt.n	80045ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	490c      	ldr	r1, [pc, #48]	; (800460c <__NVIC_SetPriority+0x4c>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	0112      	lsls	r2, r2, #4
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	440b      	add	r3, r1
 80045e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045e8:	e00a      	b.n	8004600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4908      	ldr	r1, [pc, #32]	; (8004610 <__NVIC_SetPriority+0x50>)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	3b04      	subs	r3, #4
 80045f8:	0112      	lsls	r2, r2, #4
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	440b      	add	r3, r1
 80045fe:	761a      	strb	r2, [r3, #24]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000e100 	.word	0xe000e100
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <NVIC_EncodePriority>:
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f1c3 0307 	rsb	r3, r3, #7
 800462e:	2b04      	cmp	r3, #4
 8004630:	bf28      	it	cs
 8004632:	2304      	movcs	r3, #4
 8004634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3304      	adds	r3, #4
 800463a:	2b06      	cmp	r3, #6
 800463c:	d902      	bls.n	8004644 <NVIC_EncodePriority+0x30>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3b03      	subs	r3, #3
 8004642:	e000      	b.n	8004646 <NVIC_EncodePriority+0x32>
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	401a      	ands	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800465c:	f04f 31ff 	mov.w	r1, #4294967295
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	fa01 f303 	lsl.w	r3, r1, r3
 8004666:	43d9      	mvns	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	4313      	orrs	r3, r2
}
 800466e:	4618      	mov	r0, r3
 8004670:	3724      	adds	r7, #36	; 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff4f 	bl	8004524 <__NVIC_SetPriorityGrouping>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a0:	f7ff ff64 	bl	800456c <__NVIC_GetPriorityGrouping>
 80046a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ffb2 	bl	8004614 <NVIC_EncodePriority>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff81 	bl	80045c0 <__NVIC_SetPriority>
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff57 	bl	8004588 <__NVIC_EnableIRQ>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b08b      	sub	sp, #44	; 0x2c
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046f2:	2300      	movs	r3, #0
 80046f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f6:	e169      	b.n	80049cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046f8:	2201      	movs	r2, #1
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	429a      	cmp	r2, r3
 8004712:	f040 8158 	bne.w	80049c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4a9a      	ldr	r2, [pc, #616]	; (8004984 <HAL_GPIO_Init+0x2a0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d05e      	beq.n	80047de <HAL_GPIO_Init+0xfa>
 8004720:	4a98      	ldr	r2, [pc, #608]	; (8004984 <HAL_GPIO_Init+0x2a0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d875      	bhi.n	8004812 <HAL_GPIO_Init+0x12e>
 8004726:	4a98      	ldr	r2, [pc, #608]	; (8004988 <HAL_GPIO_Init+0x2a4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d058      	beq.n	80047de <HAL_GPIO_Init+0xfa>
 800472c:	4a96      	ldr	r2, [pc, #600]	; (8004988 <HAL_GPIO_Init+0x2a4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d86f      	bhi.n	8004812 <HAL_GPIO_Init+0x12e>
 8004732:	4a96      	ldr	r2, [pc, #600]	; (800498c <HAL_GPIO_Init+0x2a8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d052      	beq.n	80047de <HAL_GPIO_Init+0xfa>
 8004738:	4a94      	ldr	r2, [pc, #592]	; (800498c <HAL_GPIO_Init+0x2a8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d869      	bhi.n	8004812 <HAL_GPIO_Init+0x12e>
 800473e:	4a94      	ldr	r2, [pc, #592]	; (8004990 <HAL_GPIO_Init+0x2ac>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d04c      	beq.n	80047de <HAL_GPIO_Init+0xfa>
 8004744:	4a92      	ldr	r2, [pc, #584]	; (8004990 <HAL_GPIO_Init+0x2ac>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d863      	bhi.n	8004812 <HAL_GPIO_Init+0x12e>
 800474a:	4a92      	ldr	r2, [pc, #584]	; (8004994 <HAL_GPIO_Init+0x2b0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d046      	beq.n	80047de <HAL_GPIO_Init+0xfa>
 8004750:	4a90      	ldr	r2, [pc, #576]	; (8004994 <HAL_GPIO_Init+0x2b0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d85d      	bhi.n	8004812 <HAL_GPIO_Init+0x12e>
 8004756:	2b12      	cmp	r3, #18
 8004758:	d82a      	bhi.n	80047b0 <HAL_GPIO_Init+0xcc>
 800475a:	2b12      	cmp	r3, #18
 800475c:	d859      	bhi.n	8004812 <HAL_GPIO_Init+0x12e>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <HAL_GPIO_Init+0x80>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	080047df 	.word	0x080047df
 8004768:	080047b9 	.word	0x080047b9
 800476c:	080047cb 	.word	0x080047cb
 8004770:	0800480d 	.word	0x0800480d
 8004774:	08004813 	.word	0x08004813
 8004778:	08004813 	.word	0x08004813
 800477c:	08004813 	.word	0x08004813
 8004780:	08004813 	.word	0x08004813
 8004784:	08004813 	.word	0x08004813
 8004788:	08004813 	.word	0x08004813
 800478c:	08004813 	.word	0x08004813
 8004790:	08004813 	.word	0x08004813
 8004794:	08004813 	.word	0x08004813
 8004798:	08004813 	.word	0x08004813
 800479c:	08004813 	.word	0x08004813
 80047a0:	08004813 	.word	0x08004813
 80047a4:	08004813 	.word	0x08004813
 80047a8:	080047c1 	.word	0x080047c1
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	4a79      	ldr	r2, [pc, #484]	; (8004998 <HAL_GPIO_Init+0x2b4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047b6:	e02c      	b.n	8004812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	623b      	str	r3, [r7, #32]
          break;
 80047be:	e029      	b.n	8004814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	3304      	adds	r3, #4
 80047c6:	623b      	str	r3, [r7, #32]
          break;
 80047c8:	e024      	b.n	8004814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	3308      	adds	r3, #8
 80047d0:	623b      	str	r3, [r7, #32]
          break;
 80047d2:	e01f      	b.n	8004814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	330c      	adds	r3, #12
 80047da:	623b      	str	r3, [r7, #32]
          break;
 80047dc:	e01a      	b.n	8004814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047e6:	2304      	movs	r3, #4
 80047e8:	623b      	str	r3, [r7, #32]
          break;
 80047ea:	e013      	b.n	8004814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047f4:	2308      	movs	r3, #8
 80047f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	611a      	str	r2, [r3, #16]
          break;
 80047fe:	e009      	b.n	8004814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004800:	2308      	movs	r3, #8
 8004802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	615a      	str	r2, [r3, #20]
          break;
 800480a:	e003      	b.n	8004814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800480c:	2300      	movs	r3, #0
 800480e:	623b      	str	r3, [r7, #32]
          break;
 8004810:	e000      	b.n	8004814 <HAL_GPIO_Init+0x130>
          break;
 8004812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2bff      	cmp	r3, #255	; 0xff
 8004818:	d801      	bhi.n	800481e <HAL_GPIO_Init+0x13a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	e001      	b.n	8004822 <HAL_GPIO_Init+0x13e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2bff      	cmp	r3, #255	; 0xff
 8004828:	d802      	bhi.n	8004830 <HAL_GPIO_Init+0x14c>
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	e002      	b.n	8004836 <HAL_GPIO_Init+0x152>
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	3b08      	subs	r3, #8
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	210f      	movs	r1, #15
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	401a      	ands	r2, r3
 8004848:	6a39      	ldr	r1, [r7, #32]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	431a      	orrs	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80b1 	beq.w	80049c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004864:	4b4d      	ldr	r3, [pc, #308]	; (800499c <HAL_GPIO_Init+0x2b8>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4a4c      	ldr	r2, [pc, #304]	; (800499c <HAL_GPIO_Init+0x2b8>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6193      	str	r3, [r2, #24]
 8004870:	4b4a      	ldr	r3, [pc, #296]	; (800499c <HAL_GPIO_Init+0x2b8>)
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800487c:	4a48      	ldr	r2, [pc, #288]	; (80049a0 <HAL_GPIO_Init+0x2bc>)
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	089b      	lsrs	r3, r3, #2
 8004882:	3302      	adds	r3, #2
 8004884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	220f      	movs	r2, #15
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4013      	ands	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <HAL_GPIO_Init+0x2c0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <HAL_GPIO_Init+0x1ec>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3f      	ldr	r2, [pc, #252]	; (80049a8 <HAL_GPIO_Init+0x2c4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00d      	beq.n	80048cc <HAL_GPIO_Init+0x1e8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3e      	ldr	r2, [pc, #248]	; (80049ac <HAL_GPIO_Init+0x2c8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <HAL_GPIO_Init+0x1e4>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3d      	ldr	r2, [pc, #244]	; (80049b0 <HAL_GPIO_Init+0x2cc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d101      	bne.n	80048c4 <HAL_GPIO_Init+0x1e0>
 80048c0:	2303      	movs	r3, #3
 80048c2:	e006      	b.n	80048d2 <HAL_GPIO_Init+0x1ee>
 80048c4:	2304      	movs	r3, #4
 80048c6:	e004      	b.n	80048d2 <HAL_GPIO_Init+0x1ee>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e002      	b.n	80048d2 <HAL_GPIO_Init+0x1ee>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <HAL_GPIO_Init+0x1ee>
 80048d0:	2300      	movs	r3, #0
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	f002 0203 	and.w	r2, r2, #3
 80048d8:	0092      	lsls	r2, r2, #2
 80048da:	4093      	lsls	r3, r2
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048e2:	492f      	ldr	r1, [pc, #188]	; (80049a0 <HAL_GPIO_Init+0x2bc>)
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d006      	beq.n	800490a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048fc:	4b2d      	ldr	r3, [pc, #180]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	492c      	ldr	r1, [pc, #176]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]
 8004908:	e006      	b.n	8004918 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800490a:	4b2a      	ldr	r3, [pc, #168]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	43db      	mvns	r3, r3
 8004912:	4928      	ldr	r1, [pc, #160]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004914:	4013      	ands	r3, r2
 8004916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d006      	beq.n	8004932 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004924:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	4922      	ldr	r1, [pc, #136]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	60cb      	str	r3, [r1, #12]
 8004930:	e006      	b.n	8004940 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	43db      	mvns	r3, r3
 800493a:	491e      	ldr	r1, [pc, #120]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 800493c:	4013      	ands	r3, r2
 800493e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d006      	beq.n	800495a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	4918      	ldr	r1, [pc, #96]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	4313      	orrs	r3, r2
 8004956:	604b      	str	r3, [r1, #4]
 8004958:	e006      	b.n	8004968 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800495a:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	43db      	mvns	r3, r3
 8004962:	4914      	ldr	r1, [pc, #80]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004964:	4013      	ands	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d021      	beq.n	80049b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004974:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	490e      	ldr	r1, [pc, #56]	; (80049b4 <HAL_GPIO_Init+0x2d0>)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]
 8004980:	e021      	b.n	80049c6 <HAL_GPIO_Init+0x2e2>
 8004982:	bf00      	nop
 8004984:	10320000 	.word	0x10320000
 8004988:	10310000 	.word	0x10310000
 800498c:	10220000 	.word	0x10220000
 8004990:	10210000 	.word	0x10210000
 8004994:	10120000 	.word	0x10120000
 8004998:	10110000 	.word	0x10110000
 800499c:	40021000 	.word	0x40021000
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40010800 	.word	0x40010800
 80049a8:	40010c00 	.word	0x40010c00
 80049ac:	40011000 	.word	0x40011000
 80049b0:	40011400 	.word	0x40011400
 80049b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_GPIO_Init+0x304>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	43db      	mvns	r3, r3
 80049c0:	4909      	ldr	r1, [pc, #36]	; (80049e8 <HAL_GPIO_Init+0x304>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	3301      	adds	r3, #1
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	fa22 f303 	lsr.w	r3, r2, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f47f ae8e 	bne.w	80046f8 <HAL_GPIO_Init+0x14>
  }
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	372c      	adds	r7, #44	; 0x2c
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	40010400 	.word	0x40010400

080049ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
 80049f8:	4613      	mov	r3, r2
 80049fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049fc:	787b      	ldrb	r3, [r7, #1]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a02:	887a      	ldrh	r2, [r7, #2]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a08:	e003      	b.n	8004a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	041a      	lsls	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	43d9      	mvns	r1, r3
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	611a      	str	r2, [r3, #16]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
	...

08004a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a66:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fd fb09 	bl	8002086 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40010400 	.word	0x40010400

08004a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e12b      	b.n	8004cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd f9d8 	bl	8001e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	; 0x24
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f000 fe10 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 8004ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4a81      	ldr	r2, [pc, #516]	; (8004cf4 <HAL_I2C_Init+0x274>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d807      	bhi.n	8004b04 <HAL_I2C_Init+0x84>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a80      	ldr	r2, [pc, #512]	; (8004cf8 <HAL_I2C_Init+0x278>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	bf94      	ite	ls
 8004afc:	2301      	movls	r3, #1
 8004afe:	2300      	movhi	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e006      	b.n	8004b12 <HAL_I2C_Init+0x92>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a7d      	ldr	r2, [pc, #500]	; (8004cfc <HAL_I2C_Init+0x27c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf94      	ite	ls
 8004b0c:	2301      	movls	r3, #1
 8004b0e:	2300      	movhi	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e0e7      	b.n	8004cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a78      	ldr	r2, [pc, #480]	; (8004d00 <HAL_I2C_Init+0x280>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	0c9b      	lsrs	r3, r3, #18
 8004b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a6a      	ldr	r2, [pc, #424]	; (8004cf4 <HAL_I2C_Init+0x274>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d802      	bhi.n	8004b54 <HAL_I2C_Init+0xd4>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3301      	adds	r3, #1
 8004b52:	e009      	b.n	8004b68 <HAL_I2C_Init+0xe8>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	4a69      	ldr	r2, [pc, #420]	; (8004d04 <HAL_I2C_Init+0x284>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	3301      	adds	r3, #1
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	495c      	ldr	r1, [pc, #368]	; (8004cf4 <HAL_I2C_Init+0x274>)
 8004b84:	428b      	cmp	r3, r1
 8004b86:	d819      	bhi.n	8004bbc <HAL_I2C_Init+0x13c>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1e59      	subs	r1, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b9c:	400b      	ands	r3, r1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_I2C_Init+0x138>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1e59      	subs	r1, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb6:	e051      	b.n	8004c5c <HAL_I2C_Init+0x1dc>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	e04f      	b.n	8004c5c <HAL_I2C_Init+0x1dc>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d111      	bne.n	8004be8 <HAL_I2C_Init+0x168>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1e58      	subs	r0, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	440b      	add	r3, r1
 8004bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e012      	b.n	8004c0e <HAL_I2C_Init+0x18e>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1e58      	subs	r0, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	0099      	lsls	r1, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Init+0x196>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e022      	b.n	8004c5c <HAL_I2C_Init+0x1dc>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10e      	bne.n	8004c3c <HAL_I2C_Init+0x1bc>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1e58      	subs	r0, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6859      	ldr	r1, [r3, #4]
 8004c26:	460b      	mov	r3, r1
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	440b      	add	r3, r1
 8004c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c30:	3301      	adds	r3, #1
 8004c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3a:	e00f      	b.n	8004c5c <HAL_I2C_Init+0x1dc>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1e58      	subs	r0, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	0099      	lsls	r1, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c52:	3301      	adds	r3, #1
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	6809      	ldr	r1, [r1, #0]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6911      	ldr	r1, [r2, #16]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68d2      	ldr	r2, [r2, #12]
 8004c96:	4311      	orrs	r1, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	000186a0 	.word	0x000186a0
 8004cf8:	001e847f 	.word	0x001e847f
 8004cfc:	003d08ff 	.word	0x003d08ff
 8004d00:	431bde83 	.word	0x431bde83
 8004d04:	10624dd3 	.word	0x10624dd3

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e304      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8087 	beq.w	8004e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d28:	4b92      	ldr	r3, [pc, #584]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00c      	beq.n	8004d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d34:	4b8f      	ldr	r3, [pc, #572]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d112      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
 8004d40:	4b8c      	ldr	r3, [pc, #560]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d10b      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4e:	4b89      	ldr	r3, [pc, #548]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x12c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d168      	bne.n	8004e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e2de      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCC_OscConfig+0x76>
 8004d70:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e02e      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x98>
 8004d86:	4b7b      	ldr	r3, [pc, #492]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7a      	ldr	r2, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b78      	ldr	r3, [pc, #480]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a77      	ldr	r2, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e01d      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xbc>
 8004daa:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a71      	ldr	r2, [pc, #452]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6e      	ldr	r2, [pc, #440]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004dc4:	4b6b      	ldr	r3, [pc, #428]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6a      	ldr	r2, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a67      	ldr	r2, [pc, #412]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d013      	beq.n	8004e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7ff fb70 	bl	80044c8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7ff fb6c 	bl	80044c8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e292      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b5d      	ldr	r3, [pc, #372]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0xe4>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7ff fb5c 	bl	80044c8 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7ff fb58 	bl	80044c8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e27e      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x10c>
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d063      	beq.n	8004f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e42:	4b4c      	ldr	r3, [pc, #304]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d11c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
 8004e5a:	4b46      	ldr	r3, [pc, #280]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d116      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e252      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4939      	ldr	r1, [pc, #228]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e92:	e03a      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d020      	beq.n	8004ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7ff fb11 	bl	80044c8 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7ff fb0d 	bl	80044c8 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e233      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4927      	ldr	r1, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]
 8004edc:	e015      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7ff faf0 	bl	80044c8 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eec:	f7ff faec 	bl	80044c8 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e212      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d03a      	beq.n	8004f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d019      	beq.n	8004f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7ff fad0 	bl	80044c8 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7ff facc 	bl	80044c8 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e1f2      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f000 fc34 	bl	80057b8 <RCC_Delay>
 8004f50:	e01c      	b.n	8004f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f58:	f7ff fab6 	bl	80044c8 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7ff fab2 	bl	80044c8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d908      	bls.n	8004f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e1d8      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	42420000 	.word	0x42420000
 8004f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f80:	4b9b      	ldr	r3, [pc, #620]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e9      	bne.n	8004f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a6 	beq.w	80050e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9e:	4b94      	ldr	r3, [pc, #592]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10d      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	4b91      	ldr	r3, [pc, #580]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4a90      	ldr	r2, [pc, #576]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	61d3      	str	r3, [r2, #28]
 8004fb6:	4b8e      	ldr	r3, [pc, #568]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	4b8b      	ldr	r3, [pc, #556]	; (80051f4 <HAL_RCC_OscConfig+0x4ec>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d118      	bne.n	8005004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd2:	4b88      	ldr	r3, [pc, #544]	; (80051f4 <HAL_RCC_OscConfig+0x4ec>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a87      	ldr	r2, [pc, #540]	; (80051f4 <HAL_RCC_OscConfig+0x4ec>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fde:	f7ff fa73 	bl	80044c8 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7ff fa6f 	bl	80044c8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b64      	cmp	r3, #100	; 0x64
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e195      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff8:	4b7e      	ldr	r3, [pc, #504]	; (80051f4 <HAL_RCC_OscConfig+0x4ec>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x312>
 800500c:	4b78      	ldr	r3, [pc, #480]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4a77      	ldr	r2, [pc, #476]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6213      	str	r3, [r2, #32]
 8005018:	e02d      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x334>
 8005022:	4b73      	ldr	r3, [pc, #460]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4a72      	ldr	r2, [pc, #456]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	6213      	str	r3, [r2, #32]
 800502e:	4b70      	ldr	r3, [pc, #448]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4a6f      	ldr	r2, [pc, #444]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	6213      	str	r3, [r2, #32]
 800503a:	e01c      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b05      	cmp	r3, #5
 8005042:	d10c      	bne.n	800505e <HAL_RCC_OscConfig+0x356>
 8005044:	4b6a      	ldr	r3, [pc, #424]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	4a69      	ldr	r2, [pc, #420]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 800504a:	f043 0304 	orr.w	r3, r3, #4
 800504e:	6213      	str	r3, [r2, #32]
 8005050:	4b67      	ldr	r3, [pc, #412]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a66      	ldr	r2, [pc, #408]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	e00b      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800505e:	4b64      	ldr	r3, [pc, #400]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a63      	ldr	r2, [pc, #396]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6213      	str	r3, [r2, #32]
 800506a:	4b61      	ldr	r3, [pc, #388]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a60      	ldr	r2, [pc, #384]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507e:	f7ff fa23 	bl	80044c8 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7ff fa1f 	bl	80044c8 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	; 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e143      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509c:	4b54      	ldr	r3, [pc, #336]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ee      	beq.n	8005086 <HAL_RCC_OscConfig+0x37e>
 80050a8:	e014      	b.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7ff fa0d 	bl	80044c8 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7ff fa09 	bl	80044c8 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e12d      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c8:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ee      	bne.n	80050b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4b45      	ldr	r3, [pc, #276]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	4a44      	ldr	r2, [pc, #272]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 808c 	beq.w	8005208 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80050f0:	4b3f      	ldr	r3, [pc, #252]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d10e      	bne.n	800511c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80050fe:	4b3c      	ldr	r3, [pc, #240]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005106:	2b08      	cmp	r3, #8
 8005108:	d108      	bne.n	800511c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800510a:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005116:	d101      	bne.n	800511c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e103      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	2b02      	cmp	r3, #2
 8005122:	d14e      	bne.n	80051c2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005124:	4b32      	ldr	r3, [pc, #200]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005130:	4b2f      	ldr	r3, [pc, #188]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0ef      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_RCC_OscConfig+0x4f0>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7ff f9bd 	bl	80044c8 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005152:	f7ff f9b9 	bl	80044c8 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b64      	cmp	r3, #100	; 0x64
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0df      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005164:	4b22      	ldr	r3, [pc, #136]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005170:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	491c      	ldr	r1, [pc, #112]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 800517e:	4313      	orrs	r3, r2
 8005180:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005182:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	4918      	ldr	r1, [pc, #96]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 8005190:	4313      	orrs	r3, r2
 8005192:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005194:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <HAL_RCC_OscConfig+0x4f0>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519a:	f7ff f995 	bl	80044c8 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051a2:	f7ff f991 	bl	80044c8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b64      	cmp	r3, #100	; 0x64
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0b7      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80051b4:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x49a>
 80051c0:	e022      	b.n	8005208 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80051c2:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <HAL_RCC_OscConfig+0x4e8>)
 80051c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <HAL_RCC_OscConfig+0x4f0>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7ff f978 	bl	80044c8 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80051da:	e00f      	b.n	80051fc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051dc:	f7ff f974 	bl	80044c8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	; 0x64
 80051e8:	d908      	bls.n	80051fc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e09a      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40007000 	.word	0x40007000
 80051f8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80051fc:	4b4b      	ldr	r3, [pc, #300]	; (800532c <HAL_RCC_OscConfig+0x624>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e9      	bne.n	80051dc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8088 	beq.w	8005322 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005212:	4b46      	ldr	r3, [pc, #280]	; (800532c <HAL_RCC_OscConfig+0x624>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b08      	cmp	r3, #8
 800521c:	d068      	beq.n	80052f0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d14d      	bne.n	80052c2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	4b42      	ldr	r3, [pc, #264]	; (8005330 <HAL_RCC_OscConfig+0x628>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7ff f94c 	bl	80044c8 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005234:	f7ff f948 	bl	80044c8 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e06e      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <HAL_RCC_OscConfig+0x624>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525a:	d10f      	bne.n	800527c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800525c:	4b33      	ldr	r3, [pc, #204]	; (800532c <HAL_RCC_OscConfig+0x624>)
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4931      	ldr	r1, [pc, #196]	; (800532c <HAL_RCC_OscConfig+0x624>)
 8005266:	4313      	orrs	r3, r2
 8005268:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_RCC_OscConfig+0x624>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	f023 020f 	bic.w	r2, r3, #15
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	492d      	ldr	r1, [pc, #180]	; (800532c <HAL_RCC_OscConfig+0x624>)
 8005278:	4313      	orrs	r3, r2
 800527a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800527c:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCC_OscConfig+0x624>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	430b      	orrs	r3, r1
 800528e:	4927      	ldr	r1, [pc, #156]	; (800532c <HAL_RCC_OscConfig+0x624>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005294:	4b26      	ldr	r3, [pc, #152]	; (8005330 <HAL_RCC_OscConfig+0x628>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529a:	f7ff f915 	bl	80044c8 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a2:	f7ff f911 	bl	80044c8 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e037      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b4:	4b1d      	ldr	r3, [pc, #116]	; (800532c <HAL_RCC_OscConfig+0x624>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x59a>
 80052c0:	e02f      	b.n	8005322 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <HAL_RCC_OscConfig+0x628>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7ff f8fe 	bl	80044c8 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d0:	f7ff f8fa 	bl	80044c8 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e020      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_RCC_OscConfig+0x624>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x5c8>
 80052ee:	e018      	b.n	8005322 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e013      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_OscConfig+0x624>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	429a      	cmp	r2, r3
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d001      	beq.n	8005322 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000
 8005330:	42420060 	.word	0x42420060

08005334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0d0      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005348:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d910      	bls.n	8005378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b67      	ldr	r3, [pc, #412]	; (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 0207 	bic.w	r2, r3, #7
 800535e:	4965      	ldr	r1, [pc, #404]	; (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b63      	ldr	r3, [pc, #396]	; (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0b8      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d020      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005390:	4b59      	ldr	r3, [pc, #356]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4a58      	ldr	r2, [pc, #352]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800539a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a8:	4b53      	ldr	r3, [pc, #332]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a52      	ldr	r2, [pc, #328]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b4:	4b50      	ldr	r3, [pc, #320]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	494d      	ldr	r1, [pc, #308]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d040      	beq.n	8005454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	4b47      	ldr	r3, [pc, #284]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d115      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e07f      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f2:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e073      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005402:	4b3d      	ldr	r3, [pc, #244]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e06b      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005412:	4b39      	ldr	r3, [pc, #228]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f023 0203 	bic.w	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4936      	ldr	r1, [pc, #216]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005424:	f7ff f850 	bl	80044c8 <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	e00a      	b.n	8005442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800542c:	f7ff f84c 	bl	80044c8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	; 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e053      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 020c 	and.w	r2, r3, #12
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	429a      	cmp	r2, r3
 8005452:	d1eb      	bne.n	800542c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005454:	4b27      	ldr	r3, [pc, #156]	; (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d210      	bcs.n	8005484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005462:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 0207 	bic.w	r2, r3, #7
 800546a:	4922      	ldr	r1, [pc, #136]	; (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b20      	ldr	r3, [pc, #128]	; (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e032      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005490:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4916      	ldr	r1, [pc, #88]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054ae:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	490e      	ldr	r1, [pc, #56]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054c2:	f000 f821 	bl	8005508 <HAL_RCC_GetSysClockFreq>
 80054c6:	4602      	mov	r2, r0
 80054c8:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	490a      	ldr	r1, [pc, #40]	; (80054fc <HAL_RCC_ClockConfig+0x1c8>)
 80054d4:	5ccb      	ldrb	r3, [r1, r3]
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	4a09      	ldr	r2, [pc, #36]	; (8005500 <HAL_RCC_ClockConfig+0x1cc>)
 80054dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054de:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_RCC_ClockConfig+0x1d0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe f8e8 	bl	80036b8 <HAL_InitTick>

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40022000 	.word	0x40022000
 80054f8:	40021000 	.word	0x40021000
 80054fc:	0800e470 	.word	0x0800e470
 8005500:	20000064 	.word	0x20000064
 8005504:	200000a4 	.word	0x200000a4

08005508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800550c:	b092      	sub	sp, #72	; 0x48
 800550e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005514:	2300      	movs	r3, #0
 8005516:	63bb      	str	r3, [r7, #56]	; 0x38
 8005518:	2300      	movs	r3, #0
 800551a:	647b      	str	r3, [r7, #68]	; 0x44
 800551c:	2300      	movs	r3, #0
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	633b      	str	r3, [r7, #48]	; 0x30
 8005528:	2300      	movs	r3, #0
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800552c:	4b6b      	ldr	r3, [pc, #428]	; (80056dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005534:	f003 030c 	and.w	r3, r3, #12
 8005538:	2b04      	cmp	r3, #4
 800553a:	d002      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0x3a>
 800553c:	2b08      	cmp	r3, #8
 800553e:	d003      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x40>
 8005540:	e0c3      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005542:	4b67      	ldr	r3, [pc, #412]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005546:	e0c3      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554a:	0c9b      	lsrs	r3, r3, #18
 800554c:	f003 020f 	and.w	r2, r3, #15
 8005550:	4b64      	ldr	r3, [pc, #400]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8005552:	5c9b      	ldrb	r3, [r3, r2]
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80ac 	beq.w	80056ba <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005562:	4b5e      	ldr	r3, [pc, #376]	; (80056dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	f003 020f 	and.w	r2, r3, #15
 800556a:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1e0>)
 800556c:	5c9b      	ldrb	r3, [r3, r2]
 800556e:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005570:	4b5a      	ldr	r3, [pc, #360]	; (80056dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 808c 	beq.w	8005696 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800557e:	4b57      	ldr	r3, [pc, #348]	; (80056dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	091b      	lsrs	r3, r3, #4
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	3301      	adds	r3, #1
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800558c:	4b53      	ldr	r3, [pc, #332]	; (80056dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	3302      	adds	r3, #2
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	2200      	movs	r2, #0
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	627a      	str	r2, [r7, #36]	; 0x24
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	2200      	movs	r2, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	4611      	mov	r1, r2
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	fb00 f203 	mul.w	r2, r0, r3
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	fb03 f301 	mul.w	r3, r3, r1
 80055b6:	4413      	add	r3, r2
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	fba2 4500 	umull	r4, r5, r2, r0
 80055be:	442b      	add	r3, r5
 80055c0:	461d      	mov	r5, r3
 80055c2:	4622      	mov	r2, r4
 80055c4:	462b      	mov	r3, r5
 80055c6:	f04f 0000 	mov.w	r0, #0
 80055ca:	f04f 0100 	mov.w	r1, #0
 80055ce:	0159      	lsls	r1, r3, #5
 80055d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d4:	0150      	lsls	r0, r2, #5
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	ebb2 0a04 	subs.w	sl, r2, r4
 80055de:	eb63 0b05 	sbc.w	fp, r3, r5
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055ee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055f2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055f6:	ebb2 080a 	subs.w	r8, r2, sl
 80055fa:	eb63 090b 	sbc.w	r9, r3, fp
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800560a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005612:	4690      	mov	r8, r2
 8005614:	4699      	mov	r9, r3
 8005616:	eb18 0304 	adds.w	r3, r8, r4
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	eb49 0305 	adc.w	r3, r9, r5
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562e:	4629      	mov	r1, r5
 8005630:	028b      	lsls	r3, r1, #10
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	4604      	mov	r4, r0
 8005638:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800563c:	4601      	mov	r1, r0
 800563e:	028a      	lsls	r2, r1, #10
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	2200      	movs	r2, #0
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	617a      	str	r2, [r7, #20]
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	2200      	movs	r2, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	60fa      	str	r2, [r7, #12]
 8005654:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005658:	4622      	mov	r2, r4
 800565a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800565e:	4645      	mov	r5, r8
 8005660:	fb05 f202 	mul.w	r2, r5, r2
 8005664:	46cc      	mov	ip, r9
 8005666:	4625      	mov	r5, r4
 8005668:	461c      	mov	r4, r3
 800566a:	4623      	mov	r3, r4
 800566c:	fb03 f30c 	mul.w	r3, r3, ip
 8005670:	4413      	add	r3, r2
 8005672:	4622      	mov	r2, r4
 8005674:	4644      	mov	r4, r8
 8005676:	fba2 2404 	umull	r2, r4, r2, r4
 800567a:	61fc      	str	r4, [r7, #28]
 800567c:	61ba      	str	r2, [r7, #24]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005688:	f7fb fdd8 	bl	800123c <__aeabi_uldivmod>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4613      	mov	r3, r2
 8005692:	647b      	str	r3, [r7, #68]	; 0x44
 8005694:	e007      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005698:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800569a:	fb03 f202 	mul.w	r2, r3, r2
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80056a6:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80056a8:	7b5b      	ldrb	r3, [r3, #13]
 80056aa:	461a      	mov	r2, r3
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d108      	bne.n	80056c4 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 80056b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	647b      	str	r3, [r7, #68]	; 0x44
 80056b8:	e004      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	4a0b      	ldr	r2, [pc, #44]	; (80056ec <HAL_RCC_GetSysClockFreq+0x1e4>)
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 80056c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80056c8:	e002      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80056cc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80056ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3748      	adds	r7, #72	; 0x48
 80056d6:	46bd      	mov	sp, r7
 80056d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056dc:	40021000 	.word	0x40021000
 80056e0:	00f42400 	.word	0x00f42400
 80056e4:	0800e488 	.word	0x0800e488
 80056e8:	0800e498 	.word	0x0800e498
 80056ec:	003d0900 	.word	0x003d0900
 80056f0:	007a1200 	.word	0x007a1200

080056f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b02      	ldr	r3, [pc, #8]	; (8005704 <HAL_RCC_GetHCLKFreq+0x10>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	20000064 	.word	0x20000064

08005708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800570c:	f7ff fff2 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4903      	ldr	r1, [pc, #12]	; (800572c <HAL_RCC_GetPCLK1Freq+0x24>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	0800e480 	.word	0x0800e480

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005734:	f7ff ffde 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	0adb      	lsrs	r3, r3, #11
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4903      	ldr	r1, [pc, #12]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40021000 	.word	0x40021000
 8005754:	0800e480 	.word	0x0800e480

08005758 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	220f      	movs	r2, #15
 8005766:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005768:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <HAL_RCC_GetClockConfig+0x58>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 0203 	and.w	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_RCC_GetClockConfig+0x58>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_GetClockConfig+0x58>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800578c:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <HAL_RCC_GetClockConfig+0x58>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_RCC_GetClockConfig+0x5c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0207 	and.w	r2, r3, #7
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40022000 	.word	0x40022000

080057b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057c0:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <RCC_Delay+0x34>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <RCC_Delay+0x38>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	0a5b      	lsrs	r3, r3, #9
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057d4:	bf00      	nop
  }
  while (Delay --);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1e5a      	subs	r2, r3, #1
 80057da:	60fa      	str	r2, [r7, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f9      	bne.n	80057d4 <RCC_Delay+0x1c>
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	20000064 	.word	0x20000064
 80057f0:	10624dd3 	.word	0x10624dd3

080057f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e076      	b.n	80058f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005816:	d009      	beq.n	800582c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
 800581e:	e005      	b.n	800582c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fd fea2 	bl	8003590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005862:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b0:	ea42 0103 	orr.w	r1, r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	0c1a      	lsrs	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f002 0204 	and.w	r2, r2, #4
 80058d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69da      	ldr	r2, [r3, #28]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <HAL_SPI_Transmit+0x22>
 800591a:	2302      	movs	r3, #2
 800591c:	e12d      	b.n	8005b7a <HAL_SPI_Transmit+0x27e>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005926:	f7fe fdcf 	bl	80044c8 <HAL_GetTick>
 800592a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d002      	beq.n	8005942 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800593c:	2302      	movs	r3, #2
 800593e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005940:	e116      	b.n	8005b70 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_SPI_Transmit+0x52>
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005952:	e10d      	b.n	8005b70 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2203      	movs	r2, #3
 8005958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	88fa      	ldrh	r2, [r7, #6]
 8005972:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599a:	d10f      	bne.n	80059bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d007      	beq.n	80059da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e2:	d14f      	bne.n	8005a84 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_SPI_Transmit+0xf6>
 80059ec:	8afb      	ldrh	r3, [r7, #22]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d142      	bne.n	8005a78 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	881a      	ldrh	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	1c9a      	adds	r2, r3, #2
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a16:	e02f      	b.n	8005a78 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d112      	bne.n	8005a4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	881a      	ldrh	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	1c9a      	adds	r2, r3, #2
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a4a:	e015      	b.n	8005a78 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4c:	f7fe fd3c 	bl	80044c8 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d803      	bhi.n	8005a64 <HAL_SPI_Transmit+0x168>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d102      	bne.n	8005a6a <HAL_SPI_Transmit+0x16e>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a76:	e07b      	b.n	8005b70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1ca      	bne.n	8005a18 <HAL_SPI_Transmit+0x11c>
 8005a82:	e050      	b.n	8005b26 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_SPI_Transmit+0x196>
 8005a8c:	8afb      	ldrh	r3, [r7, #22]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d144      	bne.n	8005b1c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ab8:	e030      	b.n	8005b1c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d113      	bne.n	8005af0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	86da      	strh	r2, [r3, #54]	; 0x36
 8005aee:	e015      	b.n	8005b1c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af0:	f7fe fcea 	bl	80044c8 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d803      	bhi.n	8005b08 <HAL_SPI_Transmit+0x20c>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d102      	bne.n	8005b0e <HAL_SPI_Transmit+0x212>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b1a:	e029      	b.n	8005b70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1c9      	bne.n	8005aba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fbcc 	bl	80062c8 <SPI_EndRxTxTransaction>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e003      	b.n	8005b70 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b088      	sub	sp, #32
 8005b86:	af02      	add	r7, sp, #8
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d002      	beq.n	8005ba8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ba6:	e0fb      	b.n	8005da0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb0:	d112      	bne.n	8005bd8 <HAL_SPI_Receive+0x56>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f8ef 	bl	8005db2 <HAL_SPI_TransmitReceive>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	e0e8      	b.n	8005daa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_SPI_Receive+0x64>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e0e1      	b.n	8005daa <HAL_SPI_Receive+0x228>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bee:	f7fe fc6b 	bl	80044c8 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_SPI_Receive+0x7e>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d102      	bne.n	8005c06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c04:	e0cc      	b.n	8005da0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4c:	d10f      	bne.n	8005c6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d007      	beq.n	8005c8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d16a      	bne.n	8005d6a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c94:	e032      	b.n	8005cfc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d115      	bne.n	8005cd0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f103 020c 	add.w	r2, r3, #12
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cce:	e015      	b.n	8005cfc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd0:	f7fe fbfa 	bl	80044c8 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d803      	bhi.n	8005ce8 <HAL_SPI_Receive+0x166>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d102      	bne.n	8005cee <HAL_SPI_Receive+0x16c>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005cfa:	e051      	b.n	8005da0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1c7      	bne.n	8005c96 <HAL_SPI_Receive+0x114>
 8005d06:	e035      	b.n	8005d74 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d113      	bne.n	8005d3e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	b292      	uxth	r2, r2
 8005d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d3c:	e015      	b.n	8005d6a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d3e:	f7fe fbc3 	bl	80044c8 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d803      	bhi.n	8005d56 <HAL_SPI_Receive+0x1d4>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d102      	bne.n	8005d5c <HAL_SPI_Receive+0x1da>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d68:	e01a      	b.n	8005da0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1c9      	bne.n	8005d08 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa53 	bl	8006224 <SPI_EndRxTransaction>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	75fb      	strb	r3, [r7, #23]
 8005d96:	e003      	b.n	8005da0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b08c      	sub	sp, #48	; 0x30
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
 8005dbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_SPI_TransmitReceive+0x26>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e198      	b.n	800610a <HAL_SPI_TransmitReceive+0x358>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de0:	f7fe fb72 	bl	80044c8 <HAL_GetTick>
 8005de4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005df6:	887b      	ldrh	r3, [r7, #2]
 8005df8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d00f      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x70>
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e08:	d107      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x68>
 8005e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d003      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e20:	e16d      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x82>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x82>
 8005e2e:	887b      	ldrh	r3, [r7, #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d103      	bne.n	8005e3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e3a:	e160      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d003      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2205      	movs	r2, #5
 8005e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	887a      	ldrh	r2, [r7, #2]
 8005e66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	887a      	ldrh	r2, [r7, #2]
 8005e72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	887a      	ldrh	r2, [r7, #2]
 8005e78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d007      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eac:	d17c      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x10a>
 8005eb6:	8b7b      	ldrh	r3, [r7, #26]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d16a      	bne.n	8005f92 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	881a      	ldrh	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	1c9a      	adds	r2, r3, #2
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee0:	e057      	b.n	8005f92 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d11b      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x176>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <HAL_SPI_TransmitReceive+0x176>
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d113      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d119      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x1b8>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d014      	beq.n	8005f6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	b292      	uxth	r2, r2
 8005f4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f66:	2301      	movs	r3, #1
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f6a:	f7fe faad 	bl	80044c8 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d80b      	bhi.n	8005f92 <HAL_SPI_TransmitReceive+0x1e0>
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f80:	d007      	beq.n	8005f92 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005f90:	e0b5      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1a2      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x130>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d19d      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x130>
 8005fa6:	e080      	b.n	80060aa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <HAL_SPI_TransmitReceive+0x204>
 8005fb0:	8b7b      	ldrh	r3, [r7, #26]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d16f      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	7812      	ldrb	r2, [r2, #0]
 8005fc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fdc:	e05b      	b.n	8006096 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d11c      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x274>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d017      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x274>
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d114      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	7812      	ldrb	r2, [r2, #0]
 8006008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d119      	bne.n	8006068 <HAL_SPI_TransmitReceive+0x2b6>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d014      	beq.n	8006068 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006064:	2301      	movs	r3, #1
 8006066:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006068:	f7fe fa2e 	bl	80044c8 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006074:	429a      	cmp	r2, r3
 8006076:	d803      	bhi.n	8006080 <HAL_SPI_TransmitReceive+0x2ce>
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d102      	bne.n	8006086 <HAL_SPI_TransmitReceive+0x2d4>
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006094:	e033      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d19e      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x22c>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d199      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f90a 	bl	80062c8 <SPI_EndRxTxTransaction>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d006      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060c6:	e01a      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f4:	e003      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006106:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800610a:	4618      	mov	r0, r3
 800610c:	3730      	adds	r7, #48	; 0x30
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006124:	f7fe f9d0 	bl	80044c8 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	4413      	add	r3, r2
 8006132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006134:	f7fe f9c8 	bl	80044c8 <HAL_GetTick>
 8006138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800613a:	4b39      	ldr	r3, [pc, #228]	; (8006220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	015b      	lsls	r3, r3, #5
 8006140:	0d1b      	lsrs	r3, r3, #20
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	fb02 f303 	mul.w	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614a:	e054      	b.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d050      	beq.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006154:	f7fe f9b8 	bl	80044c8 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	429a      	cmp	r2, r3
 8006162:	d902      	bls.n	800616a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d13d      	bne.n	80061e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006182:	d111      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618c:	d004      	beq.n	8006198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006196:	d107      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b0:	d10f      	bne.n	80061d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e017      	b.n	8006216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d19b      	bne.n	800614c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000064 	.word	0x20000064

08006224 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006238:	d111      	bne.n	800625e <SPI_EndRxTransaction+0x3a>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006242:	d004      	beq.n	800624e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624c:	d107      	bne.n	800625e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006266:	d117      	bne.n	8006298 <SPI_EndRxTransaction+0x74>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d112      	bne.n	8006298 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	2101      	movs	r1, #1
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff ff49 	bl	8006114 <SPI_WaitFlagStateUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01a      	beq.n	80062be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e013      	b.n	80062c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	2180      	movs	r1, #128	; 0x80
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f7ff ff36 	bl	8006114 <SPI_WaitFlagStateUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	f043 0220 	orr.w	r2, r3, #32
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e000      	b.n	80062c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	2180      	movs	r1, #128	; 0x80
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff ff18 	bl	8006114 <SPI_WaitFlagStateUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	f043 0220 	orr.w	r2, r3, #32
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e000      	b.n	80062fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e041      	b.n	800639a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fd fd20 	bl	8003d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f000 fd70 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d001      	beq.n	80063bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e03f      	b.n	800643c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <HAL_TIM_Base_Start_IT+0xa4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <HAL_TIM_Base_Start_IT+0x62>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e6:	d00e      	beq.n	8006406 <HAL_TIM_Base_Start_IT+0x62>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a17      	ldr	r2, [pc, #92]	; (800644c <HAL_TIM_Base_Start_IT+0xa8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d009      	beq.n	8006406 <HAL_TIM_Base_Start_IT+0x62>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a16      	ldr	r2, [pc, #88]	; (8006450 <HAL_TIM_Base_Start_IT+0xac>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <HAL_TIM_Base_Start_IT+0x62>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a14      	ldr	r2, [pc, #80]	; (8006454 <HAL_TIM_Base_Start_IT+0xb0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d111      	bne.n	800642a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b06      	cmp	r3, #6
 8006416:	d010      	beq.n	800643a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	e007      	b.n	800643a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0201 	orr.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00

08006458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e041      	b.n	80064ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f839 	bl	80064f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f000 fcc6 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <HAL_TIM_PWM_Start+0x24>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e022      	b.n	8006572 <HAL_TIM_PWM_Start+0x6a>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b04      	cmp	r3, #4
 8006530:	d109      	bne.n	8006546 <HAL_TIM_PWM_Start+0x3e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	bf14      	ite	ne
 800653e:	2301      	movne	r3, #1
 8006540:	2300      	moveq	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	e015      	b.n	8006572 <HAL_TIM_PWM_Start+0x6a>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d109      	bne.n	8006560 <HAL_TIM_PWM_Start+0x58>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b01      	cmp	r3, #1
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	e008      	b.n	8006572 <HAL_TIM_PWM_Start+0x6a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e063      	b.n	8006642 <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <HAL_TIM_PWM_Start+0x82>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006588:	e013      	b.n	80065b2 <HAL_TIM_PWM_Start+0xaa>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b04      	cmp	r3, #4
 800658e:	d104      	bne.n	800659a <HAL_TIM_PWM_Start+0x92>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006598:	e00b      	b.n	80065b2 <HAL_TIM_PWM_Start+0xaa>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d104      	bne.n	80065aa <HAL_TIM_PWM_Start+0xa2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a8:	e003      	b.n	80065b2 <HAL_TIM_PWM_Start+0xaa>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2201      	movs	r2, #1
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 febe 	bl	800733c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a21      	ldr	r2, [pc, #132]	; (800664c <HAL_TIM_PWM_Start+0x144>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d107      	bne.n	80065da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1b      	ldr	r2, [pc, #108]	; (800664c <HAL_TIM_PWM_Start+0x144>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <HAL_TIM_PWM_Start+0x104>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ec:	d00e      	beq.n	800660c <HAL_TIM_PWM_Start+0x104>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a17      	ldr	r2, [pc, #92]	; (8006650 <HAL_TIM_PWM_Start+0x148>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d009      	beq.n	800660c <HAL_TIM_PWM_Start+0x104>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a15      	ldr	r2, [pc, #84]	; (8006654 <HAL_TIM_PWM_Start+0x14c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_TIM_PWM_Start+0x104>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a14      	ldr	r2, [pc, #80]	; (8006658 <HAL_TIM_PWM_Start+0x150>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d111      	bne.n	8006630 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b06      	cmp	r3, #6
 800661c:	d010      	beq.n	8006640 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662e:	e007      	b.n	8006640 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00

0800665c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e093      	b.n	8006798 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fd fb05 	bl	8003c94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f000 fbb9 	bl	8006e28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	4313      	orrs	r3, r2
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066fc:	f023 030c 	bic.w	r3, r3, #12
 8006700:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800670c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	4313      	orrs	r3, r2
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	011a      	lsls	r2, r3, #4
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	031b      	lsls	r3, r3, #12
 800672c:	4313      	orrs	r3, r2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	4313      	orrs	r3, r2
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d110      	bne.n	80067f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d102      	bne.n	80067dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067d6:	7b7b      	ldrb	r3, [r7, #13]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e069      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f0:	e031      	b.n	8006856 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d110      	bne.n	800681a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067fe:	7b3b      	ldrb	r3, [r7, #12]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e055      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006818:	e01d      	b.n	8006856 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d108      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d105      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006826:	7b7b      	ldrb	r3, [r7, #13]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d102      	bne.n	8006832 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800682c:	7b3b      	ldrb	r3, [r7, #12]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d001      	beq.n	8006836 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e03e      	b.n	80068b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_TIM_Encoder_Start+0xc4>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b04      	cmp	r3, #4
 8006860:	d008      	beq.n	8006874 <HAL_TIM_Encoder_Start+0xd4>
 8006862:	e00f      	b.n	8006884 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2201      	movs	r2, #1
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fd65 	bl	800733c <TIM_CCxChannelCmd>
      break;
 8006872:	e016      	b.n	80068a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2201      	movs	r2, #1
 800687a:	2104      	movs	r1, #4
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fd5d 	bl	800733c <TIM_CCxChannelCmd>
      break;
 8006882:	e00e      	b.n	80068a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2201      	movs	r2, #1
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fd55 	bl	800733c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2201      	movs	r2, #1
 8006898:	2104      	movs	r1, #4
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fd4e 	bl	800733c <TIM_CCxChannelCmd>
      break;
 80068a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0201 	orr.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d122      	bne.n	8006918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d11b      	bne.n	8006918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0202 	mvn.w	r2, #2
 80068e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fa76 	bl	8006df0 <HAL_TIM_IC_CaptureCallback>
 8006904:	e005      	b.n	8006912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa69 	bl	8006dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa78 	bl	8006e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b04      	cmp	r3, #4
 8006924:	d122      	bne.n	800696c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b04      	cmp	r3, #4
 8006932:	d11b      	bne.n	800696c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0204 	mvn.w	r2, #4
 800693c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fa4c 	bl	8006df0 <HAL_TIM_IC_CaptureCallback>
 8006958:	e005      	b.n	8006966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa3f 	bl	8006dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fa4e 	bl	8006e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b08      	cmp	r3, #8
 8006978:	d122      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b08      	cmp	r3, #8
 8006986:	d11b      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0208 	mvn.w	r2, #8
 8006990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2204      	movs	r2, #4
 8006996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa22 	bl	8006df0 <HAL_TIM_IC_CaptureCallback>
 80069ac:	e005      	b.n	80069ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa15 	bl	8006dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fa24 	bl	8006e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b10      	cmp	r3, #16
 80069cc:	d122      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d11b      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0210 	mvn.w	r2, #16
 80069e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2208      	movs	r2, #8
 80069ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9f8 	bl	8006df0 <HAL_TIM_IC_CaptureCallback>
 8006a00:	e005      	b.n	8006a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9eb 	bl	8006dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f9fa 	bl	8006e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d10e      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d107      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0201 	mvn.w	r2, #1
 8006a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fb fb32 	bl	80020a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4a:	2b80      	cmp	r3, #128	; 0x80
 8006a4c:	d10e      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a58:	2b80      	cmp	r3, #128	; 0x80
 8006a5a:	d107      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fcfb 	bl	8007462 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a76:	2b40      	cmp	r3, #64	; 0x40
 8006a78:	d10e      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b40      	cmp	r3, #64	; 0x40
 8006a86:	d107      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f9be 	bl	8006e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d107      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0220 	mvn.w	r2, #32
 8006abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fcc6 	bl	8007450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e0ae      	b.n	8006c48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	f200 809f 	bhi.w	8006c38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b35 	.word	0x08006b35
 8006b04:	08006c39 	.word	0x08006c39
 8006b08:	08006c39 	.word	0x08006c39
 8006b0c:	08006c39 	.word	0x08006c39
 8006b10:	08006b75 	.word	0x08006b75
 8006b14:	08006c39 	.word	0x08006c39
 8006b18:	08006c39 	.word	0x08006c39
 8006b1c:	08006c39 	.word	0x08006c39
 8006b20:	08006bb7 	.word	0x08006bb7
 8006b24:	08006c39 	.word	0x08006c39
 8006b28:	08006c39 	.word	0x08006c39
 8006b2c:	08006c39 	.word	0x08006c39
 8006b30:	08006bf7 	.word	0x08006bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f9e0 	bl	8006f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0208 	orr.w	r2, r2, #8
 8006b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0204 	bic.w	r2, r2, #4
 8006b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6999      	ldr	r1, [r3, #24]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	691a      	ldr	r2, [r3, #16]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	619a      	str	r2, [r3, #24]
      break;
 8006b72:	e064      	b.n	8006c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fa26 	bl	8006fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6999      	ldr	r1, [r3, #24]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	021a      	lsls	r2, r3, #8
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	619a      	str	r2, [r3, #24]
      break;
 8006bb4:	e043      	b.n	8006c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fa6f 	bl	80070a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69da      	ldr	r2, [r3, #28]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0208 	orr.w	r2, r2, #8
 8006bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0204 	bic.w	r2, r2, #4
 8006be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69d9      	ldr	r1, [r3, #28]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	61da      	str	r2, [r3, #28]
      break;
 8006bf4:	e023      	b.n	8006c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fab9 	bl	8007174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69d9      	ldr	r1, [r3, #28]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	021a      	lsls	r2, r3, #8
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	61da      	str	r2, [r3, #28]
      break;
 8006c36:	e002      	b.n	8006c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_TIM_ConfigClockSource+0x1c>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e0b4      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x186>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca4:	d03e      	beq.n	8006d24 <HAL_TIM_ConfigClockSource+0xd4>
 8006ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006caa:	f200 8087 	bhi.w	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
 8006cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb2:	f000 8086 	beq.w	8006dc2 <HAL_TIM_ConfigClockSource+0x172>
 8006cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cba:	d87f      	bhi.n	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b70      	cmp	r3, #112	; 0x70
 8006cbe:	d01a      	beq.n	8006cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8006cc0:	2b70      	cmp	r3, #112	; 0x70
 8006cc2:	d87b      	bhi.n	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
 8006cc4:	2b60      	cmp	r3, #96	; 0x60
 8006cc6:	d050      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0x11a>
 8006cc8:	2b60      	cmp	r3, #96	; 0x60
 8006cca:	d877      	bhi.n	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ccc:	2b50      	cmp	r3, #80	; 0x50
 8006cce:	d03c      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0xfa>
 8006cd0:	2b50      	cmp	r3, #80	; 0x50
 8006cd2:	d873      	bhi.n	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d058      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x13a>
 8006cd8:	2b40      	cmp	r3, #64	; 0x40
 8006cda:	d86f      	bhi.n	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
 8006cdc:	2b30      	cmp	r3, #48	; 0x30
 8006cde:	d064      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x15a>
 8006ce0:	2b30      	cmp	r3, #48	; 0x30
 8006ce2:	d86b      	bhi.n	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d060      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x15a>
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d867      	bhi.n	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d05c      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x15a>
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d05a      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x15a>
 8006cf4:	e062      	b.n	8006dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d06:	f000 fafa 	bl	80072fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	609a      	str	r2, [r3, #8]
      break;
 8006d22:	e04f      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d34:	f000 fae3 	bl	80072fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d46:	609a      	str	r2, [r3, #8]
      break;
 8006d48:	e03c      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d56:	461a      	mov	r2, r3
 8006d58:	f000 fa5a 	bl	8007210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2150      	movs	r1, #80	; 0x50
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fab1 	bl	80072ca <TIM_ITRx_SetConfig>
      break;
 8006d68:	e02c      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d76:	461a      	mov	r2, r3
 8006d78:	f000 fa78 	bl	800726c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2160      	movs	r1, #96	; 0x60
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 faa1 	bl	80072ca <TIM_ITRx_SetConfig>
      break;
 8006d88:	e01c      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d96:	461a      	mov	r2, r3
 8006d98:	f000 fa3a 	bl	8007210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2140      	movs	r1, #64	; 0x40
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fa91 	bl	80072ca <TIM_ITRx_SetConfig>
      break;
 8006da8:	e00c      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f000 fa88 	bl	80072ca <TIM_ITRx_SetConfig>
      break;
 8006dba:	e003      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc0:	e000      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr

08006df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr
	...

08006e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a2d      	ldr	r2, [pc, #180]	; (8006ef0 <TIM_Base_SetConfig+0xc8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00f      	beq.n	8006e60 <TIM_Base_SetConfig+0x38>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d00b      	beq.n	8006e60 <TIM_Base_SetConfig+0x38>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a2a      	ldr	r2, [pc, #168]	; (8006ef4 <TIM_Base_SetConfig+0xcc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d007      	beq.n	8006e60 <TIM_Base_SetConfig+0x38>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a29      	ldr	r2, [pc, #164]	; (8006ef8 <TIM_Base_SetConfig+0xd0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_Base_SetConfig+0x38>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a28      	ldr	r2, [pc, #160]	; (8006efc <TIM_Base_SetConfig+0xd4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d108      	bne.n	8006e72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1e      	ldr	r2, [pc, #120]	; (8006ef0 <TIM_Base_SetConfig+0xc8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_Base_SetConfig+0x72>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e80:	d00b      	beq.n	8006e9a <TIM_Base_SetConfig+0x72>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <TIM_Base_SetConfig+0xcc>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_Base_SetConfig+0x72>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a1a      	ldr	r2, [pc, #104]	; (8006ef8 <TIM_Base_SetConfig+0xd0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_Base_SetConfig+0x72>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a19      	ldr	r2, [pc, #100]	; (8006efc <TIM_Base_SetConfig+0xd4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d108      	bne.n	8006eac <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a07      	ldr	r2, [pc, #28]	; (8006ef0 <TIM_Base_SetConfig+0xc8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d103      	bne.n	8006ee0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	691a      	ldr	r2, [r3, #16]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	615a      	str	r2, [r3, #20]
}
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bc80      	pop	{r7}
 8006eee:	4770      	bx	lr
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	40000800 	.word	0x40000800
 8006efc:	40000c00 	.word	0x40000c00

08006f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	f023 0201 	bic.w	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0303 	bic.w	r3, r3, #3
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f023 0302 	bic.w	r3, r3, #2
 8006f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1c      	ldr	r2, [pc, #112]	; (8006fc8 <TIM_OC1_SetConfig+0xc8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d10c      	bne.n	8006f76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0308 	bic.w	r3, r3, #8
 8006f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f023 0304 	bic.w	r3, r3, #4
 8006f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a13      	ldr	r2, [pc, #76]	; (8006fc8 <TIM_OC1_SetConfig+0xc8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d111      	bne.n	8006fa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	621a      	str	r2, [r3, #32]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40012c00 	.word	0x40012c00

08006fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f023 0210 	bic.w	r2, r3, #16
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f023 0320 	bic.w	r3, r3, #32
 8007016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a1d      	ldr	r2, [pc, #116]	; (800709c <TIM_OC2_SetConfig+0xd0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d10d      	bne.n	8007048 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a14      	ldr	r2, [pc, #80]	; (800709c <TIM_OC2_SetConfig+0xd0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d113      	bne.n	8007078 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800705e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr
 800709c:	40012c00 	.word	0x40012c00

080070a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0303 	bic.w	r3, r3, #3
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a1d      	ldr	r2, [pc, #116]	; (8007170 <TIM_OC3_SetConfig+0xd0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10d      	bne.n	800711a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a14      	ldr	r2, [pc, #80]	; (8007170 <TIM_OC3_SetConfig+0xd0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d113      	bne.n	800714a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	621a      	str	r2, [r3, #32]
}
 8007164:	bf00      	nop
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40012c00 	.word	0x40012c00

08007174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	031b      	lsls	r3, r3, #12
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a0f      	ldr	r2, [pc, #60]	; (800720c <TIM_OC4_SetConfig+0x98>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d109      	bne.n	80071e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	019b      	lsls	r3, r3, #6
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	40012c00 	.word	0x40012c00

08007210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800723a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f023 030a 	bic.w	r3, r3, #10
 800724c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f023 0210 	bic.w	r2, r3, #16
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	031b      	lsls	r3, r3, #12
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f043 0307 	orr.w	r3, r3, #7
 80072ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	609a      	str	r2, [r3, #8]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr

080072fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072fe:	b480      	push	{r7}
 8007300:	b087      	sub	sp, #28
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007318:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	021a      	lsls	r2, r3, #8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	431a      	orrs	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4313      	orrs	r3, r2
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	609a      	str	r2, [r3, #8]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	2201      	movs	r2, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1a      	ldr	r2, [r3, #32]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	43db      	mvns	r3, r3
 800735e:	401a      	ands	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a1a      	ldr	r2, [r3, #32]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 031f 	and.w	r3, r3, #31
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	fa01 f303 	lsl.w	r3, r1, r3
 8007374:	431a      	orrs	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	621a      	str	r2, [r3, #32]
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	bc80      	pop	{r7}
 8007382:	4770      	bx	lr

08007384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007398:	2302      	movs	r3, #2
 800739a:	e04b      	b.n	8007434 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a19      	ldr	r2, [pc, #100]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e8:	d00e      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a15      	ldr	r2, [pc, #84]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d009      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a13      	ldr	r2, [pc, #76]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d004      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a12      	ldr	r2, [pc, #72]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d10c      	bne.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800740e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4313      	orrs	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	40012c00 	.word	0x40012c00
 8007444:	40000400 	.word	0x40000400
 8007448:	40000800 	.word	0x40000800
 800744c:	40000c00 	.word	0x40000c00

08007450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	bc80      	pop	{r7}
 8007460:	4770      	bx	lr

08007462 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr

08007474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e042      	b.n	800750c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fc fd14 	bl	8003ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2224      	movs	r2, #36	; 0x24
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f91d 	bl	80076f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af02      	add	r7, sp, #8
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b20      	cmp	r3, #32
 8007532:	d16d      	bne.n	8007610 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_UART_Transmit+0x2c>
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e066      	b.n	8007612 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2221      	movs	r2, #33	; 0x21
 800754e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007552:	f7fc ffb9 	bl	80044c8 <HAL_GetTick>
 8007556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	88fa      	ldrh	r2, [r7, #6]
 8007562:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756c:	d108      	bne.n	8007580 <HAL_UART_Transmit+0x6c>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d104      	bne.n	8007580 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007576:	2300      	movs	r3, #0
 8007578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	e003      	b.n	8007588 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007584:	2300      	movs	r3, #0
 8007586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007588:	e02a      	b.n	80075e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2200      	movs	r2, #0
 8007592:	2180      	movs	r1, #128	; 0x80
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f840 	bl	800761a <UART_WaitOnFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e036      	b.n	8007612 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	3302      	adds	r3, #2
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	e007      	b.n	80075d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	781a      	ldrb	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	3301      	adds	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1cf      	bne.n	800758a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2140      	movs	r1, #64	; 0x40
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f810 	bl	800761a <UART_WaitOnFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e006      	b.n	8007612 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	e000      	b.n	8007612 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007610:	2302      	movs	r3, #2
  }
}
 8007612:	4618      	mov	r0, r3
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b090      	sub	sp, #64	; 0x40
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	4613      	mov	r3, r2
 8007628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800762a:	e050      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d04c      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0x30>
 800763a:	f7fc ff45 	bl	80044c8 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007646:	429a      	cmp	r2, r3
 8007648:	d241      	bcs.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800766a:	637a      	str	r2, [r7, #52]	; 0x34
 800766c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e5      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3314      	adds	r3, #20
 8007684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	613b      	str	r3, [r7, #16]
   return(result);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	63bb      	str	r3, [r7, #56]	; 0x38
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3314      	adds	r3, #20
 800769c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800769e:	623a      	str	r2, [r7, #32]
 80076a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	69f9      	ldr	r1, [r7, #28]
 80076a4:	6a3a      	ldr	r2, [r7, #32]
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e5      	bne.n	800767e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e00f      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	79fb      	ldrb	r3, [r7, #7]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d09f      	beq.n	800762c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3740      	adds	r7, #64	; 0x40
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007732:	f023 030c 	bic.w	r3, r3, #12
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	430b      	orrs	r3, r1
 800773e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a2c      	ldr	r2, [pc, #176]	; (800780c <UART_SetConfig+0x114>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d103      	bne.n	8007768 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007760:	f7fd ffe6 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	e002      	b.n	800776e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007768:	f7fd ffce 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 800776c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009a      	lsls	r2, r3, #2
 8007778:	441a      	add	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	fbb2 f3f3 	udiv	r3, r2, r3
 8007784:	4a22      	ldr	r2, [pc, #136]	; (8007810 <UART_SetConfig+0x118>)
 8007786:	fba2 2303 	umull	r2, r3, r2, r3
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	0119      	lsls	r1, r3, #4
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009a      	lsls	r2, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80077a4:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <UART_SetConfig+0x118>)
 80077a6:	fba3 0302 	umull	r0, r3, r3, r2
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	2064      	movs	r0, #100	; 0x64
 80077ae:	fb00 f303 	mul.w	r3, r0, r3
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	3332      	adds	r3, #50	; 0x32
 80077b8:	4a15      	ldr	r2, [pc, #84]	; (8007810 <UART_SetConfig+0x118>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077c4:	4419      	add	r1, r3
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009a      	lsls	r2, r3, #2
 80077d0:	441a      	add	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80077dc:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <UART_SetConfig+0x118>)
 80077de:	fba3 0302 	umull	r0, r3, r3, r2
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	2064      	movs	r0, #100	; 0x64
 80077e6:	fb00 f303 	mul.w	r3, r0, r3
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	3332      	adds	r3, #50	; 0x32
 80077f0:	4a07      	ldr	r2, [pc, #28]	; (8007810 <UART_SetConfig+0x118>)
 80077f2:	fba2 2303 	umull	r2, r3, r2, r3
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	f003 020f 	and.w	r2, r3, #15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	440a      	add	r2, r1
 8007802:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40013800 	.word	0x40013800
 8007810:	51eb851f 	.word	0x51eb851f

08007814 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a06      	ldr	r2, [pc, #24]	; (800783c <vApplicationGetIdleTaskMemory+0x28>)
 8007824:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	4a05      	ldr	r2, [pc, #20]	; (8007840 <vApplicationGetIdleTaskMemory+0x2c>)
 800782a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2280      	movs	r2, #128	; 0x80
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr
 800783c:	200006c4 	.word	0x200006c4
 8007840:	20000720 	.word	0x20000720

08007844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4a07      	ldr	r2, [pc, #28]	; (8007870 <vApplicationGetTimerTaskMemory+0x2c>)
 8007854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4a06      	ldr	r2, [pc, #24]	; (8007874 <vApplicationGetTimerTaskMemory+0x30>)
 800785a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007862:	601a      	str	r2, [r3, #0]
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	20000920 	.word	0x20000920
 8007874:	2000097c 	.word	0x2000097c

08007878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f103 0208 	add.w	r2, r3, #8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f04f 32ff 	mov.w	r2, #4294967295
 8007890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f103 0208 	add.w	r2, r3, #8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f103 0208 	add.w	r2, r3, #8
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr

080078b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr

080078ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	601a      	str	r2, [r3, #0]
}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr

08007914 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d103      	bne.n	8007934 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	e00c      	b.n	800794e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3308      	adds	r3, #8
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	e002      	b.n	8007942 <vListInsert+0x2e>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	429a      	cmp	r2, r3
 800794c:	d2f6      	bcs.n	800793c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
}
 800797a:	bf00      	nop
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr

08007984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6892      	ldr	r2, [r2, #8]
 800799a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6852      	ldr	r2, [r2, #4]
 80079a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d103      	bne.n	80079b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	1e5a      	subs	r2, r3, #1
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr
	...

080079d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a02:	f002 f8f3 	bl	8009bec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a12:	fb01 f303 	mul.w	r3, r1, r3
 8007a16:	441a      	add	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	3b01      	subs	r3, #1
 8007a34:	68f9      	ldr	r1, [r7, #12]
 8007a36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a38:	fb01 f303 	mul.w	r3, r1, r3
 8007a3c:	441a      	add	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	22ff      	movs	r2, #255	; 0xff
 8007a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d114      	bne.n	8007a82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01a      	beq.n	8007a96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3310      	adds	r3, #16
 8007a64:	4618      	mov	r0, r3
 8007a66:	f001 f92f 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d012      	beq.n	8007a96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a70:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <xQueueGenericReset+0xcc>)
 8007a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	e009      	b.n	8007a96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3310      	adds	r3, #16
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fef6 	bl	8007878 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3324      	adds	r3, #36	; 0x24
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff fef1 	bl	8007878 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f002 f8d9 	bl	8009c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a9a:	2301      	movs	r3, #1
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	e000ed04 	.word	0xe000ed04

08007aa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08e      	sub	sp, #56	; 0x38
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10a      	bne.n	8007aee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007aea:	bf00      	nop
 8007aec:	e7fe      	b.n	8007aec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <xQueueGenericCreateStatic+0x52>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <xQueueGenericCreateStatic+0x56>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <xQueueGenericCreateStatic+0x58>
 8007afe:	2300      	movs	r3, #0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	623b      	str	r3, [r7, #32]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <xQueueGenericCreateStatic+0x7e>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <xQueueGenericCreateStatic+0x82>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <xQueueGenericCreateStatic+0x84>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10a      	bne.n	8007b46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	61fb      	str	r3, [r7, #28]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b46:	2350      	movs	r3, #80	; 0x50
 8007b48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b50      	cmp	r3, #80	; 0x50
 8007b4e:	d00a      	beq.n	8007b66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	61bb      	str	r3, [r7, #24]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00d      	beq.n	8007b8c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	4613      	mov	r3, r2
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f843 	bl	8007c12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3730      	adds	r7, #48	; 0x30
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b08a      	sub	sp, #40	; 0x28
 8007b9a:	af02      	add	r7, sp, #8
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	613b      	str	r3, [r7, #16]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	e004      	b.n	8007bd6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3350      	adds	r3, #80	; 0x50
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f002 f906 	bl	8009dec <pvPortMalloc>
 8007be0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00f      	beq.n	8007c08 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	3350      	adds	r3, #80	; 0x50
 8007bec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bf6:	79fa      	ldrb	r2, [r7, #7]
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 f805 	bl	8007c12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007c08:	69bb      	ldr	r3, [r7, #24]
	}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	607a      	str	r2, [r7, #4]
 8007c1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e002      	b.n	8007c34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c40:	2101      	movs	r1, #1
 8007c42:	69b8      	ldr	r0, [r7, #24]
 8007c44:	f7ff fec8 	bl	80079d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08e      	sub	sp, #56	; 0x38
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c66:	2300      	movs	r3, #0
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <xQueueGenericSend+0x32>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d103      	bne.n	8007c98 <xQueueGenericSend+0x40>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <xQueueGenericSend+0x44>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <xQueueGenericSend+0x46>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <xQueueGenericSend+0x60>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSend+0x6e>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <xQueueGenericSend+0x72>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericSend+0x74>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	623b      	str	r3, [r7, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ce6:	f001 f9b1 	bl	800904c <xTaskGetSchedulerState>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <xQueueGenericSend+0x9e>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <xQueueGenericSend+0xa2>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <xQueueGenericSend+0xa4>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	61fb      	str	r3, [r7, #28]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d16:	f001 ff69 	bl	8009bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d302      	bcc.n	8007d2c <xQueueGenericSend+0xd4>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d129      	bne.n	8007d80 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d32:	f000 fa07 	bl	8008144 <prvCopyDataToQueue>
 8007d36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d010      	beq.n	8007d62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	3324      	adds	r3, #36	; 0x24
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 ffbf 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d013      	beq.n	8007d78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d50:	4b3f      	ldr	r3, [pc, #252]	; (8007e50 <xQueueGenericSend+0x1f8>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	e00a      	b.n	8007d78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d68:	4b39      	ldr	r3, [pc, #228]	; (8007e50 <xQueueGenericSend+0x1f8>)
 8007d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d78:	f001 ff68 	bl	8009c4c <vPortExitCritical>
				return pdPASS;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e063      	b.n	8007e48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d86:	f001 ff61 	bl	8009c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e05c      	b.n	8007e48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d106      	bne.n	8007da2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d94:	f107 0314 	add.w	r3, r7, #20
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fff9 	bl	8008d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007da2:	f001 ff53 	bl	8009c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007da6:	f000 fd6b 	bl	8008880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007daa:	f001 ff1f 	bl	8009bec <vPortEnterCritical>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007db4:	b25b      	sxtb	r3, r3
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dba:	d103      	bne.n	8007dc4 <xQueueGenericSend+0x16c>
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d103      	bne.n	8007dda <xQueueGenericSend+0x182>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dda:	f001 ff37 	bl	8009c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dde:	1d3a      	adds	r2, r7, #4
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 ffe8 	bl	8008dbc <xTaskCheckForTimeOut>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d124      	bne.n	8007e3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df4:	f000 fa9e 	bl	8008334 <prvIsQueueFull>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d018      	beq.n	8007e30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	3310      	adds	r3, #16
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 ff0e 	bl	8008c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e0e:	f000 fa29 	bl	8008264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e12:	f000 fd43 	bl	800889c <xTaskResumeAll>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f47f af7c 	bne.w	8007d16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <xQueueGenericSend+0x1f8>)
 8007e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	e772      	b.n	8007d16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e32:	f000 fa17 	bl	8008264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e36:	f000 fd31 	bl	800889c <xTaskResumeAll>
 8007e3a:	e76c      	b.n	8007d16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e3e:	f000 fa11 	bl	8008264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e42:	f000 fd2b 	bl	800889c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e46:	2300      	movs	r3, #0
		}
	}
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3738      	adds	r7, #56	; 0x38
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08e      	sub	sp, #56	; 0x38
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <xQueueGenericSendFromISR+0x3c>
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <xQueueGenericSendFromISR+0x40>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e000      	b.n	8007e96 <xQueueGenericSendFromISR+0x42>
 8007e94:	2300      	movs	r3, #0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	623b      	str	r3, [r7, #32]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d103      	bne.n	8007ebe <xQueueGenericSendFromISR+0x6a>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <xQueueGenericSendFromISR+0x6e>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <xQueueGenericSendFromISR+0x70>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	61fb      	str	r3, [r7, #28]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ede:	f001 ff47 	bl	8009d70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ee2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	61ba      	str	r2, [r7, #24]
 8007ef8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007efa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007efc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d302      	bcc.n	8007f10 <xQueueGenericSendFromISR+0xbc>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d12c      	bne.n	8007f6a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f20:	f000 f910 	bl	8008144 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2c:	d112      	bne.n	8007f54 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d016      	beq.n	8007f64 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	3324      	adds	r3, #36	; 0x24
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fec4 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00e      	beq.n	8007f64 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	e007      	b.n	8007f64 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f58:	3301      	adds	r3, #1
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	b25a      	sxtb	r2, r3
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f64:	2301      	movs	r3, #1
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007f68:	e001      	b.n	8007f6e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3738      	adds	r7, #56	; 0x38
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08c      	sub	sp, #48	; 0x30
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <xQueueReceive+0x30>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	623b      	str	r3, [r7, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d103      	bne.n	8007fc2 <xQueueReceive+0x3e>
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <xQueueReceive+0x42>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <xQueueReceive+0x44>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <xQueueReceive+0x5e>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	61fb      	str	r3, [r7, #28]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fe2:	f001 f833 	bl	800904c <xTaskGetSchedulerState>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d102      	bne.n	8007ff2 <xQueueReceive+0x6e>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <xQueueReceive+0x72>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <xQueueReceive+0x74>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <xQueueReceive+0x8e>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	61bb      	str	r3, [r7, #24]
}
 800800e:	bf00      	nop
 8008010:	e7fe      	b.n	8008010 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008012:	f001 fdeb 	bl	8009bec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01f      	beq.n	8008062 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008026:	f000 f8f7 	bl	8008218 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	1e5a      	subs	r2, r3, #1
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00f      	beq.n	800805a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	3310      	adds	r3, #16
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fe42 	bl	8008cc8 <xTaskRemoveFromEventList>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800804a:	4b3d      	ldr	r3, [pc, #244]	; (8008140 <xQueueReceive+0x1bc>)
 800804c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800805a:	f001 fdf7 	bl	8009c4c <vPortExitCritical>
				return pdPASS;
 800805e:	2301      	movs	r3, #1
 8008060:	e069      	b.n	8008136 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008068:	f001 fdf0 	bl	8009c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800806c:	2300      	movs	r3, #0
 800806e:	e062      	b.n	8008136 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d106      	bne.n	8008084 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008076:	f107 0310 	add.w	r3, r7, #16
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fe88 	bl	8008d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008080:	2301      	movs	r3, #1
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008084:	f001 fde2 	bl	8009c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008088:	f000 fbfa 	bl	8008880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800808c:	f001 fdae 	bl	8009bec <vPortEnterCritical>
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008096:	b25b      	sxtb	r3, r3
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809c:	d103      	bne.n	80080a6 <xQueueReceive+0x122>
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ac:	b25b      	sxtb	r3, r3
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d103      	bne.n	80080bc <xQueueReceive+0x138>
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080bc:	f001 fdc6 	bl	8009c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080c0:	1d3a      	adds	r2, r7, #4
 80080c2:	f107 0310 	add.w	r3, r7, #16
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fe77 	bl	8008dbc <xTaskCheckForTimeOut>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d123      	bne.n	800811c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d6:	f000 f917 	bl	8008308 <prvIsQueueEmpty>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d017      	beq.n	8008110 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	3324      	adds	r3, #36	; 0x24
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	4611      	mov	r1, r2
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fd9d 	bl	8008c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f0:	f000 f8b8 	bl	8008264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080f4:	f000 fbd2 	bl	800889c <xTaskResumeAll>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d189      	bne.n	8008012 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80080fe:	4b10      	ldr	r3, [pc, #64]	; (8008140 <xQueueReceive+0x1bc>)
 8008100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	e780      	b.n	8008012 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008112:	f000 f8a7 	bl	8008264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008116:	f000 fbc1 	bl	800889c <xTaskResumeAll>
 800811a:	e77a      	b.n	8008012 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800811c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800811e:	f000 f8a1 	bl	8008264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008122:	f000 fbbb 	bl	800889c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008128:	f000 f8ee 	bl	8008308 <prvIsQueueEmpty>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	f43f af6f 	beq.w	8008012 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008134:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008136:	4618      	mov	r0, r3
 8008138:	3730      	adds	r7, #48	; 0x30
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	e000ed04 	.word	0xe000ed04

08008144 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10d      	bne.n	800817e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d14d      	bne.n	8008206 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 ff8a 	bl	8009088 <xTaskPriorityDisinherit>
 8008174:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	605a      	str	r2, [r3, #4]
 800817c:	e043      	b.n	8008206 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d119      	bne.n	80081b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6898      	ldr	r0, [r3, #8]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	461a      	mov	r2, r3
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	f003 fc4d 	bl	800ba2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	441a      	add	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d32b      	bcc.n	8008206 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	609a      	str	r2, [r3, #8]
 80081b6:	e026      	b.n	8008206 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68d8      	ldr	r0, [r3, #12]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	461a      	mov	r2, r3
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	f003 fc33 	bl	800ba2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	425b      	negs	r3, r3
 80081d2:	441a      	add	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d207      	bcs.n	80081f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	425b      	negs	r3, r3
 80081ee:	441a      	add	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d105      	bne.n	8008206 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3b01      	subs	r3, #1
 8008204:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800820e:	697b      	ldr	r3, [r7, #20]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	441a      	add	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d303      	bcc.n	800824c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68d9      	ldr	r1, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	461a      	mov	r2, r3
 8008256:	6838      	ldr	r0, [r7, #0]
 8008258:	f003 fbe9 	bl	800ba2e <memcpy>
	}
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800826c:	f001 fcbe 	bl	8009bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008276:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008278:	e011      	b.n	800829e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	d012      	beq.n	80082a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3324      	adds	r3, #36	; 0x24
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fd1e 	bl	8008cc8 <xTaskRemoveFromEventList>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008292:	f000 fdf5 	bl	8008e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	3b01      	subs	r3, #1
 800829a:	b2db      	uxtb	r3, r3
 800829c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800829e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dce9      	bgt.n	800827a <prvUnlockQueue+0x16>
 80082a6:	e000      	b.n	80082aa <prvUnlockQueue+0x46>
					break;
 80082a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	22ff      	movs	r2, #255	; 0xff
 80082ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082b2:	f001 fccb 	bl	8009c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082b6:	f001 fc99 	bl	8009bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082c2:	e011      	b.n	80082e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d012      	beq.n	80082f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3310      	adds	r3, #16
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fcf9 	bl	8008cc8 <xTaskRemoveFromEventList>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082dc:	f000 fdd0 	bl	8008e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dce9      	bgt.n	80082c4 <prvUnlockQueue+0x60>
 80082f0:	e000      	b.n	80082f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	22ff      	movs	r2, #255	; 0xff
 80082f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082fc:	f001 fca6 	bl	8009c4c <vPortExitCritical>
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008310:	f001 fc6c 	bl	8009bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800831c:	2301      	movs	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e001      	b.n	8008326 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008326:	f001 fc91 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 800832a:	68fb      	ldr	r3, [r7, #12]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800833c:	f001 fc56 	bl	8009bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008348:	429a      	cmp	r2, r3
 800834a:	d102      	bne.n	8008352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800834c:	2301      	movs	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	e001      	b.n	8008356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008356:	f001 fc79 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 800835a:	68fb      	ldr	r3, [r7, #12]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e014      	b.n	800839e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008374:	4a0e      	ldr	r2, [pc, #56]	; (80083b0 <vQueueAddToRegistry+0x4c>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10b      	bne.n	8008398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008380:	490b      	ldr	r1, [pc, #44]	; (80083b0 <vQueueAddToRegistry+0x4c>)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800838a:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <vQueueAddToRegistry+0x4c>)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4413      	add	r3, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008396:	e006      	b.n	80083a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3301      	adds	r3, #1
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b07      	cmp	r3, #7
 80083a2:	d9e7      	bls.n	8008374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr
 80083b0:	20000d7c 	.word	0x20000d7c

080083b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083c4:	f001 fc12 	bl	8009bec <vPortEnterCritical>
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ce:	b25b      	sxtb	r3, r3
 80083d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d4:	d103      	bne.n	80083de <vQueueWaitForMessageRestricted+0x2a>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ea:	d103      	bne.n	80083f4 <vQueueWaitForMessageRestricted+0x40>
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f4:	f001 fc2a 	bl	8009c4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3324      	adds	r3, #36	; 0x24
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fc31 	bl	8008c70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f7ff ff28 	bl	8008264 <prvUnlockQueue>
	}
 8008414:	bf00      	nop
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08e      	sub	sp, #56	; 0x38
 8008420:	af04      	add	r7, sp, #16
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10a      	bne.n	8008446 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	623b      	str	r3, [r7, #32]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xTaskCreateStatic+0x46>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	61fb      	str	r3, [r7, #28]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008462:	235c      	movs	r3, #92	; 0x5c
 8008464:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	2b5c      	cmp	r3, #92	; 0x5c
 800846a:	d00a      	beq.n	8008482 <xTaskCreateStatic+0x66>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	61bb      	str	r3, [r7, #24]
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01e      	beq.n	80084c6 <xTaskCreateStatic+0xaa>
 8008488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01b      	beq.n	80084c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008496:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	2202      	movs	r2, #2
 800849c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084a0:	2300      	movs	r3, #0
 80084a2:	9303      	str	r3, [sp, #12]
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	9302      	str	r3, [sp, #8]
 80084a8:	f107 0314 	add.w	r3, r7, #20
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f850 	bl	800855e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084c0:	f000 f8d4 	bl	800866c <prvAddNewTaskToReadyList>
 80084c4:	e001      	b.n	80084ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084ca:	697b      	ldr	r3, [r7, #20]
	}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3728      	adds	r7, #40	; 0x28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08c      	sub	sp, #48	; 0x30
 80084d8:	af04      	add	r7, sp, #16
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	4613      	mov	r3, r2
 80084e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fc7f 	bl	8009dec <pvPortMalloc>
 80084ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00e      	beq.n	8008514 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80084f6:	205c      	movs	r0, #92	; 0x5c
 80084f8:	f001 fc78 	bl	8009dec <pvPortMalloc>
 80084fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	631a      	str	r2, [r3, #48]	; 0x30
 800850a:	e005      	b.n	8008518 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800850c:	6978      	ldr	r0, [r7, #20]
 800850e:	f001 fd31 	bl	8009f74 <vPortFree>
 8008512:	e001      	b.n	8008518 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d017      	beq.n	800854e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008526:	88fa      	ldrh	r2, [r7, #6]
 8008528:	2300      	movs	r3, #0
 800852a:	9303      	str	r3, [sp, #12]
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	9302      	str	r3, [sp, #8]
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 f80e 	bl	800855e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008542:	69f8      	ldr	r0, [r7, #28]
 8008544:	f000 f892 	bl	800866c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008548:	2301      	movs	r3, #1
 800854a:	61bb      	str	r3, [r7, #24]
 800854c:	e002      	b.n	8008554 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800854e:	f04f 33ff 	mov.w	r3, #4294967295
 8008552:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008554:	69bb      	ldr	r3, [r7, #24]
	}
 8008556:	4618      	mov	r0, r3
 8008558:	3720      	adds	r7, #32
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b088      	sub	sp, #32
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	461a      	mov	r2, r3
 8008576:	21a5      	movs	r1, #165	; 0xa5
 8008578:	f003 f9b9 	bl	800b8ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008586:	3b01      	subs	r3, #1
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	f023 0307 	bic.w	r3, r3, #7
 8008594:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	617b      	str	r3, [r7, #20]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085b6:	2300      	movs	r3, #0
 80085b8:	61fb      	str	r3, [r7, #28]
 80085ba:	e012      	b.n	80085e2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	7819      	ldrb	r1, [r3, #0]
 80085c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	4413      	add	r3, r2
 80085ca:	3334      	adds	r3, #52	; 0x34
 80085cc:	460a      	mov	r2, r1
 80085ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	4413      	add	r3, r2
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d006      	beq.n	80085ea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	3301      	adds	r3, #1
 80085e0:	61fb      	str	r3, [r7, #28]
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2b0f      	cmp	r3, #15
 80085e6:	d9e9      	bls.n	80085bc <prvInitialiseNewTask+0x5e>
 80085e8:	e000      	b.n	80085ec <prvInitialiseNewTask+0x8e>
		{
			break;
 80085ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	2b37      	cmp	r3, #55	; 0x37
 80085f8:	d901      	bls.n	80085fe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085fa:	2337      	movs	r3, #55	; 0x37
 80085fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008602:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008608:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	2200      	movs	r2, #0
 800860e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	3304      	adds	r3, #4
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff f94e 	bl	80078b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	3318      	adds	r3, #24
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff f949 	bl	80078b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008628:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008638:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	2200      	movs	r2, #0
 800863e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	69b8      	ldr	r0, [r7, #24]
 800864e:	f001 f9dd 	bl	8009a0c <pxPortInitialiseStack>
 8008652:	4602      	mov	r2, r0
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008662:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008664:	bf00      	nop
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008674:	f001 faba 	bl	8009bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008678:	4b2d      	ldr	r3, [pc, #180]	; (8008730 <prvAddNewTaskToReadyList+0xc4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <prvAddNewTaskToReadyList+0xc4>)
 8008680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008682:	4b2c      	ldr	r3, [pc, #176]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d109      	bne.n	800869e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800868a:	4a2a      	ldr	r2, [pc, #168]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008690:	4b27      	ldr	r3, [pc, #156]	; (8008730 <prvAddNewTaskToReadyList+0xc4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d110      	bne.n	80086ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008698:	f000 fc16 	bl	8008ec8 <prvInitialiseTaskLists>
 800869c:	e00d      	b.n	80086ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800869e:	4b26      	ldr	r3, [pc, #152]	; (8008738 <prvAddNewTaskToReadyList+0xcc>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086a6:	4b23      	ldr	r3, [pc, #140]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d802      	bhi.n	80086ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086b4:	4a1f      	ldr	r2, [pc, #124]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086ba:	4b20      	ldr	r3, [pc, #128]	; (800873c <prvAddNewTaskToReadyList+0xd0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3301      	adds	r3, #1
 80086c0:	4a1e      	ldr	r2, [pc, #120]	; (800873c <prvAddNewTaskToReadyList+0xd0>)
 80086c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086c4:	4b1d      	ldr	r3, [pc, #116]	; (800873c <prvAddNewTaskToReadyList+0xd0>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d0:	4b1b      	ldr	r3, [pc, #108]	; (8008740 <prvAddNewTaskToReadyList+0xd4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d903      	bls.n	80086e0 <prvAddNewTaskToReadyList+0x74>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	4a18      	ldr	r2, [pc, #96]	; (8008740 <prvAddNewTaskToReadyList+0xd4>)
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4a15      	ldr	r2, [pc, #84]	; (8008744 <prvAddNewTaskToReadyList+0xd8>)
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f7ff f8e9 	bl	80078ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086fc:	f001 faa6 	bl	8009c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008700:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <prvAddNewTaskToReadyList+0xcc>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00e      	beq.n	8008726 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	429a      	cmp	r2, r3
 8008714:	d207      	bcs.n	8008726 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008716:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <prvAddNewTaskToReadyList+0xdc>)
 8008718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20001290 	.word	0x20001290
 8008734:	20000dbc 	.word	0x20000dbc
 8008738:	2000129c 	.word	0x2000129c
 800873c:	200012ac 	.word	0x200012ac
 8008740:	20001298 	.word	0x20001298
 8008744:	20000dc0 	.word	0x20000dc0
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d017      	beq.n	800878e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800875e:	4b13      	ldr	r3, [pc, #76]	; (80087ac <vTaskDelay+0x60>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <vTaskDelay+0x30>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60bb      	str	r3, [r7, #8]
}
 8008778:	bf00      	nop
 800877a:	e7fe      	b.n	800877a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800877c:	f000 f880 	bl	8008880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008780:	2100      	movs	r1, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fddc 	bl	8009340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008788:	f000 f888 	bl	800889c <xTaskResumeAll>
 800878c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d107      	bne.n	80087a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008794:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <vTaskDelay+0x64>)
 8008796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200012b8 	.word	0x200012b8
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087c2:	463a      	mov	r2, r7
 80087c4:	1d39      	adds	r1, r7, #4
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff f822 	bl	8007814 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	9202      	str	r2, [sp, #8]
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	2300      	movs	r3, #0
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	2300      	movs	r3, #0
 80087e0:	460a      	mov	r2, r1
 80087e2:	4921      	ldr	r1, [pc, #132]	; (8008868 <vTaskStartScheduler+0xb4>)
 80087e4:	4821      	ldr	r0, [pc, #132]	; (800886c <vTaskStartScheduler+0xb8>)
 80087e6:	f7ff fe19 	bl	800841c <xTaskCreateStatic>
 80087ea:	4603      	mov	r3, r0
 80087ec:	4a20      	ldr	r2, [pc, #128]	; (8008870 <vTaskStartScheduler+0xbc>)
 80087ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087f0:	4b1f      	ldr	r3, [pc, #124]	; (8008870 <vTaskStartScheduler+0xbc>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087f8:	2301      	movs	r3, #1
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e001      	b.n	8008802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d102      	bne.n	800880e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008808:	f000 fdee 	bl	80093e8 <xTimerCreateTimerTask>
 800880c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d116      	bne.n	8008842 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	613b      	str	r3, [r7, #16]
}
 8008826:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008828:	4b12      	ldr	r3, [pc, #72]	; (8008874 <vTaskStartScheduler+0xc0>)
 800882a:	f04f 32ff 	mov.w	r2, #4294967295
 800882e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008830:	4b11      	ldr	r3, [pc, #68]	; (8008878 <vTaskStartScheduler+0xc4>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <vTaskStartScheduler+0xc8>)
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800883c:	f001 f964 	bl	8009b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008840:	e00e      	b.n	8008860 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008848:	d10a      	bne.n	8008860 <vTaskStartScheduler+0xac>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	60fb      	str	r3, [r7, #12]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <vTaskStartScheduler+0xaa>
}
 8008860:	bf00      	nop
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	0800e458 	.word	0x0800e458
 800886c:	08008e99 	.word	0x08008e99
 8008870:	200012b4 	.word	0x200012b4
 8008874:	200012b0 	.word	0x200012b0
 8008878:	2000129c 	.word	0x2000129c
 800887c:	20001294 	.word	0x20001294

08008880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <vTaskSuspendAll+0x18>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3301      	adds	r3, #1
 800888a:	4a03      	ldr	r2, [pc, #12]	; (8008898 <vTaskSuspendAll+0x18>)
 800888c:	6013      	str	r3, [r2, #0]
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	200012b8 	.word	0x200012b8

0800889c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088aa:	4b42      	ldr	r3, [pc, #264]	; (80089b4 <xTaskResumeAll+0x118>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	603b      	str	r3, [r7, #0]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088c8:	f001 f990 	bl	8009bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088cc:	4b39      	ldr	r3, [pc, #228]	; (80089b4 <xTaskResumeAll+0x118>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	4a38      	ldr	r2, [pc, #224]	; (80089b4 <xTaskResumeAll+0x118>)
 80088d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088d6:	4b37      	ldr	r3, [pc, #220]	; (80089b4 <xTaskResumeAll+0x118>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d162      	bne.n	80089a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088de:	4b36      	ldr	r3, [pc, #216]	; (80089b8 <xTaskResumeAll+0x11c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d05e      	beq.n	80089a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088e6:	e02f      	b.n	8008948 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80088e8:	4b34      	ldr	r3, [pc, #208]	; (80089bc <xTaskResumeAll+0x120>)
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3318      	adds	r3, #24
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff f845 	bl	8007984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f840 	bl	8007984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008908:	4b2d      	ldr	r3, [pc, #180]	; (80089c0 <xTaskResumeAll+0x124>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d903      	bls.n	8008918 <xTaskResumeAll+0x7c>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	4a2a      	ldr	r2, [pc, #168]	; (80089c0 <xTaskResumeAll+0x124>)
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4a27      	ldr	r2, [pc, #156]	; (80089c4 <xTaskResumeAll+0x128>)
 8008926:	441a      	add	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f7fe ffcd 	bl	80078ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008938:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <xTaskResumeAll+0x12c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	429a      	cmp	r2, r3
 8008940:	d302      	bcc.n	8008948 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008942:	4b22      	ldr	r3, [pc, #136]	; (80089cc <xTaskResumeAll+0x130>)
 8008944:	2201      	movs	r2, #1
 8008946:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008948:	4b1c      	ldr	r3, [pc, #112]	; (80089bc <xTaskResumeAll+0x120>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1cb      	bne.n	80088e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008956:	f000 fb55 	bl	8009004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800895a:	4b1d      	ldr	r3, [pc, #116]	; (80089d0 <xTaskResumeAll+0x134>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d010      	beq.n	8008988 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008966:	f000 f845 	bl	80089f4 <xTaskIncrementTick>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008970:	4b16      	ldr	r3, [pc, #88]	; (80089cc <xTaskResumeAll+0x130>)
 8008972:	2201      	movs	r2, #1
 8008974:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	3b01      	subs	r3, #1
 800897a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008982:	4b13      	ldr	r3, [pc, #76]	; (80089d0 <xTaskResumeAll+0x134>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008988:	4b10      	ldr	r3, [pc, #64]	; (80089cc <xTaskResumeAll+0x130>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <xTaskResumeAll+0x138>)
 8008996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089a4:	f001 f952 	bl	8009c4c <vPortExitCritical>

	return xAlreadyYielded;
 80089a8:	68bb      	ldr	r3, [r7, #8]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	200012b8 	.word	0x200012b8
 80089b8:	20001290 	.word	0x20001290
 80089bc:	20001250 	.word	0x20001250
 80089c0:	20001298 	.word	0x20001298
 80089c4:	20000dc0 	.word	0x20000dc0
 80089c8:	20000dbc 	.word	0x20000dbc
 80089cc:	200012a4 	.word	0x200012a4
 80089d0:	200012a0 	.word	0x200012a0
 80089d4:	e000ed04 	.word	0xe000ed04

080089d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089de:	4b04      	ldr	r3, [pc, #16]	; (80089f0 <xTaskGetTickCount+0x18>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089e4:	687b      	ldr	r3, [r7, #4]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr
 80089f0:	20001294 	.word	0x20001294

080089f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089fe:	4b51      	ldr	r3, [pc, #324]	; (8008b44 <xTaskIncrementTick+0x150>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 808e 	bne.w	8008b24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a08:	4b4f      	ldr	r3, [pc, #316]	; (8008b48 <xTaskIncrementTick+0x154>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a10:	4a4d      	ldr	r2, [pc, #308]	; (8008b48 <xTaskIncrementTick+0x154>)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d120      	bne.n	8008a5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a1c:	4b4b      	ldr	r3, [pc, #300]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <xTaskIncrementTick+0x48>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	603b      	str	r3, [r7, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <xTaskIncrementTick+0x46>
 8008a3c:	4b43      	ldr	r3, [pc, #268]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	4b43      	ldr	r3, [pc, #268]	; (8008b50 <xTaskIncrementTick+0x15c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a41      	ldr	r2, [pc, #260]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	4a41      	ldr	r2, [pc, #260]	; (8008b50 <xTaskIncrementTick+0x15c>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	4b40      	ldr	r3, [pc, #256]	; (8008b54 <xTaskIncrementTick+0x160>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3301      	adds	r3, #1
 8008a56:	4a3f      	ldr	r2, [pc, #252]	; (8008b54 <xTaskIncrementTick+0x160>)
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	f000 fad3 	bl	8009004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a5e:	4b3e      	ldr	r3, [pc, #248]	; (8008b58 <xTaskIncrementTick+0x164>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d34e      	bcc.n	8008b06 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a68:	4b38      	ldr	r3, [pc, #224]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <xTaskIncrementTick+0x82>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <xTaskIncrementTick+0x84>
 8008a76:	2300      	movs	r3, #0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7c:	4b36      	ldr	r3, [pc, #216]	; (8008b58 <xTaskIncrementTick+0x164>)
 8008a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a82:	601a      	str	r2, [r3, #0]
					break;
 8008a84:	e03f      	b.n	8008b06 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a86:	4b31      	ldr	r3, [pc, #196]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d203      	bcs.n	8008aa6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a9e:	4a2e      	ldr	r2, [pc, #184]	; (8008b58 <xTaskIncrementTick+0x164>)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6013      	str	r3, [r2, #0]
						break;
 8008aa4:	e02f      	b.n	8008b06 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe ff6a 	bl	8007984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	3318      	adds	r3, #24
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe ff61 	bl	8007984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac6:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <xTaskIncrementTick+0x168>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d903      	bls.n	8008ad6 <xTaskIncrementTick+0xe2>
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	4a22      	ldr	r2, [pc, #136]	; (8008b5c <xTaskIncrementTick+0x168>)
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4a1f      	ldr	r2, [pc, #124]	; (8008b60 <xTaskIncrementTick+0x16c>)
 8008ae4:	441a      	add	r2, r3
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7fe feee 	bl	80078ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af6:	4b1b      	ldr	r3, [pc, #108]	; (8008b64 <xTaskIncrementTick+0x170>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d3b3      	bcc.n	8008a68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b04:	e7b0      	b.n	8008a68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b06:	4b17      	ldr	r3, [pc, #92]	; (8008b64 <xTaskIncrementTick+0x170>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0c:	4914      	ldr	r1, [pc, #80]	; (8008b60 <xTaskIncrementTick+0x16c>)
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	440b      	add	r3, r1
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d907      	bls.n	8008b2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	e004      	b.n	8008b2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b24:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <xTaskIncrementTick+0x174>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	4a0f      	ldr	r2, [pc, #60]	; (8008b68 <xTaskIncrementTick+0x174>)
 8008b2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b2e:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <xTaskIncrementTick+0x178>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b3a:	697b      	ldr	r3, [r7, #20]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3718      	adds	r7, #24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200012b8 	.word	0x200012b8
 8008b48:	20001294 	.word	0x20001294
 8008b4c:	20001248 	.word	0x20001248
 8008b50:	2000124c 	.word	0x2000124c
 8008b54:	200012a8 	.word	0x200012a8
 8008b58:	200012b0 	.word	0x200012b0
 8008b5c:	20001298 	.word	0x20001298
 8008b60:	20000dc0 	.word	0x20000dc0
 8008b64:	20000dbc 	.word	0x20000dbc
 8008b68:	200012a0 	.word	0x200012a0
 8008b6c:	200012a4 	.word	0x200012a4

08008b70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b76:	4b27      	ldr	r3, [pc, #156]	; (8008c14 <vTaskSwitchContext+0xa4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b7e:	4b26      	ldr	r3, [pc, #152]	; (8008c18 <vTaskSwitchContext+0xa8>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b84:	e041      	b.n	8008c0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008b86:	4b24      	ldr	r3, [pc, #144]	; (8008c18 <vTaskSwitchContext+0xa8>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b8c:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <vTaskSwitchContext+0xac>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	e010      	b.n	8008bb6 <vTaskSwitchContext+0x46>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	607b      	str	r3, [r7, #4]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vTaskSwitchContext+0x3e>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	491a      	ldr	r1, [pc, #104]	; (8008c20 <vTaskSwitchContext+0xb0>)
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	440b      	add	r3, r1
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0e4      	beq.n	8008b94 <vTaskSwitchContext+0x24>
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4a12      	ldr	r2, [pc, #72]	; (8008c20 <vTaskSwitchContext+0xb0>)
 8008bd6:	4413      	add	r3, r2
 8008bd8:	60bb      	str	r3, [r7, #8]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	605a      	str	r2, [r3, #4]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	3308      	adds	r3, #8
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d104      	bne.n	8008bfa <vTaskSwitchContext+0x8a>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	4a08      	ldr	r2, [pc, #32]	; (8008c24 <vTaskSwitchContext+0xb4>)
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	4a05      	ldr	r2, [pc, #20]	; (8008c1c <vTaskSwitchContext+0xac>)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6013      	str	r3, [r2, #0]
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr
 8008c14:	200012b8 	.word	0x200012b8
 8008c18:	200012a4 	.word	0x200012a4
 8008c1c:	20001298 	.word	0x20001298
 8008c20:	20000dc0 	.word	0x20000dc0
 8008c24:	20000dbc 	.word	0x20000dbc

08008c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	60fb      	str	r3, [r7, #12]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <vTaskPlaceOnEventList+0x44>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3318      	adds	r3, #24
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fe fe5c 	bl	8007914 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	6838      	ldr	r0, [r7, #0]
 8008c60:	f000 fb6e 	bl	8009340 <prvAddCurrentTaskToDelayedList>
}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20000dbc 	.word	0x20000dbc

08008c70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	617b      	str	r3, [r7, #20]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3318      	adds	r3, #24
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7fe fe14 	bl	80078ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008cac:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	68b8      	ldr	r0, [r7, #8]
 8008cb6:	f000 fb43 	bl	8009340 <prvAddCurrentTaskToDelayedList>
	}
 8008cba:	bf00      	nop
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000dbc 	.word	0x20000dbc

08008cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	60fb      	str	r3, [r7, #12]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3318      	adds	r3, #24
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fe43 	bl	8007984 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cfe:	4b1e      	ldr	r3, [pc, #120]	; (8008d78 <xTaskRemoveFromEventList+0xb0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d11d      	bne.n	8008d42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe fe3a 	bl	8007984 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4b19      	ldr	r3, [pc, #100]	; (8008d7c <xTaskRemoveFromEventList+0xb4>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d903      	bls.n	8008d24 <xTaskRemoveFromEventList+0x5c>
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a16      	ldr	r2, [pc, #88]	; (8008d7c <xTaskRemoveFromEventList+0xb4>)
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4a13      	ldr	r2, [pc, #76]	; (8008d80 <xTaskRemoveFromEventList+0xb8>)
 8008d32:	441a      	add	r2, r3
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe fdc7 	bl	80078ce <vListInsertEnd>
 8008d40:	e005      	b.n	8008d4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	3318      	adds	r3, #24
 8008d46:	4619      	mov	r1, r3
 8008d48:	480e      	ldr	r0, [pc, #56]	; (8008d84 <xTaskRemoveFromEventList+0xbc>)
 8008d4a:	f7fe fdc0 	bl	80078ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d52:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <xTaskRemoveFromEventList+0xc0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d905      	bls.n	8008d68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d60:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <xTaskRemoveFromEventList+0xc4>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	e001      	b.n	8008d6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008d6c:	697b      	ldr	r3, [r7, #20]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	200012b8 	.word	0x200012b8
 8008d7c:	20001298 	.word	0x20001298
 8008d80:	20000dc0 	.word	0x20000dc0
 8008d84:	20001250 	.word	0x20001250
 8008d88:	20000dbc 	.word	0x20000dbc
 8008d8c:	200012a4 	.word	0x200012a4

08008d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d98:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <vTaskInternalSetTimeOutState+0x24>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008da0:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <vTaskInternalSetTimeOutState+0x28>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	605a      	str	r2, [r3, #4]
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	200012a8 	.word	0x200012a8
 8008db8:	20001294 	.word	0x20001294

08008dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	613b      	str	r3, [r7, #16]
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	60fb      	str	r3, [r7, #12]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008dfe:	f000 fef5 	bl	8009bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e02:	4b1d      	ldr	r3, [pc, #116]	; (8008e78 <xTaskCheckForTimeOut+0xbc>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d102      	bne.n	8008e22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	e023      	b.n	8008e6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <xTaskCheckForTimeOut+0xc0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d007      	beq.n	8008e3e <xTaskCheckForTimeOut+0x82>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d302      	bcc.n	8008e3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	e015      	b.n	8008e6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d20b      	bcs.n	8008e60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	1ad2      	subs	r2, r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff ff9b 	bl	8008d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61fb      	str	r3, [r7, #28]
 8008e5e:	e004      	b.n	8008e6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e66:	2301      	movs	r3, #1
 8008e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e6a:	f000 feef 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3720      	adds	r7, #32
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20001294 	.word	0x20001294
 8008e7c:	200012a8 	.word	0x200012a8

08008e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e80:	b480      	push	{r7}
 8008e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e84:	4b03      	ldr	r3, [pc, #12]	; (8008e94 <vTaskMissedYield+0x14>)
 8008e86:	2201      	movs	r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
}
 8008e8a:	bf00      	nop
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bc80      	pop	{r7}
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	200012a4 	.word	0x200012a4

08008e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ea0:	f000 f852 	bl	8008f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <prvIdleTask+0x28>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d9f9      	bls.n	8008ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <prvIdleTask+0x2c>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ebc:	e7f0      	b.n	8008ea0 <prvIdleTask+0x8>
 8008ebe:	bf00      	nop
 8008ec0:	20000dc0 	.word	0x20000dc0
 8008ec4:	e000ed04 	.word	0xe000ed04

08008ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ece:	2300      	movs	r3, #0
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	e00c      	b.n	8008eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4a12      	ldr	r2, [pc, #72]	; (8008f28 <prvInitialiseTaskLists+0x60>)
 8008ee0:	4413      	add	r3, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe fcc8 	bl	8007878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3301      	adds	r3, #1
 8008eec:	607b      	str	r3, [r7, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b37      	cmp	r3, #55	; 0x37
 8008ef2:	d9ef      	bls.n	8008ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ef4:	480d      	ldr	r0, [pc, #52]	; (8008f2c <prvInitialiseTaskLists+0x64>)
 8008ef6:	f7fe fcbf 	bl	8007878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008efa:	480d      	ldr	r0, [pc, #52]	; (8008f30 <prvInitialiseTaskLists+0x68>)
 8008efc:	f7fe fcbc 	bl	8007878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f00:	480c      	ldr	r0, [pc, #48]	; (8008f34 <prvInitialiseTaskLists+0x6c>)
 8008f02:	f7fe fcb9 	bl	8007878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f06:	480c      	ldr	r0, [pc, #48]	; (8008f38 <prvInitialiseTaskLists+0x70>)
 8008f08:	f7fe fcb6 	bl	8007878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f0c:	480b      	ldr	r0, [pc, #44]	; (8008f3c <prvInitialiseTaskLists+0x74>)
 8008f0e:	f7fe fcb3 	bl	8007878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <prvInitialiseTaskLists+0x78>)
 8008f14:	4a05      	ldr	r2, [pc, #20]	; (8008f2c <prvInitialiseTaskLists+0x64>)
 8008f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <prvInitialiseTaskLists+0x7c>)
 8008f1a:	4a05      	ldr	r2, [pc, #20]	; (8008f30 <prvInitialiseTaskLists+0x68>)
 8008f1c:	601a      	str	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000dc0 	.word	0x20000dc0
 8008f2c:	20001220 	.word	0x20001220
 8008f30:	20001234 	.word	0x20001234
 8008f34:	20001250 	.word	0x20001250
 8008f38:	20001264 	.word	0x20001264
 8008f3c:	2000127c 	.word	0x2000127c
 8008f40:	20001248 	.word	0x20001248
 8008f44:	2000124c 	.word	0x2000124c

08008f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f4e:	e019      	b.n	8008f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f50:	f000 fe4c 	bl	8009bec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008f54:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <prvCheckTasksWaitingTermination+0x50>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fd0f 	bl	8007984 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f66:	4b0d      	ldr	r3, [pc, #52]	; (8008f9c <prvCheckTasksWaitingTermination+0x54>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	4a0b      	ldr	r2, [pc, #44]	; (8008f9c <prvCheckTasksWaitingTermination+0x54>)
 8008f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <prvCheckTasksWaitingTermination+0x58>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4a0a      	ldr	r2, [pc, #40]	; (8008fa0 <prvCheckTasksWaitingTermination+0x58>)
 8008f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f7a:	f000 fe67 	bl	8009c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f810 	bl	8008fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f84:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <prvCheckTasksWaitingTermination+0x58>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e1      	bne.n	8008f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20001264 	.word	0x20001264
 8008f9c:	20001290 	.word	0x20001290
 8008fa0:	20001278 	.word	0x20001278

08008fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d108      	bne.n	8008fc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 ffda 	bl	8009f74 <vPortFree>
				vPortFree( pxTCB );
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 ffd7 	bl	8009f74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fc6:	e018      	b.n	8008ffa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d103      	bne.n	8008fda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 ffce 	bl	8009f74 <vPortFree>
	}
 8008fd8:	e00f      	b.n	8008ffa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d00a      	beq.n	8008ffa <prvDeleteTCB+0x56>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	60fb      	str	r3, [r7, #12]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <prvDeleteTCB+0x54>
	}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800900a:	4b0e      	ldr	r3, [pc, #56]	; (8009044 <prvResetNextTaskUnblockTime+0x40>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <prvResetNextTaskUnblockTime+0x14>
 8009014:	2301      	movs	r3, #1
 8009016:	e000      	b.n	800901a <prvResetNextTaskUnblockTime+0x16>
 8009018:	2300      	movs	r3, #0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d004      	beq.n	8009028 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800901e:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <prvResetNextTaskUnblockTime+0x44>)
 8009020:	f04f 32ff 	mov.w	r2, #4294967295
 8009024:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009026:	e008      	b.n	800903a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <prvResetNextTaskUnblockTime+0x40>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	4a04      	ldr	r2, [pc, #16]	; (8009048 <prvResetNextTaskUnblockTime+0x44>)
 8009038:	6013      	str	r3, [r2, #0]
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr
 8009044:	20001248 	.word	0x20001248
 8009048:	200012b0 	.word	0x200012b0

0800904c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009052:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <xTaskGetSchedulerState+0x34>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d102      	bne.n	8009060 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800905a:	2301      	movs	r3, #1
 800905c:	607b      	str	r3, [r7, #4]
 800905e:	e008      	b.n	8009072 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009060:	4b08      	ldr	r3, [pc, #32]	; (8009084 <xTaskGetSchedulerState+0x38>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009068:	2302      	movs	r3, #2
 800906a:	607b      	str	r3, [r7, #4]
 800906c:	e001      	b.n	8009072 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800906e:	2300      	movs	r3, #0
 8009070:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009072:	687b      	ldr	r3, [r7, #4]
	}
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	bc80      	pop	{r7}
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	2000129c 	.word	0x2000129c
 8009084:	200012b8 	.word	0x200012b8

08009088 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009094:	2300      	movs	r3, #0
 8009096:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d056      	beq.n	800914c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800909e:	4b2e      	ldr	r3, [pc, #184]	; (8009158 <xTaskPriorityDisinherit+0xd0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d00a      	beq.n	80090be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60fb      	str	r3, [r7, #12]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60bb      	str	r3, [r7, #8]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e0:	1e5a      	subs	r2, r3, #1
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d02c      	beq.n	800914c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d128      	bne.n	800914c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fc40 	bl	8007984 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4b0f      	ldr	r3, [pc, #60]	; (800915c <xTaskPriorityDisinherit+0xd4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d903      	bls.n	800912c <xTaskPriorityDisinherit+0xa4>
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	4a0c      	ldr	r2, [pc, #48]	; (800915c <xTaskPriorityDisinherit+0xd4>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a09      	ldr	r2, [pc, #36]	; (8009160 <xTaskPriorityDisinherit+0xd8>)
 800913a:	441a      	add	r2, r3
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	3304      	adds	r3, #4
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe fbc3 	bl	80078ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800914c:	697b      	ldr	r3, [r7, #20]
	}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000dbc 	.word	0x20000dbc
 800915c:	20001298 	.word	0x20001298
 8009160:	20000dc0 	.word	0x20000dc0

08009164 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009172:	f000 fd3b 	bl	8009bec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009176:	4b26      	ldr	r3, [pc, #152]	; (8009210 <xTaskNotifyWait+0xac>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d01a      	beq.n	80091ba <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009184:	4b22      	ldr	r3, [pc, #136]	; (8009210 <xTaskNotifyWait+0xac>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	43d2      	mvns	r2, r2
 800918e:	400a      	ands	r2, r1
 8009190:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009192:	4b1f      	ldr	r3, [pc, #124]	; (8009210 <xTaskNotifyWait+0xac>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00b      	beq.n	80091ba <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091a2:	2101      	movs	r1, #1
 80091a4:	6838      	ldr	r0, [r7, #0]
 80091a6:	f000 f8cb 	bl	8009340 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80091aa:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <xTaskNotifyWait+0xb0>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80091ba:	f000 fd47 	bl	8009c4c <vPortExitCritical>

		taskENTER_CRITICAL();
 80091be:	f000 fd15 	bl	8009bec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <xTaskNotifyWait+0xac>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <xTaskNotifyWait+0xac>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d002      	beq.n	80091e6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	e008      	b.n	80091f8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80091e6:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <xTaskNotifyWait+0xac>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	43d2      	mvns	r2, r2
 80091f0:	400a      	ands	r2, r1
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80091f4:	2301      	movs	r3, #1
 80091f6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091f8:	4b05      	ldr	r3, [pc, #20]	; (8009210 <xTaskNotifyWait+0xac>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8009202:	f000 fd23 	bl	8009c4c <vPortExitCritical>

		return xReturn;
 8009206:	697b      	ldr	r3, [r7, #20]
	}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000dbc 	.word	0x20000dbc
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	61bb      	str	r3, [r7, #24]
}
 800923a:	bf00      	nop
 800923c:	e7fe      	b.n	800923c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800923e:	f000 fd97 	bl	8009d70 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009246:	f3ef 8211 	mrs	r2, BASEPRI
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	617a      	str	r2, [r7, #20]
 800925c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800925e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009260:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009268:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	2202      	movs	r2, #2
 800926e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800927c:	7ffb      	ldrb	r3, [r7, #31]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d147      	bne.n	8009312 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	60fb      	str	r3, [r7, #12]
}
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092a0:	4b21      	ldr	r3, [pc, #132]	; (8009328 <vTaskNotifyGiveFromISR+0x110>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d11d      	bne.n	80092e4 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	3304      	adds	r3, #4
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fb69 	bl	8007984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	4b1d      	ldr	r3, [pc, #116]	; (800932c <vTaskNotifyGiveFromISR+0x114>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d903      	bls.n	80092c6 <vTaskNotifyGiveFromISR+0xae>
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	4a1a      	ldr	r2, [pc, #104]	; (800932c <vTaskNotifyGiveFromISR+0x114>)
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4a17      	ldr	r2, [pc, #92]	; (8009330 <vTaskNotifyGiveFromISR+0x118>)
 80092d4:	441a      	add	r2, r3
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	3304      	adds	r3, #4
 80092da:	4619      	mov	r1, r3
 80092dc:	4610      	mov	r0, r2
 80092de:	f7fe faf6 	bl	80078ce <vListInsertEnd>
 80092e2:	e005      	b.n	80092f0 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	3318      	adds	r3, #24
 80092e8:	4619      	mov	r1, r3
 80092ea:	4812      	ldr	r0, [pc, #72]	; (8009334 <vTaskNotifyGiveFromISR+0x11c>)
 80092ec:	f7fe faef 	bl	80078ce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f4:	4b10      	ldr	r3, [pc, #64]	; (8009338 <vTaskNotifyGiveFromISR+0x120>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d909      	bls.n	8009312 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2201      	movs	r2, #1
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	e002      	b.n	8009312 <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800930c:	4b0b      	ldr	r3, [pc, #44]	; (800933c <vTaskNotifyGiveFromISR+0x124>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f383 8811 	msr	BASEPRI, r3
}
 800931c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800931e:	bf00      	nop
 8009320:	3728      	adds	r7, #40	; 0x28
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	200012b8 	.word	0x200012b8
 800932c:	20001298 	.word	0x20001298
 8009330:	20000dc0 	.word	0x20000dc0
 8009334:	20001250 	.word	0x20001250
 8009338:	20000dbc 	.word	0x20000dbc
 800933c:	200012a4 	.word	0x200012a4

08009340 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800934a:	4b21      	ldr	r3, [pc, #132]	; (80093d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009350:	4b20      	ldr	r3, [pc, #128]	; (80093d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3304      	adds	r3, #4
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fb14 	bl	8007984 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009362:	d10a      	bne.n	800937a <prvAddCurrentTaskToDelayedList+0x3a>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800936a:	4b1a      	ldr	r3, [pc, #104]	; (80093d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3304      	adds	r3, #4
 8009370:	4619      	mov	r1, r3
 8009372:	4819      	ldr	r0, [pc, #100]	; (80093d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009374:	f7fe faab 	bl	80078ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009378:	e026      	b.n	80093c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4413      	add	r3, r2
 8009380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009382:	4b14      	ldr	r3, [pc, #80]	; (80093d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	429a      	cmp	r2, r3
 8009390:	d209      	bcs.n	80093a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009392:	4b12      	ldr	r3, [pc, #72]	; (80093dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b0f      	ldr	r3, [pc, #60]	; (80093d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3304      	adds	r3, #4
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f7fe fab8 	bl	8007914 <vListInsert>
}
 80093a4:	e010      	b.n	80093c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093a6:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7fe faae 	bl	8007914 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093b8:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d202      	bcs.n	80093c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80093c2:	4a08      	ldr	r2, [pc, #32]	; (80093e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	6013      	str	r3, [r2, #0]
}
 80093c8:	bf00      	nop
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20001294 	.word	0x20001294
 80093d4:	20000dbc 	.word	0x20000dbc
 80093d8:	2000127c 	.word	0x2000127c
 80093dc:	2000124c 	.word	0x2000124c
 80093e0:	20001248 	.word	0x20001248
 80093e4:	200012b0 	.word	0x200012b0

080093e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08a      	sub	sp, #40	; 0x28
 80093ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80093f2:	f000 facb 	bl	800998c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093f6:	4b1c      	ldr	r3, [pc, #112]	; (8009468 <xTimerCreateTimerTask+0x80>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d021      	beq.n	8009442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009402:	2300      	movs	r3, #0
 8009404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009406:	1d3a      	adds	r2, r7, #4
 8009408:	f107 0108 	add.w	r1, r7, #8
 800940c:	f107 030c 	add.w	r3, r7, #12
 8009410:	4618      	mov	r0, r3
 8009412:	f7fe fa17 	bl	8007844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	9202      	str	r2, [sp, #8]
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	2302      	movs	r3, #2
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	460a      	mov	r2, r1
 8009428:	4910      	ldr	r1, [pc, #64]	; (800946c <xTimerCreateTimerTask+0x84>)
 800942a:	4811      	ldr	r0, [pc, #68]	; (8009470 <xTimerCreateTimerTask+0x88>)
 800942c:	f7fe fff6 	bl	800841c <xTaskCreateStatic>
 8009430:	4603      	mov	r3, r0
 8009432:	4a10      	ldr	r2, [pc, #64]	; (8009474 <xTimerCreateTimerTask+0x8c>)
 8009434:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009436:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <xTimerCreateTimerTask+0x8c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800943e:	2301      	movs	r3, #1
 8009440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	613b      	str	r3, [r7, #16]
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800945e:	697b      	ldr	r3, [r7, #20]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	200012ec 	.word	0x200012ec
 800946c:	0800e460 	.word	0x0800e460
 8009470:	08009595 	.word	0x08009595
 8009474:	200012f0 	.word	0x200012f0

08009478 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	; 0x28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009486:	2300      	movs	r3, #0
 8009488:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	623b      	str	r3, [r7, #32]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094a6:	4b1a      	ldr	r3, [pc, #104]	; (8009510 <xTimerGenericCommand+0x98>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d02a      	beq.n	8009504 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b05      	cmp	r3, #5
 80094be:	dc18      	bgt.n	80094f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80094c0:	f7ff fdc4 	bl	800904c <xTaskGetSchedulerState>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d109      	bne.n	80094de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80094ca:	4b11      	ldr	r3, [pc, #68]	; (8009510 <xTimerGenericCommand+0x98>)
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	f107 0110 	add.w	r1, r7, #16
 80094d2:	2300      	movs	r3, #0
 80094d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d6:	f7fe fbbf 	bl	8007c58 <xQueueGenericSend>
 80094da:	6278      	str	r0, [r7, #36]	; 0x24
 80094dc:	e012      	b.n	8009504 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80094de:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <xTimerGenericCommand+0x98>)
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f107 0110 	add.w	r1, r7, #16
 80094e6:	2300      	movs	r3, #0
 80094e8:	2200      	movs	r2, #0
 80094ea:	f7fe fbb5 	bl	8007c58 <xQueueGenericSend>
 80094ee:	6278      	str	r0, [r7, #36]	; 0x24
 80094f0:	e008      	b.n	8009504 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80094f2:	4b07      	ldr	r3, [pc, #28]	; (8009510 <xTimerGenericCommand+0x98>)
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	f107 0110 	add.w	r1, r7, #16
 80094fa:	2300      	movs	r3, #0
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	f7fe fca9 	bl	8007e54 <xQueueGenericSendFromISR>
 8009502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009506:	4618      	mov	r0, r3
 8009508:	3728      	adds	r7, #40	; 0x28
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	200012ec 	.word	0x200012ec

08009514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af02      	add	r7, sp, #8
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800951e:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <prvProcessExpiredTimer+0x7c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	3304      	adds	r3, #4
 800952c:	4618      	mov	r0, r3
 800952e:	f7fe fa29 	bl	8007984 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d122      	bne.n	8009580 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	699a      	ldr	r2, [r3, #24]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	18d1      	adds	r1, r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	6978      	ldr	r0, [r7, #20]
 8009548:	f000 f8c8 	bl	80096dc <prvInsertTimerInActiveList>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d016      	beq.n	8009580 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009552:	2300      	movs	r3, #0
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2300      	movs	r3, #0
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	2100      	movs	r1, #0
 800955c:	6978      	ldr	r0, [r7, #20]
 800955e:	f7ff ff8b 	bl	8009478 <xTimerGenericCommand>
 8009562:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	60fb      	str	r3, [r7, #12]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	6978      	ldr	r0, [r7, #20]
 8009586:	4798      	blx	r3
}
 8009588:	bf00      	nop
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	200012e4 	.word	0x200012e4

08009594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800959c:	f107 0308 	add.w	r3, r7, #8
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 f857 	bl	8009654 <prvGetNextExpireTime>
 80095a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4619      	mov	r1, r3
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f803 	bl	80095b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80095b2:	f000 f8d5 	bl	8009760 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095b6:	e7f1      	b.n	800959c <prvTimerTask+0x8>

080095b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80095c2:	f7ff f95d 	bl	8008880 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095c6:	f107 0308 	add.w	r3, r7, #8
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f866 	bl	800969c <prvSampleTimeNow>
 80095d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d130      	bne.n	800963a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <prvProcessTimerOrBlockTask+0x3c>
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d806      	bhi.n	80095f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095e6:	f7ff f959 	bl	800889c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff ff91 	bl	8009514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095f2:	e024      	b.n	800963e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d008      	beq.n	800960c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095fa:	4b13      	ldr	r3, [pc, #76]	; (8009648 <prvProcessTimerOrBlockTask+0x90>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	bf0c      	ite	eq
 8009604:	2301      	moveq	r3, #1
 8009606:	2300      	movne	r3, #0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800960c:	4b0f      	ldr	r3, [pc, #60]	; (800964c <prvProcessTimerOrBlockTask+0x94>)
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4619      	mov	r1, r3
 800961a:	f7fe fecb 	bl	80083b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800961e:	f7ff f93d 	bl	800889c <xTaskResumeAll>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10a      	bne.n	800963e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009628:	4b09      	ldr	r3, [pc, #36]	; (8009650 <prvProcessTimerOrBlockTask+0x98>)
 800962a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	f3bf 8f6f 	isb	sy
}
 8009638:	e001      	b.n	800963e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800963a:	f7ff f92f 	bl	800889c <xTaskResumeAll>
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	200012e8 	.word	0x200012e8
 800964c:	200012ec 	.word	0x200012ec
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800965c:	4b0e      	ldr	r3, [pc, #56]	; (8009698 <prvGetNextExpireTime+0x44>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	bf0c      	ite	eq
 8009666:	2301      	moveq	r3, #1
 8009668:	2300      	movne	r3, #0
 800966a:	b2db      	uxtb	r3, r3
 800966c:	461a      	mov	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d105      	bne.n	8009686 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800967a:	4b07      	ldr	r3, [pc, #28]	; (8009698 <prvGetNextExpireTime+0x44>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e001      	b.n	800968a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800968a:	68fb      	ldr	r3, [r7, #12]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	bc80      	pop	{r7}
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	200012e4 	.word	0x200012e4

0800969c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80096a4:	f7ff f998 	bl	80089d8 <xTaskGetTickCount>
 80096a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80096aa:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <prvSampleTimeNow+0x3c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d205      	bcs.n	80096c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80096b4:	f000 f908 	bl	80098c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	e002      	b.n	80096c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80096c6:	4a04      	ldr	r2, [pc, #16]	; (80096d8 <prvSampleTimeNow+0x3c>)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80096cc:	68fb      	ldr	r3, [r7, #12]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	200012f4 	.word	0x200012f4

080096dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d812      	bhi.n	8009728 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	1ad2      	subs	r2, r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	429a      	cmp	r2, r3
 800970e:	d302      	bcc.n	8009716 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009710:	2301      	movs	r3, #1
 8009712:	617b      	str	r3, [r7, #20]
 8009714:	e01b      	b.n	800974e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009716:	4b10      	ldr	r3, [pc, #64]	; (8009758 <prvInsertTimerInActiveList+0x7c>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7fe f8f7 	bl	8007914 <vListInsert>
 8009726:	e012      	b.n	800974e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d206      	bcs.n	800973e <prvInsertTimerInActiveList+0x62>
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d302      	bcc.n	800973e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009738:	2301      	movs	r3, #1
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	e007      	b.n	800974e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800973e:	4b07      	ldr	r3, [pc, #28]	; (800975c <prvInsertTimerInActiveList+0x80>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7fe f8e3 	bl	8007914 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800974e:	697b      	ldr	r3, [r7, #20]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	200012e8 	.word	0x200012e8
 800975c:	200012e4 	.word	0x200012e4

08009760 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b08e      	sub	sp, #56	; 0x38
 8009764:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009766:	e09d      	b.n	80098a4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	da18      	bge.n	80097a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800976e:	1d3b      	adds	r3, r7, #4
 8009770:	3304      	adds	r3, #4
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10a      	bne.n	8009790 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	61fb      	str	r3, [r7, #28]
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009796:	6850      	ldr	r0, [r2, #4]
 8009798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800979a:	6892      	ldr	r2, [r2, #8]
 800979c:	4611      	mov	r1, r2
 800979e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	db7e      	blt.n	80098a4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d004      	beq.n	80097bc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	3304      	adds	r3, #4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe f8e4 	bl	8007984 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097bc:	463b      	mov	r3, r7
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff ff6c 	bl	800969c <prvSampleTimeNow>
 80097c4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b09      	cmp	r3, #9
 80097ca:	d86a      	bhi.n	80098a2 <prvProcessReceivedCommands+0x142>
 80097cc:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <prvProcessReceivedCommands+0x74>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	080097fd 	.word	0x080097fd
 80097d8:	080097fd 	.word	0x080097fd
 80097dc:	080097fd 	.word	0x080097fd
 80097e0:	080098a5 	.word	0x080098a5
 80097e4:	08009859 	.word	0x08009859
 80097e8:	08009891 	.word	0x08009891
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	080097fd 	.word	0x080097fd
 80097f4:	080098a5 	.word	0x080098a5
 80097f8:	08009859 	.word	0x08009859
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	18d1      	adds	r1, r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800980a:	f7ff ff67 	bl	80096dc <prvInsertTimerInActiveList>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d047      	beq.n	80098a4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800981a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d13f      	bne.n	80098a4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	441a      	add	r2, r3
 800982c:	2300      	movs	r3, #0
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	2300      	movs	r3, #0
 8009832:	2100      	movs	r1, #0
 8009834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009836:	f7ff fe1f 	bl	8009478 <xTimerGenericCommand>
 800983a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d130      	bne.n	80098a4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	61bb      	str	r3, [r7, #24]
}
 8009854:	bf00      	nop
 8009856:	e7fe      	b.n	8009856 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	617b      	str	r3, [r7, #20]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	699a      	ldr	r2, [r3, #24]
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	18d1      	adds	r1, r2, r3
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800988a:	f7ff ff27 	bl	80096dc <prvInsertTimerInActiveList>
					break;
 800988e:	e009      	b.n	80098a4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d104      	bne.n	80098a4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800989a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800989c:	f000 fb6a 	bl	8009f74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098a0:	e000      	b.n	80098a4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80098a2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098a4:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <prvProcessReceivedCommands+0x164>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	1d39      	adds	r1, r7, #4
 80098aa:	2200      	movs	r2, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fb69 	bl	8007f84 <xQueueReceive>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f47f af57 	bne.w	8009768 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80098ba:	bf00      	nop
 80098bc:	bf00      	nop
 80098be:	3730      	adds	r7, #48	; 0x30
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	200012ec 	.word	0x200012ec

080098c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098ce:	e045      	b.n	800995c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098d0:	4b2c      	ldr	r3, [pc, #176]	; (8009984 <prvSwitchTimerLists+0xbc>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098da:	4b2a      	ldr	r3, [pc, #168]	; (8009984 <prvSwitchTimerLists+0xbc>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe f84b 	bl	8007984 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d12e      	bne.n	800995c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	4413      	add	r3, r2
 8009906:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	429a      	cmp	r2, r3
 800990e:	d90e      	bls.n	800992e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800991c:	4b19      	ldr	r3, [pc, #100]	; (8009984 <prvSwitchTimerLists+0xbc>)
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3304      	adds	r3, #4
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fd fff4 	bl	8007914 <vListInsert>
 800992c:	e016      	b.n	800995c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800992e:	2300      	movs	r3, #0
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	2300      	movs	r3, #0
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	2100      	movs	r1, #0
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7ff fd9d 	bl	8009478 <xTimerGenericCommand>
 800993e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10a      	bne.n	800995c <prvSwitchTimerLists+0x94>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	603b      	str	r3, [r7, #0]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800995c:	4b09      	ldr	r3, [pc, #36]	; (8009984 <prvSwitchTimerLists+0xbc>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1b4      	bne.n	80098d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009966:	4b07      	ldr	r3, [pc, #28]	; (8009984 <prvSwitchTimerLists+0xbc>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <prvSwitchTimerLists+0xc0>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a04      	ldr	r2, [pc, #16]	; (8009984 <prvSwitchTimerLists+0xbc>)
 8009972:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009974:	4a04      	ldr	r2, [pc, #16]	; (8009988 <prvSwitchTimerLists+0xc0>)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	6013      	str	r3, [r2, #0]
}
 800997a:	bf00      	nop
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	200012e4 	.word	0x200012e4
 8009988:	200012e8 	.word	0x200012e8

0800998c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009992:	f000 f92b 	bl	8009bec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009996:	4b15      	ldr	r3, [pc, #84]	; (80099ec <prvCheckForValidListAndQueue+0x60>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d120      	bne.n	80099e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800999e:	4814      	ldr	r0, [pc, #80]	; (80099f0 <prvCheckForValidListAndQueue+0x64>)
 80099a0:	f7fd ff6a 	bl	8007878 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099a4:	4813      	ldr	r0, [pc, #76]	; (80099f4 <prvCheckForValidListAndQueue+0x68>)
 80099a6:	f7fd ff67 	bl	8007878 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <prvCheckForValidListAndQueue+0x6c>)
 80099ac:	4a10      	ldr	r2, [pc, #64]	; (80099f0 <prvCheckForValidListAndQueue+0x64>)
 80099ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099b0:	4b12      	ldr	r3, [pc, #72]	; (80099fc <prvCheckForValidListAndQueue+0x70>)
 80099b2:	4a10      	ldr	r2, [pc, #64]	; (80099f4 <prvCheckForValidListAndQueue+0x68>)
 80099b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099b6:	2300      	movs	r3, #0
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	4b11      	ldr	r3, [pc, #68]	; (8009a00 <prvCheckForValidListAndQueue+0x74>)
 80099bc:	4a11      	ldr	r2, [pc, #68]	; (8009a04 <prvCheckForValidListAndQueue+0x78>)
 80099be:	2110      	movs	r1, #16
 80099c0:	200a      	movs	r0, #10
 80099c2:	f7fe f871 	bl	8007aa8 <xQueueGenericCreateStatic>
 80099c6:	4603      	mov	r3, r0
 80099c8:	4a08      	ldr	r2, [pc, #32]	; (80099ec <prvCheckForValidListAndQueue+0x60>)
 80099ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099cc:	4b07      	ldr	r3, [pc, #28]	; (80099ec <prvCheckForValidListAndQueue+0x60>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <prvCheckForValidListAndQueue+0x60>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	490b      	ldr	r1, [pc, #44]	; (8009a08 <prvCheckForValidListAndQueue+0x7c>)
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fcc2 	bl	8008364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099e0:	f000 f934 	bl	8009c4c <vPortExitCritical>
}
 80099e4:	bf00      	nop
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	200012ec 	.word	0x200012ec
 80099f0:	200012bc 	.word	0x200012bc
 80099f4:	200012d0 	.word	0x200012d0
 80099f8:	200012e4 	.word	0x200012e4
 80099fc:	200012e8 	.word	0x200012e8
 8009a00:	20001398 	.word	0x20001398
 8009a04:	200012f8 	.word	0x200012f8
 8009a08:	0800e468 	.word	0x0800e468

08009a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3b04      	subs	r3, #4
 8009a1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3b04      	subs	r3, #4
 8009a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f023 0201 	bic.w	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3b04      	subs	r3, #4
 8009a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a3c:	4a08      	ldr	r2, [pc, #32]	; (8009a60 <pxPortInitialiseStack+0x54>)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3b14      	subs	r3, #20
 8009a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3b20      	subs	r3, #32
 8009a52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a54:	68fb      	ldr	r3, [r7, #12]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bc80      	pop	{r7}
 8009a5e:	4770      	bx	lr
 8009a60:	08009a65 	.word	0x08009a65

08009a64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a6e:	4b12      	ldr	r3, [pc, #72]	; (8009ab8 <prvTaskExitError+0x54>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a76:	d00a      	beq.n	8009a8e <prvTaskExitError+0x2a>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	60fb      	str	r3, [r7, #12]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <prvTaskExitError+0x28>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	60bb      	str	r3, [r7, #8]
}
 8009aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009aa2:	bf00      	nop
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0fc      	beq.n	8009aa4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bc80      	pop	{r7}
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	200000ac 	.word	0x200000ac
 8009abc:	00000000 	.word	0x00000000

08009ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ac0:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <pxCurrentTCBConst2>)
 8009ac2:	6819      	ldr	r1, [r3, #0]
 8009ac4:	6808      	ldr	r0, [r1, #0]
 8009ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009aca:	f380 8809 	msr	PSP, r0
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f04f 0000 	mov.w	r0, #0
 8009ad6:	f380 8811 	msr	BASEPRI, r0
 8009ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8009ade:	4770      	bx	lr

08009ae0 <pxCurrentTCBConst2>:
 8009ae0:	20000dbc 	.word	0x20000dbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop

08009ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009ae8:	4806      	ldr	r0, [pc, #24]	; (8009b04 <prvPortStartFirstTask+0x1c>)
 8009aea:	6800      	ldr	r0, [r0, #0]
 8009aec:	6800      	ldr	r0, [r0, #0]
 8009aee:	f380 8808 	msr	MSP, r0
 8009af2:	b662      	cpsie	i
 8009af4:	b661      	cpsie	f
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	df00      	svc	0
 8009b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b02:	bf00      	nop
 8009b04:	e000ed08 	.word	0xe000ed08

08009b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b0e:	4b32      	ldr	r3, [pc, #200]	; (8009bd8 <xPortStartScheduler+0xd0>)
 8009b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	22ff      	movs	r2, #255	; 0xff
 8009b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	4b2a      	ldr	r3, [pc, #168]	; (8009bdc <xPortStartScheduler+0xd4>)
 8009b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b36:	4b2a      	ldr	r3, [pc, #168]	; (8009be0 <xPortStartScheduler+0xd8>)
 8009b38:	2207      	movs	r2, #7
 8009b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b3c:	e009      	b.n	8009b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009b3e:	4b28      	ldr	r3, [pc, #160]	; (8009be0 <xPortStartScheduler+0xd8>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	4a26      	ldr	r2, [pc, #152]	; (8009be0 <xPortStartScheduler+0xd8>)
 8009b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b5a:	2b80      	cmp	r3, #128	; 0x80
 8009b5c:	d0ef      	beq.n	8009b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b5e:	4b20      	ldr	r3, [pc, #128]	; (8009be0 <xPortStartScheduler+0xd8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f1c3 0307 	rsb	r3, r3, #7
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d00a      	beq.n	8009b80 <xPortStartScheduler+0x78>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	60bb      	str	r3, [r7, #8]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b80:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <xPortStartScheduler+0xd8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	4a16      	ldr	r2, [pc, #88]	; (8009be0 <xPortStartScheduler+0xd8>)
 8009b88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b8a:	4b15      	ldr	r3, [pc, #84]	; (8009be0 <xPortStartScheduler+0xd8>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b92:	4a13      	ldr	r2, [pc, #76]	; (8009be0 <xPortStartScheduler+0xd8>)
 8009b94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b9e:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <xPortStartScheduler+0xdc>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a10      	ldr	r2, [pc, #64]	; (8009be4 <xPortStartScheduler+0xdc>)
 8009ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009baa:	4b0e      	ldr	r3, [pc, #56]	; (8009be4 <xPortStartScheduler+0xdc>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <xPortStartScheduler+0xdc>)
 8009bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009bb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bb6:	f000 f8b9 	bl	8009d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009bba:	4b0b      	ldr	r3, [pc, #44]	; (8009be8 <xPortStartScheduler+0xe0>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bc0:	f7ff ff92 	bl	8009ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bc4:	f7fe ffd4 	bl	8008b70 <vTaskSwitchContext>
	prvTaskExitError();
 8009bc8:	f7ff ff4c 	bl	8009a64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	e000e400 	.word	0xe000e400
 8009bdc:	200013e8 	.word	0x200013e8
 8009be0:	200013ec 	.word	0x200013ec
 8009be4:	e000ed20 	.word	0xe000ed20
 8009be8:	200000ac 	.word	0x200000ac

08009bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	607b      	str	r3, [r7, #4]
}
 8009c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <vPortEnterCritical+0x58>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	4a0d      	ldr	r2, [pc, #52]	; (8009c44 <vPortEnterCritical+0x58>)
 8009c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c10:	4b0c      	ldr	r3, [pc, #48]	; (8009c44 <vPortEnterCritical+0x58>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d10f      	bne.n	8009c38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c18:	4b0b      	ldr	r3, [pc, #44]	; (8009c48 <vPortEnterCritical+0x5c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <vPortEnterCritical+0x4c>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	603b      	str	r3, [r7, #0]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <vPortEnterCritical+0x4a>
	}
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bc80      	pop	{r7}
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	200000ac 	.word	0x200000ac
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c52:	4b11      	ldr	r3, [pc, #68]	; (8009c98 <vPortExitCritical+0x4c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <vPortExitCritical+0x24>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	607b      	str	r3, [r7, #4]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c70:	4b09      	ldr	r3, [pc, #36]	; (8009c98 <vPortExitCritical+0x4c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	4a08      	ldr	r2, [pc, #32]	; (8009c98 <vPortExitCritical+0x4c>)
 8009c78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <vPortExitCritical+0x4c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d105      	bne.n	8009c8e <vPortExitCritical+0x42>
 8009c82:	2300      	movs	r3, #0
 8009c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	f383 8811 	msr	BASEPRI, r3
}
 8009c8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c8e:	bf00      	nop
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bc80      	pop	{r7}
 8009c96:	4770      	bx	lr
 8009c98:	200000ac 	.word	0x200000ac
 8009c9c:	00000000 	.word	0x00000000

08009ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ca0:	f3ef 8009 	mrs	r0, PSP
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4b0d      	ldr	r3, [pc, #52]	; (8009ce0 <pxCurrentTCBConst>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009cb0:	6010      	str	r0, [r2, #0]
 8009cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009cb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009cba:	f380 8811 	msr	BASEPRI, r0
 8009cbe:	f7fe ff57 	bl	8008b70 <vTaskSwitchContext>
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8811 	msr	BASEPRI, r0
 8009cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009cce:	6819      	ldr	r1, [r3, #0]
 8009cd0:	6808      	ldr	r0, [r1, #0]
 8009cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009cd6:	f380 8809 	msr	PSP, r0
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	4770      	bx	lr

08009ce0 <pxCurrentTCBConst>:
 8009ce0:	20000dbc 	.word	0x20000dbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop

08009ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	607b      	str	r3, [r7, #4]
}
 8009d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d02:	f7fe fe77 	bl	80089f4 <xTaskIncrementTick>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d0c:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <SysTick_Handler+0x40>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	2300      	movs	r3, #0
 8009d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f383 8811 	msr	BASEPRI, r3
}
 8009d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	e000ed04 	.word	0xe000ed04

08009d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d30:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <vPortSetupTimerInterrupt+0x30>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d36:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <vPortSetupTimerInterrupt+0x34>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d3c:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <vPortSetupTimerInterrupt+0x38>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <vPortSetupTimerInterrupt+0x3c>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	099b      	lsrs	r3, r3, #6
 8009d48:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <vPortSetupTimerInterrupt+0x40>)
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d4e:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <vPortSetupTimerInterrupt+0x30>)
 8009d50:	2207      	movs	r2, #7
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr
 8009d5c:	e000e010 	.word	0xe000e010
 8009d60:	e000e018 	.word	0xe000e018
 8009d64:	20000064 	.word	0x20000064
 8009d68:	10624dd3 	.word	0x10624dd3
 8009d6c:	e000e014 	.word	0xe000e014

08009d70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d76:	f3ef 8305 	mrs	r3, IPSR
 8009d7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b0f      	cmp	r3, #15
 8009d80:	d914      	bls.n	8009dac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d82:	4a16      	ldr	r2, [pc, #88]	; (8009ddc <vPortValidateInterruptPriority+0x6c>)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d8c:	4b14      	ldr	r3, [pc, #80]	; (8009de0 <vPortValidateInterruptPriority+0x70>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	7afa      	ldrb	r2, [r7, #11]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d20a      	bcs.n	8009dac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	607b      	str	r3, [r7, #4]
}
 8009da8:	bf00      	nop
 8009daa:	e7fe      	b.n	8009daa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <vPortValidateInterruptPriority+0x74>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009db4:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <vPortValidateInterruptPriority+0x78>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d90a      	bls.n	8009dd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	603b      	str	r3, [r7, #0]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <vPortValidateInterruptPriority+0x60>
	}
 8009dd2:	bf00      	nop
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bc80      	pop	{r7}
 8009dda:	4770      	bx	lr
 8009ddc:	e000e3f0 	.word	0xe000e3f0
 8009de0:	200013e8 	.word	0x200013e8
 8009de4:	e000ed0c 	.word	0xe000ed0c
 8009de8:	200013ec 	.word	0x200013ec

08009dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	; 0x28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009df4:	2300      	movs	r3, #0
 8009df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009df8:	f7fe fd42 	bl	8008880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dfc:	4b58      	ldr	r3, [pc, #352]	; (8009f60 <pvPortMalloc+0x174>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e04:	f000 f910 	bl	800a028 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e08:	4b56      	ldr	r3, [pc, #344]	; (8009f64 <pvPortMalloc+0x178>)
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4013      	ands	r3, r2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f040 808e 	bne.w	8009f32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01d      	beq.n	8009e58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e1c:	2208      	movs	r2, #8
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4413      	add	r3, r2
 8009e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f003 0307 	and.w	r3, r3, #7
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d014      	beq.n	8009e58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f023 0307 	bic.w	r3, r3, #7
 8009e34:	3308      	adds	r3, #8
 8009e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <pvPortMalloc+0x6c>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	617b      	str	r3, [r7, #20]
}
 8009e54:	bf00      	nop
 8009e56:	e7fe      	b.n	8009e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d069      	beq.n	8009f32 <pvPortMalloc+0x146>
 8009e5e:	4b42      	ldr	r3, [pc, #264]	; (8009f68 <pvPortMalloc+0x17c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d864      	bhi.n	8009f32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e68:	4b40      	ldr	r3, [pc, #256]	; (8009f6c <pvPortMalloc+0x180>)
 8009e6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e6c:	4b3f      	ldr	r3, [pc, #252]	; (8009f6c <pvPortMalloc+0x180>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e72:	e004      	b.n	8009e7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d903      	bls.n	8009e90 <pvPortMalloc+0xa4>
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1f1      	bne.n	8009e74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e90:	4b33      	ldr	r3, [pc, #204]	; (8009f60 <pvPortMalloc+0x174>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d04b      	beq.n	8009f32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2208      	movs	r2, #8
 8009ea0:	4413      	add	r3, r2
 8009ea2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	1ad2      	subs	r2, r2, r3
 8009eb4:	2308      	movs	r3, #8
 8009eb6:	005b      	lsls	r3, r3, #1
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d91f      	bls.n	8009efc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <pvPortMalloc+0xf8>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	613b      	str	r3, [r7, #16]
}
 8009ee0:	bf00      	nop
 8009ee2:	e7fe      	b.n	8009ee2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	1ad2      	subs	r2, r2, r3
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ef6:	69b8      	ldr	r0, [r7, #24]
 8009ef8:	f000 f8f8 	bl	800a0ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009efc:	4b1a      	ldr	r3, [pc, #104]	; (8009f68 <pvPortMalloc+0x17c>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	4a18      	ldr	r2, [pc, #96]	; (8009f68 <pvPortMalloc+0x17c>)
 8009f08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f0a:	4b17      	ldr	r3, [pc, #92]	; (8009f68 <pvPortMalloc+0x17c>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	4b18      	ldr	r3, [pc, #96]	; (8009f70 <pvPortMalloc+0x184>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d203      	bcs.n	8009f1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f16:	4b14      	ldr	r3, [pc, #80]	; (8009f68 <pvPortMalloc+0x17c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a15      	ldr	r2, [pc, #84]	; (8009f70 <pvPortMalloc+0x184>)
 8009f1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	4b10      	ldr	r3, [pc, #64]	; (8009f64 <pvPortMalloc+0x178>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	431a      	orrs	r2, r3
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	2200      	movs	r2, #0
 8009f30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f32:	f7fe fcb3 	bl	800889c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	f003 0307 	and.w	r3, r3, #7
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <pvPortMalloc+0x16a>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60fb      	str	r3, [r7, #12]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <pvPortMalloc+0x168>
	return pvReturn;
 8009f56:	69fb      	ldr	r3, [r7, #28]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3728      	adds	r7, #40	; 0x28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	200023f8 	.word	0x200023f8
 8009f64:	20002404 	.word	0x20002404
 8009f68:	200023fc 	.word	0x200023fc
 8009f6c:	200023f0 	.word	0x200023f0
 8009f70:	20002400 	.word	0x20002400

08009f74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d048      	beq.n	800a018 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f86:	2308      	movs	r3, #8
 8009f88:	425b      	negs	r3, r3
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	4b21      	ldr	r3, [pc, #132]	; (800a020 <vPortFree+0xac>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <vPortFree+0x44>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	60fb      	str	r3, [r7, #12]
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00a      	beq.n	8009fd6 <vPortFree+0x62>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	60bb      	str	r3, [r7, #8]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	4b11      	ldr	r3, [pc, #68]	; (800a020 <vPortFree+0xac>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4013      	ands	r3, r2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d019      	beq.n	800a018 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d115      	bne.n	800a018 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <vPortFree+0xac>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	43db      	mvns	r3, r3
 8009ff6:	401a      	ands	r2, r3
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ffc:	f7fe fc40 	bl	8008880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	4b07      	ldr	r3, [pc, #28]	; (800a024 <vPortFree+0xb0>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4413      	add	r3, r2
 800a00a:	4a06      	ldr	r2, [pc, #24]	; (800a024 <vPortFree+0xb0>)
 800a00c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a00e:	6938      	ldr	r0, [r7, #16]
 800a010:	f000 f86c 	bl	800a0ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a014:	f7fe fc42 	bl	800889c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a018:	bf00      	nop
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20002404 	.word	0x20002404
 800a024:	200023fc 	.word	0x200023fc

0800a028 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a02e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a032:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a034:	4b27      	ldr	r3, [pc, #156]	; (800a0d4 <prvHeapInit+0xac>)
 800a036:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00c      	beq.n	800a05c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3307      	adds	r3, #7
 800a046:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0307 	bic.w	r3, r3, #7
 800a04e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	4a1f      	ldr	r2, [pc, #124]	; (800a0d4 <prvHeapInit+0xac>)
 800a058:	4413      	add	r3, r2
 800a05a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a060:	4a1d      	ldr	r2, [pc, #116]	; (800a0d8 <prvHeapInit+0xb0>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a066:	4b1c      	ldr	r3, [pc, #112]	; (800a0d8 <prvHeapInit+0xb0>)
 800a068:	2200      	movs	r2, #0
 800a06a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	4413      	add	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a074:	2208      	movs	r2, #8
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 0307 	bic.w	r3, r3, #7
 800a082:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <prvHeapInit+0xb4>)
 800a088:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a08a:	4b14      	ldr	r3, [pc, #80]	; (800a0dc <prvHeapInit+0xb4>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2200      	movs	r2, #0
 800a090:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a092:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <prvHeapInit+0xb4>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	1ad2      	subs	r2, r2, r3
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <prvHeapInit+0xb4>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4a0a      	ldr	r2, [pc, #40]	; (800a0e0 <prvHeapInit+0xb8>)
 800a0b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	4a09      	ldr	r2, [pc, #36]	; (800a0e4 <prvHeapInit+0xbc>)
 800a0be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <prvHeapInit+0xc0>)
 800a0c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0c6:	601a      	str	r2, [r3, #0]
}
 800a0c8:	bf00      	nop
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bc80      	pop	{r7}
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	200013f0 	.word	0x200013f0
 800a0d8:	200023f0 	.word	0x200023f0
 800a0dc:	200023f8 	.word	0x200023f8
 800a0e0:	20002400 	.word	0x20002400
 800a0e4:	200023fc 	.word	0x200023fc
 800a0e8:	20002404 	.word	0x20002404

0800a0ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0f4:	4b27      	ldr	r3, [pc, #156]	; (800a194 <prvInsertBlockIntoFreeList+0xa8>)
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	e002      	b.n	800a100 <prvInsertBlockIntoFreeList+0x14>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	60fb      	str	r3, [r7, #12]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d8f7      	bhi.n	800a0fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	4413      	add	r3, r2
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d108      	bne.n	800a12e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	441a      	add	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	441a      	add	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d118      	bne.n	800a174 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b14      	ldr	r3, [pc, #80]	; (800a198 <prvInsertBlockIntoFreeList+0xac>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d00d      	beq.n	800a16a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	441a      	add	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	e008      	b.n	800a17c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a16a:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <prvInsertBlockIntoFreeList+0xac>)
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	e003      	b.n	800a17c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d002      	beq.n	800a18a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a18a:	bf00      	nop
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	bc80      	pop	{r7}
 800a192:	4770      	bx	lr
 800a194:	200023f0 	.word	0x200023f0
 800a198:	200023f8 	.word	0x200023f8

0800a19c <atof>:
 800a19c:	2100      	movs	r1, #0
 800a19e:	f000 be17 	b.w	800add0 <strtod>

0800a1a2 <sulp>:
 800a1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	4690      	mov	r8, r2
 800a1aa:	f003 fa99 	bl	800d6e0 <__ulp>
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	f1b8 0f00 	cmp.w	r8, #0
 800a1b6:	d011      	beq.n	800a1dc <sulp+0x3a>
 800a1b8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a1bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dd0b      	ble.n	800a1dc <sulp+0x3a>
 800a1c4:	2400      	movs	r4, #0
 800a1c6:	051b      	lsls	r3, r3, #20
 800a1c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a1cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	f7f6 f9f0 	bl	80005b8 <__aeabi_dmul>
 800a1d8:	4604      	mov	r4, r0
 800a1da:	460d      	mov	r5, r1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e4:	0000      	movs	r0, r0
	...

0800a1e8 <_strtod_l>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	b09f      	sub	sp, #124	; 0x7c
 800a1ee:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	921a      	str	r2, [sp, #104]	; 0x68
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	f04f 0800 	mov.w	r8, #0
 800a1fc:	f04f 0900 	mov.w	r9, #0
 800a200:	460a      	mov	r2, r1
 800a202:	9219      	str	r2, [sp, #100]	; 0x64
 800a204:	7811      	ldrb	r1, [r2, #0]
 800a206:	292b      	cmp	r1, #43	; 0x2b
 800a208:	d04a      	beq.n	800a2a0 <_strtod_l+0xb8>
 800a20a:	d838      	bhi.n	800a27e <_strtod_l+0x96>
 800a20c:	290d      	cmp	r1, #13
 800a20e:	d832      	bhi.n	800a276 <_strtod_l+0x8e>
 800a210:	2908      	cmp	r1, #8
 800a212:	d832      	bhi.n	800a27a <_strtod_l+0x92>
 800a214:	2900      	cmp	r1, #0
 800a216:	d03b      	beq.n	800a290 <_strtod_l+0xa8>
 800a218:	2200      	movs	r2, #0
 800a21a:	920e      	str	r2, [sp, #56]	; 0x38
 800a21c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a21e:	7832      	ldrb	r2, [r6, #0]
 800a220:	2a30      	cmp	r2, #48	; 0x30
 800a222:	f040 80b2 	bne.w	800a38a <_strtod_l+0x1a2>
 800a226:	7872      	ldrb	r2, [r6, #1]
 800a228:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a22c:	2a58      	cmp	r2, #88	; 0x58
 800a22e:	d16e      	bne.n	800a30e <_strtod_l+0x126>
 800a230:	9302      	str	r3, [sp, #8]
 800a232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a234:	4620      	mov	r0, r4
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	ab1a      	add	r3, sp, #104	; 0x68
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	4a8c      	ldr	r2, [pc, #560]	; (800a470 <_strtod_l+0x288>)
 800a23e:	ab1b      	add	r3, sp, #108	; 0x6c
 800a240:	a919      	add	r1, sp, #100	; 0x64
 800a242:	f002 fb29 	bl	800c898 <__gethex>
 800a246:	f010 070f 	ands.w	r7, r0, #15
 800a24a:	4605      	mov	r5, r0
 800a24c:	d005      	beq.n	800a25a <_strtod_l+0x72>
 800a24e:	2f06      	cmp	r7, #6
 800a250:	d128      	bne.n	800a2a4 <_strtod_l+0xbc>
 800a252:	2300      	movs	r3, #0
 800a254:	3601      	adds	r6, #1
 800a256:	9619      	str	r6, [sp, #100]	; 0x64
 800a258:	930e      	str	r3, [sp, #56]	; 0x38
 800a25a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f040 85a0 	bne.w	800ada2 <_strtod_l+0xbba>
 800a262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a264:	b1cb      	cbz	r3, 800a29a <_strtod_l+0xb2>
 800a266:	4642      	mov	r2, r8
 800a268:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a26c:	4610      	mov	r0, r2
 800a26e:	4619      	mov	r1, r3
 800a270:	b01f      	add	sp, #124	; 0x7c
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	2920      	cmp	r1, #32
 800a278:	d1ce      	bne.n	800a218 <_strtod_l+0x30>
 800a27a:	3201      	adds	r2, #1
 800a27c:	e7c1      	b.n	800a202 <_strtod_l+0x1a>
 800a27e:	292d      	cmp	r1, #45	; 0x2d
 800a280:	d1ca      	bne.n	800a218 <_strtod_l+0x30>
 800a282:	2101      	movs	r1, #1
 800a284:	910e      	str	r1, [sp, #56]	; 0x38
 800a286:	1c51      	adds	r1, r2, #1
 800a288:	9119      	str	r1, [sp, #100]	; 0x64
 800a28a:	7852      	ldrb	r2, [r2, #1]
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	d1c5      	bne.n	800a21c <_strtod_l+0x34>
 800a290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a292:	9519      	str	r5, [sp, #100]	; 0x64
 800a294:	2b00      	cmp	r3, #0
 800a296:	f040 8582 	bne.w	800ad9e <_strtod_l+0xbb6>
 800a29a:	4642      	mov	r2, r8
 800a29c:	464b      	mov	r3, r9
 800a29e:	e7e5      	b.n	800a26c <_strtod_l+0x84>
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	e7ef      	b.n	800a284 <_strtod_l+0x9c>
 800a2a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a2a6:	b13a      	cbz	r2, 800a2b8 <_strtod_l+0xd0>
 800a2a8:	2135      	movs	r1, #53	; 0x35
 800a2aa:	a81c      	add	r0, sp, #112	; 0x70
 800a2ac:	f003 fb04 	bl	800d8b8 <__copybits>
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2b4:	f002 fee8 	bl	800d088 <_Bfree>
 800a2b8:	3f01      	subs	r7, #1
 800a2ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a2bc:	2f04      	cmp	r7, #4
 800a2be:	d806      	bhi.n	800a2ce <_strtod_l+0xe6>
 800a2c0:	e8df f007 	tbb	[pc, r7]
 800a2c4:	201d0314 	.word	0x201d0314
 800a2c8:	14          	.byte	0x14
 800a2c9:	00          	.byte	0x00
 800a2ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a2ce:	05e9      	lsls	r1, r5, #23
 800a2d0:	bf48      	it	mi
 800a2d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a2d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2da:	0d1b      	lsrs	r3, r3, #20
 800a2dc:	051b      	lsls	r3, r3, #20
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1bb      	bne.n	800a25a <_strtod_l+0x72>
 800a2e2:	f001 fb69 	bl	800b9b8 <__errno>
 800a2e6:	2322      	movs	r3, #34	; 0x22
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	e7b6      	b.n	800a25a <_strtod_l+0x72>
 800a2ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a2f0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a2f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a2fc:	e7e7      	b.n	800a2ce <_strtod_l+0xe6>
 800a2fe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a474 <_strtod_l+0x28c>
 800a302:	e7e4      	b.n	800a2ce <_strtod_l+0xe6>
 800a304:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a308:	f04f 38ff 	mov.w	r8, #4294967295
 800a30c:	e7df      	b.n	800a2ce <_strtod_l+0xe6>
 800a30e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	9219      	str	r2, [sp, #100]	; 0x64
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	2b30      	cmp	r3, #48	; 0x30
 800a318:	d0f9      	beq.n	800a30e <_strtod_l+0x126>
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d09d      	beq.n	800a25a <_strtod_l+0x72>
 800a31e:	2301      	movs	r3, #1
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	220a      	movs	r2, #10
 800a326:	46d3      	mov	fp, sl
 800a328:	9305      	str	r3, [sp, #20]
 800a32a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a32c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a330:	930b      	str	r3, [sp, #44]	; 0x2c
 800a332:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a334:	7806      	ldrb	r6, [r0, #0]
 800a336:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a33a:	b2d9      	uxtb	r1, r3
 800a33c:	2909      	cmp	r1, #9
 800a33e:	d926      	bls.n	800a38e <_strtod_l+0x1a6>
 800a340:	2201      	movs	r2, #1
 800a342:	494d      	ldr	r1, [pc, #308]	; (800a478 <_strtod_l+0x290>)
 800a344:	f001 fadb 	bl	800b8fe <strncmp>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d030      	beq.n	800a3ae <_strtod_l+0x1c6>
 800a34c:	2000      	movs	r0, #0
 800a34e:	4632      	mov	r2, r6
 800a350:	4603      	mov	r3, r0
 800a352:	465e      	mov	r6, fp
 800a354:	9008      	str	r0, [sp, #32]
 800a356:	2a65      	cmp	r2, #101	; 0x65
 800a358:	d001      	beq.n	800a35e <_strtod_l+0x176>
 800a35a:	2a45      	cmp	r2, #69	; 0x45
 800a35c:	d113      	bne.n	800a386 <_strtod_l+0x19e>
 800a35e:	b91e      	cbnz	r6, 800a368 <_strtod_l+0x180>
 800a360:	9a05      	ldr	r2, [sp, #20]
 800a362:	4302      	orrs	r2, r0
 800a364:	d094      	beq.n	800a290 <_strtod_l+0xa8>
 800a366:	2600      	movs	r6, #0
 800a368:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a36a:	1c6a      	adds	r2, r5, #1
 800a36c:	9219      	str	r2, [sp, #100]	; 0x64
 800a36e:	786a      	ldrb	r2, [r5, #1]
 800a370:	2a2b      	cmp	r2, #43	; 0x2b
 800a372:	d074      	beq.n	800a45e <_strtod_l+0x276>
 800a374:	2a2d      	cmp	r2, #45	; 0x2d
 800a376:	d078      	beq.n	800a46a <_strtod_l+0x282>
 800a378:	f04f 0c00 	mov.w	ip, #0
 800a37c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a380:	2909      	cmp	r1, #9
 800a382:	d97f      	bls.n	800a484 <_strtod_l+0x29c>
 800a384:	9519      	str	r5, [sp, #100]	; 0x64
 800a386:	2700      	movs	r7, #0
 800a388:	e09e      	b.n	800a4c8 <_strtod_l+0x2e0>
 800a38a:	2300      	movs	r3, #0
 800a38c:	e7c8      	b.n	800a320 <_strtod_l+0x138>
 800a38e:	f1bb 0f08 	cmp.w	fp, #8
 800a392:	bfd8      	it	le
 800a394:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800a396:	f100 0001 	add.w	r0, r0, #1
 800a39a:	bfd6      	itet	le
 800a39c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3a0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a3a4:	930a      	strle	r3, [sp, #40]	; 0x28
 800a3a6:	f10b 0b01 	add.w	fp, fp, #1
 800a3aa:	9019      	str	r0, [sp, #100]	; 0x64
 800a3ac:	e7c1      	b.n	800a332 <_strtod_l+0x14a>
 800a3ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	9219      	str	r2, [sp, #100]	; 0x64
 800a3b4:	785a      	ldrb	r2, [r3, #1]
 800a3b6:	f1bb 0f00 	cmp.w	fp, #0
 800a3ba:	d037      	beq.n	800a42c <_strtod_l+0x244>
 800a3bc:	465e      	mov	r6, fp
 800a3be:	9008      	str	r0, [sp, #32]
 800a3c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a3c4:	2b09      	cmp	r3, #9
 800a3c6:	d912      	bls.n	800a3ee <_strtod_l+0x206>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e7c4      	b.n	800a356 <_strtod_l+0x16e>
 800a3cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	9219      	str	r2, [sp, #100]	; 0x64
 800a3d4:	785a      	ldrb	r2, [r3, #1]
 800a3d6:	2a30      	cmp	r2, #48	; 0x30
 800a3d8:	d0f8      	beq.n	800a3cc <_strtod_l+0x1e4>
 800a3da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a3de:	2b08      	cmp	r3, #8
 800a3e0:	f200 84e4 	bhi.w	800adac <_strtod_l+0xbc4>
 800a3e4:	9008      	str	r0, [sp, #32]
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3ee:	3a30      	subs	r2, #48	; 0x30
 800a3f0:	f100 0301 	add.w	r3, r0, #1
 800a3f4:	d014      	beq.n	800a420 <_strtod_l+0x238>
 800a3f6:	9908      	ldr	r1, [sp, #32]
 800a3f8:	eb00 0c06 	add.w	ip, r0, r6
 800a3fc:	4419      	add	r1, r3
 800a3fe:	9108      	str	r1, [sp, #32]
 800a400:	4633      	mov	r3, r6
 800a402:	210a      	movs	r1, #10
 800a404:	4563      	cmp	r3, ip
 800a406:	d113      	bne.n	800a430 <_strtod_l+0x248>
 800a408:	1833      	adds	r3, r6, r0
 800a40a:	2b08      	cmp	r3, #8
 800a40c:	f106 0601 	add.w	r6, r6, #1
 800a410:	4406      	add	r6, r0
 800a412:	dc1a      	bgt.n	800a44a <_strtod_l+0x262>
 800a414:	230a      	movs	r3, #10
 800a416:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a418:	fb03 2301 	mla	r3, r3, r1, r2
 800a41c:	930a      	str	r3, [sp, #40]	; 0x28
 800a41e:	2300      	movs	r3, #0
 800a420:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a422:	4618      	mov	r0, r3
 800a424:	1c51      	adds	r1, r2, #1
 800a426:	9119      	str	r1, [sp, #100]	; 0x64
 800a428:	7852      	ldrb	r2, [r2, #1]
 800a42a:	e7c9      	b.n	800a3c0 <_strtod_l+0x1d8>
 800a42c:	4658      	mov	r0, fp
 800a42e:	e7d2      	b.n	800a3d6 <_strtod_l+0x1ee>
 800a430:	2b08      	cmp	r3, #8
 800a432:	f103 0301 	add.w	r3, r3, #1
 800a436:	dc03      	bgt.n	800a440 <_strtod_l+0x258>
 800a438:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a43a:	434f      	muls	r7, r1
 800a43c:	970a      	str	r7, [sp, #40]	; 0x28
 800a43e:	e7e1      	b.n	800a404 <_strtod_l+0x21c>
 800a440:	2b10      	cmp	r3, #16
 800a442:	bfd8      	it	le
 800a444:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a448:	e7dc      	b.n	800a404 <_strtod_l+0x21c>
 800a44a:	2e10      	cmp	r6, #16
 800a44c:	bfdc      	itt	le
 800a44e:	230a      	movle	r3, #10
 800a450:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a454:	e7e3      	b.n	800a41e <_strtod_l+0x236>
 800a456:	2300      	movs	r3, #0
 800a458:	9308      	str	r3, [sp, #32]
 800a45a:	2301      	movs	r3, #1
 800a45c:	e780      	b.n	800a360 <_strtod_l+0x178>
 800a45e:	f04f 0c00 	mov.w	ip, #0
 800a462:	1caa      	adds	r2, r5, #2
 800a464:	9219      	str	r2, [sp, #100]	; 0x64
 800a466:	78aa      	ldrb	r2, [r5, #2]
 800a468:	e788      	b.n	800a37c <_strtod_l+0x194>
 800a46a:	f04f 0c01 	mov.w	ip, #1
 800a46e:	e7f8      	b.n	800a462 <_strtod_l+0x27a>
 800a470:	0800e4ac 	.word	0x0800e4ac
 800a474:	7ff00000 	.word	0x7ff00000
 800a478:	0800e4a8 	.word	0x0800e4a8
 800a47c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a47e:	1c51      	adds	r1, r2, #1
 800a480:	9119      	str	r1, [sp, #100]	; 0x64
 800a482:	7852      	ldrb	r2, [r2, #1]
 800a484:	2a30      	cmp	r2, #48	; 0x30
 800a486:	d0f9      	beq.n	800a47c <_strtod_l+0x294>
 800a488:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a48c:	2908      	cmp	r1, #8
 800a48e:	f63f af7a 	bhi.w	800a386 <_strtod_l+0x19e>
 800a492:	3a30      	subs	r2, #48	; 0x30
 800a494:	9209      	str	r2, [sp, #36]	; 0x24
 800a496:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a498:	920c      	str	r2, [sp, #48]	; 0x30
 800a49a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a49c:	1c57      	adds	r7, r2, #1
 800a49e:	9719      	str	r7, [sp, #100]	; 0x64
 800a4a0:	7852      	ldrb	r2, [r2, #1]
 800a4a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a4a6:	f1be 0f09 	cmp.w	lr, #9
 800a4aa:	d938      	bls.n	800a51e <_strtod_l+0x336>
 800a4ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4ae:	1a7f      	subs	r7, r7, r1
 800a4b0:	2f08      	cmp	r7, #8
 800a4b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a4b6:	dc03      	bgt.n	800a4c0 <_strtod_l+0x2d8>
 800a4b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4ba:	428f      	cmp	r7, r1
 800a4bc:	bfa8      	it	ge
 800a4be:	460f      	movge	r7, r1
 800a4c0:	f1bc 0f00 	cmp.w	ip, #0
 800a4c4:	d000      	beq.n	800a4c8 <_strtod_l+0x2e0>
 800a4c6:	427f      	negs	r7, r7
 800a4c8:	2e00      	cmp	r6, #0
 800a4ca:	d14f      	bne.n	800a56c <_strtod_l+0x384>
 800a4cc:	9905      	ldr	r1, [sp, #20]
 800a4ce:	4301      	orrs	r1, r0
 800a4d0:	f47f aec3 	bne.w	800a25a <_strtod_l+0x72>
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f47f aedb 	bne.w	800a290 <_strtod_l+0xa8>
 800a4da:	2a69      	cmp	r2, #105	; 0x69
 800a4dc:	d029      	beq.n	800a532 <_strtod_l+0x34a>
 800a4de:	dc26      	bgt.n	800a52e <_strtod_l+0x346>
 800a4e0:	2a49      	cmp	r2, #73	; 0x49
 800a4e2:	d026      	beq.n	800a532 <_strtod_l+0x34a>
 800a4e4:	2a4e      	cmp	r2, #78	; 0x4e
 800a4e6:	f47f aed3 	bne.w	800a290 <_strtod_l+0xa8>
 800a4ea:	499a      	ldr	r1, [pc, #616]	; (800a754 <_strtod_l+0x56c>)
 800a4ec:	a819      	add	r0, sp, #100	; 0x64
 800a4ee:	f002 fc15 	bl	800cd1c <__match>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f43f aecc 	beq.w	800a290 <_strtod_l+0xa8>
 800a4f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2b28      	cmp	r3, #40	; 0x28
 800a4fe:	d12f      	bne.n	800a560 <_strtod_l+0x378>
 800a500:	4995      	ldr	r1, [pc, #596]	; (800a758 <_strtod_l+0x570>)
 800a502:	aa1c      	add	r2, sp, #112	; 0x70
 800a504:	a819      	add	r0, sp, #100	; 0x64
 800a506:	f002 fc1d 	bl	800cd44 <__hexnan>
 800a50a:	2805      	cmp	r0, #5
 800a50c:	d128      	bne.n	800a560 <_strtod_l+0x378>
 800a50e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a510:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a514:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a518:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a51c:	e69d      	b.n	800a25a <_strtod_l+0x72>
 800a51e:	210a      	movs	r1, #10
 800a520:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a522:	fb01 2107 	mla	r1, r1, r7, r2
 800a526:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a52a:	9209      	str	r2, [sp, #36]	; 0x24
 800a52c:	e7b5      	b.n	800a49a <_strtod_l+0x2b2>
 800a52e:	2a6e      	cmp	r2, #110	; 0x6e
 800a530:	e7d9      	b.n	800a4e6 <_strtod_l+0x2fe>
 800a532:	498a      	ldr	r1, [pc, #552]	; (800a75c <_strtod_l+0x574>)
 800a534:	a819      	add	r0, sp, #100	; 0x64
 800a536:	f002 fbf1 	bl	800cd1c <__match>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f43f aea8 	beq.w	800a290 <_strtod_l+0xa8>
 800a540:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a542:	4987      	ldr	r1, [pc, #540]	; (800a760 <_strtod_l+0x578>)
 800a544:	3b01      	subs	r3, #1
 800a546:	a819      	add	r0, sp, #100	; 0x64
 800a548:	9319      	str	r3, [sp, #100]	; 0x64
 800a54a:	f002 fbe7 	bl	800cd1c <__match>
 800a54e:	b910      	cbnz	r0, 800a556 <_strtod_l+0x36e>
 800a550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a552:	3301      	adds	r3, #1
 800a554:	9319      	str	r3, [sp, #100]	; 0x64
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a764 <_strtod_l+0x57c>
 800a55e:	e67c      	b.n	800a25a <_strtod_l+0x72>
 800a560:	4881      	ldr	r0, [pc, #516]	; (800a768 <_strtod_l+0x580>)
 800a562:	f001 fa73 	bl	800ba4c <nan>
 800a566:	4680      	mov	r8, r0
 800a568:	4689      	mov	r9, r1
 800a56a:	e676      	b.n	800a25a <_strtod_l+0x72>
 800a56c:	9b08      	ldr	r3, [sp, #32]
 800a56e:	f1bb 0f00 	cmp.w	fp, #0
 800a572:	bf08      	it	eq
 800a574:	46b3      	moveq	fp, r6
 800a576:	1afb      	subs	r3, r7, r3
 800a578:	2e10      	cmp	r6, #16
 800a57a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a57c:	4635      	mov	r5, r6
 800a57e:	9309      	str	r3, [sp, #36]	; 0x24
 800a580:	bfa8      	it	ge
 800a582:	2510      	movge	r5, #16
 800a584:	f7f5 ff9e 	bl	80004c4 <__aeabi_ui2d>
 800a588:	2e09      	cmp	r6, #9
 800a58a:	4680      	mov	r8, r0
 800a58c:	4689      	mov	r9, r1
 800a58e:	dd13      	ble.n	800a5b8 <_strtod_l+0x3d0>
 800a590:	4b76      	ldr	r3, [pc, #472]	; (800a76c <_strtod_l+0x584>)
 800a592:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a596:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a59a:	f7f6 f80d 	bl	80005b8 <__aeabi_dmul>
 800a59e:	4680      	mov	r8, r0
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	4689      	mov	r9, r1
 800a5a4:	f7f5 ff8e 	bl	80004c4 <__aeabi_ui2d>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f5 fe4c 	bl	800024c <__adddf3>
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	2e0f      	cmp	r6, #15
 800a5ba:	dc36      	bgt.n	800a62a <_strtod_l+0x442>
 800a5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f43f ae4b 	beq.w	800a25a <_strtod_l+0x72>
 800a5c4:	dd22      	ble.n	800a60c <_strtod_l+0x424>
 800a5c6:	2b16      	cmp	r3, #22
 800a5c8:	dc09      	bgt.n	800a5de <_strtod_l+0x3f6>
 800a5ca:	4968      	ldr	r1, [pc, #416]	; (800a76c <_strtod_l+0x584>)
 800a5cc:	4642      	mov	r2, r8
 800a5ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5d2:	464b      	mov	r3, r9
 800a5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d8:	f7f5 ffee 	bl	80005b8 <__aeabi_dmul>
 800a5dc:	e7c3      	b.n	800a566 <_strtod_l+0x37e>
 800a5de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	db20      	blt.n	800a62a <_strtod_l+0x442>
 800a5e8:	4c60      	ldr	r4, [pc, #384]	; (800a76c <_strtod_l+0x584>)
 800a5ea:	f1c6 060f 	rsb	r6, r6, #15
 800a5ee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	f7f5 ffdd 	bl	80005b8 <__aeabi_dmul>
 800a5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a600:	1b9e      	subs	r6, r3, r6
 800a602:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a606:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a60a:	e7e5      	b.n	800a5d8 <_strtod_l+0x3f0>
 800a60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60e:	3316      	adds	r3, #22
 800a610:	db0b      	blt.n	800a62a <_strtod_l+0x442>
 800a612:	9b08      	ldr	r3, [sp, #32]
 800a614:	4640      	mov	r0, r8
 800a616:	1bdf      	subs	r7, r3, r7
 800a618:	4b54      	ldr	r3, [pc, #336]	; (800a76c <_strtod_l+0x584>)
 800a61a:	4649      	mov	r1, r9
 800a61c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a624:	f7f6 f8f2 	bl	800080c <__aeabi_ddiv>
 800a628:	e79d      	b.n	800a566 <_strtod_l+0x37e>
 800a62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62c:	1b75      	subs	r5, r6, r5
 800a62e:	441d      	add	r5, r3
 800a630:	2d00      	cmp	r5, #0
 800a632:	dd70      	ble.n	800a716 <_strtod_l+0x52e>
 800a634:	f015 030f 	ands.w	r3, r5, #15
 800a638:	d00a      	beq.n	800a650 <_strtod_l+0x468>
 800a63a:	494c      	ldr	r1, [pc, #304]	; (800a76c <_strtod_l+0x584>)
 800a63c:	4642      	mov	r2, r8
 800a63e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a642:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a646:	464b      	mov	r3, r9
 800a648:	f7f5 ffb6 	bl	80005b8 <__aeabi_dmul>
 800a64c:	4680      	mov	r8, r0
 800a64e:	4689      	mov	r9, r1
 800a650:	f035 050f 	bics.w	r5, r5, #15
 800a654:	d04d      	beq.n	800a6f2 <_strtod_l+0x50a>
 800a656:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a65a:	dd22      	ble.n	800a6a2 <_strtod_l+0x4ba>
 800a65c:	2600      	movs	r6, #0
 800a65e:	46b3      	mov	fp, r6
 800a660:	960b      	str	r6, [sp, #44]	; 0x2c
 800a662:	9608      	str	r6, [sp, #32]
 800a664:	2322      	movs	r3, #34	; 0x22
 800a666:	f04f 0800 	mov.w	r8, #0
 800a66a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a764 <_strtod_l+0x57c>
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a672:	2b00      	cmp	r3, #0
 800a674:	f43f adf1 	beq.w	800a25a <_strtod_l+0x72>
 800a678:	4620      	mov	r0, r4
 800a67a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a67c:	f002 fd04 	bl	800d088 <_Bfree>
 800a680:	4620      	mov	r0, r4
 800a682:	9908      	ldr	r1, [sp, #32]
 800a684:	f002 fd00 	bl	800d088 <_Bfree>
 800a688:	4659      	mov	r1, fp
 800a68a:	4620      	mov	r0, r4
 800a68c:	f002 fcfc 	bl	800d088 <_Bfree>
 800a690:	4620      	mov	r0, r4
 800a692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a694:	f002 fcf8 	bl	800d088 <_Bfree>
 800a698:	4631      	mov	r1, r6
 800a69a:	4620      	mov	r0, r4
 800a69c:	f002 fcf4 	bl	800d088 <_Bfree>
 800a6a0:	e5db      	b.n	800a25a <_strtod_l+0x72>
 800a6a2:	4b33      	ldr	r3, [pc, #204]	; (800a770 <_strtod_l+0x588>)
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	9305      	str	r3, [sp, #20]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	469a      	mov	sl, r3
 800a6ae:	112d      	asrs	r5, r5, #4
 800a6b0:	2d01      	cmp	r5, #1
 800a6b2:	dc21      	bgt.n	800a6f8 <_strtod_l+0x510>
 800a6b4:	b10b      	cbz	r3, 800a6ba <_strtod_l+0x4d2>
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	4689      	mov	r9, r1
 800a6ba:	492d      	ldr	r1, [pc, #180]	; (800a770 <_strtod_l+0x588>)
 800a6bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a6c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	f7f5 ff74 	bl	80005b8 <__aeabi_dmul>
 800a6d0:	4b24      	ldr	r3, [pc, #144]	; (800a764 <_strtod_l+0x57c>)
 800a6d2:	460a      	mov	r2, r1
 800a6d4:	400b      	ands	r3, r1
 800a6d6:	4927      	ldr	r1, [pc, #156]	; (800a774 <_strtod_l+0x58c>)
 800a6d8:	4680      	mov	r8, r0
 800a6da:	428b      	cmp	r3, r1
 800a6dc:	d8be      	bhi.n	800a65c <_strtod_l+0x474>
 800a6de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a6e2:	428b      	cmp	r3, r1
 800a6e4:	bf86      	itte	hi
 800a6e6:	f04f 38ff 	movhi.w	r8, #4294967295
 800a6ea:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a778 <_strtod_l+0x590>
 800a6ee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	9305      	str	r3, [sp, #20]
 800a6f6:	e07b      	b.n	800a7f0 <_strtod_l+0x608>
 800a6f8:	07ea      	lsls	r2, r5, #31
 800a6fa:	d505      	bpl.n	800a708 <_strtod_l+0x520>
 800a6fc:	9b05      	ldr	r3, [sp, #20]
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	f7f5 ff59 	bl	80005b8 <__aeabi_dmul>
 800a706:	2301      	movs	r3, #1
 800a708:	9a05      	ldr	r2, [sp, #20]
 800a70a:	f10a 0a01 	add.w	sl, sl, #1
 800a70e:	3208      	adds	r2, #8
 800a710:	106d      	asrs	r5, r5, #1
 800a712:	9205      	str	r2, [sp, #20]
 800a714:	e7cc      	b.n	800a6b0 <_strtod_l+0x4c8>
 800a716:	d0ec      	beq.n	800a6f2 <_strtod_l+0x50a>
 800a718:	426d      	negs	r5, r5
 800a71a:	f015 020f 	ands.w	r2, r5, #15
 800a71e:	d00a      	beq.n	800a736 <_strtod_l+0x54e>
 800a720:	4b12      	ldr	r3, [pc, #72]	; (800a76c <_strtod_l+0x584>)
 800a722:	4640      	mov	r0, r8
 800a724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a728:	4649      	mov	r1, r9
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	f7f6 f86d 	bl	800080c <__aeabi_ddiv>
 800a732:	4680      	mov	r8, r0
 800a734:	4689      	mov	r9, r1
 800a736:	112d      	asrs	r5, r5, #4
 800a738:	d0db      	beq.n	800a6f2 <_strtod_l+0x50a>
 800a73a:	2d1f      	cmp	r5, #31
 800a73c:	dd1e      	ble.n	800a77c <_strtod_l+0x594>
 800a73e:	2600      	movs	r6, #0
 800a740:	46b3      	mov	fp, r6
 800a742:	960b      	str	r6, [sp, #44]	; 0x2c
 800a744:	9608      	str	r6, [sp, #32]
 800a746:	2322      	movs	r3, #34	; 0x22
 800a748:	f04f 0800 	mov.w	r8, #0
 800a74c:	f04f 0900 	mov.w	r9, #0
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	e78d      	b.n	800a670 <_strtod_l+0x488>
 800a754:	0800e50d 	.word	0x0800e50d
 800a758:	0800e4c0 	.word	0x0800e4c0
 800a75c:	0800e505 	.word	0x0800e505
 800a760:	0800e53f 	.word	0x0800e53f
 800a764:	7ff00000 	.word	0x7ff00000
 800a768:	0800e8d1 	.word	0x0800e8d1
 800a76c:	0800e6b0 	.word	0x0800e6b0
 800a770:	0800e688 	.word	0x0800e688
 800a774:	7ca00000 	.word	0x7ca00000
 800a778:	7fefffff 	.word	0x7fefffff
 800a77c:	f015 0310 	ands.w	r3, r5, #16
 800a780:	bf18      	it	ne
 800a782:	236a      	movne	r3, #106	; 0x6a
 800a784:	4640      	mov	r0, r8
 800a786:	9305      	str	r3, [sp, #20]
 800a788:	4649      	mov	r1, r9
 800a78a:	2300      	movs	r3, #0
 800a78c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800aa58 <_strtod_l+0x870>
 800a790:	07ea      	lsls	r2, r5, #31
 800a792:	d504      	bpl.n	800a79e <_strtod_l+0x5b6>
 800a794:	e9da 2300 	ldrd	r2, r3, [sl]
 800a798:	f7f5 ff0e 	bl	80005b8 <__aeabi_dmul>
 800a79c:	2301      	movs	r3, #1
 800a79e:	106d      	asrs	r5, r5, #1
 800a7a0:	f10a 0a08 	add.w	sl, sl, #8
 800a7a4:	d1f4      	bne.n	800a790 <_strtod_l+0x5a8>
 800a7a6:	b10b      	cbz	r3, 800a7ac <_strtod_l+0x5c4>
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	4689      	mov	r9, r1
 800a7ac:	9b05      	ldr	r3, [sp, #20]
 800a7ae:	b1bb      	cbz	r3, 800a7e0 <_strtod_l+0x5f8>
 800a7b0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a7b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	dd10      	ble.n	800a7e0 <_strtod_l+0x5f8>
 800a7be:	2b1f      	cmp	r3, #31
 800a7c0:	f340 8128 	ble.w	800aa14 <_strtod_l+0x82c>
 800a7c4:	2b34      	cmp	r3, #52	; 0x34
 800a7c6:	bfd8      	it	le
 800a7c8:	f04f 33ff 	movle.w	r3, #4294967295
 800a7cc:	f04f 0800 	mov.w	r8, #0
 800a7d0:	bfcf      	iteee	gt
 800a7d2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a7d6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a7da:	4093      	lslle	r3, r2
 800a7dc:	ea03 0901 	andle.w	r9, r3, r1
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	f7f6 f94e 	bl	8000a88 <__aeabi_dcmpeq>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d1a6      	bne.n	800a73e <_strtod_l+0x556>
 800a7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f2:	465a      	mov	r2, fp
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	4633      	mov	r3, r6
 800a7fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7fc:	f002 fcac 	bl	800d158 <__s2b>
 800a800:	900b      	str	r0, [sp, #44]	; 0x2c
 800a802:	2800      	cmp	r0, #0
 800a804:	f43f af2a 	beq.w	800a65c <_strtod_l+0x474>
 800a808:	2600      	movs	r6, #0
 800a80a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	2a00      	cmp	r2, #0
 800a810:	eba3 0307 	sub.w	r3, r3, r7
 800a814:	bfa8      	it	ge
 800a816:	2300      	movge	r3, #0
 800a818:	46b3      	mov	fp, r6
 800a81a:	9312      	str	r3, [sp, #72]	; 0x48
 800a81c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a820:	9316      	str	r3, [sp, #88]	; 0x58
 800a822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a824:	4620      	mov	r0, r4
 800a826:	6859      	ldr	r1, [r3, #4]
 800a828:	f002 fbee 	bl	800d008 <_Balloc>
 800a82c:	9008      	str	r0, [sp, #32]
 800a82e:	2800      	cmp	r0, #0
 800a830:	f43f af18 	beq.w	800a664 <_strtod_l+0x47c>
 800a834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a836:	300c      	adds	r0, #12
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	f103 010c 	add.w	r1, r3, #12
 800a83e:	3202      	adds	r2, #2
 800a840:	0092      	lsls	r2, r2, #2
 800a842:	f001 f8f4 	bl	800ba2e <memcpy>
 800a846:	ab1c      	add	r3, sp, #112	; 0x70
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	4642      	mov	r2, r8
 800a850:	464b      	mov	r3, r9
 800a852:	4620      	mov	r0, r4
 800a854:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a858:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a85c:	f002 ffa8 	bl	800d7b0 <__d2b>
 800a860:	901a      	str	r0, [sp, #104]	; 0x68
 800a862:	2800      	cmp	r0, #0
 800a864:	f43f aefe 	beq.w	800a664 <_strtod_l+0x47c>
 800a868:	2101      	movs	r1, #1
 800a86a:	4620      	mov	r0, r4
 800a86c:	f002 fd0c 	bl	800d288 <__i2b>
 800a870:	4683      	mov	fp, r0
 800a872:	2800      	cmp	r0, #0
 800a874:	f43f aef6 	beq.w	800a664 <_strtod_l+0x47c>
 800a878:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a87a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a87c:	2f00      	cmp	r7, #0
 800a87e:	bfab      	itete	ge
 800a880:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a882:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a884:	eb07 0a03 	addge.w	sl, r7, r3
 800a888:	1bdd      	sublt	r5, r3, r7
 800a88a:	9b05      	ldr	r3, [sp, #20]
 800a88c:	bfa8      	it	ge
 800a88e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a890:	eba7 0703 	sub.w	r7, r7, r3
 800a894:	4417      	add	r7, r2
 800a896:	4b71      	ldr	r3, [pc, #452]	; (800aa5c <_strtod_l+0x874>)
 800a898:	f107 37ff 	add.w	r7, r7, #4294967295
 800a89c:	bfb8      	it	lt
 800a89e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a8a2:	429f      	cmp	r7, r3
 800a8a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8a8:	f280 80c7 	bge.w	800aa3a <_strtod_l+0x852>
 800a8ac:	1bdb      	subs	r3, r3, r7
 800a8ae:	2b1f      	cmp	r3, #31
 800a8b0:	f04f 0101 	mov.w	r1, #1
 800a8b4:	eba2 0203 	sub.w	r2, r2, r3
 800a8b8:	f300 80b3 	bgt.w	800aa22 <_strtod_l+0x83a>
 800a8bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9310      	str	r3, [sp, #64]	; 0x40
 800a8c6:	eb0a 0702 	add.w	r7, sl, r2
 800a8ca:	9b05      	ldr	r3, [sp, #20]
 800a8cc:	45ba      	cmp	sl, r7
 800a8ce:	4415      	add	r5, r2
 800a8d0:	441d      	add	r5, r3
 800a8d2:	4653      	mov	r3, sl
 800a8d4:	bfa8      	it	ge
 800a8d6:	463b      	movge	r3, r7
 800a8d8:	42ab      	cmp	r3, r5
 800a8da:	bfa8      	it	ge
 800a8dc:	462b      	movge	r3, r5
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfc2      	ittt	gt
 800a8e2:	1aff      	subgt	r7, r7, r3
 800a8e4:	1aed      	subgt	r5, r5, r3
 800a8e6:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a8ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dd17      	ble.n	800a920 <_strtod_l+0x738>
 800a8f0:	4659      	mov	r1, fp
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f002 fd85 	bl	800d404 <__pow5mult>
 800a8fa:	4683      	mov	fp, r0
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f43f aeb1 	beq.w	800a664 <_strtod_l+0x47c>
 800a902:	4601      	mov	r1, r0
 800a904:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a906:	4620      	mov	r0, r4
 800a908:	f002 fcd4 	bl	800d2b4 <__multiply>
 800a90c:	900a      	str	r0, [sp, #40]	; 0x28
 800a90e:	2800      	cmp	r0, #0
 800a910:	f43f aea8 	beq.w	800a664 <_strtod_l+0x47c>
 800a914:	4620      	mov	r0, r4
 800a916:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a918:	f002 fbb6 	bl	800d088 <_Bfree>
 800a91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a91e:	931a      	str	r3, [sp, #104]	; 0x68
 800a920:	2f00      	cmp	r7, #0
 800a922:	f300 808f 	bgt.w	800aa44 <_strtod_l+0x85c>
 800a926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dd08      	ble.n	800a93e <_strtod_l+0x756>
 800a92c:	4620      	mov	r0, r4
 800a92e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a930:	9908      	ldr	r1, [sp, #32]
 800a932:	f002 fd67 	bl	800d404 <__pow5mult>
 800a936:	9008      	str	r0, [sp, #32]
 800a938:	2800      	cmp	r0, #0
 800a93a:	f43f ae93 	beq.w	800a664 <_strtod_l+0x47c>
 800a93e:	2d00      	cmp	r5, #0
 800a940:	dd08      	ble.n	800a954 <_strtod_l+0x76c>
 800a942:	462a      	mov	r2, r5
 800a944:	4620      	mov	r0, r4
 800a946:	9908      	ldr	r1, [sp, #32]
 800a948:	f002 fdb6 	bl	800d4b8 <__lshift>
 800a94c:	9008      	str	r0, [sp, #32]
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f ae88 	beq.w	800a664 <_strtod_l+0x47c>
 800a954:	f1ba 0f00 	cmp.w	sl, #0
 800a958:	dd08      	ble.n	800a96c <_strtod_l+0x784>
 800a95a:	4659      	mov	r1, fp
 800a95c:	4652      	mov	r2, sl
 800a95e:	4620      	mov	r0, r4
 800a960:	f002 fdaa 	bl	800d4b8 <__lshift>
 800a964:	4683      	mov	fp, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	f43f ae7c 	beq.w	800a664 <_strtod_l+0x47c>
 800a96c:	4620      	mov	r0, r4
 800a96e:	9a08      	ldr	r2, [sp, #32]
 800a970:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a972:	f002 fe29 	bl	800d5c8 <__mdiff>
 800a976:	4606      	mov	r6, r0
 800a978:	2800      	cmp	r0, #0
 800a97a:	f43f ae73 	beq.w	800a664 <_strtod_l+0x47c>
 800a97e:	2500      	movs	r5, #0
 800a980:	68c3      	ldr	r3, [r0, #12]
 800a982:	4659      	mov	r1, fp
 800a984:	60c5      	str	r5, [r0, #12]
 800a986:	930a      	str	r3, [sp, #40]	; 0x28
 800a988:	f002 fe02 	bl	800d590 <__mcmp>
 800a98c:	42a8      	cmp	r0, r5
 800a98e:	da6b      	bge.n	800aa68 <_strtod_l+0x880>
 800a990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a992:	ea53 0308 	orrs.w	r3, r3, r8
 800a996:	f040 808f 	bne.w	800aab8 <_strtod_l+0x8d0>
 800a99a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f040 808a 	bne.w	800aab8 <_strtod_l+0x8d0>
 800a9a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9a8:	0d1b      	lsrs	r3, r3, #20
 800a9aa:	051b      	lsls	r3, r3, #20
 800a9ac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a9b0:	f240 8082 	bls.w	800aab8 <_strtod_l+0x8d0>
 800a9b4:	6973      	ldr	r3, [r6, #20]
 800a9b6:	b913      	cbnz	r3, 800a9be <_strtod_l+0x7d6>
 800a9b8:	6933      	ldr	r3, [r6, #16]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	dd7c      	ble.n	800aab8 <_strtod_l+0x8d0>
 800a9be:	4631      	mov	r1, r6
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f002 fd78 	bl	800d4b8 <__lshift>
 800a9c8:	4659      	mov	r1, fp
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	f002 fde0 	bl	800d590 <__mcmp>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	dd71      	ble.n	800aab8 <_strtod_l+0x8d0>
 800a9d4:	9905      	ldr	r1, [sp, #20]
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	4a21      	ldr	r2, [pc, #132]	; (800aa60 <_strtod_l+0x878>)
 800a9da:	2900      	cmp	r1, #0
 800a9dc:	f000 808d 	beq.w	800aafa <_strtod_l+0x912>
 800a9e0:	ea02 0109 	and.w	r1, r2, r9
 800a9e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a9e8:	f300 8087 	bgt.w	800aafa <_strtod_l+0x912>
 800a9ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a9f0:	f77f aea9 	ble.w	800a746 <_strtod_l+0x55e>
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	4b1a      	ldr	r3, [pc, #104]	; (800aa64 <_strtod_l+0x87c>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f7f5 fddc 	bl	80005b8 <__aeabi_dmul>
 800aa00:	4b17      	ldr	r3, [pc, #92]	; (800aa60 <_strtod_l+0x878>)
 800aa02:	4680      	mov	r8, r0
 800aa04:	400b      	ands	r3, r1
 800aa06:	4689      	mov	r9, r1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f47f ae35 	bne.w	800a678 <_strtod_l+0x490>
 800aa0e:	2322      	movs	r3, #34	; 0x22
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	e631      	b.n	800a678 <_strtod_l+0x490>
 800aa14:	f04f 32ff 	mov.w	r2, #4294967295
 800aa18:	fa02 f303 	lsl.w	r3, r2, r3
 800aa1c:	ea03 0808 	and.w	r8, r3, r8
 800aa20:	e6de      	b.n	800a7e0 <_strtod_l+0x5f8>
 800aa22:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800aa26:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800aa2a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800aa2e:	37e2      	adds	r7, #226	; 0xe2
 800aa30:	fa01 f307 	lsl.w	r3, r1, r7
 800aa34:	9310      	str	r3, [sp, #64]	; 0x40
 800aa36:	9113      	str	r1, [sp, #76]	; 0x4c
 800aa38:	e745      	b.n	800a8c6 <_strtod_l+0x6de>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9310      	str	r3, [sp, #64]	; 0x40
 800aa3e:	2301      	movs	r3, #1
 800aa40:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa42:	e740      	b.n	800a8c6 <_strtod_l+0x6de>
 800aa44:	463a      	mov	r2, r7
 800aa46:	4620      	mov	r0, r4
 800aa48:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aa4a:	f002 fd35 	bl	800d4b8 <__lshift>
 800aa4e:	901a      	str	r0, [sp, #104]	; 0x68
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f47f af68 	bne.w	800a926 <_strtod_l+0x73e>
 800aa56:	e605      	b.n	800a664 <_strtod_l+0x47c>
 800aa58:	0800e4d8 	.word	0x0800e4d8
 800aa5c:	fffffc02 	.word	0xfffffc02
 800aa60:	7ff00000 	.word	0x7ff00000
 800aa64:	39500000 	.word	0x39500000
 800aa68:	46ca      	mov	sl, r9
 800aa6a:	d165      	bne.n	800ab38 <_strtod_l+0x950>
 800aa6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa72:	b352      	cbz	r2, 800aaca <_strtod_l+0x8e2>
 800aa74:	4a9e      	ldr	r2, [pc, #632]	; (800acf0 <_strtod_l+0xb08>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d12a      	bne.n	800aad0 <_strtod_l+0x8e8>
 800aa7a:	9b05      	ldr	r3, [sp, #20]
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	b1fb      	cbz	r3, 800aac0 <_strtod_l+0x8d8>
 800aa80:	4b9c      	ldr	r3, [pc, #624]	; (800acf4 <_strtod_l+0xb0c>)
 800aa82:	f04f 32ff 	mov.w	r2, #4294967295
 800aa86:	ea09 0303 	and.w	r3, r9, r3
 800aa8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa8e:	d81a      	bhi.n	800aac6 <_strtod_l+0x8de>
 800aa90:	0d1b      	lsrs	r3, r3, #20
 800aa92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa96:	fa02 f303 	lsl.w	r3, r2, r3
 800aa9a:	4299      	cmp	r1, r3
 800aa9c:	d118      	bne.n	800aad0 <_strtod_l+0x8e8>
 800aa9e:	4b96      	ldr	r3, [pc, #600]	; (800acf8 <_strtod_l+0xb10>)
 800aaa0:	459a      	cmp	sl, r3
 800aaa2:	d102      	bne.n	800aaaa <_strtod_l+0x8c2>
 800aaa4:	3101      	adds	r1, #1
 800aaa6:	f43f addd 	beq.w	800a664 <_strtod_l+0x47c>
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	4b91      	ldr	r3, [pc, #580]	; (800acf4 <_strtod_l+0xb0c>)
 800aab0:	ea0a 0303 	and.w	r3, sl, r3
 800aab4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d19a      	bne.n	800a9f4 <_strtod_l+0x80c>
 800aabe:	e5db      	b.n	800a678 <_strtod_l+0x490>
 800aac0:	f04f 33ff 	mov.w	r3, #4294967295
 800aac4:	e7e9      	b.n	800aa9a <_strtod_l+0x8b2>
 800aac6:	4613      	mov	r3, r2
 800aac8:	e7e7      	b.n	800aa9a <_strtod_l+0x8b2>
 800aaca:	ea53 0308 	orrs.w	r3, r3, r8
 800aace:	d081      	beq.n	800a9d4 <_strtod_l+0x7ec>
 800aad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aad2:	b1e3      	cbz	r3, 800ab0e <_strtod_l+0x926>
 800aad4:	ea13 0f0a 	tst.w	r3, sl
 800aad8:	d0ee      	beq.n	800aab8 <_strtod_l+0x8d0>
 800aada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aadc:	4640      	mov	r0, r8
 800aade:	4649      	mov	r1, r9
 800aae0:	9a05      	ldr	r2, [sp, #20]
 800aae2:	b1c3      	cbz	r3, 800ab16 <_strtod_l+0x92e>
 800aae4:	f7ff fb5d 	bl	800a1a2 <sulp>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aaee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aaf0:	f7f5 fbac 	bl	800024c <__adddf3>
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	4689      	mov	r9, r1
 800aaf8:	e7de      	b.n	800aab8 <_strtod_l+0x8d0>
 800aafa:	4013      	ands	r3, r2
 800aafc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ab04:	f04f 38ff 	mov.w	r8, #4294967295
 800ab08:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ab0c:	e7d4      	b.n	800aab8 <_strtod_l+0x8d0>
 800ab0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab10:	ea13 0f08 	tst.w	r3, r8
 800ab14:	e7e0      	b.n	800aad8 <_strtod_l+0x8f0>
 800ab16:	f7ff fb44 	bl	800a1a2 <sulp>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab22:	f7f5 fb91 	bl	8000248 <__aeabi_dsub>
 800ab26:	2200      	movs	r2, #0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	4689      	mov	r9, r1
 800ab2e:	f7f5 ffab 	bl	8000a88 <__aeabi_dcmpeq>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d0c0      	beq.n	800aab8 <_strtod_l+0x8d0>
 800ab36:	e606      	b.n	800a746 <_strtod_l+0x55e>
 800ab38:	4659      	mov	r1, fp
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f002 fe8e 	bl	800d85c <__ratio>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab4e:	f7f5 ffaf 	bl	8000ab0 <__aeabi_dcmple>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d06f      	beq.n	800ac36 <_strtod_l+0xa4e>
 800ab56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d17c      	bne.n	800ac56 <_strtod_l+0xa6e>
 800ab5c:	f1b8 0f00 	cmp.w	r8, #0
 800ab60:	d159      	bne.n	800ac16 <_strtod_l+0xa2e>
 800ab62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d17b      	bne.n	800ac62 <_strtod_l+0xa7a>
 800ab6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab6e:	2200      	movs	r2, #0
 800ab70:	4b62      	ldr	r3, [pc, #392]	; (800acfc <_strtod_l+0xb14>)
 800ab72:	f7f5 ff93 	bl	8000a9c <__aeabi_dcmplt>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d15a      	bne.n	800ac30 <_strtod_l+0xa48>
 800ab7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4b5f      	ldr	r3, [pc, #380]	; (800ad00 <_strtod_l+0xb18>)
 800ab82:	f7f5 fd19 	bl	80005b8 <__aeabi_dmul>
 800ab86:	4605      	mov	r5, r0
 800ab88:	460f      	mov	r7, r1
 800ab8a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ab8e:	9506      	str	r5, [sp, #24]
 800ab90:	9307      	str	r3, [sp, #28]
 800ab92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ab9a:	4b56      	ldr	r3, [pc, #344]	; (800acf4 <_strtod_l+0xb0c>)
 800ab9c:	4a55      	ldr	r2, [pc, #340]	; (800acf4 <_strtod_l+0xb0c>)
 800ab9e:	ea0a 0303 	and.w	r3, sl, r3
 800aba2:	9313      	str	r3, [sp, #76]	; 0x4c
 800aba4:	4b57      	ldr	r3, [pc, #348]	; (800ad04 <_strtod_l+0xb1c>)
 800aba6:	ea0a 0202 	and.w	r2, sl, r2
 800abaa:	429a      	cmp	r2, r3
 800abac:	f040 80b0 	bne.w	800ad10 <_strtod_l+0xb28>
 800abb0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800abb4:	4640      	mov	r0, r8
 800abb6:	4649      	mov	r1, r9
 800abb8:	f002 fd92 	bl	800d6e0 <__ulp>
 800abbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abc0:	f7f5 fcfa 	bl	80005b8 <__aeabi_dmul>
 800abc4:	4642      	mov	r2, r8
 800abc6:	464b      	mov	r3, r9
 800abc8:	f7f5 fb40 	bl	800024c <__adddf3>
 800abcc:	f8df a124 	ldr.w	sl, [pc, #292]	; 800acf4 <_strtod_l+0xb0c>
 800abd0:	4a4d      	ldr	r2, [pc, #308]	; (800ad08 <_strtod_l+0xb20>)
 800abd2:	ea01 0a0a 	and.w	sl, r1, sl
 800abd6:	4592      	cmp	sl, r2
 800abd8:	4680      	mov	r8, r0
 800abda:	d948      	bls.n	800ac6e <_strtod_l+0xa86>
 800abdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abde:	4b46      	ldr	r3, [pc, #280]	; (800acf8 <_strtod_l+0xb10>)
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d103      	bne.n	800abec <_strtod_l+0xa04>
 800abe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abe6:	3301      	adds	r3, #1
 800abe8:	f43f ad3c 	beq.w	800a664 <_strtod_l+0x47c>
 800abec:	f04f 38ff 	mov.w	r8, #4294967295
 800abf0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800acf8 <_strtod_l+0xb10>
 800abf4:	4620      	mov	r0, r4
 800abf6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800abf8:	f002 fa46 	bl	800d088 <_Bfree>
 800abfc:	4620      	mov	r0, r4
 800abfe:	9908      	ldr	r1, [sp, #32]
 800ac00:	f002 fa42 	bl	800d088 <_Bfree>
 800ac04:	4659      	mov	r1, fp
 800ac06:	4620      	mov	r0, r4
 800ac08:	f002 fa3e 	bl	800d088 <_Bfree>
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f002 fa3a 	bl	800d088 <_Bfree>
 800ac14:	e605      	b.n	800a822 <_strtod_l+0x63a>
 800ac16:	f1b8 0f01 	cmp.w	r8, #1
 800ac1a:	d103      	bne.n	800ac24 <_strtod_l+0xa3c>
 800ac1c:	f1b9 0f00 	cmp.w	r9, #0
 800ac20:	f43f ad91 	beq.w	800a746 <_strtod_l+0x55e>
 800ac24:	2200      	movs	r2, #0
 800ac26:	4b39      	ldr	r3, [pc, #228]	; (800ad0c <_strtod_l+0xb24>)
 800ac28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ac2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac2e:	e016      	b.n	800ac5e <_strtod_l+0xa76>
 800ac30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ac32:	4f33      	ldr	r7, [pc, #204]	; (800ad00 <_strtod_l+0xb18>)
 800ac34:	e7a9      	b.n	800ab8a <_strtod_l+0x9a2>
 800ac36:	4b32      	ldr	r3, [pc, #200]	; (800ad00 <_strtod_l+0xb18>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac3e:	f7f5 fcbb 	bl	80005b8 <__aeabi_dmul>
 800ac42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac44:	4605      	mov	r5, r0
 800ac46:	460f      	mov	r7, r1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d09e      	beq.n	800ab8a <_strtod_l+0x9a2>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac54:	e79d      	b.n	800ab92 <_strtod_l+0x9aa>
 800ac56:	2200      	movs	r2, #0
 800ac58:	4b28      	ldr	r3, [pc, #160]	; (800acfc <_strtod_l+0xb14>)
 800ac5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac5e:	4f27      	ldr	r7, [pc, #156]	; (800acfc <_strtod_l+0xb14>)
 800ac60:	e797      	b.n	800ab92 <_strtod_l+0x9aa>
 800ac62:	2200      	movs	r2, #0
 800ac64:	4b29      	ldr	r3, [pc, #164]	; (800ad0c <_strtod_l+0xb24>)
 800ac66:	4645      	mov	r5, r8
 800ac68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac6c:	e7f7      	b.n	800ac5e <_strtod_l+0xa76>
 800ac6e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800ac72:	9b05      	ldr	r3, [sp, #20]
 800ac74:	46ca      	mov	sl, r9
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1bc      	bne.n	800abf4 <_strtod_l+0xa0c>
 800ac7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac80:	0d1b      	lsrs	r3, r3, #20
 800ac82:	051b      	lsls	r3, r3, #20
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d1b5      	bne.n	800abf4 <_strtod_l+0xa0c>
 800ac88:	4628      	mov	r0, r5
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f6 faee 	bl	800126c <__aeabi_d2lz>
 800ac90:	f7f5 fc64 	bl	800055c <__aeabi_l2d>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4628      	mov	r0, r5
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	f7f5 fad4 	bl	8000248 <__aeabi_dsub>
 800aca0:	460b      	mov	r3, r1
 800aca2:	4602      	mov	r2, r0
 800aca4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800aca8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800acac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acae:	ea4a 0a08 	orr.w	sl, sl, r8
 800acb2:	ea5a 0a03 	orrs.w	sl, sl, r3
 800acb6:	d06c      	beq.n	800ad92 <_strtod_l+0xbaa>
 800acb8:	a309      	add	r3, pc, #36	; (adr r3, 800ace0 <_strtod_l+0xaf8>)
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	f7f5 feed 	bl	8000a9c <__aeabi_dcmplt>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f47f acd8 	bne.w	800a678 <_strtod_l+0x490>
 800acc8:	a307      	add	r3, pc, #28	; (adr r3, 800ace8 <_strtod_l+0xb00>)
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acd2:	f7f5 ff01 	bl	8000ad8 <__aeabi_dcmpgt>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d08c      	beq.n	800abf4 <_strtod_l+0xa0c>
 800acda:	e4cd      	b.n	800a678 <_strtod_l+0x490>
 800acdc:	f3af 8000 	nop.w
 800ace0:	94a03595 	.word	0x94a03595
 800ace4:	3fdfffff 	.word	0x3fdfffff
 800ace8:	35afe535 	.word	0x35afe535
 800acec:	3fe00000 	.word	0x3fe00000
 800acf0:	000fffff 	.word	0x000fffff
 800acf4:	7ff00000 	.word	0x7ff00000
 800acf8:	7fefffff 	.word	0x7fefffff
 800acfc:	3ff00000 	.word	0x3ff00000
 800ad00:	3fe00000 	.word	0x3fe00000
 800ad04:	7fe00000 	.word	0x7fe00000
 800ad08:	7c9fffff 	.word	0x7c9fffff
 800ad0c:	bff00000 	.word	0xbff00000
 800ad10:	9b05      	ldr	r3, [sp, #20]
 800ad12:	b333      	cbz	r3, 800ad62 <_strtod_l+0xb7a>
 800ad14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad1a:	d822      	bhi.n	800ad62 <_strtod_l+0xb7a>
 800ad1c:	a328      	add	r3, pc, #160	; (adr r3, 800adc0 <_strtod_l+0xbd8>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	4628      	mov	r0, r5
 800ad24:	4639      	mov	r1, r7
 800ad26:	f7f5 fec3 	bl	8000ab0 <__aeabi_dcmple>
 800ad2a:	b1a0      	cbz	r0, 800ad56 <_strtod_l+0xb6e>
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f7f5 ff1a 	bl	8000b68 <__aeabi_d2uiz>
 800ad34:	2801      	cmp	r0, #1
 800ad36:	bf38      	it	cc
 800ad38:	2001      	movcc	r0, #1
 800ad3a:	f7f5 fbc3 	bl	80004c4 <__aeabi_ui2d>
 800ad3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad40:	4605      	mov	r5, r0
 800ad42:	460f      	mov	r7, r1
 800ad44:	bb03      	cbnz	r3, 800ad88 <_strtod_l+0xba0>
 800ad46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad4a:	9014      	str	r0, [sp, #80]	; 0x50
 800ad4c:	9315      	str	r3, [sp, #84]	; 0x54
 800ad4e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ad52:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ad56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad5a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad5e:	1a9b      	subs	r3, r3, r2
 800ad60:	9311      	str	r3, [sp, #68]	; 0x44
 800ad62:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ad66:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800ad6a:	f002 fcb9 	bl	800d6e0 <__ulp>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fc1f 	bl	80005b8 <__aeabi_dmul>
 800ad7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad7e:	f7f5 fa65 	bl	800024c <__adddf3>
 800ad82:	4680      	mov	r8, r0
 800ad84:	4689      	mov	r9, r1
 800ad86:	e774      	b.n	800ac72 <_strtod_l+0xa8a>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ad90:	e7dd      	b.n	800ad4e <_strtod_l+0xb66>
 800ad92:	a30d      	add	r3, pc, #52	; (adr r3, 800adc8 <_strtod_l+0xbe0>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f7f5 fe80 	bl	8000a9c <__aeabi_dcmplt>
 800ad9c:	e79b      	b.n	800acd6 <_strtod_l+0xaee>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	930e      	str	r3, [sp, #56]	; 0x38
 800ada2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ada4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	f7ff ba5b 	b.w	800a262 <_strtod_l+0x7a>
 800adac:	2a65      	cmp	r2, #101	; 0x65
 800adae:	f43f ab52 	beq.w	800a456 <_strtod_l+0x26e>
 800adb2:	2a45      	cmp	r2, #69	; 0x45
 800adb4:	f43f ab4f 	beq.w	800a456 <_strtod_l+0x26e>
 800adb8:	2301      	movs	r3, #1
 800adba:	f7ff bb87 	b.w	800a4cc <_strtod_l+0x2e4>
 800adbe:	bf00      	nop
 800adc0:	ffc00000 	.word	0xffc00000
 800adc4:	41dfffff 	.word	0x41dfffff
 800adc8:	94a03595 	.word	0x94a03595
 800adcc:	3fcfffff 	.word	0x3fcfffff

0800add0 <strtod>:
 800add0:	460a      	mov	r2, r1
 800add2:	4601      	mov	r1, r0
 800add4:	4802      	ldr	r0, [pc, #8]	; (800ade0 <strtod+0x10>)
 800add6:	4b03      	ldr	r3, [pc, #12]	; (800ade4 <strtod+0x14>)
 800add8:	6800      	ldr	r0, [r0, #0]
 800adda:	f7ff ba05 	b.w	800a1e8 <_strtod_l>
 800adde:	bf00      	nop
 800ade0:	20000274 	.word	0x20000274
 800ade4:	200000bc 	.word	0x200000bc

0800ade8 <__cvt>:
 800ade8:	2b00      	cmp	r3, #0
 800adea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adee:	461f      	mov	r7, r3
 800adf0:	bfbb      	ittet	lt
 800adf2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800adf6:	461f      	movlt	r7, r3
 800adf8:	2300      	movge	r3, #0
 800adfa:	232d      	movlt	r3, #45	; 0x2d
 800adfc:	b088      	sub	sp, #32
 800adfe:	4614      	mov	r4, r2
 800ae00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae02:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ae04:	7013      	strb	r3, [r2, #0]
 800ae06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae08:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ae0c:	f023 0820 	bic.w	r8, r3, #32
 800ae10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae14:	d005      	beq.n	800ae22 <__cvt+0x3a>
 800ae16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae1a:	d100      	bne.n	800ae1e <__cvt+0x36>
 800ae1c:	3501      	adds	r5, #1
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e000      	b.n	800ae24 <__cvt+0x3c>
 800ae22:	2303      	movs	r3, #3
 800ae24:	aa07      	add	r2, sp, #28
 800ae26:	9204      	str	r2, [sp, #16]
 800ae28:	aa06      	add	r2, sp, #24
 800ae2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ae2e:	e9cd 3500 	strd	r3, r5, [sp]
 800ae32:	4622      	mov	r2, r4
 800ae34:	463b      	mov	r3, r7
 800ae36:	f000 fe9b 	bl	800bb70 <_dtoa_r>
 800ae3a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae3e:	4606      	mov	r6, r0
 800ae40:	d102      	bne.n	800ae48 <__cvt+0x60>
 800ae42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae44:	07db      	lsls	r3, r3, #31
 800ae46:	d522      	bpl.n	800ae8e <__cvt+0xa6>
 800ae48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae4c:	eb06 0905 	add.w	r9, r6, r5
 800ae50:	d110      	bne.n	800ae74 <__cvt+0x8c>
 800ae52:	7833      	ldrb	r3, [r6, #0]
 800ae54:	2b30      	cmp	r3, #48	; 0x30
 800ae56:	d10a      	bne.n	800ae6e <__cvt+0x86>
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7f5 fe12 	bl	8000a88 <__aeabi_dcmpeq>
 800ae64:	b918      	cbnz	r0, 800ae6e <__cvt+0x86>
 800ae66:	f1c5 0501 	rsb	r5, r5, #1
 800ae6a:	f8ca 5000 	str.w	r5, [sl]
 800ae6e:	f8da 3000 	ldr.w	r3, [sl]
 800ae72:	4499      	add	r9, r3
 800ae74:	2200      	movs	r2, #0
 800ae76:	2300      	movs	r3, #0
 800ae78:	4620      	mov	r0, r4
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	f7f5 fe04 	bl	8000a88 <__aeabi_dcmpeq>
 800ae80:	b108      	cbz	r0, 800ae86 <__cvt+0x9e>
 800ae82:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae86:	2230      	movs	r2, #48	; 0x30
 800ae88:	9b07      	ldr	r3, [sp, #28]
 800ae8a:	454b      	cmp	r3, r9
 800ae8c:	d307      	bcc.n	800ae9e <__cvt+0xb6>
 800ae8e:	4630      	mov	r0, r6
 800ae90:	9b07      	ldr	r3, [sp, #28]
 800ae92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae94:	1b9b      	subs	r3, r3, r6
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	b008      	add	sp, #32
 800ae9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9e:	1c59      	adds	r1, r3, #1
 800aea0:	9107      	str	r1, [sp, #28]
 800aea2:	701a      	strb	r2, [r3, #0]
 800aea4:	e7f0      	b.n	800ae88 <__cvt+0xa0>

0800aea6 <__exponent>:
 800aea6:	4603      	mov	r3, r0
 800aea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeaa:	2900      	cmp	r1, #0
 800aeac:	f803 2b02 	strb.w	r2, [r3], #2
 800aeb0:	bfb6      	itet	lt
 800aeb2:	222d      	movlt	r2, #45	; 0x2d
 800aeb4:	222b      	movge	r2, #43	; 0x2b
 800aeb6:	4249      	neglt	r1, r1
 800aeb8:	2909      	cmp	r1, #9
 800aeba:	7042      	strb	r2, [r0, #1]
 800aebc:	dd2a      	ble.n	800af14 <__exponent+0x6e>
 800aebe:	f10d 0207 	add.w	r2, sp, #7
 800aec2:	4617      	mov	r7, r2
 800aec4:	260a      	movs	r6, #10
 800aec6:	fb91 f5f6 	sdiv	r5, r1, r6
 800aeca:	4694      	mov	ip, r2
 800aecc:	fb06 1415 	mls	r4, r6, r5, r1
 800aed0:	3430      	adds	r4, #48	; 0x30
 800aed2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aed6:	460c      	mov	r4, r1
 800aed8:	2c63      	cmp	r4, #99	; 0x63
 800aeda:	4629      	mov	r1, r5
 800aedc:	f102 32ff 	add.w	r2, r2, #4294967295
 800aee0:	dcf1      	bgt.n	800aec6 <__exponent+0x20>
 800aee2:	3130      	adds	r1, #48	; 0x30
 800aee4:	f1ac 0402 	sub.w	r4, ip, #2
 800aee8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aeec:	4622      	mov	r2, r4
 800aeee:	1c41      	adds	r1, r0, #1
 800aef0:	42ba      	cmp	r2, r7
 800aef2:	d30a      	bcc.n	800af0a <__exponent+0x64>
 800aef4:	f10d 0209 	add.w	r2, sp, #9
 800aef8:	eba2 020c 	sub.w	r2, r2, ip
 800aefc:	42bc      	cmp	r4, r7
 800aefe:	bf88      	it	hi
 800af00:	2200      	movhi	r2, #0
 800af02:	4413      	add	r3, r2
 800af04:	1a18      	subs	r0, r3, r0
 800af06:	b003      	add	sp, #12
 800af08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800af0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800af12:	e7ed      	b.n	800aef0 <__exponent+0x4a>
 800af14:	2330      	movs	r3, #48	; 0x30
 800af16:	3130      	adds	r1, #48	; 0x30
 800af18:	7083      	strb	r3, [r0, #2]
 800af1a:	70c1      	strb	r1, [r0, #3]
 800af1c:	1d03      	adds	r3, r0, #4
 800af1e:	e7f1      	b.n	800af04 <__exponent+0x5e>

0800af20 <_printf_float>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	b091      	sub	sp, #68	; 0x44
 800af26:	460c      	mov	r4, r1
 800af28:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800af2c:	4616      	mov	r6, r2
 800af2e:	461f      	mov	r7, r3
 800af30:	4605      	mov	r5, r0
 800af32:	f000 fcf7 	bl	800b924 <_localeconv_r>
 800af36:	6803      	ldr	r3, [r0, #0]
 800af38:	4618      	mov	r0, r3
 800af3a:	9309      	str	r3, [sp, #36]	; 0x24
 800af3c:	f7f5 f978 	bl	8000230 <strlen>
 800af40:	2300      	movs	r3, #0
 800af42:	930e      	str	r3, [sp, #56]	; 0x38
 800af44:	f8d8 3000 	ldr.w	r3, [r8]
 800af48:	900a      	str	r0, [sp, #40]	; 0x28
 800af4a:	3307      	adds	r3, #7
 800af4c:	f023 0307 	bic.w	r3, r3, #7
 800af50:	f103 0208 	add.w	r2, r3, #8
 800af54:	f894 9018 	ldrb.w	r9, [r4, #24]
 800af58:	f8d4 b000 	ldr.w	fp, [r4]
 800af5c:	f8c8 2000 	str.w	r2, [r8]
 800af60:	e9d3 a800 	ldrd	sl, r8, [r3]
 800af64:	4652      	mov	r2, sl
 800af66:	4643      	mov	r3, r8
 800af68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af6c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800af70:	930b      	str	r3, [sp, #44]	; 0x2c
 800af72:	f04f 32ff 	mov.w	r2, #4294967295
 800af76:	4650      	mov	r0, sl
 800af78:	4b9c      	ldr	r3, [pc, #624]	; (800b1ec <_printf_float+0x2cc>)
 800af7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af7c:	f7f5 fdb6 	bl	8000aec <__aeabi_dcmpun>
 800af80:	bb70      	cbnz	r0, 800afe0 <_printf_float+0xc0>
 800af82:	f04f 32ff 	mov.w	r2, #4294967295
 800af86:	4650      	mov	r0, sl
 800af88:	4b98      	ldr	r3, [pc, #608]	; (800b1ec <_printf_float+0x2cc>)
 800af8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af8c:	f7f5 fd90 	bl	8000ab0 <__aeabi_dcmple>
 800af90:	bb30      	cbnz	r0, 800afe0 <_printf_float+0xc0>
 800af92:	2200      	movs	r2, #0
 800af94:	2300      	movs	r3, #0
 800af96:	4650      	mov	r0, sl
 800af98:	4641      	mov	r1, r8
 800af9a:	f7f5 fd7f 	bl	8000a9c <__aeabi_dcmplt>
 800af9e:	b110      	cbz	r0, 800afa6 <_printf_float+0x86>
 800afa0:	232d      	movs	r3, #45	; 0x2d
 800afa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afa6:	4a92      	ldr	r2, [pc, #584]	; (800b1f0 <_printf_float+0x2d0>)
 800afa8:	4b92      	ldr	r3, [pc, #584]	; (800b1f4 <_printf_float+0x2d4>)
 800afaa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800afae:	bf94      	ite	ls
 800afb0:	4690      	movls	r8, r2
 800afb2:	4698      	movhi	r8, r3
 800afb4:	2303      	movs	r3, #3
 800afb6:	f04f 0a00 	mov.w	sl, #0
 800afba:	6123      	str	r3, [r4, #16]
 800afbc:	f02b 0304 	bic.w	r3, fp, #4
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	4633      	mov	r3, r6
 800afc4:	4621      	mov	r1, r4
 800afc6:	4628      	mov	r0, r5
 800afc8:	9700      	str	r7, [sp, #0]
 800afca:	aa0f      	add	r2, sp, #60	; 0x3c
 800afcc:	f000 f9d6 	bl	800b37c <_printf_common>
 800afd0:	3001      	adds	r0, #1
 800afd2:	f040 8090 	bne.w	800b0f6 <_printf_float+0x1d6>
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295
 800afda:	b011      	add	sp, #68	; 0x44
 800afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe0:	4652      	mov	r2, sl
 800afe2:	4643      	mov	r3, r8
 800afe4:	4650      	mov	r0, sl
 800afe6:	4641      	mov	r1, r8
 800afe8:	f7f5 fd80 	bl	8000aec <__aeabi_dcmpun>
 800afec:	b148      	cbz	r0, 800b002 <_printf_float+0xe2>
 800afee:	f1b8 0f00 	cmp.w	r8, #0
 800aff2:	bfb8      	it	lt
 800aff4:	232d      	movlt	r3, #45	; 0x2d
 800aff6:	4a80      	ldr	r2, [pc, #512]	; (800b1f8 <_printf_float+0x2d8>)
 800aff8:	bfb8      	it	lt
 800affa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800affe:	4b7f      	ldr	r3, [pc, #508]	; (800b1fc <_printf_float+0x2dc>)
 800b000:	e7d3      	b.n	800afaa <_printf_float+0x8a>
 800b002:	6863      	ldr	r3, [r4, #4]
 800b004:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	d142      	bne.n	800b092 <_printf_float+0x172>
 800b00c:	2306      	movs	r3, #6
 800b00e:	6063      	str	r3, [r4, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	9206      	str	r2, [sp, #24]
 800b014:	aa0e      	add	r2, sp, #56	; 0x38
 800b016:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b01a:	aa0d      	add	r2, sp, #52	; 0x34
 800b01c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b020:	9203      	str	r2, [sp, #12]
 800b022:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b026:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	6863      	ldr	r3, [r4, #4]
 800b02e:	4652      	mov	r2, sl
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	4628      	mov	r0, r5
 800b034:	4643      	mov	r3, r8
 800b036:	910b      	str	r1, [sp, #44]	; 0x2c
 800b038:	f7ff fed6 	bl	800ade8 <__cvt>
 800b03c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b03e:	4680      	mov	r8, r0
 800b040:	2947      	cmp	r1, #71	; 0x47
 800b042:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b044:	d108      	bne.n	800b058 <_printf_float+0x138>
 800b046:	1cc8      	adds	r0, r1, #3
 800b048:	db02      	blt.n	800b050 <_printf_float+0x130>
 800b04a:	6863      	ldr	r3, [r4, #4]
 800b04c:	4299      	cmp	r1, r3
 800b04e:	dd40      	ble.n	800b0d2 <_printf_float+0x1b2>
 800b050:	f1a9 0902 	sub.w	r9, r9, #2
 800b054:	fa5f f989 	uxtb.w	r9, r9
 800b058:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b05c:	d81f      	bhi.n	800b09e <_printf_float+0x17e>
 800b05e:	464a      	mov	r2, r9
 800b060:	3901      	subs	r1, #1
 800b062:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b066:	910d      	str	r1, [sp, #52]	; 0x34
 800b068:	f7ff ff1d 	bl	800aea6 <__exponent>
 800b06c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b06e:	4682      	mov	sl, r0
 800b070:	1813      	adds	r3, r2, r0
 800b072:	2a01      	cmp	r2, #1
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	dc02      	bgt.n	800b07e <_printf_float+0x15e>
 800b078:	6822      	ldr	r2, [r4, #0]
 800b07a:	07d2      	lsls	r2, r2, #31
 800b07c:	d501      	bpl.n	800b082 <_printf_float+0x162>
 800b07e:	3301      	adds	r3, #1
 800b080:	6123      	str	r3, [r4, #16]
 800b082:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b086:	2b00      	cmp	r3, #0
 800b088:	d09b      	beq.n	800afc2 <_printf_float+0xa2>
 800b08a:	232d      	movs	r3, #45	; 0x2d
 800b08c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b090:	e797      	b.n	800afc2 <_printf_float+0xa2>
 800b092:	2947      	cmp	r1, #71	; 0x47
 800b094:	d1bc      	bne.n	800b010 <_printf_float+0xf0>
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1ba      	bne.n	800b010 <_printf_float+0xf0>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e7b7      	b.n	800b00e <_printf_float+0xee>
 800b09e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b0a2:	d118      	bne.n	800b0d6 <_printf_float+0x1b6>
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	6863      	ldr	r3, [r4, #4]
 800b0a8:	dd0b      	ble.n	800b0c2 <_printf_float+0x1a2>
 800b0aa:	6121      	str	r1, [r4, #16]
 800b0ac:	b913      	cbnz	r3, 800b0b4 <_printf_float+0x194>
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	07d0      	lsls	r0, r2, #31
 800b0b2:	d502      	bpl.n	800b0ba <_printf_float+0x19a>
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	440b      	add	r3, r1
 800b0b8:	6123      	str	r3, [r4, #16]
 800b0ba:	f04f 0a00 	mov.w	sl, #0
 800b0be:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0c0:	e7df      	b.n	800b082 <_printf_float+0x162>
 800b0c2:	b913      	cbnz	r3, 800b0ca <_printf_float+0x1aa>
 800b0c4:	6822      	ldr	r2, [r4, #0]
 800b0c6:	07d2      	lsls	r2, r2, #31
 800b0c8:	d501      	bpl.n	800b0ce <_printf_float+0x1ae>
 800b0ca:	3302      	adds	r3, #2
 800b0cc:	e7f4      	b.n	800b0b8 <_printf_float+0x198>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e7f2      	b.n	800b0b8 <_printf_float+0x198>
 800b0d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b0d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0d8:	4299      	cmp	r1, r3
 800b0da:	db05      	blt.n	800b0e8 <_printf_float+0x1c8>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	6121      	str	r1, [r4, #16]
 800b0e0:	07d8      	lsls	r0, r3, #31
 800b0e2:	d5ea      	bpl.n	800b0ba <_printf_float+0x19a>
 800b0e4:	1c4b      	adds	r3, r1, #1
 800b0e6:	e7e7      	b.n	800b0b8 <_printf_float+0x198>
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	bfcc      	ite	gt
 800b0ec:	2201      	movgt	r2, #1
 800b0ee:	f1c1 0202 	rsble	r2, r1, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	e7e0      	b.n	800b0b8 <_printf_float+0x198>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	055a      	lsls	r2, r3, #21
 800b0fa:	d407      	bmi.n	800b10c <_printf_float+0x1ec>
 800b0fc:	6923      	ldr	r3, [r4, #16]
 800b0fe:	4642      	mov	r2, r8
 800b100:	4631      	mov	r1, r6
 800b102:	4628      	mov	r0, r5
 800b104:	47b8      	blx	r7
 800b106:	3001      	adds	r0, #1
 800b108:	d12b      	bne.n	800b162 <_printf_float+0x242>
 800b10a:	e764      	b.n	800afd6 <_printf_float+0xb6>
 800b10c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b110:	f240 80dd 	bls.w	800b2ce <_printf_float+0x3ae>
 800b114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b118:	2200      	movs	r2, #0
 800b11a:	2300      	movs	r3, #0
 800b11c:	f7f5 fcb4 	bl	8000a88 <__aeabi_dcmpeq>
 800b120:	2800      	cmp	r0, #0
 800b122:	d033      	beq.n	800b18c <_printf_float+0x26c>
 800b124:	2301      	movs	r3, #1
 800b126:	4631      	mov	r1, r6
 800b128:	4628      	mov	r0, r5
 800b12a:	4a35      	ldr	r2, [pc, #212]	; (800b200 <_printf_float+0x2e0>)
 800b12c:	47b8      	blx	r7
 800b12e:	3001      	adds	r0, #1
 800b130:	f43f af51 	beq.w	800afd6 <_printf_float+0xb6>
 800b134:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b138:	429a      	cmp	r2, r3
 800b13a:	db02      	blt.n	800b142 <_printf_float+0x222>
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	07d8      	lsls	r0, r3, #31
 800b140:	d50f      	bpl.n	800b162 <_printf_float+0x242>
 800b142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b146:	4631      	mov	r1, r6
 800b148:	4628      	mov	r0, r5
 800b14a:	47b8      	blx	r7
 800b14c:	3001      	adds	r0, #1
 800b14e:	f43f af42 	beq.w	800afd6 <_printf_float+0xb6>
 800b152:	f04f 0800 	mov.w	r8, #0
 800b156:	f104 091a 	add.w	r9, r4, #26
 800b15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b15c:	3b01      	subs	r3, #1
 800b15e:	4543      	cmp	r3, r8
 800b160:	dc09      	bgt.n	800b176 <_printf_float+0x256>
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	079b      	lsls	r3, r3, #30
 800b166:	f100 8104 	bmi.w	800b372 <_printf_float+0x452>
 800b16a:	68e0      	ldr	r0, [r4, #12]
 800b16c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b16e:	4298      	cmp	r0, r3
 800b170:	bfb8      	it	lt
 800b172:	4618      	movlt	r0, r3
 800b174:	e731      	b.n	800afda <_printf_float+0xba>
 800b176:	2301      	movs	r3, #1
 800b178:	464a      	mov	r2, r9
 800b17a:	4631      	mov	r1, r6
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b8      	blx	r7
 800b180:	3001      	adds	r0, #1
 800b182:	f43f af28 	beq.w	800afd6 <_printf_float+0xb6>
 800b186:	f108 0801 	add.w	r8, r8, #1
 800b18a:	e7e6      	b.n	800b15a <_printf_float+0x23a>
 800b18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b18e:	2b00      	cmp	r3, #0
 800b190:	dc38      	bgt.n	800b204 <_printf_float+0x2e4>
 800b192:	2301      	movs	r3, #1
 800b194:	4631      	mov	r1, r6
 800b196:	4628      	mov	r0, r5
 800b198:	4a19      	ldr	r2, [pc, #100]	; (800b200 <_printf_float+0x2e0>)
 800b19a:	47b8      	blx	r7
 800b19c:	3001      	adds	r0, #1
 800b19e:	f43f af1a 	beq.w	800afd6 <_printf_float+0xb6>
 800b1a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	d102      	bne.n	800b1b0 <_printf_float+0x290>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	07d9      	lsls	r1, r3, #31
 800b1ae:	d5d8      	bpl.n	800b162 <_printf_float+0x242>
 800b1b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	47b8      	blx	r7
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	f43f af0b 	beq.w	800afd6 <_printf_float+0xb6>
 800b1c0:	f04f 0900 	mov.w	r9, #0
 800b1c4:	f104 0a1a 	add.w	sl, r4, #26
 800b1c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ca:	425b      	negs	r3, r3
 800b1cc:	454b      	cmp	r3, r9
 800b1ce:	dc01      	bgt.n	800b1d4 <_printf_float+0x2b4>
 800b1d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d2:	e794      	b.n	800b0fe <_printf_float+0x1de>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	4652      	mov	r2, sl
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4628      	mov	r0, r5
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f43f aef9 	beq.w	800afd6 <_printf_float+0xb6>
 800b1e4:	f109 0901 	add.w	r9, r9, #1
 800b1e8:	e7ee      	b.n	800b1c8 <_printf_float+0x2a8>
 800b1ea:	bf00      	nop
 800b1ec:	7fefffff 	.word	0x7fefffff
 800b1f0:	0800e500 	.word	0x0800e500
 800b1f4:	0800e504 	.word	0x0800e504
 800b1f8:	0800e508 	.word	0x0800e508
 800b1fc:	0800e50c 	.word	0x0800e50c
 800b200:	0800e510 	.word	0x0800e510
 800b204:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b208:	429a      	cmp	r2, r3
 800b20a:	bfa8      	it	ge
 800b20c:	461a      	movge	r2, r3
 800b20e:	2a00      	cmp	r2, #0
 800b210:	4691      	mov	r9, r2
 800b212:	dc37      	bgt.n	800b284 <_printf_float+0x364>
 800b214:	f04f 0b00 	mov.w	fp, #0
 800b218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b21c:	f104 021a 	add.w	r2, r4, #26
 800b220:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b224:	ebaa 0309 	sub.w	r3, sl, r9
 800b228:	455b      	cmp	r3, fp
 800b22a:	dc33      	bgt.n	800b294 <_printf_float+0x374>
 800b22c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b230:	429a      	cmp	r2, r3
 800b232:	db3b      	blt.n	800b2ac <_printf_float+0x38c>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	07da      	lsls	r2, r3, #31
 800b238:	d438      	bmi.n	800b2ac <_printf_float+0x38c>
 800b23a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b23e:	eba2 0903 	sub.w	r9, r2, r3
 800b242:	eba2 020a 	sub.w	r2, r2, sl
 800b246:	4591      	cmp	r9, r2
 800b248:	bfa8      	it	ge
 800b24a:	4691      	movge	r9, r2
 800b24c:	f1b9 0f00 	cmp.w	r9, #0
 800b250:	dc34      	bgt.n	800b2bc <_printf_float+0x39c>
 800b252:	f04f 0800 	mov.w	r8, #0
 800b256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b25a:	f104 0a1a 	add.w	sl, r4, #26
 800b25e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b262:	1a9b      	subs	r3, r3, r2
 800b264:	eba3 0309 	sub.w	r3, r3, r9
 800b268:	4543      	cmp	r3, r8
 800b26a:	f77f af7a 	ble.w	800b162 <_printf_float+0x242>
 800b26e:	2301      	movs	r3, #1
 800b270:	4652      	mov	r2, sl
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	f43f aeac 	beq.w	800afd6 <_printf_float+0xb6>
 800b27e:	f108 0801 	add.w	r8, r8, #1
 800b282:	e7ec      	b.n	800b25e <_printf_float+0x33e>
 800b284:	4613      	mov	r3, r2
 800b286:	4631      	mov	r1, r6
 800b288:	4642      	mov	r2, r8
 800b28a:	4628      	mov	r0, r5
 800b28c:	47b8      	blx	r7
 800b28e:	3001      	adds	r0, #1
 800b290:	d1c0      	bne.n	800b214 <_printf_float+0x2f4>
 800b292:	e6a0      	b.n	800afd6 <_printf_float+0xb6>
 800b294:	2301      	movs	r3, #1
 800b296:	4631      	mov	r1, r6
 800b298:	4628      	mov	r0, r5
 800b29a:	920b      	str	r2, [sp, #44]	; 0x2c
 800b29c:	47b8      	blx	r7
 800b29e:	3001      	adds	r0, #1
 800b2a0:	f43f ae99 	beq.w	800afd6 <_printf_float+0xb6>
 800b2a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2a6:	f10b 0b01 	add.w	fp, fp, #1
 800b2aa:	e7b9      	b.n	800b220 <_printf_float+0x300>
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d1bf      	bne.n	800b23a <_printf_float+0x31a>
 800b2ba:	e68c      	b.n	800afd6 <_printf_float+0xb6>
 800b2bc:	464b      	mov	r3, r9
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	eb08 020a 	add.w	r2, r8, sl
 800b2c6:	47b8      	blx	r7
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d1c2      	bne.n	800b252 <_printf_float+0x332>
 800b2cc:	e683      	b.n	800afd6 <_printf_float+0xb6>
 800b2ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2d0:	2a01      	cmp	r2, #1
 800b2d2:	dc01      	bgt.n	800b2d8 <_printf_float+0x3b8>
 800b2d4:	07db      	lsls	r3, r3, #31
 800b2d6:	d539      	bpl.n	800b34c <_printf_float+0x42c>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	4642      	mov	r2, r8
 800b2dc:	4631      	mov	r1, r6
 800b2de:	4628      	mov	r0, r5
 800b2e0:	47b8      	blx	r7
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	f43f ae77 	beq.w	800afd6 <_printf_float+0xb6>
 800b2e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	47b8      	blx	r7
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	f43f ae6f 	beq.w	800afd6 <_printf_float+0xb6>
 800b2f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2300      	movs	r3, #0
 800b300:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b304:	f7f5 fbc0 	bl	8000a88 <__aeabi_dcmpeq>
 800b308:	b9d8      	cbnz	r0, 800b342 <_printf_float+0x422>
 800b30a:	f109 33ff 	add.w	r3, r9, #4294967295
 800b30e:	f108 0201 	add.w	r2, r8, #1
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	d10e      	bne.n	800b33a <_printf_float+0x41a>
 800b31c:	e65b      	b.n	800afd6 <_printf_float+0xb6>
 800b31e:	2301      	movs	r3, #1
 800b320:	464a      	mov	r2, r9
 800b322:	4631      	mov	r1, r6
 800b324:	4628      	mov	r0, r5
 800b326:	47b8      	blx	r7
 800b328:	3001      	adds	r0, #1
 800b32a:	f43f ae54 	beq.w	800afd6 <_printf_float+0xb6>
 800b32e:	f108 0801 	add.w	r8, r8, #1
 800b332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b334:	3b01      	subs	r3, #1
 800b336:	4543      	cmp	r3, r8
 800b338:	dcf1      	bgt.n	800b31e <_printf_float+0x3fe>
 800b33a:	4653      	mov	r3, sl
 800b33c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b340:	e6de      	b.n	800b100 <_printf_float+0x1e0>
 800b342:	f04f 0800 	mov.w	r8, #0
 800b346:	f104 091a 	add.w	r9, r4, #26
 800b34a:	e7f2      	b.n	800b332 <_printf_float+0x412>
 800b34c:	2301      	movs	r3, #1
 800b34e:	4642      	mov	r2, r8
 800b350:	e7df      	b.n	800b312 <_printf_float+0x3f2>
 800b352:	2301      	movs	r3, #1
 800b354:	464a      	mov	r2, r9
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	f43f ae3a 	beq.w	800afd6 <_printf_float+0xb6>
 800b362:	f108 0801 	add.w	r8, r8, #1
 800b366:	68e3      	ldr	r3, [r4, #12]
 800b368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b36a:	1a5b      	subs	r3, r3, r1
 800b36c:	4543      	cmp	r3, r8
 800b36e:	dcf0      	bgt.n	800b352 <_printf_float+0x432>
 800b370:	e6fb      	b.n	800b16a <_printf_float+0x24a>
 800b372:	f04f 0800 	mov.w	r8, #0
 800b376:	f104 0919 	add.w	r9, r4, #25
 800b37a:	e7f4      	b.n	800b366 <_printf_float+0x446>

0800b37c <_printf_common>:
 800b37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b380:	4616      	mov	r6, r2
 800b382:	4699      	mov	r9, r3
 800b384:	688a      	ldr	r2, [r1, #8]
 800b386:	690b      	ldr	r3, [r1, #16]
 800b388:	4607      	mov	r7, r0
 800b38a:	4293      	cmp	r3, r2
 800b38c:	bfb8      	it	lt
 800b38e:	4613      	movlt	r3, r2
 800b390:	6033      	str	r3, [r6, #0]
 800b392:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b396:	460c      	mov	r4, r1
 800b398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b39c:	b10a      	cbz	r2, 800b3a2 <_printf_common+0x26>
 800b39e:	3301      	adds	r3, #1
 800b3a0:	6033      	str	r3, [r6, #0]
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	0699      	lsls	r1, r3, #26
 800b3a6:	bf42      	ittt	mi
 800b3a8:	6833      	ldrmi	r3, [r6, #0]
 800b3aa:	3302      	addmi	r3, #2
 800b3ac:	6033      	strmi	r3, [r6, #0]
 800b3ae:	6825      	ldr	r5, [r4, #0]
 800b3b0:	f015 0506 	ands.w	r5, r5, #6
 800b3b4:	d106      	bne.n	800b3c4 <_printf_common+0x48>
 800b3b6:	f104 0a19 	add.w	sl, r4, #25
 800b3ba:	68e3      	ldr	r3, [r4, #12]
 800b3bc:	6832      	ldr	r2, [r6, #0]
 800b3be:	1a9b      	subs	r3, r3, r2
 800b3c0:	42ab      	cmp	r3, r5
 800b3c2:	dc2b      	bgt.n	800b41c <_printf_common+0xa0>
 800b3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3c8:	1e13      	subs	r3, r2, #0
 800b3ca:	6822      	ldr	r2, [r4, #0]
 800b3cc:	bf18      	it	ne
 800b3ce:	2301      	movne	r3, #1
 800b3d0:	0692      	lsls	r2, r2, #26
 800b3d2:	d430      	bmi.n	800b436 <_printf_common+0xba>
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3dc:	47c0      	blx	r8
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d023      	beq.n	800b42a <_printf_common+0xae>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	6922      	ldr	r2, [r4, #16]
 800b3e6:	f003 0306 	and.w	r3, r3, #6
 800b3ea:	2b04      	cmp	r3, #4
 800b3ec:	bf14      	ite	ne
 800b3ee:	2500      	movne	r5, #0
 800b3f0:	6833      	ldreq	r3, [r6, #0]
 800b3f2:	f04f 0600 	mov.w	r6, #0
 800b3f6:	bf08      	it	eq
 800b3f8:	68e5      	ldreq	r5, [r4, #12]
 800b3fa:	f104 041a 	add.w	r4, r4, #26
 800b3fe:	bf08      	it	eq
 800b400:	1aed      	subeq	r5, r5, r3
 800b402:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b406:	bf08      	it	eq
 800b408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b40c:	4293      	cmp	r3, r2
 800b40e:	bfc4      	itt	gt
 800b410:	1a9b      	subgt	r3, r3, r2
 800b412:	18ed      	addgt	r5, r5, r3
 800b414:	42b5      	cmp	r5, r6
 800b416:	d11a      	bne.n	800b44e <_printf_common+0xd2>
 800b418:	2000      	movs	r0, #0
 800b41a:	e008      	b.n	800b42e <_printf_common+0xb2>
 800b41c:	2301      	movs	r3, #1
 800b41e:	4652      	mov	r2, sl
 800b420:	4649      	mov	r1, r9
 800b422:	4638      	mov	r0, r7
 800b424:	47c0      	blx	r8
 800b426:	3001      	adds	r0, #1
 800b428:	d103      	bne.n	800b432 <_printf_common+0xb6>
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b432:	3501      	adds	r5, #1
 800b434:	e7c1      	b.n	800b3ba <_printf_common+0x3e>
 800b436:	2030      	movs	r0, #48	; 0x30
 800b438:	18e1      	adds	r1, r4, r3
 800b43a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b444:	4422      	add	r2, r4
 800b446:	3302      	adds	r3, #2
 800b448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b44c:	e7c2      	b.n	800b3d4 <_printf_common+0x58>
 800b44e:	2301      	movs	r3, #1
 800b450:	4622      	mov	r2, r4
 800b452:	4649      	mov	r1, r9
 800b454:	4638      	mov	r0, r7
 800b456:	47c0      	blx	r8
 800b458:	3001      	adds	r0, #1
 800b45a:	d0e6      	beq.n	800b42a <_printf_common+0xae>
 800b45c:	3601      	adds	r6, #1
 800b45e:	e7d9      	b.n	800b414 <_printf_common+0x98>

0800b460 <_printf_i>:
 800b460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b464:	7e0f      	ldrb	r7, [r1, #24]
 800b466:	4691      	mov	r9, r2
 800b468:	2f78      	cmp	r7, #120	; 0x78
 800b46a:	4680      	mov	r8, r0
 800b46c:	460c      	mov	r4, r1
 800b46e:	469a      	mov	sl, r3
 800b470:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b476:	d807      	bhi.n	800b488 <_printf_i+0x28>
 800b478:	2f62      	cmp	r7, #98	; 0x62
 800b47a:	d80a      	bhi.n	800b492 <_printf_i+0x32>
 800b47c:	2f00      	cmp	r7, #0
 800b47e:	f000 80d5 	beq.w	800b62c <_printf_i+0x1cc>
 800b482:	2f58      	cmp	r7, #88	; 0x58
 800b484:	f000 80c1 	beq.w	800b60a <_printf_i+0x1aa>
 800b488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b48c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b490:	e03a      	b.n	800b508 <_printf_i+0xa8>
 800b492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b496:	2b15      	cmp	r3, #21
 800b498:	d8f6      	bhi.n	800b488 <_printf_i+0x28>
 800b49a:	a101      	add	r1, pc, #4	; (adr r1, 800b4a0 <_printf_i+0x40>)
 800b49c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4a0:	0800b4f9 	.word	0x0800b4f9
 800b4a4:	0800b50d 	.word	0x0800b50d
 800b4a8:	0800b489 	.word	0x0800b489
 800b4ac:	0800b489 	.word	0x0800b489
 800b4b0:	0800b489 	.word	0x0800b489
 800b4b4:	0800b489 	.word	0x0800b489
 800b4b8:	0800b50d 	.word	0x0800b50d
 800b4bc:	0800b489 	.word	0x0800b489
 800b4c0:	0800b489 	.word	0x0800b489
 800b4c4:	0800b489 	.word	0x0800b489
 800b4c8:	0800b489 	.word	0x0800b489
 800b4cc:	0800b613 	.word	0x0800b613
 800b4d0:	0800b539 	.word	0x0800b539
 800b4d4:	0800b5cd 	.word	0x0800b5cd
 800b4d8:	0800b489 	.word	0x0800b489
 800b4dc:	0800b489 	.word	0x0800b489
 800b4e0:	0800b635 	.word	0x0800b635
 800b4e4:	0800b489 	.word	0x0800b489
 800b4e8:	0800b539 	.word	0x0800b539
 800b4ec:	0800b489 	.word	0x0800b489
 800b4f0:	0800b489 	.word	0x0800b489
 800b4f4:	0800b5d5 	.word	0x0800b5d5
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	1d1a      	adds	r2, r3, #4
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	602a      	str	r2, [r5, #0]
 800b500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b508:	2301      	movs	r3, #1
 800b50a:	e0a0      	b.n	800b64e <_printf_i+0x1ee>
 800b50c:	6820      	ldr	r0, [r4, #0]
 800b50e:	682b      	ldr	r3, [r5, #0]
 800b510:	0607      	lsls	r7, r0, #24
 800b512:	f103 0104 	add.w	r1, r3, #4
 800b516:	6029      	str	r1, [r5, #0]
 800b518:	d501      	bpl.n	800b51e <_printf_i+0xbe>
 800b51a:	681e      	ldr	r6, [r3, #0]
 800b51c:	e003      	b.n	800b526 <_printf_i+0xc6>
 800b51e:	0646      	lsls	r6, r0, #25
 800b520:	d5fb      	bpl.n	800b51a <_printf_i+0xba>
 800b522:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b526:	2e00      	cmp	r6, #0
 800b528:	da03      	bge.n	800b532 <_printf_i+0xd2>
 800b52a:	232d      	movs	r3, #45	; 0x2d
 800b52c:	4276      	negs	r6, r6
 800b52e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b532:	230a      	movs	r3, #10
 800b534:	4859      	ldr	r0, [pc, #356]	; (800b69c <_printf_i+0x23c>)
 800b536:	e012      	b.n	800b55e <_printf_i+0xfe>
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	6820      	ldr	r0, [r4, #0]
 800b53c:	1d19      	adds	r1, r3, #4
 800b53e:	6029      	str	r1, [r5, #0]
 800b540:	0605      	lsls	r5, r0, #24
 800b542:	d501      	bpl.n	800b548 <_printf_i+0xe8>
 800b544:	681e      	ldr	r6, [r3, #0]
 800b546:	e002      	b.n	800b54e <_printf_i+0xee>
 800b548:	0641      	lsls	r1, r0, #25
 800b54a:	d5fb      	bpl.n	800b544 <_printf_i+0xe4>
 800b54c:	881e      	ldrh	r6, [r3, #0]
 800b54e:	2f6f      	cmp	r7, #111	; 0x6f
 800b550:	bf0c      	ite	eq
 800b552:	2308      	moveq	r3, #8
 800b554:	230a      	movne	r3, #10
 800b556:	4851      	ldr	r0, [pc, #324]	; (800b69c <_printf_i+0x23c>)
 800b558:	2100      	movs	r1, #0
 800b55a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b55e:	6865      	ldr	r5, [r4, #4]
 800b560:	2d00      	cmp	r5, #0
 800b562:	bfa8      	it	ge
 800b564:	6821      	ldrge	r1, [r4, #0]
 800b566:	60a5      	str	r5, [r4, #8]
 800b568:	bfa4      	itt	ge
 800b56a:	f021 0104 	bicge.w	r1, r1, #4
 800b56e:	6021      	strge	r1, [r4, #0]
 800b570:	b90e      	cbnz	r6, 800b576 <_printf_i+0x116>
 800b572:	2d00      	cmp	r5, #0
 800b574:	d04b      	beq.n	800b60e <_printf_i+0x1ae>
 800b576:	4615      	mov	r5, r2
 800b578:	fbb6 f1f3 	udiv	r1, r6, r3
 800b57c:	fb03 6711 	mls	r7, r3, r1, r6
 800b580:	5dc7      	ldrb	r7, [r0, r7]
 800b582:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b586:	4637      	mov	r7, r6
 800b588:	42bb      	cmp	r3, r7
 800b58a:	460e      	mov	r6, r1
 800b58c:	d9f4      	bls.n	800b578 <_printf_i+0x118>
 800b58e:	2b08      	cmp	r3, #8
 800b590:	d10b      	bne.n	800b5aa <_printf_i+0x14a>
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	07de      	lsls	r6, r3, #31
 800b596:	d508      	bpl.n	800b5aa <_printf_i+0x14a>
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	6861      	ldr	r1, [r4, #4]
 800b59c:	4299      	cmp	r1, r3
 800b59e:	bfde      	ittt	le
 800b5a0:	2330      	movle	r3, #48	; 0x30
 800b5a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5aa:	1b52      	subs	r2, r2, r5
 800b5ac:	6122      	str	r2, [r4, #16]
 800b5ae:	464b      	mov	r3, r9
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	f8cd a000 	str.w	sl, [sp]
 800b5b8:	aa03      	add	r2, sp, #12
 800b5ba:	f7ff fedf 	bl	800b37c <_printf_common>
 800b5be:	3001      	adds	r0, #1
 800b5c0:	d14a      	bne.n	800b658 <_printf_i+0x1f8>
 800b5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c6:	b004      	add	sp, #16
 800b5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	f043 0320 	orr.w	r3, r3, #32
 800b5d2:	6023      	str	r3, [r4, #0]
 800b5d4:	2778      	movs	r7, #120	; 0x78
 800b5d6:	4832      	ldr	r0, [pc, #200]	; (800b6a0 <_printf_i+0x240>)
 800b5d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	6829      	ldr	r1, [r5, #0]
 800b5e0:	061f      	lsls	r7, r3, #24
 800b5e2:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5e6:	d402      	bmi.n	800b5ee <_printf_i+0x18e>
 800b5e8:	065f      	lsls	r7, r3, #25
 800b5ea:	bf48      	it	mi
 800b5ec:	b2b6      	uxthmi	r6, r6
 800b5ee:	07df      	lsls	r7, r3, #31
 800b5f0:	bf48      	it	mi
 800b5f2:	f043 0320 	orrmi.w	r3, r3, #32
 800b5f6:	6029      	str	r1, [r5, #0]
 800b5f8:	bf48      	it	mi
 800b5fa:	6023      	strmi	r3, [r4, #0]
 800b5fc:	b91e      	cbnz	r6, 800b606 <_printf_i+0x1a6>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	f023 0320 	bic.w	r3, r3, #32
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	2310      	movs	r3, #16
 800b608:	e7a6      	b.n	800b558 <_printf_i+0xf8>
 800b60a:	4824      	ldr	r0, [pc, #144]	; (800b69c <_printf_i+0x23c>)
 800b60c:	e7e4      	b.n	800b5d8 <_printf_i+0x178>
 800b60e:	4615      	mov	r5, r2
 800b610:	e7bd      	b.n	800b58e <_printf_i+0x12e>
 800b612:	682b      	ldr	r3, [r5, #0]
 800b614:	6826      	ldr	r6, [r4, #0]
 800b616:	1d18      	adds	r0, r3, #4
 800b618:	6961      	ldr	r1, [r4, #20]
 800b61a:	6028      	str	r0, [r5, #0]
 800b61c:	0635      	lsls	r5, r6, #24
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	d501      	bpl.n	800b626 <_printf_i+0x1c6>
 800b622:	6019      	str	r1, [r3, #0]
 800b624:	e002      	b.n	800b62c <_printf_i+0x1cc>
 800b626:	0670      	lsls	r0, r6, #25
 800b628:	d5fb      	bpl.n	800b622 <_printf_i+0x1c2>
 800b62a:	8019      	strh	r1, [r3, #0]
 800b62c:	2300      	movs	r3, #0
 800b62e:	4615      	mov	r5, r2
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	e7bc      	b.n	800b5ae <_printf_i+0x14e>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	2100      	movs	r1, #0
 800b638:	1d1a      	adds	r2, r3, #4
 800b63a:	602a      	str	r2, [r5, #0]
 800b63c:	681d      	ldr	r5, [r3, #0]
 800b63e:	6862      	ldr	r2, [r4, #4]
 800b640:	4628      	mov	r0, r5
 800b642:	f000 f9e6 	bl	800ba12 <memchr>
 800b646:	b108      	cbz	r0, 800b64c <_printf_i+0x1ec>
 800b648:	1b40      	subs	r0, r0, r5
 800b64a:	6060      	str	r0, [r4, #4]
 800b64c:	6863      	ldr	r3, [r4, #4]
 800b64e:	6123      	str	r3, [r4, #16]
 800b650:	2300      	movs	r3, #0
 800b652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b656:	e7aa      	b.n	800b5ae <_printf_i+0x14e>
 800b658:	462a      	mov	r2, r5
 800b65a:	4649      	mov	r1, r9
 800b65c:	4640      	mov	r0, r8
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	47d0      	blx	sl
 800b662:	3001      	adds	r0, #1
 800b664:	d0ad      	beq.n	800b5c2 <_printf_i+0x162>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	079b      	lsls	r3, r3, #30
 800b66a:	d413      	bmi.n	800b694 <_printf_i+0x234>
 800b66c:	68e0      	ldr	r0, [r4, #12]
 800b66e:	9b03      	ldr	r3, [sp, #12]
 800b670:	4298      	cmp	r0, r3
 800b672:	bfb8      	it	lt
 800b674:	4618      	movlt	r0, r3
 800b676:	e7a6      	b.n	800b5c6 <_printf_i+0x166>
 800b678:	2301      	movs	r3, #1
 800b67a:	4632      	mov	r2, r6
 800b67c:	4649      	mov	r1, r9
 800b67e:	4640      	mov	r0, r8
 800b680:	47d0      	blx	sl
 800b682:	3001      	adds	r0, #1
 800b684:	d09d      	beq.n	800b5c2 <_printf_i+0x162>
 800b686:	3501      	adds	r5, #1
 800b688:	68e3      	ldr	r3, [r4, #12]
 800b68a:	9903      	ldr	r1, [sp, #12]
 800b68c:	1a5b      	subs	r3, r3, r1
 800b68e:	42ab      	cmp	r3, r5
 800b690:	dcf2      	bgt.n	800b678 <_printf_i+0x218>
 800b692:	e7eb      	b.n	800b66c <_printf_i+0x20c>
 800b694:	2500      	movs	r5, #0
 800b696:	f104 0619 	add.w	r6, r4, #25
 800b69a:	e7f5      	b.n	800b688 <_printf_i+0x228>
 800b69c:	0800e512 	.word	0x0800e512
 800b6a0:	0800e523 	.word	0x0800e523

0800b6a4 <std>:
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	b510      	push	{r4, lr}
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b6ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6b2:	6083      	str	r3, [r0, #8]
 800b6b4:	8181      	strh	r1, [r0, #12]
 800b6b6:	6643      	str	r3, [r0, #100]	; 0x64
 800b6b8:	81c2      	strh	r2, [r0, #14]
 800b6ba:	6183      	str	r3, [r0, #24]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	2208      	movs	r2, #8
 800b6c0:	305c      	adds	r0, #92	; 0x5c
 800b6c2:	f000 f914 	bl	800b8ee <memset>
 800b6c6:	4b0d      	ldr	r3, [pc, #52]	; (800b6fc <std+0x58>)
 800b6c8:	6224      	str	r4, [r4, #32]
 800b6ca:	6263      	str	r3, [r4, #36]	; 0x24
 800b6cc:	4b0c      	ldr	r3, [pc, #48]	; (800b700 <std+0x5c>)
 800b6ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <std+0x60>)
 800b6d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <std+0x64>)
 800b6d6:	6323      	str	r3, [r4, #48]	; 0x30
 800b6d8:	4b0c      	ldr	r3, [pc, #48]	; (800b70c <std+0x68>)
 800b6da:	429c      	cmp	r4, r3
 800b6dc:	d006      	beq.n	800b6ec <std+0x48>
 800b6de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b6e2:	4294      	cmp	r4, r2
 800b6e4:	d002      	beq.n	800b6ec <std+0x48>
 800b6e6:	33d0      	adds	r3, #208	; 0xd0
 800b6e8:	429c      	cmp	r4, r3
 800b6ea:	d105      	bne.n	800b6f8 <std+0x54>
 800b6ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f4:	f000 b98a 	b.w	800ba0c <__retarget_lock_init_recursive>
 800b6f8:	bd10      	pop	{r4, pc}
 800b6fa:	bf00      	nop
 800b6fc:	0800b869 	.word	0x0800b869
 800b700:	0800b88b 	.word	0x0800b88b
 800b704:	0800b8c3 	.word	0x0800b8c3
 800b708:	0800b8e7 	.word	0x0800b8e7
 800b70c:	20002408 	.word	0x20002408

0800b710 <stdio_exit_handler>:
 800b710:	4a02      	ldr	r2, [pc, #8]	; (800b71c <stdio_exit_handler+0xc>)
 800b712:	4903      	ldr	r1, [pc, #12]	; (800b720 <stdio_exit_handler+0x10>)
 800b714:	4803      	ldr	r0, [pc, #12]	; (800b724 <stdio_exit_handler+0x14>)
 800b716:	f000 b869 	b.w	800b7ec <_fwalk_sglue>
 800b71a:	bf00      	nop
 800b71c:	200000b0 	.word	0x200000b0
 800b720:	0800dd11 	.word	0x0800dd11
 800b724:	20000228 	.word	0x20000228

0800b728 <cleanup_stdio>:
 800b728:	6841      	ldr	r1, [r0, #4]
 800b72a:	4b0c      	ldr	r3, [pc, #48]	; (800b75c <cleanup_stdio+0x34>)
 800b72c:	b510      	push	{r4, lr}
 800b72e:	4299      	cmp	r1, r3
 800b730:	4604      	mov	r4, r0
 800b732:	d001      	beq.n	800b738 <cleanup_stdio+0x10>
 800b734:	f002 faec 	bl	800dd10 <_fflush_r>
 800b738:	68a1      	ldr	r1, [r4, #8]
 800b73a:	4b09      	ldr	r3, [pc, #36]	; (800b760 <cleanup_stdio+0x38>)
 800b73c:	4299      	cmp	r1, r3
 800b73e:	d002      	beq.n	800b746 <cleanup_stdio+0x1e>
 800b740:	4620      	mov	r0, r4
 800b742:	f002 fae5 	bl	800dd10 <_fflush_r>
 800b746:	68e1      	ldr	r1, [r4, #12]
 800b748:	4b06      	ldr	r3, [pc, #24]	; (800b764 <cleanup_stdio+0x3c>)
 800b74a:	4299      	cmp	r1, r3
 800b74c:	d004      	beq.n	800b758 <cleanup_stdio+0x30>
 800b74e:	4620      	mov	r0, r4
 800b750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b754:	f002 badc 	b.w	800dd10 <_fflush_r>
 800b758:	bd10      	pop	{r4, pc}
 800b75a:	bf00      	nop
 800b75c:	20002408 	.word	0x20002408
 800b760:	20002470 	.word	0x20002470
 800b764:	200024d8 	.word	0x200024d8

0800b768 <global_stdio_init.part.0>:
 800b768:	b510      	push	{r4, lr}
 800b76a:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <global_stdio_init.part.0+0x30>)
 800b76c:	4c0b      	ldr	r4, [pc, #44]	; (800b79c <global_stdio_init.part.0+0x34>)
 800b76e:	4a0c      	ldr	r2, [pc, #48]	; (800b7a0 <global_stdio_init.part.0+0x38>)
 800b770:	4620      	mov	r0, r4
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	2104      	movs	r1, #4
 800b776:	2200      	movs	r2, #0
 800b778:	f7ff ff94 	bl	800b6a4 <std>
 800b77c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b780:	2201      	movs	r2, #1
 800b782:	2109      	movs	r1, #9
 800b784:	f7ff ff8e 	bl	800b6a4 <std>
 800b788:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b78c:	2202      	movs	r2, #2
 800b78e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b792:	2112      	movs	r1, #18
 800b794:	f7ff bf86 	b.w	800b6a4 <std>
 800b798:	20002540 	.word	0x20002540
 800b79c:	20002408 	.word	0x20002408
 800b7a0:	0800b711 	.word	0x0800b711

0800b7a4 <__sfp_lock_acquire>:
 800b7a4:	4801      	ldr	r0, [pc, #4]	; (800b7ac <__sfp_lock_acquire+0x8>)
 800b7a6:	f000 b932 	b.w	800ba0e <__retarget_lock_acquire_recursive>
 800b7aa:	bf00      	nop
 800b7ac:	20002549 	.word	0x20002549

0800b7b0 <__sfp_lock_release>:
 800b7b0:	4801      	ldr	r0, [pc, #4]	; (800b7b8 <__sfp_lock_release+0x8>)
 800b7b2:	f000 b92d 	b.w	800ba10 <__retarget_lock_release_recursive>
 800b7b6:	bf00      	nop
 800b7b8:	20002549 	.word	0x20002549

0800b7bc <__sinit>:
 800b7bc:	b510      	push	{r4, lr}
 800b7be:	4604      	mov	r4, r0
 800b7c0:	f7ff fff0 	bl	800b7a4 <__sfp_lock_acquire>
 800b7c4:	6a23      	ldr	r3, [r4, #32]
 800b7c6:	b11b      	cbz	r3, 800b7d0 <__sinit+0x14>
 800b7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7cc:	f7ff bff0 	b.w	800b7b0 <__sfp_lock_release>
 800b7d0:	4b04      	ldr	r3, [pc, #16]	; (800b7e4 <__sinit+0x28>)
 800b7d2:	6223      	str	r3, [r4, #32]
 800b7d4:	4b04      	ldr	r3, [pc, #16]	; (800b7e8 <__sinit+0x2c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1f5      	bne.n	800b7c8 <__sinit+0xc>
 800b7dc:	f7ff ffc4 	bl	800b768 <global_stdio_init.part.0>
 800b7e0:	e7f2      	b.n	800b7c8 <__sinit+0xc>
 800b7e2:	bf00      	nop
 800b7e4:	0800b729 	.word	0x0800b729
 800b7e8:	20002540 	.word	0x20002540

0800b7ec <_fwalk_sglue>:
 800b7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	4688      	mov	r8, r1
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	2600      	movs	r6, #0
 800b7f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7fc:	f1b9 0901 	subs.w	r9, r9, #1
 800b800:	d505      	bpl.n	800b80e <_fwalk_sglue+0x22>
 800b802:	6824      	ldr	r4, [r4, #0]
 800b804:	2c00      	cmp	r4, #0
 800b806:	d1f7      	bne.n	800b7f8 <_fwalk_sglue+0xc>
 800b808:	4630      	mov	r0, r6
 800b80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80e:	89ab      	ldrh	r3, [r5, #12]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d907      	bls.n	800b824 <_fwalk_sglue+0x38>
 800b814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b818:	3301      	adds	r3, #1
 800b81a:	d003      	beq.n	800b824 <_fwalk_sglue+0x38>
 800b81c:	4629      	mov	r1, r5
 800b81e:	4638      	mov	r0, r7
 800b820:	47c0      	blx	r8
 800b822:	4306      	orrs	r6, r0
 800b824:	3568      	adds	r5, #104	; 0x68
 800b826:	e7e9      	b.n	800b7fc <_fwalk_sglue+0x10>

0800b828 <siprintf>:
 800b828:	b40e      	push	{r1, r2, r3}
 800b82a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b82e:	b500      	push	{lr}
 800b830:	b09c      	sub	sp, #112	; 0x70
 800b832:	ab1d      	add	r3, sp, #116	; 0x74
 800b834:	9002      	str	r0, [sp, #8]
 800b836:	9006      	str	r0, [sp, #24]
 800b838:	9107      	str	r1, [sp, #28]
 800b83a:	9104      	str	r1, [sp, #16]
 800b83c:	4808      	ldr	r0, [pc, #32]	; (800b860 <siprintf+0x38>)
 800b83e:	4909      	ldr	r1, [pc, #36]	; (800b864 <siprintf+0x3c>)
 800b840:	f853 2b04 	ldr.w	r2, [r3], #4
 800b844:	9105      	str	r1, [sp, #20]
 800b846:	6800      	ldr	r0, [r0, #0]
 800b848:	a902      	add	r1, sp, #8
 800b84a:	9301      	str	r3, [sp, #4]
 800b84c:	f002 f8e0 	bl	800da10 <_svfiprintf_r>
 800b850:	2200      	movs	r2, #0
 800b852:	9b02      	ldr	r3, [sp, #8]
 800b854:	701a      	strb	r2, [r3, #0]
 800b856:	b01c      	add	sp, #112	; 0x70
 800b858:	f85d eb04 	ldr.w	lr, [sp], #4
 800b85c:	b003      	add	sp, #12
 800b85e:	4770      	bx	lr
 800b860:	20000274 	.word	0x20000274
 800b864:	ffff0208 	.word	0xffff0208

0800b868 <__sread>:
 800b868:	b510      	push	{r4, lr}
 800b86a:	460c      	mov	r4, r1
 800b86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b870:	f000 f87e 	bl	800b970 <_read_r>
 800b874:	2800      	cmp	r0, #0
 800b876:	bfab      	itete	ge
 800b878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b87a:	89a3      	ldrhlt	r3, [r4, #12]
 800b87c:	181b      	addge	r3, r3, r0
 800b87e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b882:	bfac      	ite	ge
 800b884:	6563      	strge	r3, [r4, #84]	; 0x54
 800b886:	81a3      	strhlt	r3, [r4, #12]
 800b888:	bd10      	pop	{r4, pc}

0800b88a <__swrite>:
 800b88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88e:	461f      	mov	r7, r3
 800b890:	898b      	ldrh	r3, [r1, #12]
 800b892:	4605      	mov	r5, r0
 800b894:	05db      	lsls	r3, r3, #23
 800b896:	460c      	mov	r4, r1
 800b898:	4616      	mov	r6, r2
 800b89a:	d505      	bpl.n	800b8a8 <__swrite+0x1e>
 800b89c:	2302      	movs	r3, #2
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a4:	f000 f852 	bl	800b94c <_lseek_r>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	4632      	mov	r2, r6
 800b8ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8b0:	81a3      	strh	r3, [r4, #12]
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	463b      	mov	r3, r7
 800b8b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8be:	f000 b869 	b.w	800b994 <_write_r>

0800b8c2 <__sseek>:
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ca:	f000 f83f 	bl	800b94c <_lseek_r>
 800b8ce:	1c43      	adds	r3, r0, #1
 800b8d0:	89a3      	ldrh	r3, [r4, #12]
 800b8d2:	bf15      	itete	ne
 800b8d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8de:	81a3      	strheq	r3, [r4, #12]
 800b8e0:	bf18      	it	ne
 800b8e2:	81a3      	strhne	r3, [r4, #12]
 800b8e4:	bd10      	pop	{r4, pc}

0800b8e6 <__sclose>:
 800b8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ea:	f000 b81f 	b.w	800b92c <_close_r>

0800b8ee <memset>:
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	4402      	add	r2, r0
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d100      	bne.n	800b8f8 <memset+0xa>
 800b8f6:	4770      	bx	lr
 800b8f8:	f803 1b01 	strb.w	r1, [r3], #1
 800b8fc:	e7f9      	b.n	800b8f2 <memset+0x4>

0800b8fe <strncmp>:
 800b8fe:	b510      	push	{r4, lr}
 800b900:	b16a      	cbz	r2, 800b91e <strncmp+0x20>
 800b902:	3901      	subs	r1, #1
 800b904:	1884      	adds	r4, r0, r2
 800b906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b90a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b90e:	429a      	cmp	r2, r3
 800b910:	d103      	bne.n	800b91a <strncmp+0x1c>
 800b912:	42a0      	cmp	r0, r4
 800b914:	d001      	beq.n	800b91a <strncmp+0x1c>
 800b916:	2a00      	cmp	r2, #0
 800b918:	d1f5      	bne.n	800b906 <strncmp+0x8>
 800b91a:	1ad0      	subs	r0, r2, r3
 800b91c:	bd10      	pop	{r4, pc}
 800b91e:	4610      	mov	r0, r2
 800b920:	e7fc      	b.n	800b91c <strncmp+0x1e>
	...

0800b924 <_localeconv_r>:
 800b924:	4800      	ldr	r0, [pc, #0]	; (800b928 <_localeconv_r+0x4>)
 800b926:	4770      	bx	lr
 800b928:	200001ac 	.word	0x200001ac

0800b92c <_close_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	2300      	movs	r3, #0
 800b930:	4d05      	ldr	r5, [pc, #20]	; (800b948 <_close_r+0x1c>)
 800b932:	4604      	mov	r4, r0
 800b934:	4608      	mov	r0, r1
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	f7f7 ffc8 	bl	80038cc <_close>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_close_r+0x1a>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_close_r+0x1a>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	20002544 	.word	0x20002544

0800b94c <_lseek_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	4611      	mov	r1, r2
 800b954:	2200      	movs	r2, #0
 800b956:	4d05      	ldr	r5, [pc, #20]	; (800b96c <_lseek_r+0x20>)
 800b958:	602a      	str	r2, [r5, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f7f7 ffda 	bl	8003914 <_lseek>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_lseek_r+0x1e>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_lseek_r+0x1e>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	20002544 	.word	0x20002544

0800b970 <_read_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	2200      	movs	r2, #0
 800b97a:	4d05      	ldr	r5, [pc, #20]	; (800b990 <_read_r+0x20>)
 800b97c:	602a      	str	r2, [r5, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	f7f7 ff6b 	bl	800385a <_read>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_read_r+0x1e>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_read_r+0x1e>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	20002544 	.word	0x20002544

0800b994 <_write_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	4611      	mov	r1, r2
 800b99c:	2200      	movs	r2, #0
 800b99e:	4d05      	ldr	r5, [pc, #20]	; (800b9b4 <_write_r+0x20>)
 800b9a0:	602a      	str	r2, [r5, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f7f7 ff76 	bl	8003894 <_write>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_write_r+0x1e>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_write_r+0x1e>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	20002544 	.word	0x20002544

0800b9b8 <__errno>:
 800b9b8:	4b01      	ldr	r3, [pc, #4]	; (800b9c0 <__errno+0x8>)
 800b9ba:	6818      	ldr	r0, [r3, #0]
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	20000274 	.word	0x20000274

0800b9c4 <__libc_init_array>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	2600      	movs	r6, #0
 800b9c8:	4d0c      	ldr	r5, [pc, #48]	; (800b9fc <__libc_init_array+0x38>)
 800b9ca:	4c0d      	ldr	r4, [pc, #52]	; (800ba00 <__libc_init_array+0x3c>)
 800b9cc:	1b64      	subs	r4, r4, r5
 800b9ce:	10a4      	asrs	r4, r4, #2
 800b9d0:	42a6      	cmp	r6, r4
 800b9d2:	d109      	bne.n	800b9e8 <__libc_init_array+0x24>
 800b9d4:	f002 fd10 	bl	800e3f8 <_init>
 800b9d8:	2600      	movs	r6, #0
 800b9da:	4d0a      	ldr	r5, [pc, #40]	; (800ba04 <__libc_init_array+0x40>)
 800b9dc:	4c0a      	ldr	r4, [pc, #40]	; (800ba08 <__libc_init_array+0x44>)
 800b9de:	1b64      	subs	r4, r4, r5
 800b9e0:	10a4      	asrs	r4, r4, #2
 800b9e2:	42a6      	cmp	r6, r4
 800b9e4:	d105      	bne.n	800b9f2 <__libc_init_array+0x2e>
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ec:	4798      	blx	r3
 800b9ee:	3601      	adds	r6, #1
 800b9f0:	e7ee      	b.n	800b9d0 <__libc_init_array+0xc>
 800b9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f6:	4798      	blx	r3
 800b9f8:	3601      	adds	r6, #1
 800b9fa:	e7f2      	b.n	800b9e2 <__libc_init_array+0x1e>
 800b9fc:	0800e8dc 	.word	0x0800e8dc
 800ba00:	0800e8dc 	.word	0x0800e8dc
 800ba04:	0800e8dc 	.word	0x0800e8dc
 800ba08:	0800e8e0 	.word	0x0800e8e0

0800ba0c <__retarget_lock_init_recursive>:
 800ba0c:	4770      	bx	lr

0800ba0e <__retarget_lock_acquire_recursive>:
 800ba0e:	4770      	bx	lr

0800ba10 <__retarget_lock_release_recursive>:
 800ba10:	4770      	bx	lr

0800ba12 <memchr>:
 800ba12:	4603      	mov	r3, r0
 800ba14:	b510      	push	{r4, lr}
 800ba16:	b2c9      	uxtb	r1, r1
 800ba18:	4402      	add	r2, r0
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	d101      	bne.n	800ba24 <memchr+0x12>
 800ba20:	2000      	movs	r0, #0
 800ba22:	e003      	b.n	800ba2c <memchr+0x1a>
 800ba24:	7804      	ldrb	r4, [r0, #0]
 800ba26:	3301      	adds	r3, #1
 800ba28:	428c      	cmp	r4, r1
 800ba2a:	d1f6      	bne.n	800ba1a <memchr+0x8>
 800ba2c:	bd10      	pop	{r4, pc}

0800ba2e <memcpy>:
 800ba2e:	440a      	add	r2, r1
 800ba30:	4291      	cmp	r1, r2
 800ba32:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba36:	d100      	bne.n	800ba3a <memcpy+0xc>
 800ba38:	4770      	bx	lr
 800ba3a:	b510      	push	{r4, lr}
 800ba3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba40:	4291      	cmp	r1, r2
 800ba42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba46:	d1f9      	bne.n	800ba3c <memcpy+0xe>
 800ba48:	bd10      	pop	{r4, pc}
	...

0800ba4c <nan>:
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	4901      	ldr	r1, [pc, #4]	; (800ba54 <nan+0x8>)
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	7ff80000 	.word	0x7ff80000

0800ba58 <quorem>:
 800ba58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	6903      	ldr	r3, [r0, #16]
 800ba5e:	690c      	ldr	r4, [r1, #16]
 800ba60:	4607      	mov	r7, r0
 800ba62:	42a3      	cmp	r3, r4
 800ba64:	db7f      	blt.n	800bb66 <quorem+0x10e>
 800ba66:	3c01      	subs	r4, #1
 800ba68:	f100 0514 	add.w	r5, r0, #20
 800ba6c:	f101 0814 	add.w	r8, r1, #20
 800ba70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	429a      	cmp	r2, r3
 800ba82:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba86:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba8e:	d331      	bcc.n	800baf4 <quorem+0x9c>
 800ba90:	f04f 0e00 	mov.w	lr, #0
 800ba94:	4640      	mov	r0, r8
 800ba96:	46ac      	mov	ip, r5
 800ba98:	46f2      	mov	sl, lr
 800ba9a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba9e:	b293      	uxth	r3, r2
 800baa0:	fb06 e303 	mla	r3, r6, r3, lr
 800baa4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800baa8:	0c1a      	lsrs	r2, r3, #16
 800baaa:	b29b      	uxth	r3, r3
 800baac:	fb06 220e 	mla	r2, r6, lr, r2
 800bab0:	ebaa 0303 	sub.w	r3, sl, r3
 800bab4:	f8dc a000 	ldr.w	sl, [ip]
 800bab8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800babc:	fa1f fa8a 	uxth.w	sl, sl
 800bac0:	4453      	add	r3, sl
 800bac2:	f8dc a000 	ldr.w	sl, [ip]
 800bac6:	b292      	uxth	r2, r2
 800bac8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bacc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bad6:	4581      	cmp	r9, r0
 800bad8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800badc:	f84c 3b04 	str.w	r3, [ip], #4
 800bae0:	d2db      	bcs.n	800ba9a <quorem+0x42>
 800bae2:	f855 300b 	ldr.w	r3, [r5, fp]
 800bae6:	b92b      	cbnz	r3, 800baf4 <quorem+0x9c>
 800bae8:	9b01      	ldr	r3, [sp, #4]
 800baea:	3b04      	subs	r3, #4
 800baec:	429d      	cmp	r5, r3
 800baee:	461a      	mov	r2, r3
 800baf0:	d32d      	bcc.n	800bb4e <quorem+0xf6>
 800baf2:	613c      	str	r4, [r7, #16]
 800baf4:	4638      	mov	r0, r7
 800baf6:	f001 fd4b 	bl	800d590 <__mcmp>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	db23      	blt.n	800bb46 <quorem+0xee>
 800bafe:	4629      	mov	r1, r5
 800bb00:	2000      	movs	r0, #0
 800bb02:	3601      	adds	r6, #1
 800bb04:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb08:	f8d1 c000 	ldr.w	ip, [r1]
 800bb0c:	b293      	uxth	r3, r2
 800bb0e:	1ac3      	subs	r3, r0, r3
 800bb10:	0c12      	lsrs	r2, r2, #16
 800bb12:	fa1f f08c 	uxth.w	r0, ip
 800bb16:	4403      	add	r3, r0
 800bb18:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bb1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb26:	45c1      	cmp	r9, r8
 800bb28:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb2c:	f841 3b04 	str.w	r3, [r1], #4
 800bb30:	d2e8      	bcs.n	800bb04 <quorem+0xac>
 800bb32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb3a:	b922      	cbnz	r2, 800bb46 <quorem+0xee>
 800bb3c:	3b04      	subs	r3, #4
 800bb3e:	429d      	cmp	r5, r3
 800bb40:	461a      	mov	r2, r3
 800bb42:	d30a      	bcc.n	800bb5a <quorem+0x102>
 800bb44:	613c      	str	r4, [r7, #16]
 800bb46:	4630      	mov	r0, r6
 800bb48:	b003      	add	sp, #12
 800bb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4e:	6812      	ldr	r2, [r2, #0]
 800bb50:	3b04      	subs	r3, #4
 800bb52:	2a00      	cmp	r2, #0
 800bb54:	d1cd      	bne.n	800baf2 <quorem+0x9a>
 800bb56:	3c01      	subs	r4, #1
 800bb58:	e7c8      	b.n	800baec <quorem+0x94>
 800bb5a:	6812      	ldr	r2, [r2, #0]
 800bb5c:	3b04      	subs	r3, #4
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	d1f0      	bne.n	800bb44 <quorem+0xec>
 800bb62:	3c01      	subs	r4, #1
 800bb64:	e7eb      	b.n	800bb3e <quorem+0xe6>
 800bb66:	2000      	movs	r0, #0
 800bb68:	e7ee      	b.n	800bb48 <quorem+0xf0>
 800bb6a:	0000      	movs	r0, r0
 800bb6c:	0000      	movs	r0, r0
	...

0800bb70 <_dtoa_r>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	4616      	mov	r6, r2
 800bb76:	461f      	mov	r7, r3
 800bb78:	69c4      	ldr	r4, [r0, #28]
 800bb7a:	b099      	sub	sp, #100	; 0x64
 800bb7c:	4605      	mov	r5, r0
 800bb7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bb82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bb86:	b974      	cbnz	r4, 800bba6 <_dtoa_r+0x36>
 800bb88:	2010      	movs	r0, #16
 800bb8a:	f001 f977 	bl	800ce7c <malloc>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	61e8      	str	r0, [r5, #28]
 800bb92:	b920      	cbnz	r0, 800bb9e <_dtoa_r+0x2e>
 800bb94:	21ef      	movs	r1, #239	; 0xef
 800bb96:	4bac      	ldr	r3, [pc, #688]	; (800be48 <_dtoa_r+0x2d8>)
 800bb98:	48ac      	ldr	r0, [pc, #688]	; (800be4c <_dtoa_r+0x2dc>)
 800bb9a:	f002 f90b 	bl	800ddb4 <__assert_func>
 800bb9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bba2:	6004      	str	r4, [r0, #0]
 800bba4:	60c4      	str	r4, [r0, #12]
 800bba6:	69eb      	ldr	r3, [r5, #28]
 800bba8:	6819      	ldr	r1, [r3, #0]
 800bbaa:	b151      	cbz	r1, 800bbc2 <_dtoa_r+0x52>
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	2301      	movs	r3, #1
 800bbb0:	4093      	lsls	r3, r2
 800bbb2:	604a      	str	r2, [r1, #4]
 800bbb4:	608b      	str	r3, [r1, #8]
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f001 fa66 	bl	800d088 <_Bfree>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	69eb      	ldr	r3, [r5, #28]
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	1e3b      	subs	r3, r7, #0
 800bbc4:	bfaf      	iteee	ge
 800bbc6:	2300      	movge	r3, #0
 800bbc8:	2201      	movlt	r2, #1
 800bbca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbce:	9305      	strlt	r3, [sp, #20]
 800bbd0:	bfa8      	it	ge
 800bbd2:	f8c8 3000 	strge.w	r3, [r8]
 800bbd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bbda:	4b9d      	ldr	r3, [pc, #628]	; (800be50 <_dtoa_r+0x2e0>)
 800bbdc:	bfb8      	it	lt
 800bbde:	f8c8 2000 	strlt.w	r2, [r8]
 800bbe2:	ea33 0309 	bics.w	r3, r3, r9
 800bbe6:	d119      	bne.n	800bc1c <_dtoa_r+0xac>
 800bbe8:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbf4:	4333      	orrs	r3, r6
 800bbf6:	f000 8589 	beq.w	800c70c <_dtoa_r+0xb9c>
 800bbfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bbfc:	b953      	cbnz	r3, 800bc14 <_dtoa_r+0xa4>
 800bbfe:	4b95      	ldr	r3, [pc, #596]	; (800be54 <_dtoa_r+0x2e4>)
 800bc00:	e023      	b.n	800bc4a <_dtoa_r+0xda>
 800bc02:	4b95      	ldr	r3, [pc, #596]	; (800be58 <_dtoa_r+0x2e8>)
 800bc04:	9303      	str	r3, [sp, #12]
 800bc06:	3308      	adds	r3, #8
 800bc08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	9803      	ldr	r0, [sp, #12]
 800bc0e:	b019      	add	sp, #100	; 0x64
 800bc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc14:	4b8f      	ldr	r3, [pc, #572]	; (800be54 <_dtoa_r+0x2e4>)
 800bc16:	9303      	str	r3, [sp, #12]
 800bc18:	3303      	adds	r3, #3
 800bc1a:	e7f5      	b.n	800bc08 <_dtoa_r+0x98>
 800bc1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bc20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bc24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f7f4 ff2c 	bl	8000a88 <__aeabi_dcmpeq>
 800bc30:	4680      	mov	r8, r0
 800bc32:	b160      	cbz	r0, 800bc4e <_dtoa_r+0xde>
 800bc34:	2301      	movs	r3, #1
 800bc36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8562 	beq.w	800c706 <_dtoa_r+0xb96>
 800bc42:	4b86      	ldr	r3, [pc, #536]	; (800be5c <_dtoa_r+0x2ec>)
 800bc44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	9303      	str	r3, [sp, #12]
 800bc4c:	e7de      	b.n	800bc0c <_dtoa_r+0x9c>
 800bc4e:	ab16      	add	r3, sp, #88	; 0x58
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	ab17      	add	r3, sp, #92	; 0x5c
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	4628      	mov	r0, r5
 800bc58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc5c:	f001 fda8 	bl	800d7b0 <__d2b>
 800bc60:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bc64:	4682      	mov	sl, r0
 800bc66:	2c00      	cmp	r4, #0
 800bc68:	d07e      	beq.n	800bd68 <_dtoa_r+0x1f8>
 800bc6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc70:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bc74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc78:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bc7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc80:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bc84:	4619      	mov	r1, r3
 800bc86:	2200      	movs	r2, #0
 800bc88:	4b75      	ldr	r3, [pc, #468]	; (800be60 <_dtoa_r+0x2f0>)
 800bc8a:	f7f4 fadd 	bl	8000248 <__aeabi_dsub>
 800bc8e:	a368      	add	r3, pc, #416	; (adr r3, 800be30 <_dtoa_r+0x2c0>)
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	f7f4 fc90 	bl	80005b8 <__aeabi_dmul>
 800bc98:	a367      	add	r3, pc, #412	; (adr r3, 800be38 <_dtoa_r+0x2c8>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 fad5 	bl	800024c <__adddf3>
 800bca2:	4606      	mov	r6, r0
 800bca4:	4620      	mov	r0, r4
 800bca6:	460f      	mov	r7, r1
 800bca8:	f7f4 fc1c 	bl	80004e4 <__aeabi_i2d>
 800bcac:	a364      	add	r3, pc, #400	; (adr r3, 800be40 <_dtoa_r+0x2d0>)
 800bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb2:	f7f4 fc81 	bl	80005b8 <__aeabi_dmul>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4630      	mov	r0, r6
 800bcbc:	4639      	mov	r1, r7
 800bcbe:	f7f4 fac5 	bl	800024c <__adddf3>
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	460f      	mov	r7, r1
 800bcc6:	f7f4 ff27 	bl	8000b18 <__aeabi_d2iz>
 800bcca:	2200      	movs	r2, #0
 800bccc:	4683      	mov	fp, r0
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	4639      	mov	r1, r7
 800bcd4:	f7f4 fee2 	bl	8000a9c <__aeabi_dcmplt>
 800bcd8:	b148      	cbz	r0, 800bcee <_dtoa_r+0x17e>
 800bcda:	4658      	mov	r0, fp
 800bcdc:	f7f4 fc02 	bl	80004e4 <__aeabi_i2d>
 800bce0:	4632      	mov	r2, r6
 800bce2:	463b      	mov	r3, r7
 800bce4:	f7f4 fed0 	bl	8000a88 <__aeabi_dcmpeq>
 800bce8:	b908      	cbnz	r0, 800bcee <_dtoa_r+0x17e>
 800bcea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcee:	f1bb 0f16 	cmp.w	fp, #22
 800bcf2:	d857      	bhi.n	800bda4 <_dtoa_r+0x234>
 800bcf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bcf8:	4b5a      	ldr	r3, [pc, #360]	; (800be64 <_dtoa_r+0x2f4>)
 800bcfa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fecb 	bl	8000a9c <__aeabi_dcmplt>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d04e      	beq.n	800bda8 <_dtoa_r+0x238>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd10:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd14:	1b1b      	subs	r3, r3, r4
 800bd16:	1e5a      	subs	r2, r3, #1
 800bd18:	bf46      	itte	mi
 800bd1a:	f1c3 0901 	rsbmi	r9, r3, #1
 800bd1e:	2300      	movmi	r3, #0
 800bd20:	f04f 0900 	movpl.w	r9, #0
 800bd24:	9209      	str	r2, [sp, #36]	; 0x24
 800bd26:	bf48      	it	mi
 800bd28:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bd2a:	f1bb 0f00 	cmp.w	fp, #0
 800bd2e:	db3d      	blt.n	800bdac <_dtoa_r+0x23c>
 800bd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd32:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bd36:	445b      	add	r3, fp
 800bd38:	9309      	str	r3, [sp, #36]	; 0x24
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	930a      	str	r3, [sp, #40]	; 0x28
 800bd3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd40:	2b09      	cmp	r3, #9
 800bd42:	d867      	bhi.n	800be14 <_dtoa_r+0x2a4>
 800bd44:	2b05      	cmp	r3, #5
 800bd46:	bfc4      	itt	gt
 800bd48:	3b04      	subgt	r3, #4
 800bd4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bd4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd4e:	bfc8      	it	gt
 800bd50:	2400      	movgt	r4, #0
 800bd52:	f1a3 0302 	sub.w	r3, r3, #2
 800bd56:	bfd8      	it	le
 800bd58:	2401      	movle	r4, #1
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	f200 8086 	bhi.w	800be6c <_dtoa_r+0x2fc>
 800bd60:	e8df f003 	tbb	[pc, r3]
 800bd64:	5637392c 	.word	0x5637392c
 800bd68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bd6c:	441c      	add	r4, r3
 800bd6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bd72:	2b20      	cmp	r3, #32
 800bd74:	bfc1      	itttt	gt
 800bd76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd7a:	fa09 f903 	lslgt.w	r9, r9, r3
 800bd7e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800bd82:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bd86:	bfd6      	itet	le
 800bd88:	f1c3 0320 	rsble	r3, r3, #32
 800bd8c:	ea49 0003 	orrgt.w	r0, r9, r3
 800bd90:	fa06 f003 	lslle.w	r0, r6, r3
 800bd94:	f7f4 fb96 	bl	80004c4 <__aeabi_ui2d>
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bd9e:	3c01      	subs	r4, #1
 800bda0:	9213      	str	r2, [sp, #76]	; 0x4c
 800bda2:	e76f      	b.n	800bc84 <_dtoa_r+0x114>
 800bda4:	2301      	movs	r3, #1
 800bda6:	e7b3      	b.n	800bd10 <_dtoa_r+0x1a0>
 800bda8:	900f      	str	r0, [sp, #60]	; 0x3c
 800bdaa:	e7b2      	b.n	800bd12 <_dtoa_r+0x1a2>
 800bdac:	f1cb 0300 	rsb	r3, fp, #0
 800bdb0:	930a      	str	r3, [sp, #40]	; 0x28
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	eba9 090b 	sub.w	r9, r9, fp
 800bdb8:	930e      	str	r3, [sp, #56]	; 0x38
 800bdba:	e7c0      	b.n	800bd3e <_dtoa_r+0x1ce>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	dc55      	bgt.n	800be72 <_dtoa_r+0x302>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	461a      	mov	r2, r3
 800bdca:	9306      	str	r3, [sp, #24]
 800bdcc:	9308      	str	r3, [sp, #32]
 800bdce:	9223      	str	r2, [sp, #140]	; 0x8c
 800bdd0:	e00b      	b.n	800bdea <_dtoa_r+0x27a>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e7f3      	b.n	800bdbe <_dtoa_r+0x24e>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bddc:	445b      	add	r3, fp
 800bdde:	9306      	str	r3, [sp, #24]
 800bde0:	3301      	adds	r3, #1
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	9308      	str	r3, [sp, #32]
 800bde6:	bfb8      	it	lt
 800bde8:	2301      	movlt	r3, #1
 800bdea:	2100      	movs	r1, #0
 800bdec:	2204      	movs	r2, #4
 800bdee:	69e8      	ldr	r0, [r5, #28]
 800bdf0:	f102 0614 	add.w	r6, r2, #20
 800bdf4:	429e      	cmp	r6, r3
 800bdf6:	d940      	bls.n	800be7a <_dtoa_r+0x30a>
 800bdf8:	6041      	str	r1, [r0, #4]
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f001 f904 	bl	800d008 <_Balloc>
 800be00:	9003      	str	r0, [sp, #12]
 800be02:	2800      	cmp	r0, #0
 800be04:	d13c      	bne.n	800be80 <_dtoa_r+0x310>
 800be06:	4602      	mov	r2, r0
 800be08:	f240 11af 	movw	r1, #431	; 0x1af
 800be0c:	4b16      	ldr	r3, [pc, #88]	; (800be68 <_dtoa_r+0x2f8>)
 800be0e:	e6c3      	b.n	800bb98 <_dtoa_r+0x28>
 800be10:	2301      	movs	r3, #1
 800be12:	e7e1      	b.n	800bdd8 <_dtoa_r+0x268>
 800be14:	2401      	movs	r4, #1
 800be16:	2300      	movs	r3, #0
 800be18:	940b      	str	r4, [sp, #44]	; 0x2c
 800be1a:	9322      	str	r3, [sp, #136]	; 0x88
 800be1c:	f04f 33ff 	mov.w	r3, #4294967295
 800be20:	2200      	movs	r2, #0
 800be22:	9306      	str	r3, [sp, #24]
 800be24:	9308      	str	r3, [sp, #32]
 800be26:	2312      	movs	r3, #18
 800be28:	e7d1      	b.n	800bdce <_dtoa_r+0x25e>
 800be2a:	bf00      	nop
 800be2c:	f3af 8000 	nop.w
 800be30:	636f4361 	.word	0x636f4361
 800be34:	3fd287a7 	.word	0x3fd287a7
 800be38:	8b60c8b3 	.word	0x8b60c8b3
 800be3c:	3fc68a28 	.word	0x3fc68a28
 800be40:	509f79fb 	.word	0x509f79fb
 800be44:	3fd34413 	.word	0x3fd34413
 800be48:	0800e549 	.word	0x0800e549
 800be4c:	0800e560 	.word	0x0800e560
 800be50:	7ff00000 	.word	0x7ff00000
 800be54:	0800e545 	.word	0x0800e545
 800be58:	0800e53c 	.word	0x0800e53c
 800be5c:	0800e511 	.word	0x0800e511
 800be60:	3ff80000 	.word	0x3ff80000
 800be64:	0800e6b0 	.word	0x0800e6b0
 800be68:	0800e5b8 	.word	0x0800e5b8
 800be6c:	2301      	movs	r3, #1
 800be6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800be70:	e7d4      	b.n	800be1c <_dtoa_r+0x2ac>
 800be72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be74:	9306      	str	r3, [sp, #24]
 800be76:	9308      	str	r3, [sp, #32]
 800be78:	e7b7      	b.n	800bdea <_dtoa_r+0x27a>
 800be7a:	3101      	adds	r1, #1
 800be7c:	0052      	lsls	r2, r2, #1
 800be7e:	e7b7      	b.n	800bdf0 <_dtoa_r+0x280>
 800be80:	69eb      	ldr	r3, [r5, #28]
 800be82:	9a03      	ldr	r2, [sp, #12]
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	9b08      	ldr	r3, [sp, #32]
 800be88:	2b0e      	cmp	r3, #14
 800be8a:	f200 80a8 	bhi.w	800bfde <_dtoa_r+0x46e>
 800be8e:	2c00      	cmp	r4, #0
 800be90:	f000 80a5 	beq.w	800bfde <_dtoa_r+0x46e>
 800be94:	f1bb 0f00 	cmp.w	fp, #0
 800be98:	dd34      	ble.n	800bf04 <_dtoa_r+0x394>
 800be9a:	4b9a      	ldr	r3, [pc, #616]	; (800c104 <_dtoa_r+0x594>)
 800be9c:	f00b 020f 	and.w	r2, fp, #15
 800bea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bea4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bea8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800beac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800beb0:	ea4f 142b 	mov.w	r4, fp, asr #4
 800beb4:	d016      	beq.n	800bee4 <_dtoa_r+0x374>
 800beb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800beba:	4b93      	ldr	r3, [pc, #588]	; (800c108 <_dtoa_r+0x598>)
 800bebc:	2703      	movs	r7, #3
 800bebe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bec2:	f7f4 fca3 	bl	800080c <__aeabi_ddiv>
 800bec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beca:	f004 040f 	and.w	r4, r4, #15
 800bece:	4e8e      	ldr	r6, [pc, #568]	; (800c108 <_dtoa_r+0x598>)
 800bed0:	b954      	cbnz	r4, 800bee8 <_dtoa_r+0x378>
 800bed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bed6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beda:	f7f4 fc97 	bl	800080c <__aeabi_ddiv>
 800bede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bee2:	e029      	b.n	800bf38 <_dtoa_r+0x3c8>
 800bee4:	2702      	movs	r7, #2
 800bee6:	e7f2      	b.n	800bece <_dtoa_r+0x35e>
 800bee8:	07e1      	lsls	r1, r4, #31
 800beea:	d508      	bpl.n	800befe <_dtoa_r+0x38e>
 800beec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bef0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bef4:	f7f4 fb60 	bl	80005b8 <__aeabi_dmul>
 800bef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800befc:	3701      	adds	r7, #1
 800befe:	1064      	asrs	r4, r4, #1
 800bf00:	3608      	adds	r6, #8
 800bf02:	e7e5      	b.n	800bed0 <_dtoa_r+0x360>
 800bf04:	f000 80a5 	beq.w	800c052 <_dtoa_r+0x4e2>
 800bf08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf0c:	f1cb 0400 	rsb	r4, fp, #0
 800bf10:	4b7c      	ldr	r3, [pc, #496]	; (800c104 <_dtoa_r+0x594>)
 800bf12:	f004 020f 	and.w	r2, r4, #15
 800bf16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f7f4 fb4b 	bl	80005b8 <__aeabi_dmul>
 800bf22:	2702      	movs	r7, #2
 800bf24:	2300      	movs	r3, #0
 800bf26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf2a:	4e77      	ldr	r6, [pc, #476]	; (800c108 <_dtoa_r+0x598>)
 800bf2c:	1124      	asrs	r4, r4, #4
 800bf2e:	2c00      	cmp	r4, #0
 800bf30:	f040 8084 	bne.w	800c03c <_dtoa_r+0x4cc>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1d2      	bne.n	800bede <_dtoa_r+0x36e>
 800bf38:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bf3c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bf40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 8087 	beq.w	800c056 <_dtoa_r+0x4e6>
 800bf48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	4b6f      	ldr	r3, [pc, #444]	; (800c10c <_dtoa_r+0x59c>)
 800bf50:	f7f4 fda4 	bl	8000a9c <__aeabi_dcmplt>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d07e      	beq.n	800c056 <_dtoa_r+0x4e6>
 800bf58:	9b08      	ldr	r3, [sp, #32]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d07b      	beq.n	800c056 <_dtoa_r+0x4e6>
 800bf5e:	9b06      	ldr	r3, [sp, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	dd38      	ble.n	800bfd6 <_dtoa_r+0x466>
 800bf64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf68:	2200      	movs	r2, #0
 800bf6a:	4b69      	ldr	r3, [pc, #420]	; (800c110 <_dtoa_r+0x5a0>)
 800bf6c:	f7f4 fb24 	bl	80005b8 <__aeabi_dmul>
 800bf70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf74:	9c06      	ldr	r4, [sp, #24]
 800bf76:	f10b 38ff 	add.w	r8, fp, #4294967295
 800bf7a:	3701      	adds	r7, #1
 800bf7c:	4638      	mov	r0, r7
 800bf7e:	f7f4 fab1 	bl	80004e4 <__aeabi_i2d>
 800bf82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf86:	f7f4 fb17 	bl	80005b8 <__aeabi_dmul>
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	4b61      	ldr	r3, [pc, #388]	; (800c114 <_dtoa_r+0x5a4>)
 800bf8e:	f7f4 f95d 	bl	800024c <__adddf3>
 800bf92:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bf96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf9a:	9611      	str	r6, [sp, #68]	; 0x44
 800bf9c:	2c00      	cmp	r4, #0
 800bf9e:	d15d      	bne.n	800c05c <_dtoa_r+0x4ec>
 800bfa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	4b5c      	ldr	r3, [pc, #368]	; (800c118 <_dtoa_r+0x5a8>)
 800bfa8:	f7f4 f94e 	bl	8000248 <__aeabi_dsub>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfb4:	4633      	mov	r3, r6
 800bfb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfb8:	f7f4 fd8e 	bl	8000ad8 <__aeabi_dcmpgt>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	f040 8295 	bne.w	800c4ec <_dtoa_r+0x97c>
 800bfc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bfcc:	f7f4 fd66 	bl	8000a9c <__aeabi_dcmplt>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	f040 8289 	bne.w	800c4e8 <_dtoa_r+0x978>
 800bfd6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bfda:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bfde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f2c0 8151 	blt.w	800c288 <_dtoa_r+0x718>
 800bfe6:	f1bb 0f0e 	cmp.w	fp, #14
 800bfea:	f300 814d 	bgt.w	800c288 <_dtoa_r+0x718>
 800bfee:	4b45      	ldr	r3, [pc, #276]	; (800c104 <_dtoa_r+0x594>)
 800bff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bff4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bff8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bffc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f280 80da 	bge.w	800c1b8 <_dtoa_r+0x648>
 800c004:	9b08      	ldr	r3, [sp, #32]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f300 80d6 	bgt.w	800c1b8 <_dtoa_r+0x648>
 800c00c:	f040 826b 	bne.w	800c4e6 <_dtoa_r+0x976>
 800c010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c014:	2200      	movs	r2, #0
 800c016:	4b40      	ldr	r3, [pc, #256]	; (800c118 <_dtoa_r+0x5a8>)
 800c018:	f7f4 face 	bl	80005b8 <__aeabi_dmul>
 800c01c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c020:	f7f4 fd50 	bl	8000ac4 <__aeabi_dcmpge>
 800c024:	9c08      	ldr	r4, [sp, #32]
 800c026:	4626      	mov	r6, r4
 800c028:	2800      	cmp	r0, #0
 800c02a:	f040 8241 	bne.w	800c4b0 <_dtoa_r+0x940>
 800c02e:	2331      	movs	r3, #49	; 0x31
 800c030:	9f03      	ldr	r7, [sp, #12]
 800c032:	f10b 0b01 	add.w	fp, fp, #1
 800c036:	f807 3b01 	strb.w	r3, [r7], #1
 800c03a:	e23d      	b.n	800c4b8 <_dtoa_r+0x948>
 800c03c:	07e2      	lsls	r2, r4, #31
 800c03e:	d505      	bpl.n	800c04c <_dtoa_r+0x4dc>
 800c040:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c044:	f7f4 fab8 	bl	80005b8 <__aeabi_dmul>
 800c048:	2301      	movs	r3, #1
 800c04a:	3701      	adds	r7, #1
 800c04c:	1064      	asrs	r4, r4, #1
 800c04e:	3608      	adds	r6, #8
 800c050:	e76d      	b.n	800bf2e <_dtoa_r+0x3be>
 800c052:	2702      	movs	r7, #2
 800c054:	e770      	b.n	800bf38 <_dtoa_r+0x3c8>
 800c056:	46d8      	mov	r8, fp
 800c058:	9c08      	ldr	r4, [sp, #32]
 800c05a:	e78f      	b.n	800bf7c <_dtoa_r+0x40c>
 800c05c:	9903      	ldr	r1, [sp, #12]
 800c05e:	4b29      	ldr	r3, [pc, #164]	; (800c104 <_dtoa_r+0x594>)
 800c060:	4421      	add	r1, r4
 800c062:	9112      	str	r1, [sp, #72]	; 0x48
 800c064:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c066:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c06a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c06e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c072:	2900      	cmp	r1, #0
 800c074:	d054      	beq.n	800c120 <_dtoa_r+0x5b0>
 800c076:	2000      	movs	r0, #0
 800c078:	4928      	ldr	r1, [pc, #160]	; (800c11c <_dtoa_r+0x5ac>)
 800c07a:	f7f4 fbc7 	bl	800080c <__aeabi_ddiv>
 800c07e:	463b      	mov	r3, r7
 800c080:	4632      	mov	r2, r6
 800c082:	f7f4 f8e1 	bl	8000248 <__aeabi_dsub>
 800c086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c08a:	9f03      	ldr	r7, [sp, #12]
 800c08c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c090:	f7f4 fd42 	bl	8000b18 <__aeabi_d2iz>
 800c094:	4604      	mov	r4, r0
 800c096:	f7f4 fa25 	bl	80004e4 <__aeabi_i2d>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0a2:	f7f4 f8d1 	bl	8000248 <__aeabi_dsub>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	3430      	adds	r4, #48	; 0x30
 800c0ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0b4:	f807 4b01 	strb.w	r4, [r7], #1
 800c0b8:	f7f4 fcf0 	bl	8000a9c <__aeabi_dcmplt>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d173      	bne.n	800c1a8 <_dtoa_r+0x638>
 800c0c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	4911      	ldr	r1, [pc, #68]	; (800c10c <_dtoa_r+0x59c>)
 800c0c8:	f7f4 f8be 	bl	8000248 <__aeabi_dsub>
 800c0cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0d0:	f7f4 fce4 	bl	8000a9c <__aeabi_dcmplt>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	f040 80b6 	bne.w	800c246 <_dtoa_r+0x6d6>
 800c0da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0dc:	429f      	cmp	r7, r3
 800c0de:	f43f af7a 	beq.w	800bfd6 <_dtoa_r+0x466>
 800c0e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4b09      	ldr	r3, [pc, #36]	; (800c110 <_dtoa_r+0x5a0>)
 800c0ea:	f7f4 fa65 	bl	80005b8 <__aeabi_dmul>
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0f8:	4b05      	ldr	r3, [pc, #20]	; (800c110 <_dtoa_r+0x5a0>)
 800c0fa:	f7f4 fa5d 	bl	80005b8 <__aeabi_dmul>
 800c0fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c102:	e7c3      	b.n	800c08c <_dtoa_r+0x51c>
 800c104:	0800e6b0 	.word	0x0800e6b0
 800c108:	0800e688 	.word	0x0800e688
 800c10c:	3ff00000 	.word	0x3ff00000
 800c110:	40240000 	.word	0x40240000
 800c114:	401c0000 	.word	0x401c0000
 800c118:	40140000 	.word	0x40140000
 800c11c:	3fe00000 	.word	0x3fe00000
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 fa48 	bl	80005b8 <__aeabi_dmul>
 800c128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c12a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c12e:	9c03      	ldr	r4, [sp, #12]
 800c130:	9314      	str	r3, [sp, #80]	; 0x50
 800c132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c136:	f7f4 fcef 	bl	8000b18 <__aeabi_d2iz>
 800c13a:	9015      	str	r0, [sp, #84]	; 0x54
 800c13c:	f7f4 f9d2 	bl	80004e4 <__aeabi_i2d>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c148:	f7f4 f87e 	bl	8000248 <__aeabi_dsub>
 800c14c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c14e:	4606      	mov	r6, r0
 800c150:	3330      	adds	r3, #48	; 0x30
 800c152:	f804 3b01 	strb.w	r3, [r4], #1
 800c156:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c158:	460f      	mov	r7, r1
 800c15a:	429c      	cmp	r4, r3
 800c15c:	f04f 0200 	mov.w	r2, #0
 800c160:	d124      	bne.n	800c1ac <_dtoa_r+0x63c>
 800c162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c166:	4baf      	ldr	r3, [pc, #700]	; (800c424 <_dtoa_r+0x8b4>)
 800c168:	f7f4 f870 	bl	800024c <__adddf3>
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	4630      	mov	r0, r6
 800c172:	4639      	mov	r1, r7
 800c174:	f7f4 fcb0 	bl	8000ad8 <__aeabi_dcmpgt>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d163      	bne.n	800c244 <_dtoa_r+0x6d4>
 800c17c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c180:	2000      	movs	r0, #0
 800c182:	49a8      	ldr	r1, [pc, #672]	; (800c424 <_dtoa_r+0x8b4>)
 800c184:	f7f4 f860 	bl	8000248 <__aeabi_dsub>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	4630      	mov	r0, r6
 800c18e:	4639      	mov	r1, r7
 800c190:	f7f4 fc84 	bl	8000a9c <__aeabi_dcmplt>
 800c194:	2800      	cmp	r0, #0
 800c196:	f43f af1e 	beq.w	800bfd6 <_dtoa_r+0x466>
 800c19a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c19c:	1e7b      	subs	r3, r7, #1
 800c19e:	9314      	str	r3, [sp, #80]	; 0x50
 800c1a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c1a4:	2b30      	cmp	r3, #48	; 0x30
 800c1a6:	d0f8      	beq.n	800c19a <_dtoa_r+0x62a>
 800c1a8:	46c3      	mov	fp, r8
 800c1aa:	e03b      	b.n	800c224 <_dtoa_r+0x6b4>
 800c1ac:	4b9e      	ldr	r3, [pc, #632]	; (800c428 <_dtoa_r+0x8b8>)
 800c1ae:	f7f4 fa03 	bl	80005b8 <__aeabi_dmul>
 800c1b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1b6:	e7bc      	b.n	800c132 <_dtoa_r+0x5c2>
 800c1b8:	9f03      	ldr	r7, [sp, #12]
 800c1ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c1be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	f7f4 fb21 	bl	800080c <__aeabi_ddiv>
 800c1ca:	f7f4 fca5 	bl	8000b18 <__aeabi_d2iz>
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	f7f4 f988 	bl	80004e4 <__aeabi_i2d>
 800c1d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1d8:	f7f4 f9ee 	bl	80005b8 <__aeabi_dmul>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	f7f4 f830 	bl	8000248 <__aeabi_dsub>
 800c1e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c1ec:	f807 6b01 	strb.w	r6, [r7], #1
 800c1f0:	9e03      	ldr	r6, [sp, #12]
 800c1f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c1f6:	1bbe      	subs	r6, r7, r6
 800c1f8:	45b4      	cmp	ip, r6
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	d136      	bne.n	800c26e <_dtoa_r+0x6fe>
 800c200:	f7f4 f824 	bl	800024c <__adddf3>
 800c204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c208:	4680      	mov	r8, r0
 800c20a:	4689      	mov	r9, r1
 800c20c:	f7f4 fc64 	bl	8000ad8 <__aeabi_dcmpgt>
 800c210:	bb58      	cbnz	r0, 800c26a <_dtoa_r+0x6fa>
 800c212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c216:	4640      	mov	r0, r8
 800c218:	4649      	mov	r1, r9
 800c21a:	f7f4 fc35 	bl	8000a88 <__aeabi_dcmpeq>
 800c21e:	b108      	cbz	r0, 800c224 <_dtoa_r+0x6b4>
 800c220:	07e3      	lsls	r3, r4, #31
 800c222:	d422      	bmi.n	800c26a <_dtoa_r+0x6fa>
 800c224:	4651      	mov	r1, sl
 800c226:	4628      	mov	r0, r5
 800c228:	f000 ff2e 	bl	800d088 <_Bfree>
 800c22c:	2300      	movs	r3, #0
 800c22e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c230:	703b      	strb	r3, [r7, #0]
 800c232:	f10b 0301 	add.w	r3, fp, #1
 800c236:	6013      	str	r3, [r2, #0]
 800c238:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f43f ace6 	beq.w	800bc0c <_dtoa_r+0x9c>
 800c240:	601f      	str	r7, [r3, #0]
 800c242:	e4e3      	b.n	800bc0c <_dtoa_r+0x9c>
 800c244:	4627      	mov	r7, r4
 800c246:	463b      	mov	r3, r7
 800c248:	461f      	mov	r7, r3
 800c24a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c24e:	2a39      	cmp	r2, #57	; 0x39
 800c250:	d107      	bne.n	800c262 <_dtoa_r+0x6f2>
 800c252:	9a03      	ldr	r2, [sp, #12]
 800c254:	429a      	cmp	r2, r3
 800c256:	d1f7      	bne.n	800c248 <_dtoa_r+0x6d8>
 800c258:	2230      	movs	r2, #48	; 0x30
 800c25a:	9903      	ldr	r1, [sp, #12]
 800c25c:	f108 0801 	add.w	r8, r8, #1
 800c260:	700a      	strb	r2, [r1, #0]
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	3201      	adds	r2, #1
 800c266:	701a      	strb	r2, [r3, #0]
 800c268:	e79e      	b.n	800c1a8 <_dtoa_r+0x638>
 800c26a:	46d8      	mov	r8, fp
 800c26c:	e7eb      	b.n	800c246 <_dtoa_r+0x6d6>
 800c26e:	2200      	movs	r2, #0
 800c270:	4b6d      	ldr	r3, [pc, #436]	; (800c428 <_dtoa_r+0x8b8>)
 800c272:	f7f4 f9a1 	bl	80005b8 <__aeabi_dmul>
 800c276:	2200      	movs	r2, #0
 800c278:	2300      	movs	r3, #0
 800c27a:	4680      	mov	r8, r0
 800c27c:	4689      	mov	r9, r1
 800c27e:	f7f4 fc03 	bl	8000a88 <__aeabi_dcmpeq>
 800c282:	2800      	cmp	r0, #0
 800c284:	d09b      	beq.n	800c1be <_dtoa_r+0x64e>
 800c286:	e7cd      	b.n	800c224 <_dtoa_r+0x6b4>
 800c288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c28a:	2a00      	cmp	r2, #0
 800c28c:	f000 80c4 	beq.w	800c418 <_dtoa_r+0x8a8>
 800c290:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c292:	2a01      	cmp	r2, #1
 800c294:	f300 80a8 	bgt.w	800c3e8 <_dtoa_r+0x878>
 800c298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	f000 80a0 	beq.w	800c3e0 <_dtoa_r+0x870>
 800c2a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2a4:	464f      	mov	r7, r9
 800c2a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c2a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2aa:	2101      	movs	r1, #1
 800c2ac:	441a      	add	r2, r3
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	4499      	add	r9, r3
 800c2b2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2b4:	f000 ffe8 	bl	800d288 <__i2b>
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	b15f      	cbz	r7, 800c2d4 <_dtoa_r+0x764>
 800c2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	dd08      	ble.n	800c2d4 <_dtoa_r+0x764>
 800c2c2:	42bb      	cmp	r3, r7
 800c2c4:	bfa8      	it	ge
 800c2c6:	463b      	movge	r3, r7
 800c2c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ca:	eba9 0903 	sub.w	r9, r9, r3
 800c2ce:	1aff      	subs	r7, r7, r3
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2d6:	b1f3      	cbz	r3, 800c316 <_dtoa_r+0x7a6>
 800c2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 80a0 	beq.w	800c420 <_dtoa_r+0x8b0>
 800c2e0:	2c00      	cmp	r4, #0
 800c2e2:	dd10      	ble.n	800c306 <_dtoa_r+0x796>
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4622      	mov	r2, r4
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f001 f88b 	bl	800d404 <__pow5mult>
 800c2ee:	4652      	mov	r2, sl
 800c2f0:	4601      	mov	r1, r0
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f000 ffdd 	bl	800d2b4 <__multiply>
 800c2fa:	4680      	mov	r8, r0
 800c2fc:	4651      	mov	r1, sl
 800c2fe:	4628      	mov	r0, r5
 800c300:	f000 fec2 	bl	800d088 <_Bfree>
 800c304:	46c2      	mov	sl, r8
 800c306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c308:	1b1a      	subs	r2, r3, r4
 800c30a:	d004      	beq.n	800c316 <_dtoa_r+0x7a6>
 800c30c:	4651      	mov	r1, sl
 800c30e:	4628      	mov	r0, r5
 800c310:	f001 f878 	bl	800d404 <__pow5mult>
 800c314:	4682      	mov	sl, r0
 800c316:	2101      	movs	r1, #1
 800c318:	4628      	mov	r0, r5
 800c31a:	f000 ffb5 	bl	800d288 <__i2b>
 800c31e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c320:	4604      	mov	r4, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	f340 8082 	ble.w	800c42c <_dtoa_r+0x8bc>
 800c328:	461a      	mov	r2, r3
 800c32a:	4601      	mov	r1, r0
 800c32c:	4628      	mov	r0, r5
 800c32e:	f001 f869 	bl	800d404 <__pow5mult>
 800c332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c334:	4604      	mov	r4, r0
 800c336:	2b01      	cmp	r3, #1
 800c338:	dd7b      	ble.n	800c432 <_dtoa_r+0x8c2>
 800c33a:	f04f 0800 	mov.w	r8, #0
 800c33e:	6923      	ldr	r3, [r4, #16]
 800c340:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c344:	6918      	ldr	r0, [r3, #16]
 800c346:	f000 ff51 	bl	800d1ec <__hi0bits>
 800c34a:	f1c0 0020 	rsb	r0, r0, #32
 800c34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c350:	4418      	add	r0, r3
 800c352:	f010 001f 	ands.w	r0, r0, #31
 800c356:	f000 8092 	beq.w	800c47e <_dtoa_r+0x90e>
 800c35a:	f1c0 0320 	rsb	r3, r0, #32
 800c35e:	2b04      	cmp	r3, #4
 800c360:	f340 8085 	ble.w	800c46e <_dtoa_r+0x8fe>
 800c364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c366:	f1c0 001c 	rsb	r0, r0, #28
 800c36a:	4403      	add	r3, r0
 800c36c:	4481      	add	r9, r0
 800c36e:	4407      	add	r7, r0
 800c370:	9309      	str	r3, [sp, #36]	; 0x24
 800c372:	f1b9 0f00 	cmp.w	r9, #0
 800c376:	dd05      	ble.n	800c384 <_dtoa_r+0x814>
 800c378:	4651      	mov	r1, sl
 800c37a:	464a      	mov	r2, r9
 800c37c:	4628      	mov	r0, r5
 800c37e:	f001 f89b 	bl	800d4b8 <__lshift>
 800c382:	4682      	mov	sl, r0
 800c384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c386:	2b00      	cmp	r3, #0
 800c388:	dd05      	ble.n	800c396 <_dtoa_r+0x826>
 800c38a:	4621      	mov	r1, r4
 800c38c:	461a      	mov	r2, r3
 800c38e:	4628      	mov	r0, r5
 800c390:	f001 f892 	bl	800d4b8 <__lshift>
 800c394:	4604      	mov	r4, r0
 800c396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d072      	beq.n	800c482 <_dtoa_r+0x912>
 800c39c:	4621      	mov	r1, r4
 800c39e:	4650      	mov	r0, sl
 800c3a0:	f001 f8f6 	bl	800d590 <__mcmp>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	da6c      	bge.n	800c482 <_dtoa_r+0x912>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4651      	mov	r1, sl
 800c3ac:	220a      	movs	r2, #10
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f000 fe8c 	bl	800d0cc <__multadd>
 800c3b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3b6:	4682      	mov	sl, r0
 800c3b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 81ac 	beq.w	800c71a <_dtoa_r+0xbaa>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	220a      	movs	r2, #10
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f000 fe7f 	bl	800d0cc <__multadd>
 800c3ce:	9b06      	ldr	r3, [sp, #24]
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f300 8093 	bgt.w	800c4fe <_dtoa_r+0x98e>
 800c3d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	dc59      	bgt.n	800c492 <_dtoa_r+0x922>
 800c3de:	e08e      	b.n	800c4fe <_dtoa_r+0x98e>
 800c3e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c3e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c3e6:	e75d      	b.n	800c2a4 <_dtoa_r+0x734>
 800c3e8:	9b08      	ldr	r3, [sp, #32]
 800c3ea:	1e5c      	subs	r4, r3, #1
 800c3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ee:	42a3      	cmp	r3, r4
 800c3f0:	bfbf      	itttt	lt
 800c3f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c3f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c3f6:	1ae3      	sublt	r3, r4, r3
 800c3f8:	18d2      	addlt	r2, r2, r3
 800c3fa:	bfa8      	it	ge
 800c3fc:	1b1c      	subge	r4, r3, r4
 800c3fe:	9b08      	ldr	r3, [sp, #32]
 800c400:	bfbe      	ittt	lt
 800c402:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c404:	920e      	strlt	r2, [sp, #56]	; 0x38
 800c406:	2400      	movlt	r4, #0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	bfb5      	itete	lt
 800c40c:	eba9 0703 	sublt.w	r7, r9, r3
 800c410:	464f      	movge	r7, r9
 800c412:	2300      	movlt	r3, #0
 800c414:	9b08      	ldrge	r3, [sp, #32]
 800c416:	e747      	b.n	800c2a8 <_dtoa_r+0x738>
 800c418:	464f      	mov	r7, r9
 800c41a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c41c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c41e:	e74c      	b.n	800c2ba <_dtoa_r+0x74a>
 800c420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c422:	e773      	b.n	800c30c <_dtoa_r+0x79c>
 800c424:	3fe00000 	.word	0x3fe00000
 800c428:	40240000 	.word	0x40240000
 800c42c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c42e:	2b01      	cmp	r3, #1
 800c430:	dc18      	bgt.n	800c464 <_dtoa_r+0x8f4>
 800c432:	9b04      	ldr	r3, [sp, #16]
 800c434:	b9b3      	cbnz	r3, 800c464 <_dtoa_r+0x8f4>
 800c436:	9b05      	ldr	r3, [sp, #20]
 800c438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c43c:	b993      	cbnz	r3, 800c464 <_dtoa_r+0x8f4>
 800c43e:	9b05      	ldr	r3, [sp, #20]
 800c440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c444:	0d1b      	lsrs	r3, r3, #20
 800c446:	051b      	lsls	r3, r3, #20
 800c448:	b17b      	cbz	r3, 800c46a <_dtoa_r+0x8fa>
 800c44a:	f04f 0801 	mov.w	r8, #1
 800c44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c450:	f109 0901 	add.w	r9, r9, #1
 800c454:	3301      	adds	r3, #1
 800c456:	9309      	str	r3, [sp, #36]	; 0x24
 800c458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f47f af6f 	bne.w	800c33e <_dtoa_r+0x7ce>
 800c460:	2001      	movs	r0, #1
 800c462:	e774      	b.n	800c34e <_dtoa_r+0x7de>
 800c464:	f04f 0800 	mov.w	r8, #0
 800c468:	e7f6      	b.n	800c458 <_dtoa_r+0x8e8>
 800c46a:	4698      	mov	r8, r3
 800c46c:	e7f4      	b.n	800c458 <_dtoa_r+0x8e8>
 800c46e:	d080      	beq.n	800c372 <_dtoa_r+0x802>
 800c470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c472:	331c      	adds	r3, #28
 800c474:	441a      	add	r2, r3
 800c476:	4499      	add	r9, r3
 800c478:	441f      	add	r7, r3
 800c47a:	9209      	str	r2, [sp, #36]	; 0x24
 800c47c:	e779      	b.n	800c372 <_dtoa_r+0x802>
 800c47e:	4603      	mov	r3, r0
 800c480:	e7f6      	b.n	800c470 <_dtoa_r+0x900>
 800c482:	9b08      	ldr	r3, [sp, #32]
 800c484:	2b00      	cmp	r3, #0
 800c486:	dc34      	bgt.n	800c4f2 <_dtoa_r+0x982>
 800c488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	dd31      	ble.n	800c4f2 <_dtoa_r+0x982>
 800c48e:	9b08      	ldr	r3, [sp, #32]
 800c490:	9306      	str	r3, [sp, #24]
 800c492:	9b06      	ldr	r3, [sp, #24]
 800c494:	b963      	cbnz	r3, 800c4b0 <_dtoa_r+0x940>
 800c496:	4621      	mov	r1, r4
 800c498:	2205      	movs	r2, #5
 800c49a:	4628      	mov	r0, r5
 800c49c:	f000 fe16 	bl	800d0cc <__multadd>
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	f001 f873 	bl	800d590 <__mcmp>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f73f adbf 	bgt.w	800c02e <_dtoa_r+0x4be>
 800c4b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4b2:	9f03      	ldr	r7, [sp, #12]
 800c4b4:	ea6f 0b03 	mvn.w	fp, r3
 800c4b8:	f04f 0800 	mov.w	r8, #0
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f000 fde2 	bl	800d088 <_Bfree>
 800c4c4:	2e00      	cmp	r6, #0
 800c4c6:	f43f aead 	beq.w	800c224 <_dtoa_r+0x6b4>
 800c4ca:	f1b8 0f00 	cmp.w	r8, #0
 800c4ce:	d005      	beq.n	800c4dc <_dtoa_r+0x96c>
 800c4d0:	45b0      	cmp	r8, r6
 800c4d2:	d003      	beq.n	800c4dc <_dtoa_r+0x96c>
 800c4d4:	4641      	mov	r1, r8
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f000 fdd6 	bl	800d088 <_Bfree>
 800c4dc:	4631      	mov	r1, r6
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 fdd2 	bl	800d088 <_Bfree>
 800c4e4:	e69e      	b.n	800c224 <_dtoa_r+0x6b4>
 800c4e6:	2400      	movs	r4, #0
 800c4e8:	4626      	mov	r6, r4
 800c4ea:	e7e1      	b.n	800c4b0 <_dtoa_r+0x940>
 800c4ec:	46c3      	mov	fp, r8
 800c4ee:	4626      	mov	r6, r4
 800c4f0:	e59d      	b.n	800c02e <_dtoa_r+0x4be>
 800c4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 80c8 	beq.w	800c68a <_dtoa_r+0xb1a>
 800c4fa:	9b08      	ldr	r3, [sp, #32]
 800c4fc:	9306      	str	r3, [sp, #24]
 800c4fe:	2f00      	cmp	r7, #0
 800c500:	dd05      	ble.n	800c50e <_dtoa_r+0x99e>
 800c502:	4631      	mov	r1, r6
 800c504:	463a      	mov	r2, r7
 800c506:	4628      	mov	r0, r5
 800c508:	f000 ffd6 	bl	800d4b8 <__lshift>
 800c50c:	4606      	mov	r6, r0
 800c50e:	f1b8 0f00 	cmp.w	r8, #0
 800c512:	d05b      	beq.n	800c5cc <_dtoa_r+0xa5c>
 800c514:	4628      	mov	r0, r5
 800c516:	6871      	ldr	r1, [r6, #4]
 800c518:	f000 fd76 	bl	800d008 <_Balloc>
 800c51c:	4607      	mov	r7, r0
 800c51e:	b928      	cbnz	r0, 800c52c <_dtoa_r+0x9bc>
 800c520:	4602      	mov	r2, r0
 800c522:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c526:	4b81      	ldr	r3, [pc, #516]	; (800c72c <_dtoa_r+0xbbc>)
 800c528:	f7ff bb36 	b.w	800bb98 <_dtoa_r+0x28>
 800c52c:	6932      	ldr	r2, [r6, #16]
 800c52e:	f106 010c 	add.w	r1, r6, #12
 800c532:	3202      	adds	r2, #2
 800c534:	0092      	lsls	r2, r2, #2
 800c536:	300c      	adds	r0, #12
 800c538:	f7ff fa79 	bl	800ba2e <memcpy>
 800c53c:	2201      	movs	r2, #1
 800c53e:	4639      	mov	r1, r7
 800c540:	4628      	mov	r0, r5
 800c542:	f000 ffb9 	bl	800d4b8 <__lshift>
 800c546:	46b0      	mov	r8, r6
 800c548:	4606      	mov	r6, r0
 800c54a:	9b03      	ldr	r3, [sp, #12]
 800c54c:	9a03      	ldr	r2, [sp, #12]
 800c54e:	3301      	adds	r3, #1
 800c550:	9308      	str	r3, [sp, #32]
 800c552:	9b06      	ldr	r3, [sp, #24]
 800c554:	4413      	add	r3, r2
 800c556:	930b      	str	r3, [sp, #44]	; 0x2c
 800c558:	9b04      	ldr	r3, [sp, #16]
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	930a      	str	r3, [sp, #40]	; 0x28
 800c560:	9b08      	ldr	r3, [sp, #32]
 800c562:	4621      	mov	r1, r4
 800c564:	3b01      	subs	r3, #1
 800c566:	4650      	mov	r0, sl
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	f7ff fa75 	bl	800ba58 <quorem>
 800c56e:	4641      	mov	r1, r8
 800c570:	9006      	str	r0, [sp, #24]
 800c572:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c576:	4650      	mov	r0, sl
 800c578:	f001 f80a 	bl	800d590 <__mcmp>
 800c57c:	4632      	mov	r2, r6
 800c57e:	9009      	str	r0, [sp, #36]	; 0x24
 800c580:	4621      	mov	r1, r4
 800c582:	4628      	mov	r0, r5
 800c584:	f001 f820 	bl	800d5c8 <__mdiff>
 800c588:	68c2      	ldr	r2, [r0, #12]
 800c58a:	4607      	mov	r7, r0
 800c58c:	bb02      	cbnz	r2, 800c5d0 <_dtoa_r+0xa60>
 800c58e:	4601      	mov	r1, r0
 800c590:	4650      	mov	r0, sl
 800c592:	f000 fffd 	bl	800d590 <__mcmp>
 800c596:	4602      	mov	r2, r0
 800c598:	4639      	mov	r1, r7
 800c59a:	4628      	mov	r0, r5
 800c59c:	920c      	str	r2, [sp, #48]	; 0x30
 800c59e:	f000 fd73 	bl	800d088 <_Bfree>
 800c5a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5a6:	9f08      	ldr	r7, [sp, #32]
 800c5a8:	ea43 0102 	orr.w	r1, r3, r2
 800c5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ae:	4319      	orrs	r1, r3
 800c5b0:	d110      	bne.n	800c5d4 <_dtoa_r+0xa64>
 800c5b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c5b6:	d029      	beq.n	800c60c <_dtoa_r+0xa9c>
 800c5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	dd02      	ble.n	800c5c4 <_dtoa_r+0xa54>
 800c5be:	9b06      	ldr	r3, [sp, #24]
 800c5c0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	f883 9000 	strb.w	r9, [r3]
 800c5ca:	e777      	b.n	800c4bc <_dtoa_r+0x94c>
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	e7ba      	b.n	800c546 <_dtoa_r+0x9d6>
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	e7e1      	b.n	800c598 <_dtoa_r+0xa28>
 800c5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	db04      	blt.n	800c5e4 <_dtoa_r+0xa74>
 800c5da:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c5dc:	430b      	orrs	r3, r1
 800c5de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c5e0:	430b      	orrs	r3, r1
 800c5e2:	d120      	bne.n	800c626 <_dtoa_r+0xab6>
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	dded      	ble.n	800c5c4 <_dtoa_r+0xa54>
 800c5e8:	4651      	mov	r1, sl
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	f000 ff63 	bl	800d4b8 <__lshift>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	4682      	mov	sl, r0
 800c5f6:	f000 ffcb 	bl	800d590 <__mcmp>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	dc03      	bgt.n	800c606 <_dtoa_r+0xa96>
 800c5fe:	d1e1      	bne.n	800c5c4 <_dtoa_r+0xa54>
 800c600:	f019 0f01 	tst.w	r9, #1
 800c604:	d0de      	beq.n	800c5c4 <_dtoa_r+0xa54>
 800c606:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c60a:	d1d8      	bne.n	800c5be <_dtoa_r+0xa4e>
 800c60c:	2339      	movs	r3, #57	; 0x39
 800c60e:	9a04      	ldr	r2, [sp, #16]
 800c610:	7013      	strb	r3, [r2, #0]
 800c612:	463b      	mov	r3, r7
 800c614:	461f      	mov	r7, r3
 800c616:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c61a:	3b01      	subs	r3, #1
 800c61c:	2a39      	cmp	r2, #57	; 0x39
 800c61e:	d06b      	beq.n	800c6f8 <_dtoa_r+0xb88>
 800c620:	3201      	adds	r2, #1
 800c622:	701a      	strb	r2, [r3, #0]
 800c624:	e74a      	b.n	800c4bc <_dtoa_r+0x94c>
 800c626:	2a00      	cmp	r2, #0
 800c628:	dd07      	ble.n	800c63a <_dtoa_r+0xaca>
 800c62a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c62e:	d0ed      	beq.n	800c60c <_dtoa_r+0xa9c>
 800c630:	9a04      	ldr	r2, [sp, #16]
 800c632:	f109 0301 	add.w	r3, r9, #1
 800c636:	7013      	strb	r3, [r2, #0]
 800c638:	e740      	b.n	800c4bc <_dtoa_r+0x94c>
 800c63a:	9b08      	ldr	r3, [sp, #32]
 800c63c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c63e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c642:	4293      	cmp	r3, r2
 800c644:	d042      	beq.n	800c6cc <_dtoa_r+0xb5c>
 800c646:	4651      	mov	r1, sl
 800c648:	2300      	movs	r3, #0
 800c64a:	220a      	movs	r2, #10
 800c64c:	4628      	mov	r0, r5
 800c64e:	f000 fd3d 	bl	800d0cc <__multadd>
 800c652:	45b0      	cmp	r8, r6
 800c654:	4682      	mov	sl, r0
 800c656:	f04f 0300 	mov.w	r3, #0
 800c65a:	f04f 020a 	mov.w	r2, #10
 800c65e:	4641      	mov	r1, r8
 800c660:	4628      	mov	r0, r5
 800c662:	d107      	bne.n	800c674 <_dtoa_r+0xb04>
 800c664:	f000 fd32 	bl	800d0cc <__multadd>
 800c668:	4680      	mov	r8, r0
 800c66a:	4606      	mov	r6, r0
 800c66c:	9b08      	ldr	r3, [sp, #32]
 800c66e:	3301      	adds	r3, #1
 800c670:	9308      	str	r3, [sp, #32]
 800c672:	e775      	b.n	800c560 <_dtoa_r+0x9f0>
 800c674:	f000 fd2a 	bl	800d0cc <__multadd>
 800c678:	4631      	mov	r1, r6
 800c67a:	4680      	mov	r8, r0
 800c67c:	2300      	movs	r3, #0
 800c67e:	220a      	movs	r2, #10
 800c680:	4628      	mov	r0, r5
 800c682:	f000 fd23 	bl	800d0cc <__multadd>
 800c686:	4606      	mov	r6, r0
 800c688:	e7f0      	b.n	800c66c <_dtoa_r+0xafc>
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	9306      	str	r3, [sp, #24]
 800c68e:	9f03      	ldr	r7, [sp, #12]
 800c690:	4621      	mov	r1, r4
 800c692:	4650      	mov	r0, sl
 800c694:	f7ff f9e0 	bl	800ba58 <quorem>
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c69e:	f807 9b01 	strb.w	r9, [r7], #1
 800c6a2:	1afa      	subs	r2, r7, r3
 800c6a4:	9b06      	ldr	r3, [sp, #24]
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	dd07      	ble.n	800c6ba <_dtoa_r+0xb4a>
 800c6aa:	4651      	mov	r1, sl
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	220a      	movs	r2, #10
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	f000 fd0b 	bl	800d0cc <__multadd>
 800c6b6:	4682      	mov	sl, r0
 800c6b8:	e7ea      	b.n	800c690 <_dtoa_r+0xb20>
 800c6ba:	9b06      	ldr	r3, [sp, #24]
 800c6bc:	f04f 0800 	mov.w	r8, #0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bfcc      	ite	gt
 800c6c4:	461f      	movgt	r7, r3
 800c6c6:	2701      	movle	r7, #1
 800c6c8:	9b03      	ldr	r3, [sp, #12]
 800c6ca:	441f      	add	r7, r3
 800c6cc:	4651      	mov	r1, sl
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f000 fef1 	bl	800d4b8 <__lshift>
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4682      	mov	sl, r0
 800c6da:	f000 ff59 	bl	800d590 <__mcmp>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	dc97      	bgt.n	800c612 <_dtoa_r+0xaa2>
 800c6e2:	d102      	bne.n	800c6ea <_dtoa_r+0xb7a>
 800c6e4:	f019 0f01 	tst.w	r9, #1
 800c6e8:	d193      	bne.n	800c612 <_dtoa_r+0xaa2>
 800c6ea:	463b      	mov	r3, r7
 800c6ec:	461f      	mov	r7, r3
 800c6ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6f2:	2a30      	cmp	r2, #48	; 0x30
 800c6f4:	d0fa      	beq.n	800c6ec <_dtoa_r+0xb7c>
 800c6f6:	e6e1      	b.n	800c4bc <_dtoa_r+0x94c>
 800c6f8:	9a03      	ldr	r2, [sp, #12]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d18a      	bne.n	800c614 <_dtoa_r+0xaa4>
 800c6fe:	2331      	movs	r3, #49	; 0x31
 800c700:	f10b 0b01 	add.w	fp, fp, #1
 800c704:	e797      	b.n	800c636 <_dtoa_r+0xac6>
 800c706:	4b0a      	ldr	r3, [pc, #40]	; (800c730 <_dtoa_r+0xbc0>)
 800c708:	f7ff ba9f 	b.w	800bc4a <_dtoa_r+0xda>
 800c70c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f47f aa77 	bne.w	800bc02 <_dtoa_r+0x92>
 800c714:	4b07      	ldr	r3, [pc, #28]	; (800c734 <_dtoa_r+0xbc4>)
 800c716:	f7ff ba98 	b.w	800bc4a <_dtoa_r+0xda>
 800c71a:	9b06      	ldr	r3, [sp, #24]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	dcb6      	bgt.n	800c68e <_dtoa_r+0xb1e>
 800c720:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c722:	2b02      	cmp	r3, #2
 800c724:	f73f aeb5 	bgt.w	800c492 <_dtoa_r+0x922>
 800c728:	e7b1      	b.n	800c68e <_dtoa_r+0xb1e>
 800c72a:	bf00      	nop
 800c72c:	0800e5b8 	.word	0x0800e5b8
 800c730:	0800e510 	.word	0x0800e510
 800c734:	0800e53c 	.word	0x0800e53c

0800c738 <_free_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4605      	mov	r5, r0
 800c73c:	2900      	cmp	r1, #0
 800c73e:	d040      	beq.n	800c7c2 <_free_r+0x8a>
 800c740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c744:	1f0c      	subs	r4, r1, #4
 800c746:	2b00      	cmp	r3, #0
 800c748:	bfb8      	it	lt
 800c74a:	18e4      	addlt	r4, r4, r3
 800c74c:	f000 fc50 	bl	800cff0 <__malloc_lock>
 800c750:	4a1c      	ldr	r2, [pc, #112]	; (800c7c4 <_free_r+0x8c>)
 800c752:	6813      	ldr	r3, [r2, #0]
 800c754:	b933      	cbnz	r3, 800c764 <_free_r+0x2c>
 800c756:	6063      	str	r3, [r4, #4]
 800c758:	6014      	str	r4, [r2, #0]
 800c75a:	4628      	mov	r0, r5
 800c75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c760:	f000 bc4c 	b.w	800cffc <__malloc_unlock>
 800c764:	42a3      	cmp	r3, r4
 800c766:	d908      	bls.n	800c77a <_free_r+0x42>
 800c768:	6820      	ldr	r0, [r4, #0]
 800c76a:	1821      	adds	r1, r4, r0
 800c76c:	428b      	cmp	r3, r1
 800c76e:	bf01      	itttt	eq
 800c770:	6819      	ldreq	r1, [r3, #0]
 800c772:	685b      	ldreq	r3, [r3, #4]
 800c774:	1809      	addeq	r1, r1, r0
 800c776:	6021      	streq	r1, [r4, #0]
 800c778:	e7ed      	b.n	800c756 <_free_r+0x1e>
 800c77a:	461a      	mov	r2, r3
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	b10b      	cbz	r3, 800c784 <_free_r+0x4c>
 800c780:	42a3      	cmp	r3, r4
 800c782:	d9fa      	bls.n	800c77a <_free_r+0x42>
 800c784:	6811      	ldr	r1, [r2, #0]
 800c786:	1850      	adds	r0, r2, r1
 800c788:	42a0      	cmp	r0, r4
 800c78a:	d10b      	bne.n	800c7a4 <_free_r+0x6c>
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	4401      	add	r1, r0
 800c790:	1850      	adds	r0, r2, r1
 800c792:	4283      	cmp	r3, r0
 800c794:	6011      	str	r1, [r2, #0]
 800c796:	d1e0      	bne.n	800c75a <_free_r+0x22>
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	4408      	add	r0, r1
 800c79e:	6010      	str	r0, [r2, #0]
 800c7a0:	6053      	str	r3, [r2, #4]
 800c7a2:	e7da      	b.n	800c75a <_free_r+0x22>
 800c7a4:	d902      	bls.n	800c7ac <_free_r+0x74>
 800c7a6:	230c      	movs	r3, #12
 800c7a8:	602b      	str	r3, [r5, #0]
 800c7aa:	e7d6      	b.n	800c75a <_free_r+0x22>
 800c7ac:	6820      	ldr	r0, [r4, #0]
 800c7ae:	1821      	adds	r1, r4, r0
 800c7b0:	428b      	cmp	r3, r1
 800c7b2:	bf01      	itttt	eq
 800c7b4:	6819      	ldreq	r1, [r3, #0]
 800c7b6:	685b      	ldreq	r3, [r3, #4]
 800c7b8:	1809      	addeq	r1, r1, r0
 800c7ba:	6021      	streq	r1, [r4, #0]
 800c7bc:	6063      	str	r3, [r4, #4]
 800c7be:	6054      	str	r4, [r2, #4]
 800c7c0:	e7cb      	b.n	800c75a <_free_r+0x22>
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}
 800c7c4:	2000254c 	.word	0x2000254c

0800c7c8 <rshift>:
 800c7c8:	6903      	ldr	r3, [r0, #16]
 800c7ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7d2:	f100 0414 	add.w	r4, r0, #20
 800c7d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7da:	dd46      	ble.n	800c86a <rshift+0xa2>
 800c7dc:	f011 011f 	ands.w	r1, r1, #31
 800c7e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7e8:	d10c      	bne.n	800c804 <rshift+0x3c>
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	f100 0710 	add.w	r7, r0, #16
 800c7f0:	42b1      	cmp	r1, r6
 800c7f2:	d335      	bcc.n	800c860 <rshift+0x98>
 800c7f4:	1a9b      	subs	r3, r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	1eea      	subs	r2, r5, #3
 800c7fa:	4296      	cmp	r6, r2
 800c7fc:	bf38      	it	cc
 800c7fe:	2300      	movcc	r3, #0
 800c800:	4423      	add	r3, r4
 800c802:	e015      	b.n	800c830 <rshift+0x68>
 800c804:	46a1      	mov	r9, r4
 800c806:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c80a:	f1c1 0820 	rsb	r8, r1, #32
 800c80e:	40cf      	lsrs	r7, r1
 800c810:	f105 0e04 	add.w	lr, r5, #4
 800c814:	4576      	cmp	r6, lr
 800c816:	46f4      	mov	ip, lr
 800c818:	d816      	bhi.n	800c848 <rshift+0x80>
 800c81a:	1a9a      	subs	r2, r3, r2
 800c81c:	0092      	lsls	r2, r2, #2
 800c81e:	3a04      	subs	r2, #4
 800c820:	3501      	adds	r5, #1
 800c822:	42ae      	cmp	r6, r5
 800c824:	bf38      	it	cc
 800c826:	2200      	movcc	r2, #0
 800c828:	18a3      	adds	r3, r4, r2
 800c82a:	50a7      	str	r7, [r4, r2]
 800c82c:	b107      	cbz	r7, 800c830 <rshift+0x68>
 800c82e:	3304      	adds	r3, #4
 800c830:	42a3      	cmp	r3, r4
 800c832:	eba3 0204 	sub.w	r2, r3, r4
 800c836:	bf08      	it	eq
 800c838:	2300      	moveq	r3, #0
 800c83a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c83e:	6102      	str	r2, [r0, #16]
 800c840:	bf08      	it	eq
 800c842:	6143      	streq	r3, [r0, #20]
 800c844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c848:	f8dc c000 	ldr.w	ip, [ip]
 800c84c:	fa0c fc08 	lsl.w	ip, ip, r8
 800c850:	ea4c 0707 	orr.w	r7, ip, r7
 800c854:	f849 7b04 	str.w	r7, [r9], #4
 800c858:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c85c:	40cf      	lsrs	r7, r1
 800c85e:	e7d9      	b.n	800c814 <rshift+0x4c>
 800c860:	f851 cb04 	ldr.w	ip, [r1], #4
 800c864:	f847 cf04 	str.w	ip, [r7, #4]!
 800c868:	e7c2      	b.n	800c7f0 <rshift+0x28>
 800c86a:	4623      	mov	r3, r4
 800c86c:	e7e0      	b.n	800c830 <rshift+0x68>

0800c86e <__hexdig_fun>:
 800c86e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c872:	2b09      	cmp	r3, #9
 800c874:	d802      	bhi.n	800c87c <__hexdig_fun+0xe>
 800c876:	3820      	subs	r0, #32
 800c878:	b2c0      	uxtb	r0, r0
 800c87a:	4770      	bx	lr
 800c87c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c880:	2b05      	cmp	r3, #5
 800c882:	d801      	bhi.n	800c888 <__hexdig_fun+0x1a>
 800c884:	3847      	subs	r0, #71	; 0x47
 800c886:	e7f7      	b.n	800c878 <__hexdig_fun+0xa>
 800c888:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c88c:	2b05      	cmp	r3, #5
 800c88e:	d801      	bhi.n	800c894 <__hexdig_fun+0x26>
 800c890:	3827      	subs	r0, #39	; 0x27
 800c892:	e7f1      	b.n	800c878 <__hexdig_fun+0xa>
 800c894:	2000      	movs	r0, #0
 800c896:	4770      	bx	lr

0800c898 <__gethex>:
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	4681      	mov	r9, r0
 800c89e:	468a      	mov	sl, r1
 800c8a0:	4617      	mov	r7, r2
 800c8a2:	680a      	ldr	r2, [r1, #0]
 800c8a4:	b085      	sub	sp, #20
 800c8a6:	f102 0b02 	add.w	fp, r2, #2
 800c8aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c8ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c8b2:	9302      	str	r3, [sp, #8]
 800c8b4:	32fe      	adds	r2, #254	; 0xfe
 800c8b6:	eb02 030b 	add.w	r3, r2, fp
 800c8ba:	46d8      	mov	r8, fp
 800c8bc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	2830      	cmp	r0, #48	; 0x30
 800c8c4:	d0f7      	beq.n	800c8b6 <__gethex+0x1e>
 800c8c6:	f7ff ffd2 	bl	800c86e <__hexdig_fun>
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d138      	bne.n	800c942 <__gethex+0xaa>
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	49a7      	ldr	r1, [pc, #668]	; (800cb74 <__gethex+0x2dc>)
 800c8d6:	f7ff f812 	bl	800b8fe <strncmp>
 800c8da:	4606      	mov	r6, r0
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d169      	bne.n	800c9b4 <__gethex+0x11c>
 800c8e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c8e4:	465d      	mov	r5, fp
 800c8e6:	f7ff ffc2 	bl	800c86e <__hexdig_fun>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d064      	beq.n	800c9b8 <__gethex+0x120>
 800c8ee:	465a      	mov	r2, fp
 800c8f0:	7810      	ldrb	r0, [r2, #0]
 800c8f2:	4690      	mov	r8, r2
 800c8f4:	2830      	cmp	r0, #48	; 0x30
 800c8f6:	f102 0201 	add.w	r2, r2, #1
 800c8fa:	d0f9      	beq.n	800c8f0 <__gethex+0x58>
 800c8fc:	f7ff ffb7 	bl	800c86e <__hexdig_fun>
 800c900:	2301      	movs	r3, #1
 800c902:	fab0 f480 	clz	r4, r0
 800c906:	465e      	mov	r6, fp
 800c908:	0964      	lsrs	r4, r4, #5
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	4642      	mov	r2, r8
 800c90e:	4615      	mov	r5, r2
 800c910:	7828      	ldrb	r0, [r5, #0]
 800c912:	3201      	adds	r2, #1
 800c914:	f7ff ffab 	bl	800c86e <__hexdig_fun>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d1f8      	bne.n	800c90e <__gethex+0x76>
 800c91c:	2201      	movs	r2, #1
 800c91e:	4628      	mov	r0, r5
 800c920:	4994      	ldr	r1, [pc, #592]	; (800cb74 <__gethex+0x2dc>)
 800c922:	f7fe ffec 	bl	800b8fe <strncmp>
 800c926:	b978      	cbnz	r0, 800c948 <__gethex+0xb0>
 800c928:	b946      	cbnz	r6, 800c93c <__gethex+0xa4>
 800c92a:	1c6e      	adds	r6, r5, #1
 800c92c:	4632      	mov	r2, r6
 800c92e:	4615      	mov	r5, r2
 800c930:	7828      	ldrb	r0, [r5, #0]
 800c932:	3201      	adds	r2, #1
 800c934:	f7ff ff9b 	bl	800c86e <__hexdig_fun>
 800c938:	2800      	cmp	r0, #0
 800c93a:	d1f8      	bne.n	800c92e <__gethex+0x96>
 800c93c:	1b73      	subs	r3, r6, r5
 800c93e:	009e      	lsls	r6, r3, #2
 800c940:	e004      	b.n	800c94c <__gethex+0xb4>
 800c942:	2400      	movs	r4, #0
 800c944:	4626      	mov	r6, r4
 800c946:	e7e1      	b.n	800c90c <__gethex+0x74>
 800c948:	2e00      	cmp	r6, #0
 800c94a:	d1f7      	bne.n	800c93c <__gethex+0xa4>
 800c94c:	782b      	ldrb	r3, [r5, #0]
 800c94e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c952:	2b50      	cmp	r3, #80	; 0x50
 800c954:	d13d      	bne.n	800c9d2 <__gethex+0x13a>
 800c956:	786b      	ldrb	r3, [r5, #1]
 800c958:	2b2b      	cmp	r3, #43	; 0x2b
 800c95a:	d02f      	beq.n	800c9bc <__gethex+0x124>
 800c95c:	2b2d      	cmp	r3, #45	; 0x2d
 800c95e:	d031      	beq.n	800c9c4 <__gethex+0x12c>
 800c960:	f04f 0b00 	mov.w	fp, #0
 800c964:	1c69      	adds	r1, r5, #1
 800c966:	7808      	ldrb	r0, [r1, #0]
 800c968:	f7ff ff81 	bl	800c86e <__hexdig_fun>
 800c96c:	1e42      	subs	r2, r0, #1
 800c96e:	b2d2      	uxtb	r2, r2
 800c970:	2a18      	cmp	r2, #24
 800c972:	d82e      	bhi.n	800c9d2 <__gethex+0x13a>
 800c974:	f1a0 0210 	sub.w	r2, r0, #16
 800c978:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c97c:	f7ff ff77 	bl	800c86e <__hexdig_fun>
 800c980:	f100 3cff 	add.w	ip, r0, #4294967295
 800c984:	fa5f fc8c 	uxtb.w	ip, ip
 800c988:	f1bc 0f18 	cmp.w	ip, #24
 800c98c:	d91d      	bls.n	800c9ca <__gethex+0x132>
 800c98e:	f1bb 0f00 	cmp.w	fp, #0
 800c992:	d000      	beq.n	800c996 <__gethex+0xfe>
 800c994:	4252      	negs	r2, r2
 800c996:	4416      	add	r6, r2
 800c998:	f8ca 1000 	str.w	r1, [sl]
 800c99c:	b1dc      	cbz	r4, 800c9d6 <__gethex+0x13e>
 800c99e:	9b01      	ldr	r3, [sp, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	bf14      	ite	ne
 800c9a4:	f04f 0800 	movne.w	r8, #0
 800c9a8:	f04f 0806 	moveq.w	r8, #6
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	b005      	add	sp, #20
 800c9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b4:	4645      	mov	r5, r8
 800c9b6:	4626      	mov	r6, r4
 800c9b8:	2401      	movs	r4, #1
 800c9ba:	e7c7      	b.n	800c94c <__gethex+0xb4>
 800c9bc:	f04f 0b00 	mov.w	fp, #0
 800c9c0:	1ca9      	adds	r1, r5, #2
 800c9c2:	e7d0      	b.n	800c966 <__gethex+0xce>
 800c9c4:	f04f 0b01 	mov.w	fp, #1
 800c9c8:	e7fa      	b.n	800c9c0 <__gethex+0x128>
 800c9ca:	230a      	movs	r3, #10
 800c9cc:	fb03 0002 	mla	r0, r3, r2, r0
 800c9d0:	e7d0      	b.n	800c974 <__gethex+0xdc>
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	e7e0      	b.n	800c998 <__gethex+0x100>
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	eba5 0308 	sub.w	r3, r5, r8
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	2b07      	cmp	r3, #7
 800c9e0:	dc0a      	bgt.n	800c9f8 <__gethex+0x160>
 800c9e2:	4648      	mov	r0, r9
 800c9e4:	f000 fb10 	bl	800d008 <_Balloc>
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	b940      	cbnz	r0, 800c9fe <__gethex+0x166>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	21e4      	movs	r1, #228	; 0xe4
 800c9f0:	4b61      	ldr	r3, [pc, #388]	; (800cb78 <__gethex+0x2e0>)
 800c9f2:	4862      	ldr	r0, [pc, #392]	; (800cb7c <__gethex+0x2e4>)
 800c9f4:	f001 f9de 	bl	800ddb4 <__assert_func>
 800c9f8:	3101      	adds	r1, #1
 800c9fa:	105b      	asrs	r3, r3, #1
 800c9fc:	e7ef      	b.n	800c9de <__gethex+0x146>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	469b      	mov	fp, r3
 800ca02:	f100 0a14 	add.w	sl, r0, #20
 800ca06:	f8cd a004 	str.w	sl, [sp, #4]
 800ca0a:	45a8      	cmp	r8, r5
 800ca0c:	d344      	bcc.n	800ca98 <__gethex+0x200>
 800ca0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca12:	4658      	mov	r0, fp
 800ca14:	f848 bb04 	str.w	fp, [r8], #4
 800ca18:	eba8 080a 	sub.w	r8, r8, sl
 800ca1c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800ca20:	6122      	str	r2, [r4, #16]
 800ca22:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800ca26:	f000 fbe1 	bl	800d1ec <__hi0bits>
 800ca2a:	683d      	ldr	r5, [r7, #0]
 800ca2c:	eba8 0800 	sub.w	r8, r8, r0
 800ca30:	45a8      	cmp	r8, r5
 800ca32:	dd59      	ble.n	800cae8 <__gethex+0x250>
 800ca34:	eba8 0805 	sub.w	r8, r8, r5
 800ca38:	4641      	mov	r1, r8
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f000 ff5f 	bl	800d8fe <__any_on>
 800ca40:	4683      	mov	fp, r0
 800ca42:	b1b8      	cbz	r0, 800ca74 <__gethex+0x1dc>
 800ca44:	f04f 0b01 	mov.w	fp, #1
 800ca48:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca4c:	1159      	asrs	r1, r3, #5
 800ca4e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca52:	f003 021f 	and.w	r2, r3, #31
 800ca56:	fa0b f202 	lsl.w	r2, fp, r2
 800ca5a:	420a      	tst	r2, r1
 800ca5c:	d00a      	beq.n	800ca74 <__gethex+0x1dc>
 800ca5e:	455b      	cmp	r3, fp
 800ca60:	dd06      	ble.n	800ca70 <__gethex+0x1d8>
 800ca62:	4620      	mov	r0, r4
 800ca64:	f1a8 0102 	sub.w	r1, r8, #2
 800ca68:	f000 ff49 	bl	800d8fe <__any_on>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d138      	bne.n	800cae2 <__gethex+0x24a>
 800ca70:	f04f 0b02 	mov.w	fp, #2
 800ca74:	4641      	mov	r1, r8
 800ca76:	4620      	mov	r0, r4
 800ca78:	f7ff fea6 	bl	800c7c8 <rshift>
 800ca7c:	4446      	add	r6, r8
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	42b3      	cmp	r3, r6
 800ca82:	da41      	bge.n	800cb08 <__gethex+0x270>
 800ca84:	4621      	mov	r1, r4
 800ca86:	4648      	mov	r0, r9
 800ca88:	f000 fafe 	bl	800d088 <_Bfree>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca90:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ca94:	6013      	str	r3, [r2, #0]
 800ca96:	e789      	b.n	800c9ac <__gethex+0x114>
 800ca98:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ca9c:	2a2e      	cmp	r2, #46	; 0x2e
 800ca9e:	d014      	beq.n	800caca <__gethex+0x232>
 800caa0:	2b20      	cmp	r3, #32
 800caa2:	d106      	bne.n	800cab2 <__gethex+0x21a>
 800caa4:	9b01      	ldr	r3, [sp, #4]
 800caa6:	f843 bb04 	str.w	fp, [r3], #4
 800caaa:	f04f 0b00 	mov.w	fp, #0
 800caae:	9301      	str	r3, [sp, #4]
 800cab0:	465b      	mov	r3, fp
 800cab2:	7828      	ldrb	r0, [r5, #0]
 800cab4:	9303      	str	r3, [sp, #12]
 800cab6:	f7ff feda 	bl	800c86e <__hexdig_fun>
 800caba:	9b03      	ldr	r3, [sp, #12]
 800cabc:	f000 000f 	and.w	r0, r0, #15
 800cac0:	4098      	lsls	r0, r3
 800cac2:	ea4b 0b00 	orr.w	fp, fp, r0
 800cac6:	3304      	adds	r3, #4
 800cac8:	e79f      	b.n	800ca0a <__gethex+0x172>
 800caca:	45a8      	cmp	r8, r5
 800cacc:	d8e8      	bhi.n	800caa0 <__gethex+0x208>
 800cace:	2201      	movs	r2, #1
 800cad0:	4628      	mov	r0, r5
 800cad2:	4928      	ldr	r1, [pc, #160]	; (800cb74 <__gethex+0x2dc>)
 800cad4:	9303      	str	r3, [sp, #12]
 800cad6:	f7fe ff12 	bl	800b8fe <strncmp>
 800cada:	9b03      	ldr	r3, [sp, #12]
 800cadc:	2800      	cmp	r0, #0
 800cade:	d1df      	bne.n	800caa0 <__gethex+0x208>
 800cae0:	e793      	b.n	800ca0a <__gethex+0x172>
 800cae2:	f04f 0b03 	mov.w	fp, #3
 800cae6:	e7c5      	b.n	800ca74 <__gethex+0x1dc>
 800cae8:	da0b      	bge.n	800cb02 <__gethex+0x26a>
 800caea:	eba5 0808 	sub.w	r8, r5, r8
 800caee:	4621      	mov	r1, r4
 800caf0:	4642      	mov	r2, r8
 800caf2:	4648      	mov	r0, r9
 800caf4:	f000 fce0 	bl	800d4b8 <__lshift>
 800caf8:	4604      	mov	r4, r0
 800cafa:	eba6 0608 	sub.w	r6, r6, r8
 800cafe:	f100 0a14 	add.w	sl, r0, #20
 800cb02:	f04f 0b00 	mov.w	fp, #0
 800cb06:	e7ba      	b.n	800ca7e <__gethex+0x1e6>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	42b3      	cmp	r3, r6
 800cb0c:	dd74      	ble.n	800cbf8 <__gethex+0x360>
 800cb0e:	1b9e      	subs	r6, r3, r6
 800cb10:	42b5      	cmp	r5, r6
 800cb12:	dc35      	bgt.n	800cb80 <__gethex+0x2e8>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d023      	beq.n	800cb62 <__gethex+0x2ca>
 800cb1a:	2b03      	cmp	r3, #3
 800cb1c:	d025      	beq.n	800cb6a <__gethex+0x2d2>
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d115      	bne.n	800cb4e <__gethex+0x2b6>
 800cb22:	42b5      	cmp	r5, r6
 800cb24:	d113      	bne.n	800cb4e <__gethex+0x2b6>
 800cb26:	2d01      	cmp	r5, #1
 800cb28:	d10b      	bne.n	800cb42 <__gethex+0x2aa>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	9a02      	ldr	r2, [sp, #8]
 800cb2e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	2301      	movs	r3, #1
 800cb36:	6123      	str	r3, [r4, #16]
 800cb38:	f8ca 3000 	str.w	r3, [sl]
 800cb3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb3e:	601c      	str	r4, [r3, #0]
 800cb40:	e734      	b.n	800c9ac <__gethex+0x114>
 800cb42:	4620      	mov	r0, r4
 800cb44:	1e69      	subs	r1, r5, #1
 800cb46:	f000 feda 	bl	800d8fe <__any_on>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d1ed      	bne.n	800cb2a <__gethex+0x292>
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4648      	mov	r0, r9
 800cb52:	f000 fa99 	bl	800d088 <_Bfree>
 800cb56:	2300      	movs	r3, #0
 800cb58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb5a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	e724      	b.n	800c9ac <__gethex+0x114>
 800cb62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1f2      	bne.n	800cb4e <__gethex+0x2b6>
 800cb68:	e7df      	b.n	800cb2a <__gethex+0x292>
 800cb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1dc      	bne.n	800cb2a <__gethex+0x292>
 800cb70:	e7ed      	b.n	800cb4e <__gethex+0x2b6>
 800cb72:	bf00      	nop
 800cb74:	0800e4a8 	.word	0x0800e4a8
 800cb78:	0800e5b8 	.word	0x0800e5b8
 800cb7c:	0800e5c9 	.word	0x0800e5c9
 800cb80:	f106 38ff 	add.w	r8, r6, #4294967295
 800cb84:	f1bb 0f00 	cmp.w	fp, #0
 800cb88:	d133      	bne.n	800cbf2 <__gethex+0x35a>
 800cb8a:	f1b8 0f00 	cmp.w	r8, #0
 800cb8e:	d004      	beq.n	800cb9a <__gethex+0x302>
 800cb90:	4641      	mov	r1, r8
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 feb3 	bl	800d8fe <__any_on>
 800cb98:	4683      	mov	fp, r0
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cba0:	f008 081f 	and.w	r8, r8, #31
 800cba4:	fa03 f308 	lsl.w	r3, r3, r8
 800cba8:	f04f 0802 	mov.w	r8, #2
 800cbac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	4213      	tst	r3, r2
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	bf18      	it	ne
 800cbb8:	f04b 0b02 	orrne.w	fp, fp, #2
 800cbbc:	1bad      	subs	r5, r5, r6
 800cbbe:	f7ff fe03 	bl	800c7c8 <rshift>
 800cbc2:	687e      	ldr	r6, [r7, #4]
 800cbc4:	f1bb 0f00 	cmp.w	fp, #0
 800cbc8:	d04a      	beq.n	800cc60 <__gethex+0x3c8>
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d016      	beq.n	800cbfe <__gethex+0x366>
 800cbd0:	2b03      	cmp	r3, #3
 800cbd2:	d018      	beq.n	800cc06 <__gethex+0x36e>
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d109      	bne.n	800cbec <__gethex+0x354>
 800cbd8:	f01b 0f02 	tst.w	fp, #2
 800cbdc:	d006      	beq.n	800cbec <__gethex+0x354>
 800cbde:	f8da 3000 	ldr.w	r3, [sl]
 800cbe2:	ea4b 0b03 	orr.w	fp, fp, r3
 800cbe6:	f01b 0f01 	tst.w	fp, #1
 800cbea:	d10f      	bne.n	800cc0c <__gethex+0x374>
 800cbec:	f048 0810 	orr.w	r8, r8, #16
 800cbf0:	e036      	b.n	800cc60 <__gethex+0x3c8>
 800cbf2:	f04f 0b01 	mov.w	fp, #1
 800cbf6:	e7d0      	b.n	800cb9a <__gethex+0x302>
 800cbf8:	f04f 0801 	mov.w	r8, #1
 800cbfc:	e7e2      	b.n	800cbc4 <__gethex+0x32c>
 800cbfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc00:	f1c3 0301 	rsb	r3, r3, #1
 800cc04:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d0ef      	beq.n	800cbec <__gethex+0x354>
 800cc0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc10:	f104 0214 	add.w	r2, r4, #20
 800cc14:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cc18:	9301      	str	r3, [sp, #4]
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cc20:	4694      	mov	ip, r2
 800cc22:	f852 1b04 	ldr.w	r1, [r2], #4
 800cc26:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cc2a:	d01e      	beq.n	800cc6a <__gethex+0x3d2>
 800cc2c:	3101      	adds	r1, #1
 800cc2e:	f8cc 1000 	str.w	r1, [ip]
 800cc32:	f1b8 0f02 	cmp.w	r8, #2
 800cc36:	f104 0214 	add.w	r2, r4, #20
 800cc3a:	d13d      	bne.n	800ccb8 <__gethex+0x420>
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	42ab      	cmp	r3, r5
 800cc42:	d10b      	bne.n	800cc5c <__gethex+0x3c4>
 800cc44:	2301      	movs	r3, #1
 800cc46:	1169      	asrs	r1, r5, #5
 800cc48:	f005 051f 	and.w	r5, r5, #31
 800cc4c:	fa03 f505 	lsl.w	r5, r3, r5
 800cc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc54:	421d      	tst	r5, r3
 800cc56:	bf18      	it	ne
 800cc58:	f04f 0801 	movne.w	r8, #1
 800cc5c:	f048 0820 	orr.w	r8, r8, #32
 800cc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc62:	601c      	str	r4, [r3, #0]
 800cc64:	9b02      	ldr	r3, [sp, #8]
 800cc66:	601e      	str	r6, [r3, #0]
 800cc68:	e6a0      	b.n	800c9ac <__gethex+0x114>
 800cc6a:	4290      	cmp	r0, r2
 800cc6c:	f842 3c04 	str.w	r3, [r2, #-4]
 800cc70:	d8d6      	bhi.n	800cc20 <__gethex+0x388>
 800cc72:	68a2      	ldr	r2, [r4, #8]
 800cc74:	4593      	cmp	fp, r2
 800cc76:	db17      	blt.n	800cca8 <__gethex+0x410>
 800cc78:	6861      	ldr	r1, [r4, #4]
 800cc7a:	4648      	mov	r0, r9
 800cc7c:	3101      	adds	r1, #1
 800cc7e:	f000 f9c3 	bl	800d008 <_Balloc>
 800cc82:	4682      	mov	sl, r0
 800cc84:	b918      	cbnz	r0, 800cc8e <__gethex+0x3f6>
 800cc86:	4602      	mov	r2, r0
 800cc88:	2184      	movs	r1, #132	; 0x84
 800cc8a:	4b1a      	ldr	r3, [pc, #104]	; (800ccf4 <__gethex+0x45c>)
 800cc8c:	e6b1      	b.n	800c9f2 <__gethex+0x15a>
 800cc8e:	6922      	ldr	r2, [r4, #16]
 800cc90:	f104 010c 	add.w	r1, r4, #12
 800cc94:	3202      	adds	r2, #2
 800cc96:	0092      	lsls	r2, r2, #2
 800cc98:	300c      	adds	r0, #12
 800cc9a:	f7fe fec8 	bl	800ba2e <memcpy>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4648      	mov	r0, r9
 800cca2:	f000 f9f1 	bl	800d088 <_Bfree>
 800cca6:	4654      	mov	r4, sl
 800cca8:	6922      	ldr	r2, [r4, #16]
 800ccaa:	1c51      	adds	r1, r2, #1
 800ccac:	6121      	str	r1, [r4, #16]
 800ccae:	2101      	movs	r1, #1
 800ccb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ccb4:	6151      	str	r1, [r2, #20]
 800ccb6:	e7bc      	b.n	800cc32 <__gethex+0x39a>
 800ccb8:	6921      	ldr	r1, [r4, #16]
 800ccba:	4559      	cmp	r1, fp
 800ccbc:	dd0b      	ble.n	800ccd6 <__gethex+0x43e>
 800ccbe:	2101      	movs	r1, #1
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f7ff fd81 	bl	800c7c8 <rshift>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	3601      	adds	r6, #1
 800ccca:	42b3      	cmp	r3, r6
 800cccc:	f6ff aeda 	blt.w	800ca84 <__gethex+0x1ec>
 800ccd0:	f04f 0801 	mov.w	r8, #1
 800ccd4:	e7c2      	b.n	800cc5c <__gethex+0x3c4>
 800ccd6:	f015 051f 	ands.w	r5, r5, #31
 800ccda:	d0f9      	beq.n	800ccd0 <__gethex+0x438>
 800ccdc:	9b01      	ldr	r3, [sp, #4]
 800ccde:	f1c5 0520 	rsb	r5, r5, #32
 800cce2:	441a      	add	r2, r3
 800cce4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cce8:	f000 fa80 	bl	800d1ec <__hi0bits>
 800ccec:	42a8      	cmp	r0, r5
 800ccee:	dbe6      	blt.n	800ccbe <__gethex+0x426>
 800ccf0:	e7ee      	b.n	800ccd0 <__gethex+0x438>
 800ccf2:	bf00      	nop
 800ccf4:	0800e5b8 	.word	0x0800e5b8

0800ccf8 <L_shift>:
 800ccf8:	f1c2 0208 	rsb	r2, r2, #8
 800ccfc:	0092      	lsls	r2, r2, #2
 800ccfe:	b570      	push	{r4, r5, r6, lr}
 800cd00:	f1c2 0620 	rsb	r6, r2, #32
 800cd04:	6843      	ldr	r3, [r0, #4]
 800cd06:	6804      	ldr	r4, [r0, #0]
 800cd08:	fa03 f506 	lsl.w	r5, r3, r6
 800cd0c:	432c      	orrs	r4, r5
 800cd0e:	40d3      	lsrs	r3, r2
 800cd10:	6004      	str	r4, [r0, #0]
 800cd12:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd16:	4288      	cmp	r0, r1
 800cd18:	d3f4      	bcc.n	800cd04 <L_shift+0xc>
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}

0800cd1c <__match>:
 800cd1c:	b530      	push	{r4, r5, lr}
 800cd1e:	6803      	ldr	r3, [r0, #0]
 800cd20:	3301      	adds	r3, #1
 800cd22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd26:	b914      	cbnz	r4, 800cd2e <__match+0x12>
 800cd28:	6003      	str	r3, [r0, #0]
 800cd2a:	2001      	movs	r0, #1
 800cd2c:	bd30      	pop	{r4, r5, pc}
 800cd2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd36:	2d19      	cmp	r5, #25
 800cd38:	bf98      	it	ls
 800cd3a:	3220      	addls	r2, #32
 800cd3c:	42a2      	cmp	r2, r4
 800cd3e:	d0f0      	beq.n	800cd22 <__match+0x6>
 800cd40:	2000      	movs	r0, #0
 800cd42:	e7f3      	b.n	800cd2c <__match+0x10>

0800cd44 <__hexnan>:
 800cd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	2500      	movs	r5, #0
 800cd4a:	680b      	ldr	r3, [r1, #0]
 800cd4c:	4682      	mov	sl, r0
 800cd4e:	115e      	asrs	r6, r3, #5
 800cd50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd54:	f013 031f 	ands.w	r3, r3, #31
 800cd58:	bf18      	it	ne
 800cd5a:	3604      	addne	r6, #4
 800cd5c:	1f37      	subs	r7, r6, #4
 800cd5e:	4690      	mov	r8, r2
 800cd60:	46b9      	mov	r9, r7
 800cd62:	463c      	mov	r4, r7
 800cd64:	46ab      	mov	fp, r5
 800cd66:	b087      	sub	sp, #28
 800cd68:	6801      	ldr	r1, [r0, #0]
 800cd6a:	9301      	str	r3, [sp, #4]
 800cd6c:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd70:	9502      	str	r5, [sp, #8]
 800cd72:	784a      	ldrb	r2, [r1, #1]
 800cd74:	1c4b      	adds	r3, r1, #1
 800cd76:	9303      	str	r3, [sp, #12]
 800cd78:	b342      	cbz	r2, 800cdcc <__hexnan+0x88>
 800cd7a:	4610      	mov	r0, r2
 800cd7c:	9105      	str	r1, [sp, #20]
 800cd7e:	9204      	str	r2, [sp, #16]
 800cd80:	f7ff fd75 	bl	800c86e <__hexdig_fun>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d14f      	bne.n	800ce28 <__hexnan+0xe4>
 800cd88:	9a04      	ldr	r2, [sp, #16]
 800cd8a:	9905      	ldr	r1, [sp, #20]
 800cd8c:	2a20      	cmp	r2, #32
 800cd8e:	d818      	bhi.n	800cdc2 <__hexnan+0x7e>
 800cd90:	9b02      	ldr	r3, [sp, #8]
 800cd92:	459b      	cmp	fp, r3
 800cd94:	dd13      	ble.n	800cdbe <__hexnan+0x7a>
 800cd96:	454c      	cmp	r4, r9
 800cd98:	d206      	bcs.n	800cda8 <__hexnan+0x64>
 800cd9a:	2d07      	cmp	r5, #7
 800cd9c:	dc04      	bgt.n	800cda8 <__hexnan+0x64>
 800cd9e:	462a      	mov	r2, r5
 800cda0:	4649      	mov	r1, r9
 800cda2:	4620      	mov	r0, r4
 800cda4:	f7ff ffa8 	bl	800ccf8 <L_shift>
 800cda8:	4544      	cmp	r4, r8
 800cdaa:	d950      	bls.n	800ce4e <__hexnan+0x10a>
 800cdac:	2300      	movs	r3, #0
 800cdae:	f1a4 0904 	sub.w	r9, r4, #4
 800cdb2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdb6:	461d      	mov	r5, r3
 800cdb8:	464c      	mov	r4, r9
 800cdba:	f8cd b008 	str.w	fp, [sp, #8]
 800cdbe:	9903      	ldr	r1, [sp, #12]
 800cdc0:	e7d7      	b.n	800cd72 <__hexnan+0x2e>
 800cdc2:	2a29      	cmp	r2, #41	; 0x29
 800cdc4:	d155      	bne.n	800ce72 <__hexnan+0x12e>
 800cdc6:	3102      	adds	r1, #2
 800cdc8:	f8ca 1000 	str.w	r1, [sl]
 800cdcc:	f1bb 0f00 	cmp.w	fp, #0
 800cdd0:	d04f      	beq.n	800ce72 <__hexnan+0x12e>
 800cdd2:	454c      	cmp	r4, r9
 800cdd4:	d206      	bcs.n	800cde4 <__hexnan+0xa0>
 800cdd6:	2d07      	cmp	r5, #7
 800cdd8:	dc04      	bgt.n	800cde4 <__hexnan+0xa0>
 800cdda:	462a      	mov	r2, r5
 800cddc:	4649      	mov	r1, r9
 800cdde:	4620      	mov	r0, r4
 800cde0:	f7ff ff8a 	bl	800ccf8 <L_shift>
 800cde4:	4544      	cmp	r4, r8
 800cde6:	d934      	bls.n	800ce52 <__hexnan+0x10e>
 800cde8:	4623      	mov	r3, r4
 800cdea:	f1a8 0204 	sub.w	r2, r8, #4
 800cdee:	f853 1b04 	ldr.w	r1, [r3], #4
 800cdf2:	429f      	cmp	r7, r3
 800cdf4:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdf8:	d2f9      	bcs.n	800cdee <__hexnan+0xaa>
 800cdfa:	1b3b      	subs	r3, r7, r4
 800cdfc:	f023 0303 	bic.w	r3, r3, #3
 800ce00:	3304      	adds	r3, #4
 800ce02:	3e03      	subs	r6, #3
 800ce04:	3401      	adds	r4, #1
 800ce06:	42a6      	cmp	r6, r4
 800ce08:	bf38      	it	cc
 800ce0a:	2304      	movcc	r3, #4
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	4443      	add	r3, r8
 800ce10:	f843 2b04 	str.w	r2, [r3], #4
 800ce14:	429f      	cmp	r7, r3
 800ce16:	d2fb      	bcs.n	800ce10 <__hexnan+0xcc>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	b91b      	cbnz	r3, 800ce24 <__hexnan+0xe0>
 800ce1c:	4547      	cmp	r7, r8
 800ce1e:	d126      	bne.n	800ce6e <__hexnan+0x12a>
 800ce20:	2301      	movs	r3, #1
 800ce22:	603b      	str	r3, [r7, #0]
 800ce24:	2005      	movs	r0, #5
 800ce26:	e025      	b.n	800ce74 <__hexnan+0x130>
 800ce28:	3501      	adds	r5, #1
 800ce2a:	2d08      	cmp	r5, #8
 800ce2c:	f10b 0b01 	add.w	fp, fp, #1
 800ce30:	dd06      	ble.n	800ce40 <__hexnan+0xfc>
 800ce32:	4544      	cmp	r4, r8
 800ce34:	d9c3      	bls.n	800cdbe <__hexnan+0x7a>
 800ce36:	2300      	movs	r3, #0
 800ce38:	2501      	movs	r5, #1
 800ce3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce3e:	3c04      	subs	r4, #4
 800ce40:	6822      	ldr	r2, [r4, #0]
 800ce42:	f000 000f 	and.w	r0, r0, #15
 800ce46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce4a:	6020      	str	r0, [r4, #0]
 800ce4c:	e7b7      	b.n	800cdbe <__hexnan+0x7a>
 800ce4e:	2508      	movs	r5, #8
 800ce50:	e7b5      	b.n	800cdbe <__hexnan+0x7a>
 800ce52:	9b01      	ldr	r3, [sp, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d0df      	beq.n	800ce18 <__hexnan+0xd4>
 800ce58:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5c:	f1c3 0320 	rsb	r3, r3, #32
 800ce60:	40da      	lsrs	r2, r3
 800ce62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce66:	4013      	ands	r3, r2
 800ce68:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce6c:	e7d4      	b.n	800ce18 <__hexnan+0xd4>
 800ce6e:	3f04      	subs	r7, #4
 800ce70:	e7d2      	b.n	800ce18 <__hexnan+0xd4>
 800ce72:	2004      	movs	r0, #4
 800ce74:	b007      	add	sp, #28
 800ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ce7c <malloc>:
 800ce7c:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <malloc+0xc>)
 800ce7e:	4601      	mov	r1, r0
 800ce80:	6818      	ldr	r0, [r3, #0]
 800ce82:	f000 b823 	b.w	800cecc <_malloc_r>
 800ce86:	bf00      	nop
 800ce88:	20000274 	.word	0x20000274

0800ce8c <sbrk_aligned>:
 800ce8c:	b570      	push	{r4, r5, r6, lr}
 800ce8e:	4e0e      	ldr	r6, [pc, #56]	; (800cec8 <sbrk_aligned+0x3c>)
 800ce90:	460c      	mov	r4, r1
 800ce92:	6831      	ldr	r1, [r6, #0]
 800ce94:	4605      	mov	r5, r0
 800ce96:	b911      	cbnz	r1, 800ce9e <sbrk_aligned+0x12>
 800ce98:	f000 ff7c 	bl	800dd94 <_sbrk_r>
 800ce9c:	6030      	str	r0, [r6, #0]
 800ce9e:	4621      	mov	r1, r4
 800cea0:	4628      	mov	r0, r5
 800cea2:	f000 ff77 	bl	800dd94 <_sbrk_r>
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	d00a      	beq.n	800cec0 <sbrk_aligned+0x34>
 800ceaa:	1cc4      	adds	r4, r0, #3
 800ceac:	f024 0403 	bic.w	r4, r4, #3
 800ceb0:	42a0      	cmp	r0, r4
 800ceb2:	d007      	beq.n	800cec4 <sbrk_aligned+0x38>
 800ceb4:	1a21      	subs	r1, r4, r0
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	f000 ff6c 	bl	800dd94 <_sbrk_r>
 800cebc:	3001      	adds	r0, #1
 800cebe:	d101      	bne.n	800cec4 <sbrk_aligned+0x38>
 800cec0:	f04f 34ff 	mov.w	r4, #4294967295
 800cec4:	4620      	mov	r0, r4
 800cec6:	bd70      	pop	{r4, r5, r6, pc}
 800cec8:	20002550 	.word	0x20002550

0800cecc <_malloc_r>:
 800cecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ced0:	1ccd      	adds	r5, r1, #3
 800ced2:	f025 0503 	bic.w	r5, r5, #3
 800ced6:	3508      	adds	r5, #8
 800ced8:	2d0c      	cmp	r5, #12
 800ceda:	bf38      	it	cc
 800cedc:	250c      	movcc	r5, #12
 800cede:	2d00      	cmp	r5, #0
 800cee0:	4607      	mov	r7, r0
 800cee2:	db01      	blt.n	800cee8 <_malloc_r+0x1c>
 800cee4:	42a9      	cmp	r1, r5
 800cee6:	d905      	bls.n	800cef4 <_malloc_r+0x28>
 800cee8:	230c      	movs	r3, #12
 800ceea:	2600      	movs	r6, #0
 800ceec:	603b      	str	r3, [r7, #0]
 800ceee:	4630      	mov	r0, r6
 800cef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cfc8 <_malloc_r+0xfc>
 800cef8:	f000 f87a 	bl	800cff0 <__malloc_lock>
 800cefc:	f8d8 3000 	ldr.w	r3, [r8]
 800cf00:	461c      	mov	r4, r3
 800cf02:	bb5c      	cbnz	r4, 800cf5c <_malloc_r+0x90>
 800cf04:	4629      	mov	r1, r5
 800cf06:	4638      	mov	r0, r7
 800cf08:	f7ff ffc0 	bl	800ce8c <sbrk_aligned>
 800cf0c:	1c43      	adds	r3, r0, #1
 800cf0e:	4604      	mov	r4, r0
 800cf10:	d155      	bne.n	800cfbe <_malloc_r+0xf2>
 800cf12:	f8d8 4000 	ldr.w	r4, [r8]
 800cf16:	4626      	mov	r6, r4
 800cf18:	2e00      	cmp	r6, #0
 800cf1a:	d145      	bne.n	800cfa8 <_malloc_r+0xdc>
 800cf1c:	2c00      	cmp	r4, #0
 800cf1e:	d048      	beq.n	800cfb2 <_malloc_r+0xe6>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	4631      	mov	r1, r6
 800cf24:	4638      	mov	r0, r7
 800cf26:	eb04 0903 	add.w	r9, r4, r3
 800cf2a:	f000 ff33 	bl	800dd94 <_sbrk_r>
 800cf2e:	4581      	cmp	r9, r0
 800cf30:	d13f      	bne.n	800cfb2 <_malloc_r+0xe6>
 800cf32:	6821      	ldr	r1, [r4, #0]
 800cf34:	4638      	mov	r0, r7
 800cf36:	1a6d      	subs	r5, r5, r1
 800cf38:	4629      	mov	r1, r5
 800cf3a:	f7ff ffa7 	bl	800ce8c <sbrk_aligned>
 800cf3e:	3001      	adds	r0, #1
 800cf40:	d037      	beq.n	800cfb2 <_malloc_r+0xe6>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	442b      	add	r3, r5
 800cf46:	6023      	str	r3, [r4, #0]
 800cf48:	f8d8 3000 	ldr.w	r3, [r8]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d038      	beq.n	800cfc2 <_malloc_r+0xf6>
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	42a2      	cmp	r2, r4
 800cf54:	d12b      	bne.n	800cfae <_malloc_r+0xe2>
 800cf56:	2200      	movs	r2, #0
 800cf58:	605a      	str	r2, [r3, #4]
 800cf5a:	e00f      	b.n	800cf7c <_malloc_r+0xb0>
 800cf5c:	6822      	ldr	r2, [r4, #0]
 800cf5e:	1b52      	subs	r2, r2, r5
 800cf60:	d41f      	bmi.n	800cfa2 <_malloc_r+0xd6>
 800cf62:	2a0b      	cmp	r2, #11
 800cf64:	d917      	bls.n	800cf96 <_malloc_r+0xca>
 800cf66:	1961      	adds	r1, r4, r5
 800cf68:	42a3      	cmp	r3, r4
 800cf6a:	6025      	str	r5, [r4, #0]
 800cf6c:	bf18      	it	ne
 800cf6e:	6059      	strne	r1, [r3, #4]
 800cf70:	6863      	ldr	r3, [r4, #4]
 800cf72:	bf08      	it	eq
 800cf74:	f8c8 1000 	streq.w	r1, [r8]
 800cf78:	5162      	str	r2, [r4, r5]
 800cf7a:	604b      	str	r3, [r1, #4]
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f104 060b 	add.w	r6, r4, #11
 800cf82:	f000 f83b 	bl	800cffc <__malloc_unlock>
 800cf86:	f026 0607 	bic.w	r6, r6, #7
 800cf8a:	1d23      	adds	r3, r4, #4
 800cf8c:	1af2      	subs	r2, r6, r3
 800cf8e:	d0ae      	beq.n	800ceee <_malloc_r+0x22>
 800cf90:	1b9b      	subs	r3, r3, r6
 800cf92:	50a3      	str	r3, [r4, r2]
 800cf94:	e7ab      	b.n	800ceee <_malloc_r+0x22>
 800cf96:	42a3      	cmp	r3, r4
 800cf98:	6862      	ldr	r2, [r4, #4]
 800cf9a:	d1dd      	bne.n	800cf58 <_malloc_r+0x8c>
 800cf9c:	f8c8 2000 	str.w	r2, [r8]
 800cfa0:	e7ec      	b.n	800cf7c <_malloc_r+0xb0>
 800cfa2:	4623      	mov	r3, r4
 800cfa4:	6864      	ldr	r4, [r4, #4]
 800cfa6:	e7ac      	b.n	800cf02 <_malloc_r+0x36>
 800cfa8:	4634      	mov	r4, r6
 800cfaa:	6876      	ldr	r6, [r6, #4]
 800cfac:	e7b4      	b.n	800cf18 <_malloc_r+0x4c>
 800cfae:	4613      	mov	r3, r2
 800cfb0:	e7cc      	b.n	800cf4c <_malloc_r+0x80>
 800cfb2:	230c      	movs	r3, #12
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	603b      	str	r3, [r7, #0]
 800cfb8:	f000 f820 	bl	800cffc <__malloc_unlock>
 800cfbc:	e797      	b.n	800ceee <_malloc_r+0x22>
 800cfbe:	6025      	str	r5, [r4, #0]
 800cfc0:	e7dc      	b.n	800cf7c <_malloc_r+0xb0>
 800cfc2:	605b      	str	r3, [r3, #4]
 800cfc4:	deff      	udf	#255	; 0xff
 800cfc6:	bf00      	nop
 800cfc8:	2000254c 	.word	0x2000254c

0800cfcc <__ascii_mbtowc>:
 800cfcc:	b082      	sub	sp, #8
 800cfce:	b901      	cbnz	r1, 800cfd2 <__ascii_mbtowc+0x6>
 800cfd0:	a901      	add	r1, sp, #4
 800cfd2:	b142      	cbz	r2, 800cfe6 <__ascii_mbtowc+0x1a>
 800cfd4:	b14b      	cbz	r3, 800cfea <__ascii_mbtowc+0x1e>
 800cfd6:	7813      	ldrb	r3, [r2, #0]
 800cfd8:	600b      	str	r3, [r1, #0]
 800cfda:	7812      	ldrb	r2, [r2, #0]
 800cfdc:	1e10      	subs	r0, r2, #0
 800cfde:	bf18      	it	ne
 800cfe0:	2001      	movne	r0, #1
 800cfe2:	b002      	add	sp, #8
 800cfe4:	4770      	bx	lr
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	e7fb      	b.n	800cfe2 <__ascii_mbtowc+0x16>
 800cfea:	f06f 0001 	mvn.w	r0, #1
 800cfee:	e7f8      	b.n	800cfe2 <__ascii_mbtowc+0x16>

0800cff0 <__malloc_lock>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__malloc_lock+0x8>)
 800cff2:	f7fe bd0c 	b.w	800ba0e <__retarget_lock_acquire_recursive>
 800cff6:	bf00      	nop
 800cff8:	20002548 	.word	0x20002548

0800cffc <__malloc_unlock>:
 800cffc:	4801      	ldr	r0, [pc, #4]	; (800d004 <__malloc_unlock+0x8>)
 800cffe:	f7fe bd07 	b.w	800ba10 <__retarget_lock_release_recursive>
 800d002:	bf00      	nop
 800d004:	20002548 	.word	0x20002548

0800d008 <_Balloc>:
 800d008:	b570      	push	{r4, r5, r6, lr}
 800d00a:	69c6      	ldr	r6, [r0, #28]
 800d00c:	4604      	mov	r4, r0
 800d00e:	460d      	mov	r5, r1
 800d010:	b976      	cbnz	r6, 800d030 <_Balloc+0x28>
 800d012:	2010      	movs	r0, #16
 800d014:	f7ff ff32 	bl	800ce7c <malloc>
 800d018:	4602      	mov	r2, r0
 800d01a:	61e0      	str	r0, [r4, #28]
 800d01c:	b920      	cbnz	r0, 800d028 <_Balloc+0x20>
 800d01e:	216b      	movs	r1, #107	; 0x6b
 800d020:	4b17      	ldr	r3, [pc, #92]	; (800d080 <_Balloc+0x78>)
 800d022:	4818      	ldr	r0, [pc, #96]	; (800d084 <_Balloc+0x7c>)
 800d024:	f000 fec6 	bl	800ddb4 <__assert_func>
 800d028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d02c:	6006      	str	r6, [r0, #0]
 800d02e:	60c6      	str	r6, [r0, #12]
 800d030:	69e6      	ldr	r6, [r4, #28]
 800d032:	68f3      	ldr	r3, [r6, #12]
 800d034:	b183      	cbz	r3, 800d058 <_Balloc+0x50>
 800d036:	69e3      	ldr	r3, [r4, #28]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d03e:	b9b8      	cbnz	r0, 800d070 <_Balloc+0x68>
 800d040:	2101      	movs	r1, #1
 800d042:	fa01 f605 	lsl.w	r6, r1, r5
 800d046:	1d72      	adds	r2, r6, #5
 800d048:	4620      	mov	r0, r4
 800d04a:	0092      	lsls	r2, r2, #2
 800d04c:	f000 fed0 	bl	800ddf0 <_calloc_r>
 800d050:	b160      	cbz	r0, 800d06c <_Balloc+0x64>
 800d052:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d056:	e00e      	b.n	800d076 <_Balloc+0x6e>
 800d058:	2221      	movs	r2, #33	; 0x21
 800d05a:	2104      	movs	r1, #4
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 fec7 	bl	800ddf0 <_calloc_r>
 800d062:	69e3      	ldr	r3, [r4, #28]
 800d064:	60f0      	str	r0, [r6, #12]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1e4      	bne.n	800d036 <_Balloc+0x2e>
 800d06c:	2000      	movs	r0, #0
 800d06e:	bd70      	pop	{r4, r5, r6, pc}
 800d070:	6802      	ldr	r2, [r0, #0]
 800d072:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d076:	2300      	movs	r3, #0
 800d078:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d07c:	e7f7      	b.n	800d06e <_Balloc+0x66>
 800d07e:	bf00      	nop
 800d080:	0800e549 	.word	0x0800e549
 800d084:	0800e629 	.word	0x0800e629

0800d088 <_Bfree>:
 800d088:	b570      	push	{r4, r5, r6, lr}
 800d08a:	69c6      	ldr	r6, [r0, #28]
 800d08c:	4605      	mov	r5, r0
 800d08e:	460c      	mov	r4, r1
 800d090:	b976      	cbnz	r6, 800d0b0 <_Bfree+0x28>
 800d092:	2010      	movs	r0, #16
 800d094:	f7ff fef2 	bl	800ce7c <malloc>
 800d098:	4602      	mov	r2, r0
 800d09a:	61e8      	str	r0, [r5, #28]
 800d09c:	b920      	cbnz	r0, 800d0a8 <_Bfree+0x20>
 800d09e:	218f      	movs	r1, #143	; 0x8f
 800d0a0:	4b08      	ldr	r3, [pc, #32]	; (800d0c4 <_Bfree+0x3c>)
 800d0a2:	4809      	ldr	r0, [pc, #36]	; (800d0c8 <_Bfree+0x40>)
 800d0a4:	f000 fe86 	bl	800ddb4 <__assert_func>
 800d0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0ac:	6006      	str	r6, [r0, #0]
 800d0ae:	60c6      	str	r6, [r0, #12]
 800d0b0:	b13c      	cbz	r4, 800d0c2 <_Bfree+0x3a>
 800d0b2:	69eb      	ldr	r3, [r5, #28]
 800d0b4:	6862      	ldr	r2, [r4, #4]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0bc:	6021      	str	r1, [r4, #0]
 800d0be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}
 800d0c4:	0800e549 	.word	0x0800e549
 800d0c8:	0800e629 	.word	0x0800e629

0800d0cc <__multadd>:
 800d0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	461e      	mov	r6, r3
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	690d      	ldr	r5, [r1, #16]
 800d0da:	f101 0c14 	add.w	ip, r1, #20
 800d0de:	f8dc 3000 	ldr.w	r3, [ip]
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	b299      	uxth	r1, r3
 800d0e6:	fb02 6101 	mla	r1, r2, r1, r6
 800d0ea:	0c1e      	lsrs	r6, r3, #16
 800d0ec:	0c0b      	lsrs	r3, r1, #16
 800d0ee:	fb02 3306 	mla	r3, r2, r6, r3
 800d0f2:	b289      	uxth	r1, r1
 800d0f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0f8:	4285      	cmp	r5, r0
 800d0fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0fe:	f84c 1b04 	str.w	r1, [ip], #4
 800d102:	dcec      	bgt.n	800d0de <__multadd+0x12>
 800d104:	b30e      	cbz	r6, 800d14a <__multadd+0x7e>
 800d106:	68a3      	ldr	r3, [r4, #8]
 800d108:	42ab      	cmp	r3, r5
 800d10a:	dc19      	bgt.n	800d140 <__multadd+0x74>
 800d10c:	6861      	ldr	r1, [r4, #4]
 800d10e:	4638      	mov	r0, r7
 800d110:	3101      	adds	r1, #1
 800d112:	f7ff ff79 	bl	800d008 <_Balloc>
 800d116:	4680      	mov	r8, r0
 800d118:	b928      	cbnz	r0, 800d126 <__multadd+0x5a>
 800d11a:	4602      	mov	r2, r0
 800d11c:	21ba      	movs	r1, #186	; 0xba
 800d11e:	4b0c      	ldr	r3, [pc, #48]	; (800d150 <__multadd+0x84>)
 800d120:	480c      	ldr	r0, [pc, #48]	; (800d154 <__multadd+0x88>)
 800d122:	f000 fe47 	bl	800ddb4 <__assert_func>
 800d126:	6922      	ldr	r2, [r4, #16]
 800d128:	f104 010c 	add.w	r1, r4, #12
 800d12c:	3202      	adds	r2, #2
 800d12e:	0092      	lsls	r2, r2, #2
 800d130:	300c      	adds	r0, #12
 800d132:	f7fe fc7c 	bl	800ba2e <memcpy>
 800d136:	4621      	mov	r1, r4
 800d138:	4638      	mov	r0, r7
 800d13a:	f7ff ffa5 	bl	800d088 <_Bfree>
 800d13e:	4644      	mov	r4, r8
 800d140:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d144:	3501      	adds	r5, #1
 800d146:	615e      	str	r6, [r3, #20]
 800d148:	6125      	str	r5, [r4, #16]
 800d14a:	4620      	mov	r0, r4
 800d14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d150:	0800e5b8 	.word	0x0800e5b8
 800d154:	0800e629 	.word	0x0800e629

0800d158 <__s2b>:
 800d158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d15c:	4615      	mov	r5, r2
 800d15e:	2209      	movs	r2, #9
 800d160:	461f      	mov	r7, r3
 800d162:	3308      	adds	r3, #8
 800d164:	460c      	mov	r4, r1
 800d166:	fb93 f3f2 	sdiv	r3, r3, r2
 800d16a:	4606      	mov	r6, r0
 800d16c:	2201      	movs	r2, #1
 800d16e:	2100      	movs	r1, #0
 800d170:	429a      	cmp	r2, r3
 800d172:	db09      	blt.n	800d188 <__s2b+0x30>
 800d174:	4630      	mov	r0, r6
 800d176:	f7ff ff47 	bl	800d008 <_Balloc>
 800d17a:	b940      	cbnz	r0, 800d18e <__s2b+0x36>
 800d17c:	4602      	mov	r2, r0
 800d17e:	21d3      	movs	r1, #211	; 0xd3
 800d180:	4b18      	ldr	r3, [pc, #96]	; (800d1e4 <__s2b+0x8c>)
 800d182:	4819      	ldr	r0, [pc, #100]	; (800d1e8 <__s2b+0x90>)
 800d184:	f000 fe16 	bl	800ddb4 <__assert_func>
 800d188:	0052      	lsls	r2, r2, #1
 800d18a:	3101      	adds	r1, #1
 800d18c:	e7f0      	b.n	800d170 <__s2b+0x18>
 800d18e:	9b08      	ldr	r3, [sp, #32]
 800d190:	2d09      	cmp	r5, #9
 800d192:	6143      	str	r3, [r0, #20]
 800d194:	f04f 0301 	mov.w	r3, #1
 800d198:	6103      	str	r3, [r0, #16]
 800d19a:	dd16      	ble.n	800d1ca <__s2b+0x72>
 800d19c:	f104 0909 	add.w	r9, r4, #9
 800d1a0:	46c8      	mov	r8, r9
 800d1a2:	442c      	add	r4, r5
 800d1a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1a8:	4601      	mov	r1, r0
 800d1aa:	220a      	movs	r2, #10
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	3b30      	subs	r3, #48	; 0x30
 800d1b0:	f7ff ff8c 	bl	800d0cc <__multadd>
 800d1b4:	45a0      	cmp	r8, r4
 800d1b6:	d1f5      	bne.n	800d1a4 <__s2b+0x4c>
 800d1b8:	f1a5 0408 	sub.w	r4, r5, #8
 800d1bc:	444c      	add	r4, r9
 800d1be:	1b2d      	subs	r5, r5, r4
 800d1c0:	1963      	adds	r3, r4, r5
 800d1c2:	42bb      	cmp	r3, r7
 800d1c4:	db04      	blt.n	800d1d0 <__s2b+0x78>
 800d1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ca:	2509      	movs	r5, #9
 800d1cc:	340a      	adds	r4, #10
 800d1ce:	e7f6      	b.n	800d1be <__s2b+0x66>
 800d1d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1d4:	4601      	mov	r1, r0
 800d1d6:	220a      	movs	r2, #10
 800d1d8:	4630      	mov	r0, r6
 800d1da:	3b30      	subs	r3, #48	; 0x30
 800d1dc:	f7ff ff76 	bl	800d0cc <__multadd>
 800d1e0:	e7ee      	b.n	800d1c0 <__s2b+0x68>
 800d1e2:	bf00      	nop
 800d1e4:	0800e5b8 	.word	0x0800e5b8
 800d1e8:	0800e629 	.word	0x0800e629

0800d1ec <__hi0bits>:
 800d1ec:	0c02      	lsrs	r2, r0, #16
 800d1ee:	0412      	lsls	r2, r2, #16
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	b9ca      	cbnz	r2, 800d228 <__hi0bits+0x3c>
 800d1f4:	0403      	lsls	r3, r0, #16
 800d1f6:	2010      	movs	r0, #16
 800d1f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d1fc:	bf04      	itt	eq
 800d1fe:	021b      	lsleq	r3, r3, #8
 800d200:	3008      	addeq	r0, #8
 800d202:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d206:	bf04      	itt	eq
 800d208:	011b      	lsleq	r3, r3, #4
 800d20a:	3004      	addeq	r0, #4
 800d20c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d210:	bf04      	itt	eq
 800d212:	009b      	lsleq	r3, r3, #2
 800d214:	3002      	addeq	r0, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	db05      	blt.n	800d226 <__hi0bits+0x3a>
 800d21a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d21e:	f100 0001 	add.w	r0, r0, #1
 800d222:	bf08      	it	eq
 800d224:	2020      	moveq	r0, #32
 800d226:	4770      	bx	lr
 800d228:	2000      	movs	r0, #0
 800d22a:	e7e5      	b.n	800d1f8 <__hi0bits+0xc>

0800d22c <__lo0bits>:
 800d22c:	6803      	ldr	r3, [r0, #0]
 800d22e:	4602      	mov	r2, r0
 800d230:	f013 0007 	ands.w	r0, r3, #7
 800d234:	d00b      	beq.n	800d24e <__lo0bits+0x22>
 800d236:	07d9      	lsls	r1, r3, #31
 800d238:	d421      	bmi.n	800d27e <__lo0bits+0x52>
 800d23a:	0798      	lsls	r0, r3, #30
 800d23c:	bf49      	itett	mi
 800d23e:	085b      	lsrmi	r3, r3, #1
 800d240:	089b      	lsrpl	r3, r3, #2
 800d242:	2001      	movmi	r0, #1
 800d244:	6013      	strmi	r3, [r2, #0]
 800d246:	bf5c      	itt	pl
 800d248:	2002      	movpl	r0, #2
 800d24a:	6013      	strpl	r3, [r2, #0]
 800d24c:	4770      	bx	lr
 800d24e:	b299      	uxth	r1, r3
 800d250:	b909      	cbnz	r1, 800d256 <__lo0bits+0x2a>
 800d252:	2010      	movs	r0, #16
 800d254:	0c1b      	lsrs	r3, r3, #16
 800d256:	b2d9      	uxtb	r1, r3
 800d258:	b909      	cbnz	r1, 800d25e <__lo0bits+0x32>
 800d25a:	3008      	adds	r0, #8
 800d25c:	0a1b      	lsrs	r3, r3, #8
 800d25e:	0719      	lsls	r1, r3, #28
 800d260:	bf04      	itt	eq
 800d262:	091b      	lsreq	r3, r3, #4
 800d264:	3004      	addeq	r0, #4
 800d266:	0799      	lsls	r1, r3, #30
 800d268:	bf04      	itt	eq
 800d26a:	089b      	lsreq	r3, r3, #2
 800d26c:	3002      	addeq	r0, #2
 800d26e:	07d9      	lsls	r1, r3, #31
 800d270:	d403      	bmi.n	800d27a <__lo0bits+0x4e>
 800d272:	085b      	lsrs	r3, r3, #1
 800d274:	f100 0001 	add.w	r0, r0, #1
 800d278:	d003      	beq.n	800d282 <__lo0bits+0x56>
 800d27a:	6013      	str	r3, [r2, #0]
 800d27c:	4770      	bx	lr
 800d27e:	2000      	movs	r0, #0
 800d280:	4770      	bx	lr
 800d282:	2020      	movs	r0, #32
 800d284:	4770      	bx	lr
	...

0800d288 <__i2b>:
 800d288:	b510      	push	{r4, lr}
 800d28a:	460c      	mov	r4, r1
 800d28c:	2101      	movs	r1, #1
 800d28e:	f7ff febb 	bl	800d008 <_Balloc>
 800d292:	4602      	mov	r2, r0
 800d294:	b928      	cbnz	r0, 800d2a2 <__i2b+0x1a>
 800d296:	f240 1145 	movw	r1, #325	; 0x145
 800d29a:	4b04      	ldr	r3, [pc, #16]	; (800d2ac <__i2b+0x24>)
 800d29c:	4804      	ldr	r0, [pc, #16]	; (800d2b0 <__i2b+0x28>)
 800d29e:	f000 fd89 	bl	800ddb4 <__assert_func>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	6144      	str	r4, [r0, #20]
 800d2a6:	6103      	str	r3, [r0, #16]
 800d2a8:	bd10      	pop	{r4, pc}
 800d2aa:	bf00      	nop
 800d2ac:	0800e5b8 	.word	0x0800e5b8
 800d2b0:	0800e629 	.word	0x0800e629

0800d2b4 <__multiply>:
 800d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b8:	4691      	mov	r9, r2
 800d2ba:	690a      	ldr	r2, [r1, #16]
 800d2bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	bfbe      	ittt	lt
 800d2c6:	460b      	movlt	r3, r1
 800d2c8:	464c      	movlt	r4, r9
 800d2ca:	4699      	movlt	r9, r3
 800d2cc:	6927      	ldr	r7, [r4, #16]
 800d2ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d2d2:	68a3      	ldr	r3, [r4, #8]
 800d2d4:	6861      	ldr	r1, [r4, #4]
 800d2d6:	eb07 060a 	add.w	r6, r7, sl
 800d2da:	42b3      	cmp	r3, r6
 800d2dc:	b085      	sub	sp, #20
 800d2de:	bfb8      	it	lt
 800d2e0:	3101      	addlt	r1, #1
 800d2e2:	f7ff fe91 	bl	800d008 <_Balloc>
 800d2e6:	b930      	cbnz	r0, 800d2f6 <__multiply+0x42>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d2ee:	4b43      	ldr	r3, [pc, #268]	; (800d3fc <__multiply+0x148>)
 800d2f0:	4843      	ldr	r0, [pc, #268]	; (800d400 <__multiply+0x14c>)
 800d2f2:	f000 fd5f 	bl	800ddb4 <__assert_func>
 800d2f6:	f100 0514 	add.w	r5, r0, #20
 800d2fa:	462b      	mov	r3, r5
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d302:	4543      	cmp	r3, r8
 800d304:	d321      	bcc.n	800d34a <__multiply+0x96>
 800d306:	f104 0314 	add.w	r3, r4, #20
 800d30a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d30e:	f109 0314 	add.w	r3, r9, #20
 800d312:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d316:	9202      	str	r2, [sp, #8]
 800d318:	1b3a      	subs	r2, r7, r4
 800d31a:	3a15      	subs	r2, #21
 800d31c:	f022 0203 	bic.w	r2, r2, #3
 800d320:	3204      	adds	r2, #4
 800d322:	f104 0115 	add.w	r1, r4, #21
 800d326:	428f      	cmp	r7, r1
 800d328:	bf38      	it	cc
 800d32a:	2204      	movcc	r2, #4
 800d32c:	9201      	str	r2, [sp, #4]
 800d32e:	9a02      	ldr	r2, [sp, #8]
 800d330:	9303      	str	r3, [sp, #12]
 800d332:	429a      	cmp	r2, r3
 800d334:	d80c      	bhi.n	800d350 <__multiply+0x9c>
 800d336:	2e00      	cmp	r6, #0
 800d338:	dd03      	ble.n	800d342 <__multiply+0x8e>
 800d33a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d05a      	beq.n	800d3f8 <__multiply+0x144>
 800d342:	6106      	str	r6, [r0, #16]
 800d344:	b005      	add	sp, #20
 800d346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34a:	f843 2b04 	str.w	r2, [r3], #4
 800d34e:	e7d8      	b.n	800d302 <__multiply+0x4e>
 800d350:	f8b3 a000 	ldrh.w	sl, [r3]
 800d354:	f1ba 0f00 	cmp.w	sl, #0
 800d358:	d023      	beq.n	800d3a2 <__multiply+0xee>
 800d35a:	46a9      	mov	r9, r5
 800d35c:	f04f 0c00 	mov.w	ip, #0
 800d360:	f104 0e14 	add.w	lr, r4, #20
 800d364:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d368:	f8d9 1000 	ldr.w	r1, [r9]
 800d36c:	fa1f fb82 	uxth.w	fp, r2
 800d370:	b289      	uxth	r1, r1
 800d372:	fb0a 110b 	mla	r1, sl, fp, r1
 800d376:	4461      	add	r1, ip
 800d378:	f8d9 c000 	ldr.w	ip, [r9]
 800d37c:	0c12      	lsrs	r2, r2, #16
 800d37e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d382:	fb0a c202 	mla	r2, sl, r2, ip
 800d386:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d38a:	b289      	uxth	r1, r1
 800d38c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d390:	4577      	cmp	r7, lr
 800d392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d396:	f849 1b04 	str.w	r1, [r9], #4
 800d39a:	d8e3      	bhi.n	800d364 <__multiply+0xb0>
 800d39c:	9a01      	ldr	r2, [sp, #4]
 800d39e:	f845 c002 	str.w	ip, [r5, r2]
 800d3a2:	9a03      	ldr	r2, [sp, #12]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3aa:	f1b9 0f00 	cmp.w	r9, #0
 800d3ae:	d021      	beq.n	800d3f4 <__multiply+0x140>
 800d3b0:	46ae      	mov	lr, r5
 800d3b2:	f04f 0a00 	mov.w	sl, #0
 800d3b6:	6829      	ldr	r1, [r5, #0]
 800d3b8:	f104 0c14 	add.w	ip, r4, #20
 800d3bc:	f8bc b000 	ldrh.w	fp, [ip]
 800d3c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3c4:	b289      	uxth	r1, r1
 800d3c6:	fb09 220b 	mla	r2, r9, fp, r2
 800d3ca:	4452      	add	r2, sl
 800d3cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3d0:	f84e 1b04 	str.w	r1, [lr], #4
 800d3d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3dc:	f8be 1000 	ldrh.w	r1, [lr]
 800d3e0:	4567      	cmp	r7, ip
 800d3e2:	fb09 110a 	mla	r1, r9, sl, r1
 800d3e6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d3ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3ee:	d8e5      	bhi.n	800d3bc <__multiply+0x108>
 800d3f0:	9a01      	ldr	r2, [sp, #4]
 800d3f2:	50a9      	str	r1, [r5, r2]
 800d3f4:	3504      	adds	r5, #4
 800d3f6:	e79a      	b.n	800d32e <__multiply+0x7a>
 800d3f8:	3e01      	subs	r6, #1
 800d3fa:	e79c      	b.n	800d336 <__multiply+0x82>
 800d3fc:	0800e5b8 	.word	0x0800e5b8
 800d400:	0800e629 	.word	0x0800e629

0800d404 <__pow5mult>:
 800d404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d408:	4615      	mov	r5, r2
 800d40a:	f012 0203 	ands.w	r2, r2, #3
 800d40e:	4606      	mov	r6, r0
 800d410:	460f      	mov	r7, r1
 800d412:	d007      	beq.n	800d424 <__pow5mult+0x20>
 800d414:	4c25      	ldr	r4, [pc, #148]	; (800d4ac <__pow5mult+0xa8>)
 800d416:	3a01      	subs	r2, #1
 800d418:	2300      	movs	r3, #0
 800d41a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d41e:	f7ff fe55 	bl	800d0cc <__multadd>
 800d422:	4607      	mov	r7, r0
 800d424:	10ad      	asrs	r5, r5, #2
 800d426:	d03d      	beq.n	800d4a4 <__pow5mult+0xa0>
 800d428:	69f4      	ldr	r4, [r6, #28]
 800d42a:	b97c      	cbnz	r4, 800d44c <__pow5mult+0x48>
 800d42c:	2010      	movs	r0, #16
 800d42e:	f7ff fd25 	bl	800ce7c <malloc>
 800d432:	4602      	mov	r2, r0
 800d434:	61f0      	str	r0, [r6, #28]
 800d436:	b928      	cbnz	r0, 800d444 <__pow5mult+0x40>
 800d438:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d43c:	4b1c      	ldr	r3, [pc, #112]	; (800d4b0 <__pow5mult+0xac>)
 800d43e:	481d      	ldr	r0, [pc, #116]	; (800d4b4 <__pow5mult+0xb0>)
 800d440:	f000 fcb8 	bl	800ddb4 <__assert_func>
 800d444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d448:	6004      	str	r4, [r0, #0]
 800d44a:	60c4      	str	r4, [r0, #12]
 800d44c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d454:	b94c      	cbnz	r4, 800d46a <__pow5mult+0x66>
 800d456:	f240 2171 	movw	r1, #625	; 0x271
 800d45a:	4630      	mov	r0, r6
 800d45c:	f7ff ff14 	bl	800d288 <__i2b>
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	f8c8 0008 	str.w	r0, [r8, #8]
 800d468:	6003      	str	r3, [r0, #0]
 800d46a:	f04f 0900 	mov.w	r9, #0
 800d46e:	07eb      	lsls	r3, r5, #31
 800d470:	d50a      	bpl.n	800d488 <__pow5mult+0x84>
 800d472:	4639      	mov	r1, r7
 800d474:	4622      	mov	r2, r4
 800d476:	4630      	mov	r0, r6
 800d478:	f7ff ff1c 	bl	800d2b4 <__multiply>
 800d47c:	4680      	mov	r8, r0
 800d47e:	4639      	mov	r1, r7
 800d480:	4630      	mov	r0, r6
 800d482:	f7ff fe01 	bl	800d088 <_Bfree>
 800d486:	4647      	mov	r7, r8
 800d488:	106d      	asrs	r5, r5, #1
 800d48a:	d00b      	beq.n	800d4a4 <__pow5mult+0xa0>
 800d48c:	6820      	ldr	r0, [r4, #0]
 800d48e:	b938      	cbnz	r0, 800d4a0 <__pow5mult+0x9c>
 800d490:	4622      	mov	r2, r4
 800d492:	4621      	mov	r1, r4
 800d494:	4630      	mov	r0, r6
 800d496:	f7ff ff0d 	bl	800d2b4 <__multiply>
 800d49a:	6020      	str	r0, [r4, #0]
 800d49c:	f8c0 9000 	str.w	r9, [r0]
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	e7e4      	b.n	800d46e <__pow5mult+0x6a>
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4aa:	bf00      	nop
 800d4ac:	0800e778 	.word	0x0800e778
 800d4b0:	0800e549 	.word	0x0800e549
 800d4b4:	0800e629 	.word	0x0800e629

0800d4b8 <__lshift>:
 800d4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4bc:	460c      	mov	r4, r1
 800d4be:	4607      	mov	r7, r0
 800d4c0:	4691      	mov	r9, r2
 800d4c2:	6923      	ldr	r3, [r4, #16]
 800d4c4:	6849      	ldr	r1, [r1, #4]
 800d4c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4ca:	68a3      	ldr	r3, [r4, #8]
 800d4cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4d0:	f108 0601 	add.w	r6, r8, #1
 800d4d4:	42b3      	cmp	r3, r6
 800d4d6:	db0b      	blt.n	800d4f0 <__lshift+0x38>
 800d4d8:	4638      	mov	r0, r7
 800d4da:	f7ff fd95 	bl	800d008 <_Balloc>
 800d4de:	4605      	mov	r5, r0
 800d4e0:	b948      	cbnz	r0, 800d4f6 <__lshift+0x3e>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d4e8:	4b27      	ldr	r3, [pc, #156]	; (800d588 <__lshift+0xd0>)
 800d4ea:	4828      	ldr	r0, [pc, #160]	; (800d58c <__lshift+0xd4>)
 800d4ec:	f000 fc62 	bl	800ddb4 <__assert_func>
 800d4f0:	3101      	adds	r1, #1
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	e7ee      	b.n	800d4d4 <__lshift+0x1c>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f100 0114 	add.w	r1, r0, #20
 800d4fc:	f100 0210 	add.w	r2, r0, #16
 800d500:	4618      	mov	r0, r3
 800d502:	4553      	cmp	r3, sl
 800d504:	db33      	blt.n	800d56e <__lshift+0xb6>
 800d506:	6920      	ldr	r0, [r4, #16]
 800d508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d50c:	f104 0314 	add.w	r3, r4, #20
 800d510:	f019 091f 	ands.w	r9, r9, #31
 800d514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d51c:	d02b      	beq.n	800d576 <__lshift+0xbe>
 800d51e:	468a      	mov	sl, r1
 800d520:	2200      	movs	r2, #0
 800d522:	f1c9 0e20 	rsb	lr, r9, #32
 800d526:	6818      	ldr	r0, [r3, #0]
 800d528:	fa00 f009 	lsl.w	r0, r0, r9
 800d52c:	4310      	orrs	r0, r2
 800d52e:	f84a 0b04 	str.w	r0, [sl], #4
 800d532:	f853 2b04 	ldr.w	r2, [r3], #4
 800d536:	459c      	cmp	ip, r3
 800d538:	fa22 f20e 	lsr.w	r2, r2, lr
 800d53c:	d8f3      	bhi.n	800d526 <__lshift+0x6e>
 800d53e:	ebac 0304 	sub.w	r3, ip, r4
 800d542:	3b15      	subs	r3, #21
 800d544:	f023 0303 	bic.w	r3, r3, #3
 800d548:	3304      	adds	r3, #4
 800d54a:	f104 0015 	add.w	r0, r4, #21
 800d54e:	4584      	cmp	ip, r0
 800d550:	bf38      	it	cc
 800d552:	2304      	movcc	r3, #4
 800d554:	50ca      	str	r2, [r1, r3]
 800d556:	b10a      	cbz	r2, 800d55c <__lshift+0xa4>
 800d558:	f108 0602 	add.w	r6, r8, #2
 800d55c:	3e01      	subs	r6, #1
 800d55e:	4638      	mov	r0, r7
 800d560:	4621      	mov	r1, r4
 800d562:	612e      	str	r6, [r5, #16]
 800d564:	f7ff fd90 	bl	800d088 <_Bfree>
 800d568:	4628      	mov	r0, r5
 800d56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d572:	3301      	adds	r3, #1
 800d574:	e7c5      	b.n	800d502 <__lshift+0x4a>
 800d576:	3904      	subs	r1, #4
 800d578:	f853 2b04 	ldr.w	r2, [r3], #4
 800d57c:	459c      	cmp	ip, r3
 800d57e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d582:	d8f9      	bhi.n	800d578 <__lshift+0xc0>
 800d584:	e7ea      	b.n	800d55c <__lshift+0xa4>
 800d586:	bf00      	nop
 800d588:	0800e5b8 	.word	0x0800e5b8
 800d58c:	0800e629 	.word	0x0800e629

0800d590 <__mcmp>:
 800d590:	4603      	mov	r3, r0
 800d592:	690a      	ldr	r2, [r1, #16]
 800d594:	6900      	ldr	r0, [r0, #16]
 800d596:	b530      	push	{r4, r5, lr}
 800d598:	1a80      	subs	r0, r0, r2
 800d59a:	d10d      	bne.n	800d5b8 <__mcmp+0x28>
 800d59c:	3314      	adds	r3, #20
 800d59e:	3114      	adds	r1, #20
 800d5a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d5a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d5a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5b0:	4295      	cmp	r5, r2
 800d5b2:	d002      	beq.n	800d5ba <__mcmp+0x2a>
 800d5b4:	d304      	bcc.n	800d5c0 <__mcmp+0x30>
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	bd30      	pop	{r4, r5, pc}
 800d5ba:	42a3      	cmp	r3, r4
 800d5bc:	d3f4      	bcc.n	800d5a8 <__mcmp+0x18>
 800d5be:	e7fb      	b.n	800d5b8 <__mcmp+0x28>
 800d5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c4:	e7f8      	b.n	800d5b8 <__mcmp+0x28>
	...

0800d5c8 <__mdiff>:
 800d5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	460d      	mov	r5, r1
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	4611      	mov	r1, r2
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	4614      	mov	r4, r2
 800d5d6:	f7ff ffdb 	bl	800d590 <__mcmp>
 800d5da:	1e06      	subs	r6, r0, #0
 800d5dc:	d111      	bne.n	800d602 <__mdiff+0x3a>
 800d5de:	4631      	mov	r1, r6
 800d5e0:	4638      	mov	r0, r7
 800d5e2:	f7ff fd11 	bl	800d008 <_Balloc>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	b928      	cbnz	r0, 800d5f6 <__mdiff+0x2e>
 800d5ea:	f240 2137 	movw	r1, #567	; 0x237
 800d5ee:	4b3a      	ldr	r3, [pc, #232]	; (800d6d8 <__mdiff+0x110>)
 800d5f0:	483a      	ldr	r0, [pc, #232]	; (800d6dc <__mdiff+0x114>)
 800d5f2:	f000 fbdf 	bl	800ddb4 <__assert_func>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d602:	bfa4      	itt	ge
 800d604:	4623      	movge	r3, r4
 800d606:	462c      	movge	r4, r5
 800d608:	4638      	mov	r0, r7
 800d60a:	6861      	ldr	r1, [r4, #4]
 800d60c:	bfa6      	itte	ge
 800d60e:	461d      	movge	r5, r3
 800d610:	2600      	movge	r6, #0
 800d612:	2601      	movlt	r6, #1
 800d614:	f7ff fcf8 	bl	800d008 <_Balloc>
 800d618:	4602      	mov	r2, r0
 800d61a:	b918      	cbnz	r0, 800d624 <__mdiff+0x5c>
 800d61c:	f240 2145 	movw	r1, #581	; 0x245
 800d620:	4b2d      	ldr	r3, [pc, #180]	; (800d6d8 <__mdiff+0x110>)
 800d622:	e7e5      	b.n	800d5f0 <__mdiff+0x28>
 800d624:	f102 0814 	add.w	r8, r2, #20
 800d628:	46c2      	mov	sl, r8
 800d62a:	f04f 0c00 	mov.w	ip, #0
 800d62e:	6927      	ldr	r7, [r4, #16]
 800d630:	60c6      	str	r6, [r0, #12]
 800d632:	692e      	ldr	r6, [r5, #16]
 800d634:	f104 0014 	add.w	r0, r4, #20
 800d638:	f105 0914 	add.w	r9, r5, #20
 800d63c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d640:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d644:	3410      	adds	r4, #16
 800d646:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d64a:	f859 3b04 	ldr.w	r3, [r9], #4
 800d64e:	fa1f f18b 	uxth.w	r1, fp
 800d652:	4461      	add	r1, ip
 800d654:	fa1f fc83 	uxth.w	ip, r3
 800d658:	0c1b      	lsrs	r3, r3, #16
 800d65a:	eba1 010c 	sub.w	r1, r1, ip
 800d65e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d662:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d666:	b289      	uxth	r1, r1
 800d668:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d66c:	454e      	cmp	r6, r9
 800d66e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d672:	f84a 1b04 	str.w	r1, [sl], #4
 800d676:	d8e6      	bhi.n	800d646 <__mdiff+0x7e>
 800d678:	1b73      	subs	r3, r6, r5
 800d67a:	3b15      	subs	r3, #21
 800d67c:	f023 0303 	bic.w	r3, r3, #3
 800d680:	3515      	adds	r5, #21
 800d682:	3304      	adds	r3, #4
 800d684:	42ae      	cmp	r6, r5
 800d686:	bf38      	it	cc
 800d688:	2304      	movcc	r3, #4
 800d68a:	4418      	add	r0, r3
 800d68c:	4443      	add	r3, r8
 800d68e:	461e      	mov	r6, r3
 800d690:	4605      	mov	r5, r0
 800d692:	4575      	cmp	r5, lr
 800d694:	d30e      	bcc.n	800d6b4 <__mdiff+0xec>
 800d696:	f10e 0103 	add.w	r1, lr, #3
 800d69a:	1a09      	subs	r1, r1, r0
 800d69c:	f021 0103 	bic.w	r1, r1, #3
 800d6a0:	3803      	subs	r0, #3
 800d6a2:	4586      	cmp	lr, r0
 800d6a4:	bf38      	it	cc
 800d6a6:	2100      	movcc	r1, #0
 800d6a8:	440b      	add	r3, r1
 800d6aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6ae:	b189      	cbz	r1, 800d6d4 <__mdiff+0x10c>
 800d6b0:	6117      	str	r7, [r2, #16]
 800d6b2:	e7a3      	b.n	800d5fc <__mdiff+0x34>
 800d6b4:	f855 8b04 	ldr.w	r8, [r5], #4
 800d6b8:	fa1f f188 	uxth.w	r1, r8
 800d6bc:	4461      	add	r1, ip
 800d6be:	140c      	asrs	r4, r1, #16
 800d6c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d6c4:	b289      	uxth	r1, r1
 800d6c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d6ca:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d6ce:	f846 1b04 	str.w	r1, [r6], #4
 800d6d2:	e7de      	b.n	800d692 <__mdiff+0xca>
 800d6d4:	3f01      	subs	r7, #1
 800d6d6:	e7e8      	b.n	800d6aa <__mdiff+0xe2>
 800d6d8:	0800e5b8 	.word	0x0800e5b8
 800d6dc:	0800e629 	.word	0x0800e629

0800d6e0 <__ulp>:
 800d6e0:	4b0e      	ldr	r3, [pc, #56]	; (800d71c <__ulp+0x3c>)
 800d6e2:	400b      	ands	r3, r1
 800d6e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	dc08      	bgt.n	800d6fe <__ulp+0x1e>
 800d6ec:	425b      	negs	r3, r3
 800d6ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d6f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d6f6:	da04      	bge.n	800d702 <__ulp+0x22>
 800d6f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d6fc:	4113      	asrs	r3, r2
 800d6fe:	2200      	movs	r2, #0
 800d700:	e008      	b.n	800d714 <__ulp+0x34>
 800d702:	f1a2 0314 	sub.w	r3, r2, #20
 800d706:	2b1e      	cmp	r3, #30
 800d708:	bfd6      	itet	le
 800d70a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d70e:	2201      	movgt	r2, #1
 800d710:	40da      	lsrle	r2, r3
 800d712:	2300      	movs	r3, #0
 800d714:	4619      	mov	r1, r3
 800d716:	4610      	mov	r0, r2
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	7ff00000 	.word	0x7ff00000

0800d720 <__b2d>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	6905      	ldr	r5, [r0, #16]
 800d724:	f100 0714 	add.w	r7, r0, #20
 800d728:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d72c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d730:	1f2e      	subs	r6, r5, #4
 800d732:	4620      	mov	r0, r4
 800d734:	f7ff fd5a 	bl	800d1ec <__hi0bits>
 800d738:	f1c0 0220 	rsb	r2, r0, #32
 800d73c:	280a      	cmp	r0, #10
 800d73e:	4603      	mov	r3, r0
 800d740:	f8df c068 	ldr.w	ip, [pc, #104]	; 800d7ac <__b2d+0x8c>
 800d744:	600a      	str	r2, [r1, #0]
 800d746:	dc12      	bgt.n	800d76e <__b2d+0x4e>
 800d748:	f1c0 0e0b 	rsb	lr, r0, #11
 800d74c:	fa24 f20e 	lsr.w	r2, r4, lr
 800d750:	42b7      	cmp	r7, r6
 800d752:	ea42 010c 	orr.w	r1, r2, ip
 800d756:	bf2c      	ite	cs
 800d758:	2200      	movcs	r2, #0
 800d75a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d75e:	3315      	adds	r3, #21
 800d760:	fa04 f303 	lsl.w	r3, r4, r3
 800d764:	fa22 f20e 	lsr.w	r2, r2, lr
 800d768:	431a      	orrs	r2, r3
 800d76a:	4610      	mov	r0, r2
 800d76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d76e:	42b7      	cmp	r7, r6
 800d770:	bf2e      	itee	cs
 800d772:	2200      	movcs	r2, #0
 800d774:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d778:	f1a5 0608 	subcc.w	r6, r5, #8
 800d77c:	3b0b      	subs	r3, #11
 800d77e:	d012      	beq.n	800d7a6 <__b2d+0x86>
 800d780:	f1c3 0520 	rsb	r5, r3, #32
 800d784:	fa22 f105 	lsr.w	r1, r2, r5
 800d788:	409c      	lsls	r4, r3
 800d78a:	430c      	orrs	r4, r1
 800d78c:	42be      	cmp	r6, r7
 800d78e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800d792:	bf94      	ite	ls
 800d794:	2400      	movls	r4, #0
 800d796:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d79a:	409a      	lsls	r2, r3
 800d79c:	40ec      	lsrs	r4, r5
 800d79e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d7a2:	4322      	orrs	r2, r4
 800d7a4:	e7e1      	b.n	800d76a <__b2d+0x4a>
 800d7a6:	ea44 010c 	orr.w	r1, r4, ip
 800d7aa:	e7de      	b.n	800d76a <__b2d+0x4a>
 800d7ac:	3ff00000 	.word	0x3ff00000

0800d7b0 <__d2b>:
 800d7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7b2:	2101      	movs	r1, #1
 800d7b4:	4617      	mov	r7, r2
 800d7b6:	461c      	mov	r4, r3
 800d7b8:	9e08      	ldr	r6, [sp, #32]
 800d7ba:	f7ff fc25 	bl	800d008 <_Balloc>
 800d7be:	4605      	mov	r5, r0
 800d7c0:	b930      	cbnz	r0, 800d7d0 <__d2b+0x20>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	f240 310f 	movw	r1, #783	; 0x30f
 800d7c8:	4b22      	ldr	r3, [pc, #136]	; (800d854 <__d2b+0xa4>)
 800d7ca:	4823      	ldr	r0, [pc, #140]	; (800d858 <__d2b+0xa8>)
 800d7cc:	f000 faf2 	bl	800ddb4 <__assert_func>
 800d7d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d7d4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d7d8:	bb24      	cbnz	r4, 800d824 <__d2b+0x74>
 800d7da:	2f00      	cmp	r7, #0
 800d7dc:	9301      	str	r3, [sp, #4]
 800d7de:	d026      	beq.n	800d82e <__d2b+0x7e>
 800d7e0:	4668      	mov	r0, sp
 800d7e2:	9700      	str	r7, [sp, #0]
 800d7e4:	f7ff fd22 	bl	800d22c <__lo0bits>
 800d7e8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7ec:	b1e8      	cbz	r0, 800d82a <__d2b+0x7a>
 800d7ee:	f1c0 0320 	rsb	r3, r0, #32
 800d7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f6:	430b      	orrs	r3, r1
 800d7f8:	40c2      	lsrs	r2, r0
 800d7fa:	616b      	str	r3, [r5, #20]
 800d7fc:	9201      	str	r2, [sp, #4]
 800d7fe:	9b01      	ldr	r3, [sp, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	bf14      	ite	ne
 800d804:	2102      	movne	r1, #2
 800d806:	2101      	moveq	r1, #1
 800d808:	61ab      	str	r3, [r5, #24]
 800d80a:	6129      	str	r1, [r5, #16]
 800d80c:	b1bc      	cbz	r4, 800d83e <__d2b+0x8e>
 800d80e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d812:	4404      	add	r4, r0
 800d814:	6034      	str	r4, [r6, #0]
 800d816:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d81c:	6018      	str	r0, [r3, #0]
 800d81e:	4628      	mov	r0, r5
 800d820:	b003      	add	sp, #12
 800d822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d828:	e7d7      	b.n	800d7da <__d2b+0x2a>
 800d82a:	6169      	str	r1, [r5, #20]
 800d82c:	e7e7      	b.n	800d7fe <__d2b+0x4e>
 800d82e:	a801      	add	r0, sp, #4
 800d830:	f7ff fcfc 	bl	800d22c <__lo0bits>
 800d834:	9b01      	ldr	r3, [sp, #4]
 800d836:	2101      	movs	r1, #1
 800d838:	616b      	str	r3, [r5, #20]
 800d83a:	3020      	adds	r0, #32
 800d83c:	e7e5      	b.n	800d80a <__d2b+0x5a>
 800d83e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d842:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800d846:	6030      	str	r0, [r6, #0]
 800d848:	6918      	ldr	r0, [r3, #16]
 800d84a:	f7ff fccf 	bl	800d1ec <__hi0bits>
 800d84e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d852:	e7e2      	b.n	800d81a <__d2b+0x6a>
 800d854:	0800e5b8 	.word	0x0800e5b8
 800d858:	0800e629 	.word	0x0800e629

0800d85c <__ratio>:
 800d85c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	4688      	mov	r8, r1
 800d862:	4669      	mov	r1, sp
 800d864:	4681      	mov	r9, r0
 800d866:	f7ff ff5b 	bl	800d720 <__b2d>
 800d86a:	460f      	mov	r7, r1
 800d86c:	4604      	mov	r4, r0
 800d86e:	460d      	mov	r5, r1
 800d870:	4640      	mov	r0, r8
 800d872:	a901      	add	r1, sp, #4
 800d874:	f7ff ff54 	bl	800d720 <__b2d>
 800d878:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d87c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d880:	468b      	mov	fp, r1
 800d882:	eba3 0c02 	sub.w	ip, r3, r2
 800d886:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d88a:	1a9b      	subs	r3, r3, r2
 800d88c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d890:	2b00      	cmp	r3, #0
 800d892:	bfd5      	itete	le
 800d894:	460a      	movle	r2, r1
 800d896:	462a      	movgt	r2, r5
 800d898:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d89c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8a0:	bfd8      	it	le
 800d8a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d8a6:	465b      	mov	r3, fp
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	4639      	mov	r1, r7
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	f7f2 ffad 	bl	800080c <__aeabi_ddiv>
 800d8b2:	b003      	add	sp, #12
 800d8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8b8 <__copybits>:
 800d8b8:	3901      	subs	r1, #1
 800d8ba:	b570      	push	{r4, r5, r6, lr}
 800d8bc:	1149      	asrs	r1, r1, #5
 800d8be:	6914      	ldr	r4, [r2, #16]
 800d8c0:	3101      	adds	r1, #1
 800d8c2:	f102 0314 	add.w	r3, r2, #20
 800d8c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8ce:	1f05      	subs	r5, r0, #4
 800d8d0:	42a3      	cmp	r3, r4
 800d8d2:	d30c      	bcc.n	800d8ee <__copybits+0x36>
 800d8d4:	1aa3      	subs	r3, r4, r2
 800d8d6:	3b11      	subs	r3, #17
 800d8d8:	f023 0303 	bic.w	r3, r3, #3
 800d8dc:	3211      	adds	r2, #17
 800d8de:	42a2      	cmp	r2, r4
 800d8e0:	bf88      	it	hi
 800d8e2:	2300      	movhi	r3, #0
 800d8e4:	4418      	add	r0, r3
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	4288      	cmp	r0, r1
 800d8ea:	d305      	bcc.n	800d8f8 <__copybits+0x40>
 800d8ec:	bd70      	pop	{r4, r5, r6, pc}
 800d8ee:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8f2:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8f6:	e7eb      	b.n	800d8d0 <__copybits+0x18>
 800d8f8:	f840 3b04 	str.w	r3, [r0], #4
 800d8fc:	e7f4      	b.n	800d8e8 <__copybits+0x30>

0800d8fe <__any_on>:
 800d8fe:	f100 0214 	add.w	r2, r0, #20
 800d902:	6900      	ldr	r0, [r0, #16]
 800d904:	114b      	asrs	r3, r1, #5
 800d906:	4298      	cmp	r0, r3
 800d908:	b510      	push	{r4, lr}
 800d90a:	db11      	blt.n	800d930 <__any_on+0x32>
 800d90c:	dd0a      	ble.n	800d924 <__any_on+0x26>
 800d90e:	f011 011f 	ands.w	r1, r1, #31
 800d912:	d007      	beq.n	800d924 <__any_on+0x26>
 800d914:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d918:	fa24 f001 	lsr.w	r0, r4, r1
 800d91c:	fa00 f101 	lsl.w	r1, r0, r1
 800d920:	428c      	cmp	r4, r1
 800d922:	d10b      	bne.n	800d93c <__any_on+0x3e>
 800d924:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d928:	4293      	cmp	r3, r2
 800d92a:	d803      	bhi.n	800d934 <__any_on+0x36>
 800d92c:	2000      	movs	r0, #0
 800d92e:	bd10      	pop	{r4, pc}
 800d930:	4603      	mov	r3, r0
 800d932:	e7f7      	b.n	800d924 <__any_on+0x26>
 800d934:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d938:	2900      	cmp	r1, #0
 800d93a:	d0f5      	beq.n	800d928 <__any_on+0x2a>
 800d93c:	2001      	movs	r0, #1
 800d93e:	e7f6      	b.n	800d92e <__any_on+0x30>

0800d940 <__ascii_wctomb>:
 800d940:	4603      	mov	r3, r0
 800d942:	4608      	mov	r0, r1
 800d944:	b141      	cbz	r1, 800d958 <__ascii_wctomb+0x18>
 800d946:	2aff      	cmp	r2, #255	; 0xff
 800d948:	d904      	bls.n	800d954 <__ascii_wctomb+0x14>
 800d94a:	228a      	movs	r2, #138	; 0x8a
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	4770      	bx	lr
 800d954:	2001      	movs	r0, #1
 800d956:	700a      	strb	r2, [r1, #0]
 800d958:	4770      	bx	lr

0800d95a <__ssputs_r>:
 800d95a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d95e:	461f      	mov	r7, r3
 800d960:	688e      	ldr	r6, [r1, #8]
 800d962:	4682      	mov	sl, r0
 800d964:	42be      	cmp	r6, r7
 800d966:	460c      	mov	r4, r1
 800d968:	4690      	mov	r8, r2
 800d96a:	680b      	ldr	r3, [r1, #0]
 800d96c:	d82c      	bhi.n	800d9c8 <__ssputs_r+0x6e>
 800d96e:	898a      	ldrh	r2, [r1, #12]
 800d970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d974:	d026      	beq.n	800d9c4 <__ssputs_r+0x6a>
 800d976:	6965      	ldr	r5, [r4, #20]
 800d978:	6909      	ldr	r1, [r1, #16]
 800d97a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d97e:	eba3 0901 	sub.w	r9, r3, r1
 800d982:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d986:	1c7b      	adds	r3, r7, #1
 800d988:	444b      	add	r3, r9
 800d98a:	106d      	asrs	r5, r5, #1
 800d98c:	429d      	cmp	r5, r3
 800d98e:	bf38      	it	cc
 800d990:	461d      	movcc	r5, r3
 800d992:	0553      	lsls	r3, r2, #21
 800d994:	d527      	bpl.n	800d9e6 <__ssputs_r+0x8c>
 800d996:	4629      	mov	r1, r5
 800d998:	f7ff fa98 	bl	800cecc <_malloc_r>
 800d99c:	4606      	mov	r6, r0
 800d99e:	b360      	cbz	r0, 800d9fa <__ssputs_r+0xa0>
 800d9a0:	464a      	mov	r2, r9
 800d9a2:	6921      	ldr	r1, [r4, #16]
 800d9a4:	f7fe f843 	bl	800ba2e <memcpy>
 800d9a8:	89a3      	ldrh	r3, [r4, #12]
 800d9aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b2:	81a3      	strh	r3, [r4, #12]
 800d9b4:	6126      	str	r6, [r4, #16]
 800d9b6:	444e      	add	r6, r9
 800d9b8:	6026      	str	r6, [r4, #0]
 800d9ba:	463e      	mov	r6, r7
 800d9bc:	6165      	str	r5, [r4, #20]
 800d9be:	eba5 0509 	sub.w	r5, r5, r9
 800d9c2:	60a5      	str	r5, [r4, #8]
 800d9c4:	42be      	cmp	r6, r7
 800d9c6:	d900      	bls.n	800d9ca <__ssputs_r+0x70>
 800d9c8:	463e      	mov	r6, r7
 800d9ca:	4632      	mov	r2, r6
 800d9cc:	4641      	mov	r1, r8
 800d9ce:	6820      	ldr	r0, [r4, #0]
 800d9d0:	f000 f9c6 	bl	800dd60 <memmove>
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	68a3      	ldr	r3, [r4, #8]
 800d9d8:	1b9b      	subs	r3, r3, r6
 800d9da:	60a3      	str	r3, [r4, #8]
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	4433      	add	r3, r6
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9e6:	462a      	mov	r2, r5
 800d9e8:	f000 fa16 	bl	800de18 <_realloc_r>
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d1e0      	bne.n	800d9b4 <__ssputs_r+0x5a>
 800d9f2:	4650      	mov	r0, sl
 800d9f4:	6921      	ldr	r1, [r4, #16]
 800d9f6:	f7fe fe9f 	bl	800c738 <_free_r>
 800d9fa:	230c      	movs	r3, #12
 800d9fc:	f8ca 3000 	str.w	r3, [sl]
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	f04f 30ff 	mov.w	r0, #4294967295
 800da06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da0a:	81a3      	strh	r3, [r4, #12]
 800da0c:	e7e9      	b.n	800d9e2 <__ssputs_r+0x88>
	...

0800da10 <_svfiprintf_r>:
 800da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	4698      	mov	r8, r3
 800da16:	898b      	ldrh	r3, [r1, #12]
 800da18:	4607      	mov	r7, r0
 800da1a:	061b      	lsls	r3, r3, #24
 800da1c:	460d      	mov	r5, r1
 800da1e:	4614      	mov	r4, r2
 800da20:	b09d      	sub	sp, #116	; 0x74
 800da22:	d50e      	bpl.n	800da42 <_svfiprintf_r+0x32>
 800da24:	690b      	ldr	r3, [r1, #16]
 800da26:	b963      	cbnz	r3, 800da42 <_svfiprintf_r+0x32>
 800da28:	2140      	movs	r1, #64	; 0x40
 800da2a:	f7ff fa4f 	bl	800cecc <_malloc_r>
 800da2e:	6028      	str	r0, [r5, #0]
 800da30:	6128      	str	r0, [r5, #16]
 800da32:	b920      	cbnz	r0, 800da3e <_svfiprintf_r+0x2e>
 800da34:	230c      	movs	r3, #12
 800da36:	603b      	str	r3, [r7, #0]
 800da38:	f04f 30ff 	mov.w	r0, #4294967295
 800da3c:	e0d0      	b.n	800dbe0 <_svfiprintf_r+0x1d0>
 800da3e:	2340      	movs	r3, #64	; 0x40
 800da40:	616b      	str	r3, [r5, #20]
 800da42:	2300      	movs	r3, #0
 800da44:	9309      	str	r3, [sp, #36]	; 0x24
 800da46:	2320      	movs	r3, #32
 800da48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da4c:	2330      	movs	r3, #48	; 0x30
 800da4e:	f04f 0901 	mov.w	r9, #1
 800da52:	f8cd 800c 	str.w	r8, [sp, #12]
 800da56:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800dbf8 <_svfiprintf_r+0x1e8>
 800da5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da5e:	4623      	mov	r3, r4
 800da60:	469a      	mov	sl, r3
 800da62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da66:	b10a      	cbz	r2, 800da6c <_svfiprintf_r+0x5c>
 800da68:	2a25      	cmp	r2, #37	; 0x25
 800da6a:	d1f9      	bne.n	800da60 <_svfiprintf_r+0x50>
 800da6c:	ebba 0b04 	subs.w	fp, sl, r4
 800da70:	d00b      	beq.n	800da8a <_svfiprintf_r+0x7a>
 800da72:	465b      	mov	r3, fp
 800da74:	4622      	mov	r2, r4
 800da76:	4629      	mov	r1, r5
 800da78:	4638      	mov	r0, r7
 800da7a:	f7ff ff6e 	bl	800d95a <__ssputs_r>
 800da7e:	3001      	adds	r0, #1
 800da80:	f000 80a9 	beq.w	800dbd6 <_svfiprintf_r+0x1c6>
 800da84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da86:	445a      	add	r2, fp
 800da88:	9209      	str	r2, [sp, #36]	; 0x24
 800da8a:	f89a 3000 	ldrb.w	r3, [sl]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f000 80a1 	beq.w	800dbd6 <_svfiprintf_r+0x1c6>
 800da94:	2300      	movs	r3, #0
 800da96:	f04f 32ff 	mov.w	r2, #4294967295
 800da9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da9e:	f10a 0a01 	add.w	sl, sl, #1
 800daa2:	9304      	str	r3, [sp, #16]
 800daa4:	9307      	str	r3, [sp, #28]
 800daa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daaa:	931a      	str	r3, [sp, #104]	; 0x68
 800daac:	4654      	mov	r4, sl
 800daae:	2205      	movs	r2, #5
 800dab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab4:	4850      	ldr	r0, [pc, #320]	; (800dbf8 <_svfiprintf_r+0x1e8>)
 800dab6:	f7fd ffac 	bl	800ba12 <memchr>
 800daba:	9a04      	ldr	r2, [sp, #16]
 800dabc:	b9d8      	cbnz	r0, 800daf6 <_svfiprintf_r+0xe6>
 800dabe:	06d0      	lsls	r0, r2, #27
 800dac0:	bf44      	itt	mi
 800dac2:	2320      	movmi	r3, #32
 800dac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dac8:	0711      	lsls	r1, r2, #28
 800daca:	bf44      	itt	mi
 800dacc:	232b      	movmi	r3, #43	; 0x2b
 800dace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dad2:	f89a 3000 	ldrb.w	r3, [sl]
 800dad6:	2b2a      	cmp	r3, #42	; 0x2a
 800dad8:	d015      	beq.n	800db06 <_svfiprintf_r+0xf6>
 800dada:	4654      	mov	r4, sl
 800dadc:	2000      	movs	r0, #0
 800dade:	f04f 0c0a 	mov.w	ip, #10
 800dae2:	9a07      	ldr	r2, [sp, #28]
 800dae4:	4621      	mov	r1, r4
 800dae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daea:	3b30      	subs	r3, #48	; 0x30
 800daec:	2b09      	cmp	r3, #9
 800daee:	d94d      	bls.n	800db8c <_svfiprintf_r+0x17c>
 800daf0:	b1b0      	cbz	r0, 800db20 <_svfiprintf_r+0x110>
 800daf2:	9207      	str	r2, [sp, #28]
 800daf4:	e014      	b.n	800db20 <_svfiprintf_r+0x110>
 800daf6:	eba0 0308 	sub.w	r3, r0, r8
 800dafa:	fa09 f303 	lsl.w	r3, r9, r3
 800dafe:	4313      	orrs	r3, r2
 800db00:	46a2      	mov	sl, r4
 800db02:	9304      	str	r3, [sp, #16]
 800db04:	e7d2      	b.n	800daac <_svfiprintf_r+0x9c>
 800db06:	9b03      	ldr	r3, [sp, #12]
 800db08:	1d19      	adds	r1, r3, #4
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	9103      	str	r1, [sp, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	bfbb      	ittet	lt
 800db12:	425b      	neglt	r3, r3
 800db14:	f042 0202 	orrlt.w	r2, r2, #2
 800db18:	9307      	strge	r3, [sp, #28]
 800db1a:	9307      	strlt	r3, [sp, #28]
 800db1c:	bfb8      	it	lt
 800db1e:	9204      	strlt	r2, [sp, #16]
 800db20:	7823      	ldrb	r3, [r4, #0]
 800db22:	2b2e      	cmp	r3, #46	; 0x2e
 800db24:	d10c      	bne.n	800db40 <_svfiprintf_r+0x130>
 800db26:	7863      	ldrb	r3, [r4, #1]
 800db28:	2b2a      	cmp	r3, #42	; 0x2a
 800db2a:	d134      	bne.n	800db96 <_svfiprintf_r+0x186>
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	3402      	adds	r4, #2
 800db30:	1d1a      	adds	r2, r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	9203      	str	r2, [sp, #12]
 800db36:	2b00      	cmp	r3, #0
 800db38:	bfb8      	it	lt
 800db3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800db3e:	9305      	str	r3, [sp, #20]
 800db40:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800dbfc <_svfiprintf_r+0x1ec>
 800db44:	2203      	movs	r2, #3
 800db46:	4650      	mov	r0, sl
 800db48:	7821      	ldrb	r1, [r4, #0]
 800db4a:	f7fd ff62 	bl	800ba12 <memchr>
 800db4e:	b138      	cbz	r0, 800db60 <_svfiprintf_r+0x150>
 800db50:	2240      	movs	r2, #64	; 0x40
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	eba0 000a 	sub.w	r0, r0, sl
 800db58:	4082      	lsls	r2, r0
 800db5a:	4313      	orrs	r3, r2
 800db5c:	3401      	adds	r4, #1
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db64:	2206      	movs	r2, #6
 800db66:	4826      	ldr	r0, [pc, #152]	; (800dc00 <_svfiprintf_r+0x1f0>)
 800db68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db6c:	f7fd ff51 	bl	800ba12 <memchr>
 800db70:	2800      	cmp	r0, #0
 800db72:	d038      	beq.n	800dbe6 <_svfiprintf_r+0x1d6>
 800db74:	4b23      	ldr	r3, [pc, #140]	; (800dc04 <_svfiprintf_r+0x1f4>)
 800db76:	bb1b      	cbnz	r3, 800dbc0 <_svfiprintf_r+0x1b0>
 800db78:	9b03      	ldr	r3, [sp, #12]
 800db7a:	3307      	adds	r3, #7
 800db7c:	f023 0307 	bic.w	r3, r3, #7
 800db80:	3308      	adds	r3, #8
 800db82:	9303      	str	r3, [sp, #12]
 800db84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db86:	4433      	add	r3, r6
 800db88:	9309      	str	r3, [sp, #36]	; 0x24
 800db8a:	e768      	b.n	800da5e <_svfiprintf_r+0x4e>
 800db8c:	460c      	mov	r4, r1
 800db8e:	2001      	movs	r0, #1
 800db90:	fb0c 3202 	mla	r2, ip, r2, r3
 800db94:	e7a6      	b.n	800dae4 <_svfiprintf_r+0xd4>
 800db96:	2300      	movs	r3, #0
 800db98:	f04f 0c0a 	mov.w	ip, #10
 800db9c:	4619      	mov	r1, r3
 800db9e:	3401      	adds	r4, #1
 800dba0:	9305      	str	r3, [sp, #20]
 800dba2:	4620      	mov	r0, r4
 800dba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba8:	3a30      	subs	r2, #48	; 0x30
 800dbaa:	2a09      	cmp	r2, #9
 800dbac:	d903      	bls.n	800dbb6 <_svfiprintf_r+0x1a6>
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d0c6      	beq.n	800db40 <_svfiprintf_r+0x130>
 800dbb2:	9105      	str	r1, [sp, #20]
 800dbb4:	e7c4      	b.n	800db40 <_svfiprintf_r+0x130>
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	2301      	movs	r3, #1
 800dbba:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbbe:	e7f0      	b.n	800dba2 <_svfiprintf_r+0x192>
 800dbc0:	ab03      	add	r3, sp, #12
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	462a      	mov	r2, r5
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	4b0f      	ldr	r3, [pc, #60]	; (800dc08 <_svfiprintf_r+0x1f8>)
 800dbca:	a904      	add	r1, sp, #16
 800dbcc:	f7fd f9a8 	bl	800af20 <_printf_float>
 800dbd0:	1c42      	adds	r2, r0, #1
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	d1d6      	bne.n	800db84 <_svfiprintf_r+0x174>
 800dbd6:	89ab      	ldrh	r3, [r5, #12]
 800dbd8:	065b      	lsls	r3, r3, #25
 800dbda:	f53f af2d 	bmi.w	800da38 <_svfiprintf_r+0x28>
 800dbde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbe0:	b01d      	add	sp, #116	; 0x74
 800dbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe6:	ab03      	add	r3, sp, #12
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	462a      	mov	r2, r5
 800dbec:	4638      	mov	r0, r7
 800dbee:	4b06      	ldr	r3, [pc, #24]	; (800dc08 <_svfiprintf_r+0x1f8>)
 800dbf0:	a904      	add	r1, sp, #16
 800dbf2:	f7fd fc35 	bl	800b460 <_printf_i>
 800dbf6:	e7eb      	b.n	800dbd0 <_svfiprintf_r+0x1c0>
 800dbf8:	0800e885 	.word	0x0800e885
 800dbfc:	0800e88b 	.word	0x0800e88b
 800dc00:	0800e88f 	.word	0x0800e88f
 800dc04:	0800af21 	.word	0x0800af21
 800dc08:	0800d95b 	.word	0x0800d95b

0800dc0c <__sflush_r>:
 800dc0c:	898a      	ldrh	r2, [r1, #12]
 800dc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc10:	4605      	mov	r5, r0
 800dc12:	0710      	lsls	r0, r2, #28
 800dc14:	460c      	mov	r4, r1
 800dc16:	d457      	bmi.n	800dcc8 <__sflush_r+0xbc>
 800dc18:	684b      	ldr	r3, [r1, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	dc04      	bgt.n	800dc28 <__sflush_r+0x1c>
 800dc1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dc01      	bgt.n	800dc28 <__sflush_r+0x1c>
 800dc24:	2000      	movs	r0, #0
 800dc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc2a:	2e00      	cmp	r6, #0
 800dc2c:	d0fa      	beq.n	800dc24 <__sflush_r+0x18>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc34:	682f      	ldr	r7, [r5, #0]
 800dc36:	6a21      	ldr	r1, [r4, #32]
 800dc38:	602b      	str	r3, [r5, #0]
 800dc3a:	d032      	beq.n	800dca2 <__sflush_r+0x96>
 800dc3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	075a      	lsls	r2, r3, #29
 800dc42:	d505      	bpl.n	800dc50 <__sflush_r+0x44>
 800dc44:	6863      	ldr	r3, [r4, #4]
 800dc46:	1ac0      	subs	r0, r0, r3
 800dc48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc4a:	b10b      	cbz	r3, 800dc50 <__sflush_r+0x44>
 800dc4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc4e:	1ac0      	subs	r0, r0, r3
 800dc50:	2300      	movs	r3, #0
 800dc52:	4602      	mov	r2, r0
 800dc54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc56:	4628      	mov	r0, r5
 800dc58:	6a21      	ldr	r1, [r4, #32]
 800dc5a:	47b0      	blx	r6
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	89a3      	ldrh	r3, [r4, #12]
 800dc60:	d106      	bne.n	800dc70 <__sflush_r+0x64>
 800dc62:	6829      	ldr	r1, [r5, #0]
 800dc64:	291d      	cmp	r1, #29
 800dc66:	d82b      	bhi.n	800dcc0 <__sflush_r+0xb4>
 800dc68:	4a28      	ldr	r2, [pc, #160]	; (800dd0c <__sflush_r+0x100>)
 800dc6a:	410a      	asrs	r2, r1
 800dc6c:	07d6      	lsls	r6, r2, #31
 800dc6e:	d427      	bmi.n	800dcc0 <__sflush_r+0xb4>
 800dc70:	2200      	movs	r2, #0
 800dc72:	6062      	str	r2, [r4, #4]
 800dc74:	6922      	ldr	r2, [r4, #16]
 800dc76:	04d9      	lsls	r1, r3, #19
 800dc78:	6022      	str	r2, [r4, #0]
 800dc7a:	d504      	bpl.n	800dc86 <__sflush_r+0x7a>
 800dc7c:	1c42      	adds	r2, r0, #1
 800dc7e:	d101      	bne.n	800dc84 <__sflush_r+0x78>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b903      	cbnz	r3, 800dc86 <__sflush_r+0x7a>
 800dc84:	6560      	str	r0, [r4, #84]	; 0x54
 800dc86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc88:	602f      	str	r7, [r5, #0]
 800dc8a:	2900      	cmp	r1, #0
 800dc8c:	d0ca      	beq.n	800dc24 <__sflush_r+0x18>
 800dc8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc92:	4299      	cmp	r1, r3
 800dc94:	d002      	beq.n	800dc9c <__sflush_r+0x90>
 800dc96:	4628      	mov	r0, r5
 800dc98:	f7fe fd4e 	bl	800c738 <_free_r>
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	6360      	str	r0, [r4, #52]	; 0x34
 800dca0:	e7c1      	b.n	800dc26 <__sflush_r+0x1a>
 800dca2:	2301      	movs	r3, #1
 800dca4:	4628      	mov	r0, r5
 800dca6:	47b0      	blx	r6
 800dca8:	1c41      	adds	r1, r0, #1
 800dcaa:	d1c8      	bne.n	800dc3e <__sflush_r+0x32>
 800dcac:	682b      	ldr	r3, [r5, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d0c5      	beq.n	800dc3e <__sflush_r+0x32>
 800dcb2:	2b1d      	cmp	r3, #29
 800dcb4:	d001      	beq.n	800dcba <__sflush_r+0xae>
 800dcb6:	2b16      	cmp	r3, #22
 800dcb8:	d101      	bne.n	800dcbe <__sflush_r+0xb2>
 800dcba:	602f      	str	r7, [r5, #0]
 800dcbc:	e7b2      	b.n	800dc24 <__sflush_r+0x18>
 800dcbe:	89a3      	ldrh	r3, [r4, #12]
 800dcc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcc4:	81a3      	strh	r3, [r4, #12]
 800dcc6:	e7ae      	b.n	800dc26 <__sflush_r+0x1a>
 800dcc8:	690f      	ldr	r7, [r1, #16]
 800dcca:	2f00      	cmp	r7, #0
 800dccc:	d0aa      	beq.n	800dc24 <__sflush_r+0x18>
 800dcce:	0793      	lsls	r3, r2, #30
 800dcd0:	bf18      	it	ne
 800dcd2:	2300      	movne	r3, #0
 800dcd4:	680e      	ldr	r6, [r1, #0]
 800dcd6:	bf08      	it	eq
 800dcd8:	694b      	ldreq	r3, [r1, #20]
 800dcda:	1bf6      	subs	r6, r6, r7
 800dcdc:	600f      	str	r7, [r1, #0]
 800dcde:	608b      	str	r3, [r1, #8]
 800dce0:	2e00      	cmp	r6, #0
 800dce2:	dd9f      	ble.n	800dc24 <__sflush_r+0x18>
 800dce4:	4633      	mov	r3, r6
 800dce6:	463a      	mov	r2, r7
 800dce8:	4628      	mov	r0, r5
 800dcea:	6a21      	ldr	r1, [r4, #32]
 800dcec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800dcf0:	47e0      	blx	ip
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	dc06      	bgt.n	800dd04 <__sflush_r+0xf8>
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd00:	81a3      	strh	r3, [r4, #12]
 800dd02:	e790      	b.n	800dc26 <__sflush_r+0x1a>
 800dd04:	4407      	add	r7, r0
 800dd06:	1a36      	subs	r6, r6, r0
 800dd08:	e7ea      	b.n	800dce0 <__sflush_r+0xd4>
 800dd0a:	bf00      	nop
 800dd0c:	dfbffffe 	.word	0xdfbffffe

0800dd10 <_fflush_r>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	690b      	ldr	r3, [r1, #16]
 800dd14:	4605      	mov	r5, r0
 800dd16:	460c      	mov	r4, r1
 800dd18:	b913      	cbnz	r3, 800dd20 <_fflush_r+0x10>
 800dd1a:	2500      	movs	r5, #0
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	bd38      	pop	{r3, r4, r5, pc}
 800dd20:	b118      	cbz	r0, 800dd2a <_fflush_r+0x1a>
 800dd22:	6a03      	ldr	r3, [r0, #32]
 800dd24:	b90b      	cbnz	r3, 800dd2a <_fflush_r+0x1a>
 800dd26:	f7fd fd49 	bl	800b7bc <__sinit>
 800dd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0f3      	beq.n	800dd1a <_fflush_r+0xa>
 800dd32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd34:	07d0      	lsls	r0, r2, #31
 800dd36:	d404      	bmi.n	800dd42 <_fflush_r+0x32>
 800dd38:	0599      	lsls	r1, r3, #22
 800dd3a:	d402      	bmi.n	800dd42 <_fflush_r+0x32>
 800dd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd3e:	f7fd fe66 	bl	800ba0e <__retarget_lock_acquire_recursive>
 800dd42:	4628      	mov	r0, r5
 800dd44:	4621      	mov	r1, r4
 800dd46:	f7ff ff61 	bl	800dc0c <__sflush_r>
 800dd4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	07da      	lsls	r2, r3, #31
 800dd50:	d4e4      	bmi.n	800dd1c <_fflush_r+0xc>
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	059b      	lsls	r3, r3, #22
 800dd56:	d4e1      	bmi.n	800dd1c <_fflush_r+0xc>
 800dd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd5a:	f7fd fe59 	bl	800ba10 <__retarget_lock_release_recursive>
 800dd5e:	e7dd      	b.n	800dd1c <_fflush_r+0xc>

0800dd60 <memmove>:
 800dd60:	4288      	cmp	r0, r1
 800dd62:	b510      	push	{r4, lr}
 800dd64:	eb01 0402 	add.w	r4, r1, r2
 800dd68:	d902      	bls.n	800dd70 <memmove+0x10>
 800dd6a:	4284      	cmp	r4, r0
 800dd6c:	4623      	mov	r3, r4
 800dd6e:	d807      	bhi.n	800dd80 <memmove+0x20>
 800dd70:	1e43      	subs	r3, r0, #1
 800dd72:	42a1      	cmp	r1, r4
 800dd74:	d008      	beq.n	800dd88 <memmove+0x28>
 800dd76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd7e:	e7f8      	b.n	800dd72 <memmove+0x12>
 800dd80:	4601      	mov	r1, r0
 800dd82:	4402      	add	r2, r0
 800dd84:	428a      	cmp	r2, r1
 800dd86:	d100      	bne.n	800dd8a <memmove+0x2a>
 800dd88:	bd10      	pop	{r4, pc}
 800dd8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd92:	e7f7      	b.n	800dd84 <memmove+0x24>

0800dd94 <_sbrk_r>:
 800dd94:	b538      	push	{r3, r4, r5, lr}
 800dd96:	2300      	movs	r3, #0
 800dd98:	4d05      	ldr	r5, [pc, #20]	; (800ddb0 <_sbrk_r+0x1c>)
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	4608      	mov	r0, r1
 800dd9e:	602b      	str	r3, [r5, #0]
 800dda0:	f7f5 fdc4 	bl	800392c <_sbrk>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_sbrk_r+0x1a>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_sbrk_r+0x1a>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	20002544 	.word	0x20002544

0800ddb4 <__assert_func>:
 800ddb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddb6:	4614      	mov	r4, r2
 800ddb8:	461a      	mov	r2, r3
 800ddba:	4b09      	ldr	r3, [pc, #36]	; (800dde0 <__assert_func+0x2c>)
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68d8      	ldr	r0, [r3, #12]
 800ddc2:	b14c      	cbz	r4, 800ddd8 <__assert_func+0x24>
 800ddc4:	4b07      	ldr	r3, [pc, #28]	; (800dde4 <__assert_func+0x30>)
 800ddc6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddca:	9100      	str	r1, [sp, #0]
 800ddcc:	462b      	mov	r3, r5
 800ddce:	4906      	ldr	r1, [pc, #24]	; (800dde8 <__assert_func+0x34>)
 800ddd0:	f000 f852 	bl	800de78 <fiprintf>
 800ddd4:	f000 f862 	bl	800de9c <abort>
 800ddd8:	4b04      	ldr	r3, [pc, #16]	; (800ddec <__assert_func+0x38>)
 800ddda:	461c      	mov	r4, r3
 800dddc:	e7f3      	b.n	800ddc6 <__assert_func+0x12>
 800ddde:	bf00      	nop
 800dde0:	20000274 	.word	0x20000274
 800dde4:	0800e896 	.word	0x0800e896
 800dde8:	0800e8a3 	.word	0x0800e8a3
 800ddec:	0800e8d1 	.word	0x0800e8d1

0800ddf0 <_calloc_r>:
 800ddf0:	b570      	push	{r4, r5, r6, lr}
 800ddf2:	fba1 5402 	umull	r5, r4, r1, r2
 800ddf6:	b934      	cbnz	r4, 800de06 <_calloc_r+0x16>
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	f7ff f867 	bl	800cecc <_malloc_r>
 800ddfe:	4606      	mov	r6, r0
 800de00:	b928      	cbnz	r0, 800de0e <_calloc_r+0x1e>
 800de02:	4630      	mov	r0, r6
 800de04:	bd70      	pop	{r4, r5, r6, pc}
 800de06:	220c      	movs	r2, #12
 800de08:	2600      	movs	r6, #0
 800de0a:	6002      	str	r2, [r0, #0]
 800de0c:	e7f9      	b.n	800de02 <_calloc_r+0x12>
 800de0e:	462a      	mov	r2, r5
 800de10:	4621      	mov	r1, r4
 800de12:	f7fd fd6c 	bl	800b8ee <memset>
 800de16:	e7f4      	b.n	800de02 <_calloc_r+0x12>

0800de18 <_realloc_r>:
 800de18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de1c:	4680      	mov	r8, r0
 800de1e:	4614      	mov	r4, r2
 800de20:	460e      	mov	r6, r1
 800de22:	b921      	cbnz	r1, 800de2e <_realloc_r+0x16>
 800de24:	4611      	mov	r1, r2
 800de26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de2a:	f7ff b84f 	b.w	800cecc <_malloc_r>
 800de2e:	b92a      	cbnz	r2, 800de3c <_realloc_r+0x24>
 800de30:	f7fe fc82 	bl	800c738 <_free_r>
 800de34:	4625      	mov	r5, r4
 800de36:	4628      	mov	r0, r5
 800de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de3c:	f000 f835 	bl	800deaa <_malloc_usable_size_r>
 800de40:	4284      	cmp	r4, r0
 800de42:	4607      	mov	r7, r0
 800de44:	d802      	bhi.n	800de4c <_realloc_r+0x34>
 800de46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de4a:	d812      	bhi.n	800de72 <_realloc_r+0x5a>
 800de4c:	4621      	mov	r1, r4
 800de4e:	4640      	mov	r0, r8
 800de50:	f7ff f83c 	bl	800cecc <_malloc_r>
 800de54:	4605      	mov	r5, r0
 800de56:	2800      	cmp	r0, #0
 800de58:	d0ed      	beq.n	800de36 <_realloc_r+0x1e>
 800de5a:	42bc      	cmp	r4, r7
 800de5c:	4622      	mov	r2, r4
 800de5e:	4631      	mov	r1, r6
 800de60:	bf28      	it	cs
 800de62:	463a      	movcs	r2, r7
 800de64:	f7fd fde3 	bl	800ba2e <memcpy>
 800de68:	4631      	mov	r1, r6
 800de6a:	4640      	mov	r0, r8
 800de6c:	f7fe fc64 	bl	800c738 <_free_r>
 800de70:	e7e1      	b.n	800de36 <_realloc_r+0x1e>
 800de72:	4635      	mov	r5, r6
 800de74:	e7df      	b.n	800de36 <_realloc_r+0x1e>
	...

0800de78 <fiprintf>:
 800de78:	b40e      	push	{r1, r2, r3}
 800de7a:	b503      	push	{r0, r1, lr}
 800de7c:	4601      	mov	r1, r0
 800de7e:	ab03      	add	r3, sp, #12
 800de80:	4805      	ldr	r0, [pc, #20]	; (800de98 <fiprintf+0x20>)
 800de82:	f853 2b04 	ldr.w	r2, [r3], #4
 800de86:	6800      	ldr	r0, [r0, #0]
 800de88:	9301      	str	r3, [sp, #4]
 800de8a:	f000 f83d 	bl	800df08 <_vfiprintf_r>
 800de8e:	b002      	add	sp, #8
 800de90:	f85d eb04 	ldr.w	lr, [sp], #4
 800de94:	b003      	add	sp, #12
 800de96:	4770      	bx	lr
 800de98:	20000274 	.word	0x20000274

0800de9c <abort>:
 800de9c:	2006      	movs	r0, #6
 800de9e:	b508      	push	{r3, lr}
 800dea0:	f000 fa0a 	bl	800e2b8 <raise>
 800dea4:	2001      	movs	r0, #1
 800dea6:	f7f5 fcce 	bl	8003846 <_exit>

0800deaa <_malloc_usable_size_r>:
 800deaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deae:	1f18      	subs	r0, r3, #4
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	bfbc      	itt	lt
 800deb4:	580b      	ldrlt	r3, [r1, r0]
 800deb6:	18c0      	addlt	r0, r0, r3
 800deb8:	4770      	bx	lr

0800deba <__sfputc_r>:
 800deba:	6893      	ldr	r3, [r2, #8]
 800debc:	b410      	push	{r4}
 800debe:	3b01      	subs	r3, #1
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	6093      	str	r3, [r2, #8]
 800dec4:	da07      	bge.n	800ded6 <__sfputc_r+0x1c>
 800dec6:	6994      	ldr	r4, [r2, #24]
 800dec8:	42a3      	cmp	r3, r4
 800deca:	db01      	blt.n	800ded0 <__sfputc_r+0x16>
 800decc:	290a      	cmp	r1, #10
 800dece:	d102      	bne.n	800ded6 <__sfputc_r+0x1c>
 800ded0:	bc10      	pop	{r4}
 800ded2:	f000 b933 	b.w	800e13c <__swbuf_r>
 800ded6:	6813      	ldr	r3, [r2, #0]
 800ded8:	1c58      	adds	r0, r3, #1
 800deda:	6010      	str	r0, [r2, #0]
 800dedc:	7019      	strb	r1, [r3, #0]
 800dede:	4608      	mov	r0, r1
 800dee0:	bc10      	pop	{r4}
 800dee2:	4770      	bx	lr

0800dee4 <__sfputs_r>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	4606      	mov	r6, r0
 800dee8:	460f      	mov	r7, r1
 800deea:	4614      	mov	r4, r2
 800deec:	18d5      	adds	r5, r2, r3
 800deee:	42ac      	cmp	r4, r5
 800def0:	d101      	bne.n	800def6 <__sfputs_r+0x12>
 800def2:	2000      	movs	r0, #0
 800def4:	e007      	b.n	800df06 <__sfputs_r+0x22>
 800def6:	463a      	mov	r2, r7
 800def8:	4630      	mov	r0, r6
 800defa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800defe:	f7ff ffdc 	bl	800deba <__sfputc_r>
 800df02:	1c43      	adds	r3, r0, #1
 800df04:	d1f3      	bne.n	800deee <__sfputs_r+0xa>
 800df06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df08 <_vfiprintf_r>:
 800df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	460d      	mov	r5, r1
 800df0e:	4614      	mov	r4, r2
 800df10:	4698      	mov	r8, r3
 800df12:	4606      	mov	r6, r0
 800df14:	b09d      	sub	sp, #116	; 0x74
 800df16:	b118      	cbz	r0, 800df20 <_vfiprintf_r+0x18>
 800df18:	6a03      	ldr	r3, [r0, #32]
 800df1a:	b90b      	cbnz	r3, 800df20 <_vfiprintf_r+0x18>
 800df1c:	f7fd fc4e 	bl	800b7bc <__sinit>
 800df20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df22:	07d9      	lsls	r1, r3, #31
 800df24:	d405      	bmi.n	800df32 <_vfiprintf_r+0x2a>
 800df26:	89ab      	ldrh	r3, [r5, #12]
 800df28:	059a      	lsls	r2, r3, #22
 800df2a:	d402      	bmi.n	800df32 <_vfiprintf_r+0x2a>
 800df2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df2e:	f7fd fd6e 	bl	800ba0e <__retarget_lock_acquire_recursive>
 800df32:	89ab      	ldrh	r3, [r5, #12]
 800df34:	071b      	lsls	r3, r3, #28
 800df36:	d501      	bpl.n	800df3c <_vfiprintf_r+0x34>
 800df38:	692b      	ldr	r3, [r5, #16]
 800df3a:	b99b      	cbnz	r3, 800df64 <_vfiprintf_r+0x5c>
 800df3c:	4629      	mov	r1, r5
 800df3e:	4630      	mov	r0, r6
 800df40:	f000 f93a 	bl	800e1b8 <__swsetup_r>
 800df44:	b170      	cbz	r0, 800df64 <_vfiprintf_r+0x5c>
 800df46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df48:	07dc      	lsls	r4, r3, #31
 800df4a:	d504      	bpl.n	800df56 <_vfiprintf_r+0x4e>
 800df4c:	f04f 30ff 	mov.w	r0, #4294967295
 800df50:	b01d      	add	sp, #116	; 0x74
 800df52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df56:	89ab      	ldrh	r3, [r5, #12]
 800df58:	0598      	lsls	r0, r3, #22
 800df5a:	d4f7      	bmi.n	800df4c <_vfiprintf_r+0x44>
 800df5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df5e:	f7fd fd57 	bl	800ba10 <__retarget_lock_release_recursive>
 800df62:	e7f3      	b.n	800df4c <_vfiprintf_r+0x44>
 800df64:	2300      	movs	r3, #0
 800df66:	9309      	str	r3, [sp, #36]	; 0x24
 800df68:	2320      	movs	r3, #32
 800df6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df6e:	2330      	movs	r3, #48	; 0x30
 800df70:	f04f 0901 	mov.w	r9, #1
 800df74:	f8cd 800c 	str.w	r8, [sp, #12]
 800df78:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e128 <_vfiprintf_r+0x220>
 800df7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df80:	4623      	mov	r3, r4
 800df82:	469a      	mov	sl, r3
 800df84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df88:	b10a      	cbz	r2, 800df8e <_vfiprintf_r+0x86>
 800df8a:	2a25      	cmp	r2, #37	; 0x25
 800df8c:	d1f9      	bne.n	800df82 <_vfiprintf_r+0x7a>
 800df8e:	ebba 0b04 	subs.w	fp, sl, r4
 800df92:	d00b      	beq.n	800dfac <_vfiprintf_r+0xa4>
 800df94:	465b      	mov	r3, fp
 800df96:	4622      	mov	r2, r4
 800df98:	4629      	mov	r1, r5
 800df9a:	4630      	mov	r0, r6
 800df9c:	f7ff ffa2 	bl	800dee4 <__sfputs_r>
 800dfa0:	3001      	adds	r0, #1
 800dfa2:	f000 80a9 	beq.w	800e0f8 <_vfiprintf_r+0x1f0>
 800dfa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfa8:	445a      	add	r2, fp
 800dfaa:	9209      	str	r2, [sp, #36]	; 0x24
 800dfac:	f89a 3000 	ldrb.w	r3, [sl]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f000 80a1 	beq.w	800e0f8 <_vfiprintf_r+0x1f0>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfc0:	f10a 0a01 	add.w	sl, sl, #1
 800dfc4:	9304      	str	r3, [sp, #16]
 800dfc6:	9307      	str	r3, [sp, #28]
 800dfc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfcc:	931a      	str	r3, [sp, #104]	; 0x68
 800dfce:	4654      	mov	r4, sl
 800dfd0:	2205      	movs	r2, #5
 800dfd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd6:	4854      	ldr	r0, [pc, #336]	; (800e128 <_vfiprintf_r+0x220>)
 800dfd8:	f7fd fd1b 	bl	800ba12 <memchr>
 800dfdc:	9a04      	ldr	r2, [sp, #16]
 800dfde:	b9d8      	cbnz	r0, 800e018 <_vfiprintf_r+0x110>
 800dfe0:	06d1      	lsls	r1, r2, #27
 800dfe2:	bf44      	itt	mi
 800dfe4:	2320      	movmi	r3, #32
 800dfe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfea:	0713      	lsls	r3, r2, #28
 800dfec:	bf44      	itt	mi
 800dfee:	232b      	movmi	r3, #43	; 0x2b
 800dff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dff4:	f89a 3000 	ldrb.w	r3, [sl]
 800dff8:	2b2a      	cmp	r3, #42	; 0x2a
 800dffa:	d015      	beq.n	800e028 <_vfiprintf_r+0x120>
 800dffc:	4654      	mov	r4, sl
 800dffe:	2000      	movs	r0, #0
 800e000:	f04f 0c0a 	mov.w	ip, #10
 800e004:	9a07      	ldr	r2, [sp, #28]
 800e006:	4621      	mov	r1, r4
 800e008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e00c:	3b30      	subs	r3, #48	; 0x30
 800e00e:	2b09      	cmp	r3, #9
 800e010:	d94d      	bls.n	800e0ae <_vfiprintf_r+0x1a6>
 800e012:	b1b0      	cbz	r0, 800e042 <_vfiprintf_r+0x13a>
 800e014:	9207      	str	r2, [sp, #28]
 800e016:	e014      	b.n	800e042 <_vfiprintf_r+0x13a>
 800e018:	eba0 0308 	sub.w	r3, r0, r8
 800e01c:	fa09 f303 	lsl.w	r3, r9, r3
 800e020:	4313      	orrs	r3, r2
 800e022:	46a2      	mov	sl, r4
 800e024:	9304      	str	r3, [sp, #16]
 800e026:	e7d2      	b.n	800dfce <_vfiprintf_r+0xc6>
 800e028:	9b03      	ldr	r3, [sp, #12]
 800e02a:	1d19      	adds	r1, r3, #4
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	9103      	str	r1, [sp, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	bfbb      	ittet	lt
 800e034:	425b      	neglt	r3, r3
 800e036:	f042 0202 	orrlt.w	r2, r2, #2
 800e03a:	9307      	strge	r3, [sp, #28]
 800e03c:	9307      	strlt	r3, [sp, #28]
 800e03e:	bfb8      	it	lt
 800e040:	9204      	strlt	r2, [sp, #16]
 800e042:	7823      	ldrb	r3, [r4, #0]
 800e044:	2b2e      	cmp	r3, #46	; 0x2e
 800e046:	d10c      	bne.n	800e062 <_vfiprintf_r+0x15a>
 800e048:	7863      	ldrb	r3, [r4, #1]
 800e04a:	2b2a      	cmp	r3, #42	; 0x2a
 800e04c:	d134      	bne.n	800e0b8 <_vfiprintf_r+0x1b0>
 800e04e:	9b03      	ldr	r3, [sp, #12]
 800e050:	3402      	adds	r4, #2
 800e052:	1d1a      	adds	r2, r3, #4
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	9203      	str	r2, [sp, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bfb8      	it	lt
 800e05c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e060:	9305      	str	r3, [sp, #20]
 800e062:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e12c <_vfiprintf_r+0x224>
 800e066:	2203      	movs	r2, #3
 800e068:	4650      	mov	r0, sl
 800e06a:	7821      	ldrb	r1, [r4, #0]
 800e06c:	f7fd fcd1 	bl	800ba12 <memchr>
 800e070:	b138      	cbz	r0, 800e082 <_vfiprintf_r+0x17a>
 800e072:	2240      	movs	r2, #64	; 0x40
 800e074:	9b04      	ldr	r3, [sp, #16]
 800e076:	eba0 000a 	sub.w	r0, r0, sl
 800e07a:	4082      	lsls	r2, r0
 800e07c:	4313      	orrs	r3, r2
 800e07e:	3401      	adds	r4, #1
 800e080:	9304      	str	r3, [sp, #16]
 800e082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e086:	2206      	movs	r2, #6
 800e088:	4829      	ldr	r0, [pc, #164]	; (800e130 <_vfiprintf_r+0x228>)
 800e08a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e08e:	f7fd fcc0 	bl	800ba12 <memchr>
 800e092:	2800      	cmp	r0, #0
 800e094:	d03f      	beq.n	800e116 <_vfiprintf_r+0x20e>
 800e096:	4b27      	ldr	r3, [pc, #156]	; (800e134 <_vfiprintf_r+0x22c>)
 800e098:	bb1b      	cbnz	r3, 800e0e2 <_vfiprintf_r+0x1da>
 800e09a:	9b03      	ldr	r3, [sp, #12]
 800e09c:	3307      	adds	r3, #7
 800e09e:	f023 0307 	bic.w	r3, r3, #7
 800e0a2:	3308      	adds	r3, #8
 800e0a4:	9303      	str	r3, [sp, #12]
 800e0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0a8:	443b      	add	r3, r7
 800e0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ac:	e768      	b.n	800df80 <_vfiprintf_r+0x78>
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	2001      	movs	r0, #1
 800e0b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0b6:	e7a6      	b.n	800e006 <_vfiprintf_r+0xfe>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	f04f 0c0a 	mov.w	ip, #10
 800e0be:	4619      	mov	r1, r3
 800e0c0:	3401      	adds	r4, #1
 800e0c2:	9305      	str	r3, [sp, #20]
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ca:	3a30      	subs	r2, #48	; 0x30
 800e0cc:	2a09      	cmp	r2, #9
 800e0ce:	d903      	bls.n	800e0d8 <_vfiprintf_r+0x1d0>
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d0c6      	beq.n	800e062 <_vfiprintf_r+0x15a>
 800e0d4:	9105      	str	r1, [sp, #20]
 800e0d6:	e7c4      	b.n	800e062 <_vfiprintf_r+0x15a>
 800e0d8:	4604      	mov	r4, r0
 800e0da:	2301      	movs	r3, #1
 800e0dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0e0:	e7f0      	b.n	800e0c4 <_vfiprintf_r+0x1bc>
 800e0e2:	ab03      	add	r3, sp, #12
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	462a      	mov	r2, r5
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	4b13      	ldr	r3, [pc, #76]	; (800e138 <_vfiprintf_r+0x230>)
 800e0ec:	a904      	add	r1, sp, #16
 800e0ee:	f7fc ff17 	bl	800af20 <_printf_float>
 800e0f2:	4607      	mov	r7, r0
 800e0f4:	1c78      	adds	r0, r7, #1
 800e0f6:	d1d6      	bne.n	800e0a6 <_vfiprintf_r+0x19e>
 800e0f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0fa:	07d9      	lsls	r1, r3, #31
 800e0fc:	d405      	bmi.n	800e10a <_vfiprintf_r+0x202>
 800e0fe:	89ab      	ldrh	r3, [r5, #12]
 800e100:	059a      	lsls	r2, r3, #22
 800e102:	d402      	bmi.n	800e10a <_vfiprintf_r+0x202>
 800e104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e106:	f7fd fc83 	bl	800ba10 <__retarget_lock_release_recursive>
 800e10a:	89ab      	ldrh	r3, [r5, #12]
 800e10c:	065b      	lsls	r3, r3, #25
 800e10e:	f53f af1d 	bmi.w	800df4c <_vfiprintf_r+0x44>
 800e112:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e114:	e71c      	b.n	800df50 <_vfiprintf_r+0x48>
 800e116:	ab03      	add	r3, sp, #12
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	462a      	mov	r2, r5
 800e11c:	4630      	mov	r0, r6
 800e11e:	4b06      	ldr	r3, [pc, #24]	; (800e138 <_vfiprintf_r+0x230>)
 800e120:	a904      	add	r1, sp, #16
 800e122:	f7fd f99d 	bl	800b460 <_printf_i>
 800e126:	e7e4      	b.n	800e0f2 <_vfiprintf_r+0x1ea>
 800e128:	0800e885 	.word	0x0800e885
 800e12c:	0800e88b 	.word	0x0800e88b
 800e130:	0800e88f 	.word	0x0800e88f
 800e134:	0800af21 	.word	0x0800af21
 800e138:	0800dee5 	.word	0x0800dee5

0800e13c <__swbuf_r>:
 800e13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13e:	460e      	mov	r6, r1
 800e140:	4614      	mov	r4, r2
 800e142:	4605      	mov	r5, r0
 800e144:	b118      	cbz	r0, 800e14e <__swbuf_r+0x12>
 800e146:	6a03      	ldr	r3, [r0, #32]
 800e148:	b90b      	cbnz	r3, 800e14e <__swbuf_r+0x12>
 800e14a:	f7fd fb37 	bl	800b7bc <__sinit>
 800e14e:	69a3      	ldr	r3, [r4, #24]
 800e150:	60a3      	str	r3, [r4, #8]
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	071a      	lsls	r2, r3, #28
 800e156:	d525      	bpl.n	800e1a4 <__swbuf_r+0x68>
 800e158:	6923      	ldr	r3, [r4, #16]
 800e15a:	b31b      	cbz	r3, 800e1a4 <__swbuf_r+0x68>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	6922      	ldr	r2, [r4, #16]
 800e160:	b2f6      	uxtb	r6, r6
 800e162:	1a98      	subs	r0, r3, r2
 800e164:	6963      	ldr	r3, [r4, #20]
 800e166:	4637      	mov	r7, r6
 800e168:	4283      	cmp	r3, r0
 800e16a:	dc04      	bgt.n	800e176 <__swbuf_r+0x3a>
 800e16c:	4621      	mov	r1, r4
 800e16e:	4628      	mov	r0, r5
 800e170:	f7ff fdce 	bl	800dd10 <_fflush_r>
 800e174:	b9e0      	cbnz	r0, 800e1b0 <__swbuf_r+0x74>
 800e176:	68a3      	ldr	r3, [r4, #8]
 800e178:	3b01      	subs	r3, #1
 800e17a:	60a3      	str	r3, [r4, #8]
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	1c5a      	adds	r2, r3, #1
 800e180:	6022      	str	r2, [r4, #0]
 800e182:	701e      	strb	r6, [r3, #0]
 800e184:	6962      	ldr	r2, [r4, #20]
 800e186:	1c43      	adds	r3, r0, #1
 800e188:	429a      	cmp	r2, r3
 800e18a:	d004      	beq.n	800e196 <__swbuf_r+0x5a>
 800e18c:	89a3      	ldrh	r3, [r4, #12]
 800e18e:	07db      	lsls	r3, r3, #31
 800e190:	d506      	bpl.n	800e1a0 <__swbuf_r+0x64>
 800e192:	2e0a      	cmp	r6, #10
 800e194:	d104      	bne.n	800e1a0 <__swbuf_r+0x64>
 800e196:	4621      	mov	r1, r4
 800e198:	4628      	mov	r0, r5
 800e19a:	f7ff fdb9 	bl	800dd10 <_fflush_r>
 800e19e:	b938      	cbnz	r0, 800e1b0 <__swbuf_r+0x74>
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f000 f806 	bl	800e1b8 <__swsetup_r>
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d0d5      	beq.n	800e15c <__swbuf_r+0x20>
 800e1b0:	f04f 37ff 	mov.w	r7, #4294967295
 800e1b4:	e7f4      	b.n	800e1a0 <__swbuf_r+0x64>
	...

0800e1b8 <__swsetup_r>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	4b2a      	ldr	r3, [pc, #168]	; (800e264 <__swsetup_r+0xac>)
 800e1bc:	4605      	mov	r5, r0
 800e1be:	6818      	ldr	r0, [r3, #0]
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	b118      	cbz	r0, 800e1cc <__swsetup_r+0x14>
 800e1c4:	6a03      	ldr	r3, [r0, #32]
 800e1c6:	b90b      	cbnz	r3, 800e1cc <__swsetup_r+0x14>
 800e1c8:	f7fd faf8 	bl	800b7bc <__sinit>
 800e1cc:	89a3      	ldrh	r3, [r4, #12]
 800e1ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1d2:	0718      	lsls	r0, r3, #28
 800e1d4:	d422      	bmi.n	800e21c <__swsetup_r+0x64>
 800e1d6:	06d9      	lsls	r1, r3, #27
 800e1d8:	d407      	bmi.n	800e1ea <__swsetup_r+0x32>
 800e1da:	2309      	movs	r3, #9
 800e1dc:	602b      	str	r3, [r5, #0]
 800e1de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e6:	81a3      	strh	r3, [r4, #12]
 800e1e8:	e034      	b.n	800e254 <__swsetup_r+0x9c>
 800e1ea:	0758      	lsls	r0, r3, #29
 800e1ec:	d512      	bpl.n	800e214 <__swsetup_r+0x5c>
 800e1ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1f0:	b141      	cbz	r1, 800e204 <__swsetup_r+0x4c>
 800e1f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1f6:	4299      	cmp	r1, r3
 800e1f8:	d002      	beq.n	800e200 <__swsetup_r+0x48>
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f7fe fa9c 	bl	800c738 <_free_r>
 800e200:	2300      	movs	r3, #0
 800e202:	6363      	str	r3, [r4, #52]	; 0x34
 800e204:	89a3      	ldrh	r3, [r4, #12]
 800e206:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e20a:	81a3      	strh	r3, [r4, #12]
 800e20c:	2300      	movs	r3, #0
 800e20e:	6063      	str	r3, [r4, #4]
 800e210:	6923      	ldr	r3, [r4, #16]
 800e212:	6023      	str	r3, [r4, #0]
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	f043 0308 	orr.w	r3, r3, #8
 800e21a:	81a3      	strh	r3, [r4, #12]
 800e21c:	6923      	ldr	r3, [r4, #16]
 800e21e:	b94b      	cbnz	r3, 800e234 <__swsetup_r+0x7c>
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e22a:	d003      	beq.n	800e234 <__swsetup_r+0x7c>
 800e22c:	4621      	mov	r1, r4
 800e22e:	4628      	mov	r0, r5
 800e230:	f000 f883 	bl	800e33a <__smakebuf_r>
 800e234:	89a0      	ldrh	r0, [r4, #12]
 800e236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e23a:	f010 0301 	ands.w	r3, r0, #1
 800e23e:	d00a      	beq.n	800e256 <__swsetup_r+0x9e>
 800e240:	2300      	movs	r3, #0
 800e242:	60a3      	str	r3, [r4, #8]
 800e244:	6963      	ldr	r3, [r4, #20]
 800e246:	425b      	negs	r3, r3
 800e248:	61a3      	str	r3, [r4, #24]
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	b943      	cbnz	r3, 800e260 <__swsetup_r+0xa8>
 800e24e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e252:	d1c4      	bne.n	800e1de <__swsetup_r+0x26>
 800e254:	bd38      	pop	{r3, r4, r5, pc}
 800e256:	0781      	lsls	r1, r0, #30
 800e258:	bf58      	it	pl
 800e25a:	6963      	ldrpl	r3, [r4, #20]
 800e25c:	60a3      	str	r3, [r4, #8]
 800e25e:	e7f4      	b.n	800e24a <__swsetup_r+0x92>
 800e260:	2000      	movs	r0, #0
 800e262:	e7f7      	b.n	800e254 <__swsetup_r+0x9c>
 800e264:	20000274 	.word	0x20000274

0800e268 <_raise_r>:
 800e268:	291f      	cmp	r1, #31
 800e26a:	b538      	push	{r3, r4, r5, lr}
 800e26c:	4604      	mov	r4, r0
 800e26e:	460d      	mov	r5, r1
 800e270:	d904      	bls.n	800e27c <_raise_r+0x14>
 800e272:	2316      	movs	r3, #22
 800e274:	6003      	str	r3, [r0, #0]
 800e276:	f04f 30ff 	mov.w	r0, #4294967295
 800e27a:	bd38      	pop	{r3, r4, r5, pc}
 800e27c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e27e:	b112      	cbz	r2, 800e286 <_raise_r+0x1e>
 800e280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e284:	b94b      	cbnz	r3, 800e29a <_raise_r+0x32>
 800e286:	4620      	mov	r0, r4
 800e288:	f000 f830 	bl	800e2ec <_getpid_r>
 800e28c:	462a      	mov	r2, r5
 800e28e:	4601      	mov	r1, r0
 800e290:	4620      	mov	r0, r4
 800e292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e296:	f000 b817 	b.w	800e2c8 <_kill_r>
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d00a      	beq.n	800e2b4 <_raise_r+0x4c>
 800e29e:	1c59      	adds	r1, r3, #1
 800e2a0:	d103      	bne.n	800e2aa <_raise_r+0x42>
 800e2a2:	2316      	movs	r3, #22
 800e2a4:	6003      	str	r3, [r0, #0]
 800e2a6:	2001      	movs	r0, #1
 800e2a8:	e7e7      	b.n	800e27a <_raise_r+0x12>
 800e2aa:	2400      	movs	r4, #0
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2b2:	4798      	blx	r3
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	e7e0      	b.n	800e27a <_raise_r+0x12>

0800e2b8 <raise>:
 800e2b8:	4b02      	ldr	r3, [pc, #8]	; (800e2c4 <raise+0xc>)
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	6818      	ldr	r0, [r3, #0]
 800e2be:	f7ff bfd3 	b.w	800e268 <_raise_r>
 800e2c2:	bf00      	nop
 800e2c4:	20000274 	.word	0x20000274

0800e2c8 <_kill_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	4d06      	ldr	r5, [pc, #24]	; (800e2e8 <_kill_r+0x20>)
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	4608      	mov	r0, r1
 800e2d2:	4611      	mov	r1, r2
 800e2d4:	602b      	str	r3, [r5, #0]
 800e2d6:	f7f5 faa6 	bl	8003826 <_kill>
 800e2da:	1c43      	adds	r3, r0, #1
 800e2dc:	d102      	bne.n	800e2e4 <_kill_r+0x1c>
 800e2de:	682b      	ldr	r3, [r5, #0]
 800e2e0:	b103      	cbz	r3, 800e2e4 <_kill_r+0x1c>
 800e2e2:	6023      	str	r3, [r4, #0]
 800e2e4:	bd38      	pop	{r3, r4, r5, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20002544 	.word	0x20002544

0800e2ec <_getpid_r>:
 800e2ec:	f7f5 ba94 	b.w	8003818 <_getpid>

0800e2f0 <__swhatbuf_r>:
 800e2f0:	b570      	push	{r4, r5, r6, lr}
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	2900      	cmp	r1, #0
 800e2fc:	461e      	mov	r6, r3
 800e2fe:	b096      	sub	sp, #88	; 0x58
 800e300:	da0c      	bge.n	800e31c <__swhatbuf_r+0x2c>
 800e302:	89a3      	ldrh	r3, [r4, #12]
 800e304:	2100      	movs	r1, #0
 800e306:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e30a:	bf0c      	ite	eq
 800e30c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e310:	2340      	movne	r3, #64	; 0x40
 800e312:	2000      	movs	r0, #0
 800e314:	6031      	str	r1, [r6, #0]
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	b016      	add	sp, #88	; 0x58
 800e31a:	bd70      	pop	{r4, r5, r6, pc}
 800e31c:	466a      	mov	r2, sp
 800e31e:	f000 f849 	bl	800e3b4 <_fstat_r>
 800e322:	2800      	cmp	r0, #0
 800e324:	dbed      	blt.n	800e302 <__swhatbuf_r+0x12>
 800e326:	9901      	ldr	r1, [sp, #4]
 800e328:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e32c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e330:	4259      	negs	r1, r3
 800e332:	4159      	adcs	r1, r3
 800e334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e338:	e7eb      	b.n	800e312 <__swhatbuf_r+0x22>

0800e33a <__smakebuf_r>:
 800e33a:	898b      	ldrh	r3, [r1, #12]
 800e33c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e33e:	079d      	lsls	r5, r3, #30
 800e340:	4606      	mov	r6, r0
 800e342:	460c      	mov	r4, r1
 800e344:	d507      	bpl.n	800e356 <__smakebuf_r+0x1c>
 800e346:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e34a:	6023      	str	r3, [r4, #0]
 800e34c:	6123      	str	r3, [r4, #16]
 800e34e:	2301      	movs	r3, #1
 800e350:	6163      	str	r3, [r4, #20]
 800e352:	b002      	add	sp, #8
 800e354:	bd70      	pop	{r4, r5, r6, pc}
 800e356:	466a      	mov	r2, sp
 800e358:	ab01      	add	r3, sp, #4
 800e35a:	f7ff ffc9 	bl	800e2f0 <__swhatbuf_r>
 800e35e:	9900      	ldr	r1, [sp, #0]
 800e360:	4605      	mov	r5, r0
 800e362:	4630      	mov	r0, r6
 800e364:	f7fe fdb2 	bl	800cecc <_malloc_r>
 800e368:	b948      	cbnz	r0, 800e37e <__smakebuf_r+0x44>
 800e36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e36e:	059a      	lsls	r2, r3, #22
 800e370:	d4ef      	bmi.n	800e352 <__smakebuf_r+0x18>
 800e372:	f023 0303 	bic.w	r3, r3, #3
 800e376:	f043 0302 	orr.w	r3, r3, #2
 800e37a:	81a3      	strh	r3, [r4, #12]
 800e37c:	e7e3      	b.n	800e346 <__smakebuf_r+0xc>
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	6020      	str	r0, [r4, #0]
 800e382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e386:	81a3      	strh	r3, [r4, #12]
 800e388:	9b00      	ldr	r3, [sp, #0]
 800e38a:	6120      	str	r0, [r4, #16]
 800e38c:	6163      	str	r3, [r4, #20]
 800e38e:	9b01      	ldr	r3, [sp, #4]
 800e390:	b15b      	cbz	r3, 800e3aa <__smakebuf_r+0x70>
 800e392:	4630      	mov	r0, r6
 800e394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e398:	f000 f81e 	bl	800e3d8 <_isatty_r>
 800e39c:	b128      	cbz	r0, 800e3aa <__smakebuf_r+0x70>
 800e39e:	89a3      	ldrh	r3, [r4, #12]
 800e3a0:	f023 0303 	bic.w	r3, r3, #3
 800e3a4:	f043 0301 	orr.w	r3, r3, #1
 800e3a8:	81a3      	strh	r3, [r4, #12]
 800e3aa:	89a3      	ldrh	r3, [r4, #12]
 800e3ac:	431d      	orrs	r5, r3
 800e3ae:	81a5      	strh	r5, [r4, #12]
 800e3b0:	e7cf      	b.n	800e352 <__smakebuf_r+0x18>
	...

0800e3b4 <_fstat_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	4d06      	ldr	r5, [pc, #24]	; (800e3d4 <_fstat_r+0x20>)
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	4608      	mov	r0, r1
 800e3be:	4611      	mov	r1, r2
 800e3c0:	602b      	str	r3, [r5, #0]
 800e3c2:	f7f5 fa8e 	bl	80038e2 <_fstat>
 800e3c6:	1c43      	adds	r3, r0, #1
 800e3c8:	d102      	bne.n	800e3d0 <_fstat_r+0x1c>
 800e3ca:	682b      	ldr	r3, [r5, #0]
 800e3cc:	b103      	cbz	r3, 800e3d0 <_fstat_r+0x1c>
 800e3ce:	6023      	str	r3, [r4, #0]
 800e3d0:	bd38      	pop	{r3, r4, r5, pc}
 800e3d2:	bf00      	nop
 800e3d4:	20002544 	.word	0x20002544

0800e3d8 <_isatty_r>:
 800e3d8:	b538      	push	{r3, r4, r5, lr}
 800e3da:	2300      	movs	r3, #0
 800e3dc:	4d05      	ldr	r5, [pc, #20]	; (800e3f4 <_isatty_r+0x1c>)
 800e3de:	4604      	mov	r4, r0
 800e3e0:	4608      	mov	r0, r1
 800e3e2:	602b      	str	r3, [r5, #0]
 800e3e4:	f7f5 fa8c 	bl	8003900 <_isatty>
 800e3e8:	1c43      	adds	r3, r0, #1
 800e3ea:	d102      	bne.n	800e3f2 <_isatty_r+0x1a>
 800e3ec:	682b      	ldr	r3, [r5, #0]
 800e3ee:	b103      	cbz	r3, 800e3f2 <_isatty_r+0x1a>
 800e3f0:	6023      	str	r3, [r4, #0]
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}
 800e3f4:	20002544 	.word	0x20002544

0800e3f8 <_init>:
 800e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fa:	bf00      	nop
 800e3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3fe:	bc08      	pop	{r3}
 800e400:	469e      	mov	lr, r3
 800e402:	4770      	bx	lr

0800e404 <_fini>:
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e406:	bf00      	nop
 800e408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40a:	bc08      	pop	{r3}
 800e40c:	469e      	mov	lr, r3
 800e40e:	4770      	bx	lr
