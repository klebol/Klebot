
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e370  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800e560  0800e560  0001e560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea24  0800ea24  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea24  0800ea24  0001ea24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea2c  0800ea2c  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea2c  0800ea2c  0001ea2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea30  0800ea30  0001ea30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800ea34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002304  20000278  0800ecac  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  2000257c  0800ecac  0002257c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002165e  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005acd  00000000  00000000  00041942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  00047410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001793  00000000  00000000  000492c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025974  00000000  00000000  0004aa5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002907b  00000000  00000000  000703cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc291  00000000  00000000  0009944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009270  00000000  00000000  001656dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0016e94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000278 	.word	0x20000278
 800020c:	00000000 	.word	0x00000000
 8000210:	0800e548 	.word	0x0800e548

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000027c 	.word	0x2000027c
 800022c:	0800e548 	.word	0x0800e548

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_fmul>:
 8000e64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e6c:	bf1e      	ittt	ne
 8000e6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e72:	ea92 0f0c 	teqne	r2, ip
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d06f      	beq.n	8000f5c <__aeabi_fmul+0xf8>
 8000e7c:	441a      	add	r2, r3
 8000e7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e82:	0240      	lsls	r0, r0, #9
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e8a:	d01e      	beq.n	8000eca <__aeabi_fmul+0x66>
 8000e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e98:	fba0 3101 	umull	r3, r1, r0, r1
 8000e9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ea4:	bf3e      	ittt	cc
 8000ea6:	0049      	lslcc	r1, r1, #1
 8000ea8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	ea40 0001 	orr.w	r0, r0, r1
 8000eb2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eb6:	2afd      	cmp	r2, #253	; 0xfd
 8000eb8:	d81d      	bhi.n	8000ef6 <__aeabi_fmul+0x92>
 8000eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ebe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec2:	bf08      	it	eq
 8000ec4:	f020 0001 	biceq.w	r0, r0, #1
 8000ec8:	4770      	bx	lr
 8000eca:	f090 0f00 	teq	r0, #0
 8000ece:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed2:	bf08      	it	eq
 8000ed4:	0249      	lsleq	r1, r1, #9
 8000ed6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ede:	3a7f      	subs	r2, #127	; 0x7f
 8000ee0:	bfc2      	ittt	gt
 8000ee2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eea:	4770      	bxgt	lr
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	dc5d      	bgt.n	8000fb4 <__aeabi_fmul+0x150>
 8000ef8:	f112 0f19 	cmn.w	r2, #25
 8000efc:	bfdc      	itt	le
 8000efe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f02:	4770      	bxle	lr
 8000f04:	f1c2 0200 	rsb	r2, r2, #0
 8000f08:	0041      	lsls	r1, r0, #1
 8000f0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f0e:	f1c2 0220 	rsb	r2, r2, #32
 8000f12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f1a:	f140 0000 	adc.w	r0, r0, #0
 8000f1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f22:	bf08      	it	eq
 8000f24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f28:	4770      	bx	lr
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fmul+0xce>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fmul+0xe6>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fmul+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	bf18      	it	ne
 8000f66:	ea93 0f0c 	teqne	r3, ip
 8000f6a:	d00a      	beq.n	8000f82 <__aeabi_fmul+0x11e>
 8000f6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f70:	bf18      	it	ne
 8000f72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	d1d8      	bne.n	8000f2a <__aeabi_fmul+0xc6>
 8000f78:	ea80 0001 	eor.w	r0, r0, r1
 8000f7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f80:	4770      	bx	lr
 8000f82:	f090 0f00 	teq	r0, #0
 8000f86:	bf17      	itett	ne
 8000f88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f8c:	4608      	moveq	r0, r1
 8000f8e:	f091 0f00 	teqne	r1, #0
 8000f92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f96:	d014      	beq.n	8000fc2 <__aeabi_fmul+0x15e>
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_fmul+0x13e>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d10f      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fa2:	ea93 0f0c 	teq	r3, ip
 8000fa6:	d103      	bne.n	8000fb0 <__aeabi_fmul+0x14c>
 8000fa8:	024b      	lsls	r3, r1, #9
 8000faa:	bf18      	it	ne
 8000fac:	4608      	movne	r0, r1
 8000fae:	d108      	bne.n	8000fc2 <__aeabi_fmul+0x15e>
 8000fb0:	ea80 0001 	eor.w	r0, r0, r1
 8000fb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fc0:	4770      	bx	lr
 8000fc2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fc6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fca:	4770      	bx	lr

08000fcc <__aeabi_fdiv>:
 8000fcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fd4:	bf1e      	ittt	ne
 8000fd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fda:	ea92 0f0c 	teqne	r2, ip
 8000fde:	ea93 0f0c 	teqne	r3, ip
 8000fe2:	d069      	beq.n	80010b8 <__aeabi_fdiv+0xec>
 8000fe4:	eba2 0203 	sub.w	r2, r2, r3
 8000fe8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fec:	0249      	lsls	r1, r1, #9
 8000fee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ff2:	d037      	beq.n	8001064 <__aeabi_fdiv+0x98>
 8000ff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ffc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001000:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001004:	428b      	cmp	r3, r1
 8001006:	bf38      	it	cc
 8001008:	005b      	lslcc	r3, r3, #1
 800100a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800100e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001012:	428b      	cmp	r3, r1
 8001014:	bf24      	itt	cs
 8001016:	1a5b      	subcs	r3, r3, r1
 8001018:	ea40 000c 	orrcs.w	r0, r0, ip
 800101c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001020:	bf24      	itt	cs
 8001022:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001026:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800102a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800102e:	bf24      	itt	cs
 8001030:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001034:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001038:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800103c:	bf24      	itt	cs
 800103e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001042:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	bf18      	it	ne
 800104a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800104e:	d1e0      	bne.n	8001012 <__aeabi_fdiv+0x46>
 8001050:	2afd      	cmp	r2, #253	; 0xfd
 8001052:	f63f af50 	bhi.w	8000ef6 <__aeabi_fmul+0x92>
 8001056:	428b      	cmp	r3, r1
 8001058:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800105c:	bf08      	it	eq
 800105e:	f020 0001 	biceq.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001068:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800106c:	327f      	adds	r2, #127	; 0x7f
 800106e:	bfc2      	ittt	gt
 8001070:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001074:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001078:	4770      	bxgt	lr
 800107a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	3a01      	subs	r2, #1
 8001084:	e737      	b.n	8000ef6 <__aeabi_fmul+0x92>
 8001086:	f092 0f00 	teq	r2, #0
 800108a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800108e:	bf02      	ittt	eq
 8001090:	0040      	lsleq	r0, r0, #1
 8001092:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001096:	3a01      	subeq	r2, #1
 8001098:	d0f9      	beq.n	800108e <__aeabi_fdiv+0xc2>
 800109a:	ea40 000c 	orr.w	r0, r0, ip
 800109e:	f093 0f00 	teq	r3, #0
 80010a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	bf02      	ittt	eq
 80010a8:	0049      	lsleq	r1, r1, #1
 80010aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010ae:	3b01      	subeq	r3, #1
 80010b0:	d0f9      	beq.n	80010a6 <__aeabi_fdiv+0xda>
 80010b2:	ea41 010c 	orr.w	r1, r1, ip
 80010b6:	e795      	b.n	8000fe4 <__aeabi_fdiv+0x18>
 80010b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010bc:	ea92 0f0c 	teq	r2, ip
 80010c0:	d108      	bne.n	80010d4 <__aeabi_fdiv+0x108>
 80010c2:	0242      	lsls	r2, r0, #9
 80010c4:	f47f af7d 	bne.w	8000fc2 <__aeabi_fmul+0x15e>
 80010c8:	ea93 0f0c 	teq	r3, ip
 80010cc:	f47f af70 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e776      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010d4:	ea93 0f0c 	teq	r3, ip
 80010d8:	d104      	bne.n	80010e4 <__aeabi_fdiv+0x118>
 80010da:	024b      	lsls	r3, r1, #9
 80010dc:	f43f af4c 	beq.w	8000f78 <__aeabi_fmul+0x114>
 80010e0:	4608      	mov	r0, r1
 80010e2:	e76e      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 80010e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e8:	bf18      	it	ne
 80010ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010ee:	d1ca      	bne.n	8001086 <__aeabi_fdiv+0xba>
 80010f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010f4:	f47f af5c 	bne.w	8000fb0 <__aeabi_fmul+0x14c>
 80010f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010fc:	f47f af3c 	bne.w	8000f78 <__aeabi_fmul+0x114>
 8001100:	e75f      	b.n	8000fc2 <__aeabi_fmul+0x15e>
 8001102:	bf00      	nop

08001104 <__gesf2>:
 8001104:	f04f 3cff 	mov.w	ip, #4294967295
 8001108:	e006      	b.n	8001118 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__lesf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	e002      	b.n	8001118 <__cmpsf2+0x4>
 8001112:	bf00      	nop

08001114 <__cmpsf2>:
 8001114:	f04f 0c01 	mov.w	ip, #1
 8001118:	f84d cd04 	str.w	ip, [sp, #-4]!
 800111c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001120:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001124:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001128:	bf18      	it	ne
 800112a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800112e:	d011      	beq.n	8001154 <__cmpsf2+0x40>
 8001130:	b001      	add	sp, #4
 8001132:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001136:	bf18      	it	ne
 8001138:	ea90 0f01 	teqne	r0, r1
 800113c:	bf58      	it	pl
 800113e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001142:	bf88      	it	hi
 8001144:	17c8      	asrhi	r0, r1, #31
 8001146:	bf38      	it	cc
 8001148:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800114c:	bf18      	it	ne
 800114e:	f040 0001 	orrne.w	r0, r0, #1
 8001152:	4770      	bx	lr
 8001154:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001158:	d102      	bne.n	8001160 <__cmpsf2+0x4c>
 800115a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800115e:	d105      	bne.n	800116c <__cmpsf2+0x58>
 8001160:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001164:	d1e4      	bne.n	8001130 <__cmpsf2+0x1c>
 8001166:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800116a:	d0e1      	beq.n	8001130 <__cmpsf2+0x1c>
 800116c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <__aeabi_cfrcmple>:
 8001174:	4684      	mov	ip, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4661      	mov	r1, ip
 800117a:	e7ff      	b.n	800117c <__aeabi_cfcmpeq>

0800117c <__aeabi_cfcmpeq>:
 800117c:	b50f      	push	{r0, r1, r2, r3, lr}
 800117e:	f7ff ffc9 	bl	8001114 <__cmpsf2>
 8001182:	2800      	cmp	r0, #0
 8001184:	bf48      	it	mi
 8001186:	f110 0f00 	cmnmi.w	r0, #0
 800118a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800118c <__aeabi_fcmpeq>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff fff4 	bl	800117c <__aeabi_cfcmpeq>
 8001194:	bf0c      	ite	eq
 8001196:	2001      	moveq	r0, #1
 8001198:	2000      	movne	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmplt>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff ffea 	bl	800117c <__aeabi_cfcmpeq>
 80011a8:	bf34      	ite	cc
 80011aa:	2001      	movcc	r0, #1
 80011ac:	2000      	movcs	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmple>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffe0 	bl	800117c <__aeabi_cfcmpeq>
 80011bc:	bf94      	ite	ls
 80011be:	2001      	movls	r0, #1
 80011c0:	2000      	movhi	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmpge>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffd2 	bl	8001174 <__aeabi_cfrcmple>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpgt>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffc8 	bl	8001174 <__aeabi_cfrcmple>
 80011e4:	bf34      	ite	cc
 80011e6:	2001      	movcc	r0, #1
 80011e8:	2000      	movcs	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_f2iz>:
 80011f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f8:	d30f      	bcc.n	800121a <__aeabi_f2iz+0x2a>
 80011fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001202:	d90d      	bls.n	8001220 <__aeabi_f2iz+0x30>
 8001204:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800120c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001210:	fa23 f002 	lsr.w	r0, r3, r2
 8001214:	bf18      	it	ne
 8001216:	4240      	negne	r0, r0
 8001218:	4770      	bx	lr
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	4770      	bx	lr
 8001220:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001224:	d101      	bne.n	800122a <__aeabi_f2iz+0x3a>
 8001226:	0242      	lsls	r2, r0, #9
 8001228:	d105      	bne.n	8001236 <__aeabi_f2iz+0x46>
 800122a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800122e:	bf08      	it	eq
 8001230:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001234:	4770      	bx	lr
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	4770      	bx	lr

0800123c <__aeabi_uldivmod>:
 800123c:	b953      	cbnz	r3, 8001254 <__aeabi_uldivmod+0x18>
 800123e:	b94a      	cbnz	r2, 8001254 <__aeabi_uldivmod+0x18>
 8001240:	2900      	cmp	r1, #0
 8001242:	bf08      	it	eq
 8001244:	2800      	cmpeq	r0, #0
 8001246:	bf1c      	itt	ne
 8001248:	f04f 31ff 	movne.w	r1, #4294967295
 800124c:	f04f 30ff 	movne.w	r0, #4294967295
 8001250:	f000 b9aa 	b.w	80015a8 <__aeabi_idiv0>
 8001254:	f1ad 0c08 	sub.w	ip, sp, #8
 8001258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800125c:	f000 f83e 	bl	80012dc <__udivmoddi4>
 8001260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001268:	b004      	add	sp, #16
 800126a:	4770      	bx	lr

0800126c <__aeabi_d2lz>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4605      	mov	r5, r0
 8001270:	460c      	mov	r4, r1
 8001272:	2200      	movs	r2, #0
 8001274:	2300      	movs	r3, #0
 8001276:	4628      	mov	r0, r5
 8001278:	4621      	mov	r1, r4
 800127a:	f7ff fc0f 	bl	8000a9c <__aeabi_dcmplt>
 800127e:	b928      	cbnz	r0, 800128c <__aeabi_d2lz+0x20>
 8001280:	4628      	mov	r0, r5
 8001282:	4621      	mov	r1, r4
 8001284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001288:	f000 b80a 	b.w	80012a0 <__aeabi_d2ulz>
 800128c:	4628      	mov	r0, r5
 800128e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001292:	f000 f805 	bl	80012a0 <__aeabi_d2ulz>
 8001296:	4240      	negs	r0, r0
 8001298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800129c:	bd38      	pop	{r3, r4, r5, pc}
 800129e:	bf00      	nop

080012a0 <__aeabi_d2ulz>:
 80012a0:	b5d0      	push	{r4, r6, r7, lr}
 80012a2:	2200      	movs	r2, #0
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <__aeabi_d2ulz+0x34>)
 80012a6:	4606      	mov	r6, r0
 80012a8:	460f      	mov	r7, r1
 80012aa:	f7ff f985 	bl	80005b8 <__aeabi_dmul>
 80012ae:	f7ff fc5b 	bl	8000b68 <__aeabi_d2uiz>
 80012b2:	4604      	mov	r4, r0
 80012b4:	f7ff f906 	bl	80004c4 <__aeabi_ui2d>
 80012b8:	2200      	movs	r2, #0
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <__aeabi_d2ulz+0x38>)
 80012bc:	f7ff f97c 	bl	80005b8 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4630      	mov	r0, r6
 80012c6:	4639      	mov	r1, r7
 80012c8:	f7fe ffbe 	bl	8000248 <__aeabi_dsub>
 80012cc:	f7ff fc4c 	bl	8000b68 <__aeabi_d2uiz>
 80012d0:	4621      	mov	r1, r4
 80012d2:	bdd0      	pop	{r4, r6, r7, pc}
 80012d4:	3df00000 	.word	0x3df00000
 80012d8:	41f00000 	.word	0x41f00000

080012dc <__udivmoddi4>:
 80012dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e0:	9e08      	ldr	r6, [sp, #32]
 80012e2:	460d      	mov	r5, r1
 80012e4:	4604      	mov	r4, r0
 80012e6:	468e      	mov	lr, r1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d14c      	bne.n	8001386 <__udivmoddi4+0xaa>
 80012ec:	428a      	cmp	r2, r1
 80012ee:	4694      	mov	ip, r2
 80012f0:	d967      	bls.n	80013c2 <__udivmoddi4+0xe6>
 80012f2:	fab2 f382 	clz	r3, r2
 80012f6:	b153      	cbz	r3, 800130e <__udivmoddi4+0x32>
 80012f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80012fc:	f1c3 0220 	rsb	r2, r3, #32
 8001300:	fa01 fe03 	lsl.w	lr, r1, r3
 8001304:	fa20 f202 	lsr.w	r2, r0, r2
 8001308:	ea42 0e0e 	orr.w	lr, r2, lr
 800130c:	409c      	lsls	r4, r3
 800130e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001312:	fbbe f1f7 	udiv	r1, lr, r7
 8001316:	fa1f f58c 	uxth.w	r5, ip
 800131a:	fb07 ee11 	mls	lr, r7, r1, lr
 800131e:	fb01 f005 	mul.w	r0, r1, r5
 8001322:	0c22      	lsrs	r2, r4, #16
 8001324:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001328:	4290      	cmp	r0, r2
 800132a:	d90a      	bls.n	8001342 <__udivmoddi4+0x66>
 800132c:	eb1c 0202 	adds.w	r2, ip, r2
 8001330:	f101 3eff 	add.w	lr, r1, #4294967295
 8001334:	f080 8119 	bcs.w	800156a <__udivmoddi4+0x28e>
 8001338:	4290      	cmp	r0, r2
 800133a:	f240 8116 	bls.w	800156a <__udivmoddi4+0x28e>
 800133e:	3902      	subs	r1, #2
 8001340:	4462      	add	r2, ip
 8001342:	1a12      	subs	r2, r2, r0
 8001344:	fbb2 f0f7 	udiv	r0, r2, r7
 8001348:	fb07 2210 	mls	r2, r7, r0, r2
 800134c:	fb00 f505 	mul.w	r5, r0, r5
 8001350:	b2a4      	uxth	r4, r4
 8001352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001356:	42a5      	cmp	r5, r4
 8001358:	d90a      	bls.n	8001370 <__udivmoddi4+0x94>
 800135a:	eb1c 0404 	adds.w	r4, ip, r4
 800135e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001362:	f080 8104 	bcs.w	800156e <__udivmoddi4+0x292>
 8001366:	42a5      	cmp	r5, r4
 8001368:	f240 8101 	bls.w	800156e <__udivmoddi4+0x292>
 800136c:	4464      	add	r4, ip
 800136e:	3802      	subs	r0, #2
 8001370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001374:	2100      	movs	r1, #0
 8001376:	1b64      	subs	r4, r4, r5
 8001378:	b11e      	cbz	r6, 8001382 <__udivmoddi4+0xa6>
 800137a:	40dc      	lsrs	r4, r3
 800137c:	2300      	movs	r3, #0
 800137e:	e9c6 4300 	strd	r4, r3, [r6]
 8001382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001386:	428b      	cmp	r3, r1
 8001388:	d908      	bls.n	800139c <__udivmoddi4+0xc0>
 800138a:	2e00      	cmp	r6, #0
 800138c:	f000 80ea 	beq.w	8001564 <__udivmoddi4+0x288>
 8001390:	2100      	movs	r1, #0
 8001392:	e9c6 0500 	strd	r0, r5, [r6]
 8001396:	4608      	mov	r0, r1
 8001398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139c:	fab3 f183 	clz	r1, r3
 80013a0:	2900      	cmp	r1, #0
 80013a2:	d148      	bne.n	8001436 <__udivmoddi4+0x15a>
 80013a4:	42ab      	cmp	r3, r5
 80013a6:	d302      	bcc.n	80013ae <__udivmoddi4+0xd2>
 80013a8:	4282      	cmp	r2, r0
 80013aa:	f200 80f8 	bhi.w	800159e <__udivmoddi4+0x2c2>
 80013ae:	1a84      	subs	r4, r0, r2
 80013b0:	eb65 0203 	sbc.w	r2, r5, r3
 80013b4:	2001      	movs	r0, #1
 80013b6:	4696      	mov	lr, r2
 80013b8:	2e00      	cmp	r6, #0
 80013ba:	d0e2      	beq.n	8001382 <__udivmoddi4+0xa6>
 80013bc:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c0:	e7df      	b.n	8001382 <__udivmoddi4+0xa6>
 80013c2:	b902      	cbnz	r2, 80013c6 <__udivmoddi4+0xea>
 80013c4:	deff      	udf	#255	; 0xff
 80013c6:	fab2 f382 	clz	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 808e 	bne.w	80014ec <__udivmoddi4+0x210>
 80013d0:	1a88      	subs	r0, r1, r2
 80013d2:	2101      	movs	r1, #1
 80013d4:	0c17      	lsrs	r7, r2, #16
 80013d6:	fa1f fe82 	uxth.w	lr, r2
 80013da:	fbb0 f5f7 	udiv	r5, r0, r7
 80013de:	fb07 0015 	mls	r0, r7, r5, r0
 80013e2:	0c22      	lsrs	r2, r4, #16
 80013e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80013e8:	fb0e f005 	mul.w	r0, lr, r5
 80013ec:	4290      	cmp	r0, r2
 80013ee:	d908      	bls.n	8001402 <__udivmoddi4+0x126>
 80013f0:	eb1c 0202 	adds.w	r2, ip, r2
 80013f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80013f8:	d202      	bcs.n	8001400 <__udivmoddi4+0x124>
 80013fa:	4290      	cmp	r0, r2
 80013fc:	f200 80cc 	bhi.w	8001598 <__udivmoddi4+0x2bc>
 8001400:	4645      	mov	r5, r8
 8001402:	1a12      	subs	r2, r2, r0
 8001404:	fbb2 f0f7 	udiv	r0, r2, r7
 8001408:	fb07 2210 	mls	r2, r7, r0, r2
 800140c:	fb0e fe00 	mul.w	lr, lr, r0
 8001410:	b2a4      	uxth	r4, r4
 8001412:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001416:	45a6      	cmp	lr, r4
 8001418:	d908      	bls.n	800142c <__udivmoddi4+0x150>
 800141a:	eb1c 0404 	adds.w	r4, ip, r4
 800141e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001422:	d202      	bcs.n	800142a <__udivmoddi4+0x14e>
 8001424:	45a6      	cmp	lr, r4
 8001426:	f200 80b4 	bhi.w	8001592 <__udivmoddi4+0x2b6>
 800142a:	4610      	mov	r0, r2
 800142c:	eba4 040e 	sub.w	r4, r4, lr
 8001430:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001434:	e7a0      	b.n	8001378 <__udivmoddi4+0x9c>
 8001436:	f1c1 0720 	rsb	r7, r1, #32
 800143a:	408b      	lsls	r3, r1
 800143c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001440:	ea4c 0c03 	orr.w	ip, ip, r3
 8001444:	fa25 fa07 	lsr.w	sl, r5, r7
 8001448:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800144c:	fbba f8f9 	udiv	r8, sl, r9
 8001450:	408d      	lsls	r5, r1
 8001452:	fa20 f307 	lsr.w	r3, r0, r7
 8001456:	fb09 aa18 	mls	sl, r9, r8, sl
 800145a:	fa1f fe8c 	uxth.w	lr, ip
 800145e:	432b      	orrs	r3, r5
 8001460:	fa00 f501 	lsl.w	r5, r0, r1
 8001464:	fb08 f00e 	mul.w	r0, r8, lr
 8001468:	0c1c      	lsrs	r4, r3, #16
 800146a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800146e:	42a0      	cmp	r0, r4
 8001470:	fa02 f201 	lsl.w	r2, r2, r1
 8001474:	d90b      	bls.n	800148e <__udivmoddi4+0x1b2>
 8001476:	eb1c 0404 	adds.w	r4, ip, r4
 800147a:	f108 3aff 	add.w	sl, r8, #4294967295
 800147e:	f080 8086 	bcs.w	800158e <__udivmoddi4+0x2b2>
 8001482:	42a0      	cmp	r0, r4
 8001484:	f240 8083 	bls.w	800158e <__udivmoddi4+0x2b2>
 8001488:	f1a8 0802 	sub.w	r8, r8, #2
 800148c:	4464      	add	r4, ip
 800148e:	1a24      	subs	r4, r4, r0
 8001490:	b298      	uxth	r0, r3
 8001492:	fbb4 f3f9 	udiv	r3, r4, r9
 8001496:	fb09 4413 	mls	r4, r9, r3, r4
 800149a:	fb03 fe0e 	mul.w	lr, r3, lr
 800149e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80014a2:	45a6      	cmp	lr, r4
 80014a4:	d908      	bls.n	80014b8 <__udivmoddi4+0x1dc>
 80014a6:	eb1c 0404 	adds.w	r4, ip, r4
 80014aa:	f103 30ff 	add.w	r0, r3, #4294967295
 80014ae:	d26a      	bcs.n	8001586 <__udivmoddi4+0x2aa>
 80014b0:	45a6      	cmp	lr, r4
 80014b2:	d968      	bls.n	8001586 <__udivmoddi4+0x2aa>
 80014b4:	3b02      	subs	r3, #2
 80014b6:	4464      	add	r4, ip
 80014b8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80014bc:	fba0 9302 	umull	r9, r3, r0, r2
 80014c0:	eba4 040e 	sub.w	r4, r4, lr
 80014c4:	429c      	cmp	r4, r3
 80014c6:	46c8      	mov	r8, r9
 80014c8:	469e      	mov	lr, r3
 80014ca:	d354      	bcc.n	8001576 <__udivmoddi4+0x29a>
 80014cc:	d051      	beq.n	8001572 <__udivmoddi4+0x296>
 80014ce:	2e00      	cmp	r6, #0
 80014d0:	d067      	beq.n	80015a2 <__udivmoddi4+0x2c6>
 80014d2:	ebb5 0308 	subs.w	r3, r5, r8
 80014d6:	eb64 040e 	sbc.w	r4, r4, lr
 80014da:	40cb      	lsrs	r3, r1
 80014dc:	fa04 f707 	lsl.w	r7, r4, r7
 80014e0:	431f      	orrs	r7, r3
 80014e2:	40cc      	lsrs	r4, r1
 80014e4:	e9c6 7400 	strd	r7, r4, [r6]
 80014e8:	2100      	movs	r1, #0
 80014ea:	e74a      	b.n	8001382 <__udivmoddi4+0xa6>
 80014ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80014f0:	f1c3 0020 	rsb	r0, r3, #32
 80014f4:	40c1      	lsrs	r1, r0
 80014f6:	409d      	lsls	r5, r3
 80014f8:	fa24 f000 	lsr.w	r0, r4, r0
 80014fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001500:	4328      	orrs	r0, r5
 8001502:	fbb1 f5f7 	udiv	r5, r1, r7
 8001506:	fb07 1115 	mls	r1, r7, r5, r1
 800150a:	fa1f fe8c 	uxth.w	lr, ip
 800150e:	0c02      	lsrs	r2, r0, #16
 8001510:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001514:	fb05 f10e 	mul.w	r1, r5, lr
 8001518:	4291      	cmp	r1, r2
 800151a:	fa04 f403 	lsl.w	r4, r4, r3
 800151e:	d908      	bls.n	8001532 <__udivmoddi4+0x256>
 8001520:	eb1c 0202 	adds.w	r2, ip, r2
 8001524:	f105 38ff 	add.w	r8, r5, #4294967295
 8001528:	d22f      	bcs.n	800158a <__udivmoddi4+0x2ae>
 800152a:	4291      	cmp	r1, r2
 800152c:	d92d      	bls.n	800158a <__udivmoddi4+0x2ae>
 800152e:	3d02      	subs	r5, #2
 8001530:	4462      	add	r2, ip
 8001532:	1a52      	subs	r2, r2, r1
 8001534:	fbb2 f1f7 	udiv	r1, r2, r7
 8001538:	fb07 2211 	mls	r2, r7, r1, r2
 800153c:	b280      	uxth	r0, r0
 800153e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001542:	fb01 f20e 	mul.w	r2, r1, lr
 8001546:	4282      	cmp	r2, r0
 8001548:	d908      	bls.n	800155c <__udivmoddi4+0x280>
 800154a:	eb1c 0000 	adds.w	r0, ip, r0
 800154e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001552:	d216      	bcs.n	8001582 <__udivmoddi4+0x2a6>
 8001554:	4282      	cmp	r2, r0
 8001556:	d914      	bls.n	8001582 <__udivmoddi4+0x2a6>
 8001558:	3902      	subs	r1, #2
 800155a:	4460      	add	r0, ip
 800155c:	1a80      	subs	r0, r0, r2
 800155e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001562:	e73a      	b.n	80013da <__udivmoddi4+0xfe>
 8001564:	4631      	mov	r1, r6
 8001566:	4630      	mov	r0, r6
 8001568:	e70b      	b.n	8001382 <__udivmoddi4+0xa6>
 800156a:	4671      	mov	r1, lr
 800156c:	e6e9      	b.n	8001342 <__udivmoddi4+0x66>
 800156e:	4610      	mov	r0, r2
 8001570:	e6fe      	b.n	8001370 <__udivmoddi4+0x94>
 8001572:	454d      	cmp	r5, r9
 8001574:	d2ab      	bcs.n	80014ce <__udivmoddi4+0x1f2>
 8001576:	ebb9 0802 	subs.w	r8, r9, r2
 800157a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800157e:	3801      	subs	r0, #1
 8001580:	e7a5      	b.n	80014ce <__udivmoddi4+0x1f2>
 8001582:	4641      	mov	r1, r8
 8001584:	e7ea      	b.n	800155c <__udivmoddi4+0x280>
 8001586:	4603      	mov	r3, r0
 8001588:	e796      	b.n	80014b8 <__udivmoddi4+0x1dc>
 800158a:	4645      	mov	r5, r8
 800158c:	e7d1      	b.n	8001532 <__udivmoddi4+0x256>
 800158e:	46d0      	mov	r8, sl
 8001590:	e77d      	b.n	800148e <__udivmoddi4+0x1b2>
 8001592:	4464      	add	r4, ip
 8001594:	3802      	subs	r0, #2
 8001596:	e749      	b.n	800142c <__udivmoddi4+0x150>
 8001598:	3d02      	subs	r5, #2
 800159a:	4462      	add	r2, ip
 800159c:	e731      	b.n	8001402 <__udivmoddi4+0x126>
 800159e:	4608      	mov	r0, r1
 80015a0:	e70a      	b.n	80013b8 <__udivmoddi4+0xdc>
 80015a2:	4631      	mov	r1, r6
 80015a4:	e6ed      	b.n	8001382 <__udivmoddi4+0xa6>
 80015a6:	bf00      	nop

080015a8 <__aeabi_idiv0>:
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop

080015ac <FIRFilter_Init>:




void FIRFilter_Init(FIRFilter *fir)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e008      	b.n	80015cc <FIRFilter_Init+0x20>
	{
		fir->buf[n] = 0.0f;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b18      	cmp	r3, #24
 80015d0:	d9f3      	bls.n	80015ba <FIRFilter_Init+0xe>
	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	/* Clear filter output */
	fir->out = 0.0f;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80015fc:	4619      	mov	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800160c:	3301      	adds	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	if(fir->bufIndex == FIR_FILTER_LENGTH)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800161c:	2b19      	cmp	r3, #25
 800161e:	d103      	bne.n	8001628 <FIRFilter_Update+0x3c>
	{
		fir->bufIndex = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	}

	/* Compute new output sample (via convulation) */
	fir->out = 0.0f;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	669a      	str	r2, [r3, #104]	; 0x68

	uint8_t sumIndex = fir->bufIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001636:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 8001638:	2300      	movs	r3, #0
 800163a:	73bb      	strb	r3, [r7, #14]
 800163c:	e021      	b.n	8001682 <FIRFilter_Update+0x96>
	{
		/* Decrement index and wrap if necessary */
		if (sumIndex > 0)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <FIRFilter_Update+0x60>
		{
			sumIndex--;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	3b01      	subs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
 800164a:	e001      	b.n	8001650 <FIRFilter_Update+0x64>
		}
		else
		{
			sumIndex = FIR_FILTER_LENGTH - 1;
 800164c:	2318      	movs	r3, #24
 800164e:	73fb      	strb	r3, [r7, #15]
		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <FIRFilter_Update+0xa8>)
 8001658:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fbfd 	bl	8000e64 <__aeabi_fmul>
 800166a:	4603      	mov	r3, r0
 800166c:	4619      	mov	r1, r3
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff faf0 	bl	8000c54 <__addsf3>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	669a      	str	r2, [r3, #104]	; 0x68
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++)
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	3301      	adds	r3, #1
 8001680:	73bb      	strb	r3, [r7, #14]
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	2b18      	cmp	r3, #24
 8001686:	d9da      	bls.n	800163e <FIRFilter_Update+0x52>
	}

	/* Return filtered output */
	return fir->out;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	20000000 	.word	0x20000000

08001698 <PID_SetGains>:
 */

#include "PID.h"

void PID_SetGains(PID_Controller_t *instance, float p, float i, float d)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
	instance->kp = p;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
	instance->ki = i;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
	instance->kp = p;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <PID_ResetTemps>:
	instance->kp = 0;
	instance->IntegralError = 0;
}

void PID_ResetTemps(PID_Controller_t *instance)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	instance->Output = 0;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	829a      	strh	r2, [r3, #20]
	instance->LastError = 0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	819a      	strh	r2, [r3, #12]
	instance->IntegralError = 0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <PID_Update>:


int16_t PID_Update(PID_Controller_t *instance, int16_t input_error, uint16_t sampling_rate_hz)
{
 80016e6:	b5b0      	push	{r4, r5, r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	807b      	strh	r3, [r7, #2]
 80016f2:	4613      	mov	r3, r2
 80016f4:	803b      	strh	r3, [r7, #0]
	/* Update integral error */
	if(instance->ki > 0)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fd6c 	bl	80011dc <__aeabi_fcmpgt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <PID_Update+0x32>
	{
		instance->IntegralError += input_error;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001712:	441a      	add	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	611a      	str	r2, [r3, #16]
	}
	/* Secure integral error */
	if(instance->IntegralError > instance->MaxIntegralError)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	429a      	cmp	r2, r3
 8001722:	dd04      	ble.n	800172e <PID_Update+0x48>
	{
		instance->IntegralError = instance->MaxIntegralError;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	e00b      	b.n	8001746 <PID_Update+0x60>
	}
	else if(instance->IntegralError < -instance->MaxIntegralError)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	425b      	negs	r3, r3
 8001738:	429a      	cmp	r2, r3
 800173a:	da04      	bge.n	8001746 <PID_Update+0x60>
	{
		instance->IntegralError = -instance->MaxIntegralError;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	425a      	negs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	611a      	str	r2, [r3, #16]
	}

	/*Calculate the PID output */
	instance->Output = (instance->kp * input_error) +
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681c      	ldr	r4, [r3, #0]
 800174a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb34 	bl	8000dbc <__aeabi_i2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4619      	mov	r1, r3
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fb83 	bl	8000e64 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	461d      	mov	r5, r3
			(instance->ki * (instance->IntegralError) / sampling_rate_hz) +
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685c      	ldr	r4, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fb26 	bl	8000dbc <__aeabi_i2f>
 8001770:	4603      	mov	r3, r0
 8001772:	4619      	mov	r1, r3
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff fb75 	bl	8000e64 <__aeabi_fmul>
 800177a:	4603      	mov	r3, r0
 800177c:	461c      	mov	r4, r3
 800177e:	883b      	ldrh	r3, [r7, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fb1b 	bl	8000dbc <__aeabi_i2f>
 8001786:	4603      	mov	r3, r0
 8001788:	4619      	mov	r1, r3
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff fc1e 	bl	8000fcc <__aeabi_fdiv>
 8001790:	4603      	mov	r3, r0
	instance->Output = (instance->kp * input_error) +
 8001792:	4619      	mov	r1, r3
 8001794:	4628      	mov	r0, r5
 8001796:	f7ff fa5d 	bl	8000c54 <__addsf3>
 800179a:	4603      	mov	r3, r0
 800179c:	461d      	mov	r5, r3
			(instance->kd * sampling_rate_hz * (input_error - instance->LastError) );
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689c      	ldr	r4, [r3, #8]
 80017a2:	883b      	ldrh	r3, [r7, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb09 	bl	8000dbc <__aeabi_i2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fb58 	bl	8000e64 <__aeabi_fmul>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461c      	mov	r4, r3
 80017b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff faf9 	bl	8000dbc <__aeabi_i2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4619      	mov	r1, r3
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fb48 	bl	8000e64 <__aeabi_fmul>
 80017d4:	4603      	mov	r3, r0
			(instance->ki * (instance->IntegralError) / sampling_rate_hz) +
 80017d6:	4619      	mov	r1, r3
 80017d8:	4628      	mov	r0, r5
 80017da:	f7ff fa3b 	bl	8000c54 <__addsf3>
 80017de:	4603      	mov	r3, r0
	instance->Output = (instance->kp * input_error) +
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fd05 	bl	80011f0 <__aeabi_f2iz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	829a      	strh	r2, [r3, #20]


	/* Secure output */
	if(instance->Output >= instance->MaxOutput)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	db05      	blt.n	800180a <PID_Update+0x124>
	{
		instance->Output = instance->MaxOutput;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	829a      	strh	r2, [r3, #20]
 8001808:	e012      	b.n	8001830 <PID_Update+0x14a>
	}
	else if(instance->Output <= -instance->MaxOutput)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001818:	425b      	negs	r3, r3
 800181a:	429a      	cmp	r2, r3
 800181c:	dc08      	bgt.n	8001830 <PID_Update+0x14a>
	{
		instance->Output = -instance->MaxOutput;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001824:	b29b      	uxth	r3, r3
 8001826:	425b      	negs	r3, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	b21a      	sxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	829a      	strh	r2, [r3, #20]
	}

	/* Save error */
	instance->LastError = input_error;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	819a      	strh	r2, [r3, #12]

	return instance->Output;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}

08001844 <RBuffer_Write>:
 *      Author: Michal Klebokowski
 */
#include "RingBuffer.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001856:	3301      	adds	r3, #1
 8001858:	425a      	negs	r2, r3
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	f002 021f 	and.w	r2, r2, #31
 8001862:	bf58      	it	pl
 8001864:	4253      	negpl	r3, r2
 8001866:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	429a      	cmp	r2, r3
 8001872:	d101      	bne.n	8001878 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e00b      	b.n	8001890 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187e:	4619      	mov	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018aa:	3301      	adds	r3, #1
 80018ac:	425a      	negs	r2, r3
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	f002 021f 	and.w	r2, r2, #31
 80018b6:	bf58      	it	pl
 80018b8:	4253      	negpl	r3, r2
 80018ba:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d101      	bne.n	80018d0 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 80018cc:	2301      	movs	r3, #1
 80018ce:	e00c      	b.n	80018ea <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	5c9a      	ldrb	r2, [r3, r2]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <MX_GPIO_Init+0x154>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <MX_GPIO_Init+0x154>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <MX_GPIO_Init+0x154>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001920:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <MX_GPIO_Init+0x154>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a48      	ldr	r2, [pc, #288]	; (8001a48 <MX_GPIO_Init+0x154>)
 8001926:	f043 0320 	orr.w	r3, r3, #32
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <MX_GPIO_Init+0x154>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <MX_GPIO_Init+0x154>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <MX_GPIO_Init+0x154>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <MX_GPIO_Init+0x154>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <MX_GPIO_Init+0x154>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a3c      	ldr	r2, [pc, #240]	; (8001a48 <MX_GPIO_Init+0x154>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <MX_GPIO_Init+0x154>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f246 0103 	movw	r1, #24579	; 0x6003
 800196e:	4837      	ldr	r0, [pc, #220]	; (8001a4c <MX_GPIO_Init+0x158>)
 8001970:	f003 f93c 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2104      	movs	r1, #4
 8001978:	4835      	ldr	r0, [pc, #212]	; (8001a50 <MX_GPIO_Init+0x15c>)
 800197a:	f003 f937 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2110      	movs	r1, #16
 8001982:	4834      	ldr	r0, [pc, #208]	; (8001a54 <MX_GPIO_Init+0x160>)
 8001984:	f003 f932 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 8001988:	f246 0302 	movw	r3, #24578	; 0x6002
 800198c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2302      	movs	r3, #2
 8001998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	4619      	mov	r1, r3
 80019a0:	482a      	ldr	r0, [pc, #168]	; (8001a4c <MX_GPIO_Init+0x158>)
 80019a2:	f002 ff9f 	bl	80048e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019a6:	2301      	movs	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4619      	mov	r1, r3
 80019bc:	4823      	ldr	r0, [pc, #140]	; (8001a4c <MX_GPIO_Init+0x158>)
 80019be:	f002 ff91 	bl	80048e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	4820      	ldr	r0, [pc, #128]	; (8001a58 <MX_GPIO_Init+0x164>)
 80019d8:	f002 ff84 	bl	80048e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80019dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_GPIO_Init+0x168>)
 80019e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	4619      	mov	r1, r3
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <MX_GPIO_Init+0x164>)
 80019f2:	f002 ff77 	bl	80048e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 80019f6:	2304      	movs	r3, #4
 80019f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4810      	ldr	r0, [pc, #64]	; (8001a50 <MX_GPIO_Init+0x15c>)
 8001a0e:	f002 ff69 	bl	80048e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001a12:	2310      	movs	r3, #16
 8001a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4619      	mov	r1, r3
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <MX_GPIO_Init+0x160>)
 8001a2a:	f002 ff5b 	bl	80048e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	2028      	movs	r0, #40	; 0x28
 8001a34:	f002 ff2b 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a38:	2028      	movs	r0, #40	; 0x28
 8001a3a:	f002 ff44 	bl	80048c6 <HAL_NVIC_EnableIRQ>

}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40011400 	.word	0x40011400
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	10210000 	.word	0x10210000

08001a60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a66:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <MX_I2C1_Init+0x54>)
 8001a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a6c:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_I2C1_Init+0x58>)
 8001a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <MX_I2C1_Init+0x50>)
 8001a9e:	f003 f8ef 	bl	8004c80 <HAL_I2C_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001aa8:	f000 fb9a 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000294 	.word	0x20000294
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	00061a80 	.word	0x00061a80

08001abc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_I2C_MspInit+0x90>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d132      	bne.n	8001b42 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001adc:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <HAL_I2C_MspInit+0x94>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_I2C_MspInit+0x94>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_I2C_MspInit+0x94>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001af4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afa:	2312      	movs	r3, #18
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <HAL_I2C_MspInit+0x98>)
 8001b0a:	f002 feeb 	bl	80048e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_I2C_MspInit+0x9c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_I2C_MspInit+0x9c>)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_I2C_MspInit+0x94>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_I2C_MspInit+0x94>)
 8001b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_I2C_MspInit+0x94>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010c00 	.word	0x40010c00
 8001b58:	40010000 	.word	0x40010000

08001b5c <Parser_ParseProgramLaunchCommand>:
#include "Programs/DiodeTest_Prog.h"
#include "Programs/MotorsDebug_Prog.h"
#include "Programs/CalibPID_Prog.h"

void Parser_ParseProgramLaunchCommand(uint8_t ProgramID)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	/* Launch proper program */
	/* When another program is currently running, launch function will return error */
	switch(ProgramID)
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2bd2      	cmp	r3, #210	; 0xd2
 8001b6a:	d010      	beq.n	8001b8e <Parser_ParseProgramLaunchCommand+0x32>
 8001b6c:	2bd2      	cmp	r3, #210	; 0xd2
 8001b6e:	dc12      	bgt.n	8001b96 <Parser_ParseProgramLaunchCommand+0x3a>
 8001b70:	2bd0      	cmp	r3, #208	; 0xd0
 8001b72:	d002      	beq.n	8001b7a <Parser_ParseProgramLaunchCommand+0x1e>
 8001b74:	2bd1      	cmp	r3, #209	; 0xd1
 8001b76:	d005      	beq.n	8001b84 <Parser_ParseProgramLaunchCommand+0x28>
 8001b78:	e00d      	b.n	8001b96 <Parser_ParseProgramLaunchCommand+0x3a>
	{
	case DIODE_TEST:
		status = Prog_DiodeTest_Launch();
 8001b7a:	f002 fc1b 	bl	80043b4 <Prog_DiodeTest_Launch>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
		break;
 8001b82:	e00b      	b.n	8001b9c <Parser_ParseProgramLaunchCommand+0x40>

	case MOTORS_DEBUG:
		status = Prog_MotorsDebug_Launch();
 8001b84:	f002 fc76 	bl	8004474 <Prog_MotorsDebug_Launch>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
		break;
 8001b8c:	e006      	b.n	8001b9c <Parser_ParseProgramLaunchCommand+0x40>

	case PID_CALIBRATION:
		status = Prog_CalibPID_Launch();
 8001b8e:	f002 faf1 	bl	8004174 <Prog_CalibPID_Launch>
 8001b92:	4603      	mov	r3, r0
 8001b94:	73fb      	strb	r3, [r7, #15]

	default:
		status = PROGRAMS_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
		break;
 8001b9a:	bf00      	nop
	}

	/* Send ACK to controller */
	if(status == PROGRAMS_OK)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <Parser_ParseProgramLaunchCommand+0x52>
	{
		Programs_SendProgramStartedACK(ProgramID, ACK);		//TODO: Maybe ACK should be sent after each program Init function ?
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	21f0      	movs	r1, #240	; 0xf0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fd12 	bl	80045d0 <Programs_SendProgramStartedACK>
	}
	else
	{
		Programs_SendProgramStartedACK(ProgramID, NACK);
	}
}
 8001bac:	e004      	b.n	8001bb8 <Parser_ParseProgramLaunchCommand+0x5c>
		Programs_SendProgramStartedACK(ProgramID, NACK);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	21f1      	movs	r1, #241	; 0xf1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fd0c 	bl	80045d0 <Programs_SendProgramStartedACK>
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <Parser_Klebot>:

void Parser_Klebot(uint8_t *command, uint8_t length)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	617b      	str	r3, [r7, #20]
	uint8_t Length = length;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	74fb      	strb	r3, [r7, #19]
	Programs_Program_t* CurrentProgram = Programs_GetProgram();
 8001bd4:	f002 fcbc 	bl	8004550 <Programs_GetProgram>
 8001bd8:	60f8      	str	r0, [r7, #12]

	/* If the command header is currently running program's ID, then pass the rest fo the command to it's parser */
	if(NULL != CurrentProgram && *CurrentByte == CurrentProgram->ProgramID)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <Parser_Klebot+0x46>
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	7c1b      	ldrb	r3, [r3, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10c      	bne.n	8001c06 <Parser_Klebot+0x46>
	{
		CurrentByte++;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
		Length--;
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	74fb      	strb	r3, [r7, #19]
		/* Frame: [ProgramID, Specific program commands...] */
		CurrentProgram->ProgramParser(CurrentByte, Length);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	7cfa      	ldrb	r2, [r7, #19]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	6978      	ldr	r0, [r7, #20]
 8001c02:	4798      	blx	r3
 8001c04:	e014      	b.n	8001c30 <Parser_Klebot+0x70>
	}
	else
	/* If command header is different, check if it is launch/exit commands */
	{
		switch(*CurrentByte)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d002      	beq.n	8001c14 <Parser_Klebot+0x54>
 8001c0e:	2b11      	cmp	r3, #17
 8001c10:	d008      	beq.n	8001c24 <Parser_Klebot+0x64>
			break;

		default:
			/* Incorrect command! */

			break;
 8001c12:	e00d      	b.n	8001c30 <Parser_Klebot+0x70>
			uint8_t ProgramToLaunch = *(CurrentByte + 1);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	785b      	ldrb	r3, [r3, #1]
 8001c18:	72fb      	strb	r3, [r7, #11]
			Parser_ParseProgramLaunchCommand(ProgramToLaunch);
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff9d 	bl	8001b5c <Parser_ParseProgramLaunchCommand>
			break;
 8001c22:	e005      	b.n	8001c30 <Parser_Klebot+0x70>
			Programs_ExitProgram();
 8001c24:	f002 fc84 	bl	8004530 <Programs_ExitProgram>
			Programs_SendProgramExitACK(ACK);
 8001c28:	20f0      	movs	r0, #240	; 0xf0
 8001c2a:	f002 fcea 	bl	8004602 <Programs_SendProgramExitACK>
			break;
 8001c2e:	bf00      	nop
		}
	}
}
 8001c30:	bf00      	nop
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fef5 	bl	8002a30 <nRF24_Init>

#ifdef ROBOT
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8001c46:	4906      	ldr	r1, [pc, #24]	; (8001c60 <Radio_Init+0x28>)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f000 fd5e 	bl	800270a <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <Radio_Init+0x2c>)
 8001c50:	f000 fd94 	bl	800277c <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8001c54:	f000 fb98 	bl	8002388 <nRF24_RX_Mode>
#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
	nRF24_SetTXAddress( (uint8_t*) "Bot");
	nRF24_TX_Mode();
#endif
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	0800e560 	.word	0x0800e560
 8001c64:	0800e564 	.word	0x0800e564

08001c68 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73bb      	strb	r3, [r7, #14]
 8001c7c:	e010      	b.n	8001ca0 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <Radio_RxBufferPut+0x4c>)
 8001c86:	f7ff fddd 	bl	8001844 <RBuffer_Write>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3301      	adds	r3, #1
 8001c98:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8001c9a:	7bbb      	ldrb	r3, [r7, #14]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	73bb      	strb	r3, [r7, #14]
 8001ca0:	7bba      	ldrb	r2, [r7, #14]
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3ea      	bcc.n	8001c7e <Radio_RxBufferPut+0x16>
	}
	return Status;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000310 	.word	0x20000310

08001cb8 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 8001cca:	f107 030d 	add.w	r3, r7, #13
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4814      	ldr	r0, [pc, #80]	; (8001d24 <Radio_RxBufferGet+0x6c>)
 8001cd2:	f7ff fde2 	bl	800189a <RBuffer_Read>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001ce0:	e012      	b.n	8001d08 <Radio_RxBufferGet+0x50>
	{
		*(CommandDestination+Length) = Data;				//write received byte to destination
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	7b7a      	ldrb	r2, [r7, #13]
 8001cea:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 8001cf2:	f107 030d 	add.w	r3, r7, #13
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <Radio_RxBufferGet+0x6c>)
 8001cfa:	f7ff fdce 	bl	800189a <RBuffer_Read>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 8001d08:	7b7b      	ldrb	r3, [r7, #13]
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d002      	beq.n	8001d14 <Radio_RxBufferGet+0x5c>
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0e6      	beq.n	8001ce2 <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	701a      	strb	r2, [r3, #0]
	return Status;
 8001d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000310 	.word	0x20000310

08001d28 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73bb      	strb	r3, [r7, #14]
 8001d3c:	e010      	b.n	8001d60 <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	480f      	ldr	r0, [pc, #60]	; (8001d84 <Radio_TxBufferPut+0x5c>)
 8001d46:	f7ff fd7d 	bl	8001844 <RBuffer_Write>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	73fb      	strb	r3, [r7, #15]
		Command++;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3301      	adds	r3, #1
 8001d58:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	73bb      	strb	r3, [r7, #14]
 8001d60:	7bba      	ldrb	r2, [r7, #14]
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3ea      	bcc.n	8001d3e <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4806      	ldr	r0, [pc, #24]	; (8001d84 <Radio_TxBufferPut+0x5c>)
 8001d6c:	f7ff fd6a 	bl	8001844 <RBuffer_Write>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	73fb      	strb	r3, [r7, #15]
	return Status;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200002ec 	.word	0x200002ec

08001d88 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8001d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d9e:	1d3a      	adds	r2, r7, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	4816      	ldr	r0, [pc, #88]	; (8001e00 <Radio_TxBufferSend+0x78>)
 8001da6:	f7ff fd78 	bl	800189a <RBuffer_Read>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8001db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8001dc2:	3328      	adds	r3, #40	; 0x28
 8001dc4:	443b      	add	r3, r7
 8001dc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d003      	beq.n	8001dd6 <Radio_TxBufferSend+0x4e>
 8001dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0e1      	beq.n	8001d9a <Radio_TxBufferSend+0x12>
		TxStatus = RADIO_BUSY;
	}
#endif

#ifdef ROBOT
	if(Status == RADIO_OK)
 8001dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <Radio_TxBufferSend+0x6a>
	{
		nRF24_WriteAckPayload(0, DataToSend, Length);
 8001dde:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 fe8a 	bl	8002b00 <nRF24_WriteAckPayload>
		TxStatus = RADIO_BUSY;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <Radio_TxBufferSend+0x7c>)
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
	}
#endif

	return Status;
 8001df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200002ec 	.word	0x200002ec
 8001e04:	200002e9 	.word	0x200002e9

08001e08 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 8001e0e:	f000 fde7 	bl	80029e0 <nRF24_Event>
	}
#endif

#ifdef ROBOT

	if(TxStatus == RADIO_OK)	//If Tx is free, send response
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <Radio_Process+0x64>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <Radio_Process+0x16>
	{
		Radio_TxBufferSend();	//send ack payload
 8001e1a:	f7ff ffb5 	bl	8001d88 <Radio_TxBufferSend>
	}

	if((HAL_GetTick() - ConnectionTimeoutCounter) > (3 * PACKET_SEND_DELAY) )	//check when last message came to know if connection isnt dead
 8001e1e:	f002 fc53 	bl	80046c8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <Radio_Process+0x68>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b96      	cmp	r3, #150	; 0x96
 8001e2c:	d904      	bls.n	8001e38 <Radio_Process+0x30>
	{
		ConnectionStatus = RADIO_ERROR;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <Radio_Process+0x6c>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
		Radio_NoConnectionCallback();
 8001e34:	f000 f82c 	bl	8001e90 <Radio_NoConnectionCallback>
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <Radio_Process+0x70>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d110      	bne.n	8001e62 <Radio_Process+0x5a>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8001e40:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff35 	bl	8001cb8 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 8001e4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f8ac 	bl	8001fb4 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <Radio_Process+0x70>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
	}
}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200002e9 	.word	0x200002e9
 8001e70:	20000334 	.word	0x20000334
 8001e74:	200002e8 	.word	0x200002e8
 8001e78:	200002ea 	.word	0x200002ea

08001e7c <Radio_GetConnectionStatus>:
//
//Get connection status
//

Klebot_Radio_Status Radio_GetConnectionStatus(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	return ConnectionStatus;
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <Radio_GetConnectionStatus+0x10>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	200002e8 	.word	0x200002e8

08001e90 <Radio_NoConnectionCallback>:
//{
//	nRF24_IRQ_Handler();
//}

__weak void Radio_NoConnectionCallback(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <nRF24_EventTxCallback+0x18>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <nRF24_EventTxCallback+0x1c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	200002e9 	.word	0x200002e9
 8001eb8:	200002e8 	.word	0x200002e8

08001ebc <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 8001ec2:	1dfa      	adds	r2, r7, #7
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fd1f 	bl	800290e <nRF24_ReadRXPaylaod>

#ifdef ROBOT
	ConnectionStatus = RADIO_OK;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <nRF24_EventRxCallback+0x48>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
 8001ed6:	f002 fbf7 	bl	80046c8 <HAL_GetTick>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <nRF24_EventRxCallback+0x4c>)
 8001ede:	6013      	str	r3, [r2, #0]
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
 8001ee0:	7a3b      	ldrb	r3, [r7, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d00a      	beq.n	8001efc <nRF24_EventRxCallback+0x40>
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff feba 	bl	8001c68 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <nRF24_EventRxCallback+0x50>)
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e000      	b.n	8001efe <nRF24_EventRxCallback+0x42>
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
 8001efc:	bf00      	nop
}
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200002e8 	.word	0x200002e8
 8001f08:	20000334 	.word	0x20000334
 8001f0c:	200002ea 	.word	0x200002ea

08001f10 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <nRF24_EventMrCallback+0x14>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	200002e8 	.word	0x200002e8

08001f28 <ConnectionBlinkLED>:

uint8_t CommandSource = RADIO_DATA_SOURCE;

/* Blink LED when controller is connected */
static void ConnectionBlinkLED(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	static uint32_t LastTick = 0;
	/* Get the connection status */
	if(RADIO_ERROR == Radio_GetConnectionStatus())
 8001f2c:	f7ff ffa6 	bl	8001e7c <Radio_GetConnectionStatus>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <ConnectionBlinkLED+0x1a>
	{
		/* If there is no connection, set the LED off and return */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	2101      	movs	r1, #1
 8001f3a:	480b      	ldr	r0, [pc, #44]	; (8001f68 <ConnectionBlinkLED+0x40>)
 8001f3c:	f002 fe56 	bl	8004bec <HAL_GPIO_WritePin>
		return;
 8001f40:	e011      	b.n	8001f66 <ConnectionBlinkLED+0x3e>
	}
	/* Blink the diode if there is connection with controller */
	if(HAL_GetTick() - LastTick > 500)
 8001f42:	f002 fbc1 	bl	80046c8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <ConnectionBlinkLED+0x44>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f52:	d908      	bls.n	8001f66 <ConnectionBlinkLED+0x3e>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f54:	2101      	movs	r1, #1
 8001f56:	4804      	ldr	r0, [pc, #16]	; (8001f68 <ConnectionBlinkLED+0x40>)
 8001f58:	f002 fe60 	bl	8004c1c <HAL_GPIO_TogglePin>
		LastTick = HAL_GetTick();
 8001f5c:	f002 fbb4 	bl	80046c8 <HAL_GetTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4a02      	ldr	r2, [pc, #8]	; (8001f6c <ConnectionBlinkLED+0x44>)
 8001f64:	6013      	str	r3, [r2, #0]
	}
}
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	2000033c 	.word	0x2000033c

08001f70 <KlebotScheduler>:

/* Main scheduler function */
void KlebotScheduler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	/* Radio process - always active in the background */
	Radio_Process();
 8001f76:	f7ff ff47 	bl	8001e08 <Radio_Process>

	/* Startup sequence */
	if(0 == StartupInitFlag)
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <KlebotScheduler+0x40>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <KlebotScheduler+0x18>
	{
		StartupInitFlag = 1;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <KlebotScheduler+0x40>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
	}

	/* Perform current program, returns proper status */
	SubProgramStatus = Programs_PerformProgram();
 8001f88:	f002 fafc 	bl	8004584 <Programs_PerformProgram>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d102      	bne.n	8001f9c <KlebotScheduler+0x2c>
	{
		Programs_ClearProgram();
 8001f96:	f002 fae5 	bl	8004564 <Programs_ClearProgram>
	}
	else if(SubProgramStatus == NO_PROGRAM_SET)
	{
		ConnectionBlinkLED();
	}
}
 8001f9a:	e004      	b.n	8001fa6 <KlebotScheduler+0x36>
	else if(SubProgramStatus == NO_PROGRAM_SET)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <KlebotScheduler+0x36>
		ConnectionBlinkLED();
 8001fa2:	f7ff ffc1 	bl	8001f28 <ConnectionBlinkLED>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000340 	.word	0x20000340

08001fb4 <Radio_NewCommandReceivedCallback>:


/* Callback from klebot_radio, forwards data if currently selected commands source is radio */
void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
	if(RADIO_DATA_SOURCE == CommandSource)
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <Radio_NewCommandReceivedCallback+0x28>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d104      	bne.n	8001fd2 <Radio_NewCommandReceivedCallback+0x1e>
	{
		Parser_Klebot(command, length);
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fdf7 	bl	8001bc0 <Parser_Klebot>
	}
	else
	{

	}
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000338 	.word	0x20000338

08001fe0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001fe8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001fec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ffc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002000:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002008:	e000      	b.n	800200c <ITM_SendChar+0x2c>
    {
      __NOP();
 800200a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800200c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f9      	beq.n	800200a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002016:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002032:	f002 fb21 	bl	8004678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002036:	f000 f84d 	bl	80020d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800203a:	f7ff fc5b 	bl	80018f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800203e:	f7ff fd0f 	bl	8001a60 <MX_I2C1_Init>
  MX_SPI3_Init();
 8002042:	f000 fdd3 	bl	8002bec <MX_SPI3_Init>
  MX_TIM1_Init();
 8002046:	f001 f811 	bl	800306c <MX_TIM1_Init>
  MX_TIM3_Init();
 800204a:	f001 f867 	bl	800311c <MX_TIM3_Init>
  MX_TIM4_Init();
 800204e:	f001 f8fb 	bl	8003248 <MX_TIM4_Init>
  MX_TIM7_Init();
 8002052:	f001 f94d 	bl	80032f0 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8002056:	f001 fa71 	bl	800353c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002060:	4815      	ldr	r0, [pc, #84]	; (80020b8 <main+0x8c>)
 8002062:	f002 fdc3 	bl	8004bec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800206c:	4812      	ldr	r0, [pc, #72]	; (80020b8 <main+0x8c>)
 800206e:	f002 fdbd 	bl	8004bec <HAL_GPIO_WritePin>


  Motors_Init();
 8002072:	f001 fd6f 	bl	8003b54 <Motors_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8002076:	4811      	ldr	r0, [pc, #68]	; (80020bc <main+0x90>)
 8002078:	f004 fa94 	bl	80065a4 <HAL_TIM_Base_Start_IT>



  Radio_Init(&hspi3);
 800207c:	4810      	ldr	r0, [pc, #64]	; (80020c0 <main+0x94>)
 800207e:	f7ff fddb 	bl	8001c38 <Radio_Init>

  xTaskCreate(vTaskOnboardDiode, "PCB Diode Task", 128, NULL, 1, NULL);
 8002082:	2300      	movs	r3, #0
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2301      	movs	r3, #1
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	490d      	ldr	r1, [pc, #52]	; (80020c4 <main+0x98>)
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <main+0x9c>)
 8002092:	f006 fb1f 	bl	80086d4 <xTaskCreate>
  xTaskCreate(vTaskRadio, "NRF24 Task", 512, NULL, 1, NULL);
 8002096:	2300      	movs	r3, #0
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2301      	movs	r3, #1
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a4:	4909      	ldr	r1, [pc, #36]	; (80020cc <main+0xa0>)
 80020a6:	480a      	ldr	r0, [pc, #40]	; (80020d0 <main+0xa4>)
 80020a8:	f006 fb14 	bl	80086d4 <xTaskCreate>

  vTaskStartScheduler();
 80020ac:	f006 fc82 	bl	80089b4 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  KlebotScheduler();
 80020b0:	f7ff ff5e 	bl	8001f70 <KlebotScheduler>
 80020b4:	e7fc      	b.n	80020b0 <main+0x84>
 80020b6:	bf00      	nop
 80020b8:	40011000 	.word	0x40011000
 80020bc:	200004d4 	.word	0x200004d4
 80020c0:	20000358 	.word	0x20000358
 80020c4:	0800e574 	.word	0x0800e574
 80020c8:	08002b41 	.word	0x08002b41
 80020cc:	0800e584 	.word	0x0800e584
 80020d0:	08002b61 	.word	0x08002b61

080020d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b094      	sub	sp, #80	; 0x50
 80020d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020da:	f107 0318 	add.w	r3, r7, #24
 80020de:	2238      	movs	r2, #56	; 0x38
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f009 fcab 	bl	800ba3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002100:	2301      	movs	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002104:	2301      	movs	r3, #1
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210c:	2302      	movs	r3, #2
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002116:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800211c:	2300      	movs	r3, #0
 800211e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	4618      	mov	r0, r3
 8002126:	f002 feef 	bl	8004f08 <HAL_RCC_OscConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8002130:	f000 f856 	bl	80021e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002134:	230f      	movs	r3, #15
 8002136:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002138:	2302      	movs	r3, #2
 800213a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2102      	movs	r1, #2
 800214e:	4618      	mov	r0, r3
 8002150:	f003 f9f0 	bl	8005534 <HAL_RCC_ClockConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800215a:	f000 f841 	bl	80021e0 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800215e:	4b03      	ldr	r3, [pc, #12]	; (800216c <SystemClock_Config+0x98>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	3750      	adds	r7, #80	; 0x50
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	42420070 	.word	0x42420070

08002170 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff30 	bl	8001fe0 <ITM_SendChar>

	return ch;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219a:	d101      	bne.n	80021a0 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 800219c:	f000 fd04 	bl	8002ba8 <Radio_HandlerIRQ>

	}
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d102      	bne.n	80021c0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80021ba:	f002 fa73 	bl	80046a4 <HAL_IncTick>
  {
	  /* Encoder sampling */
	  Motors_EncoderSample();
  }
  /* USER CODE END Callback 1 */
}
 80021be:	e006      	b.n	80021ce <HAL_TIM_PeriodElapsedCallback+0x26>
  else if(htim->Instance == TIM7)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a05      	ldr	r2, [pc, #20]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_PeriodElapsedCallback+0x26>
	  Motors_EncoderSample();
 80021ca:	f001 fd79 	bl	8003cc0 <Motors_EncoderSample>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40001000 	.word	0x40001000
 80021dc:	40001400 	.word	0x40001400

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <Error_Handler+0x8>

080021ea <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 fa70 	bl	80046dc <HAL_Delay>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <nRF24_SendSpi+0x28>)
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	b29a      	uxth	r2, r3
 8002218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	f003 fc6d 	bl	8005afc <HAL_SPI_Transmit>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000344 	.word	0x20000344

08002230 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <nRF24_ReadSpi+0x28>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	b29a      	uxth	r2, r3
 8002244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	f003 fd9a 	bl	8005d82 <HAL_SPI_Receive>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000344 	.word	0x20000344

0800225c <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800226a:	2200      	movs	r2, #0
 800226c:	2104      	movs	r1, #4
 800226e:	480c      	ldr	r0, [pc, #48]	; (80022a0 <nRF24_ReadRegister+0x44>)
 8002270:	f002 fcbc 	bl	8004bec <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ffc3 	bl	8002204 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800227e:	f107 030f 	add.w	r3, r7, #15
 8002282:	2101      	movs	r1, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ffd3 	bl	8002230 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800228a:	2201      	movs	r2, #1
 800228c:	2104      	movs	r1, #4
 800228e:	4804      	ldr	r0, [pc, #16]	; (80022a0 <nRF24_ReadRegister+0x44>)
 8002290:	f002 fcac 	bl	8004bec <HAL_GPIO_WritePin>

	return result;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40011400 	.word	0x40011400

080022a4 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80022b8:	2200      	movs	r2, #0
 80022ba:	2104      	movs	r1, #4
 80022bc:	480a      	ldr	r0, [pc, #40]	; (80022e8 <nRF24_ReadRegisters+0x44>)
 80022be:	f002 fc95 	bl	8004bec <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff9c 	bl	8002204 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80022cc:	79bb      	ldrb	r3, [r7, #6]
 80022ce:	4619      	mov	r1, r3
 80022d0:	6838      	ldr	r0, [r7, #0]
 80022d2:	f7ff ffad 	bl	8002230 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80022d6:	2201      	movs	r2, #1
 80022d8:	2104      	movs	r1, #4
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <nRF24_ReadRegisters+0x44>)
 80022dc:	f002 fc86 	bl	8004bec <HAL_GPIO_WritePin>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40011400 	.word	0x40011400

080022ec <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	460a      	mov	r2, r1
 80022f6:	71fb      	strb	r3, [r7, #7]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f043 0320 	orr.w	r3, r3, #32
 8002302:	b2db      	uxtb	r3, r3
 8002304:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 800230a:	2200      	movs	r2, #0
 800230c:	2104      	movs	r1, #4
 800230e:	4809      	ldr	r0, [pc, #36]	; (8002334 <nRF24_WriteRegister+0x48>)
 8002310:	f002 fc6c 	bl	8004bec <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2102      	movs	r1, #2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff72 	bl	8002204 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002320:	2201      	movs	r2, #1
 8002322:	2104      	movs	r1, #4
 8002324:	4803      	ldr	r0, [pc, #12]	; (8002334 <nRF24_WriteRegister+0x48>)
 8002326:	f002 fc61 	bl	8004bec <HAL_GPIO_WritePin>
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40011400 	.word	0x40011400

08002338 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
 8002344:	4613      	mov	r3, r2
 8002346:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f043 0320 	orr.w	r3, r3, #32
 800234e:	b2db      	uxtb	r3, r3
 8002350:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002352:	2200      	movs	r2, #0
 8002354:	2104      	movs	r1, #4
 8002356:	480b      	ldr	r0, [pc, #44]	; (8002384 <nRF24_WriteRegisters+0x4c>)
 8002358:	f002 fc48 	bl	8004bec <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff4f 	bl	8002204 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8002366:	79bb      	ldrb	r3, [r7, #6]
 8002368:	4619      	mov	r1, r3
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f7ff ff4a 	bl	8002204 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8002370:	2201      	movs	r2, #1
 8002372:	2104      	movs	r1, #4
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <nRF24_WriteRegisters+0x4c>)
 8002376:	f002 fc39 	bl	8004bec <HAL_GPIO_WritePin>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40011400 	.word	0x40011400

08002388 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 800238e:	f000 f829 	bl	80023e4 <nRF24_ReadConfig>
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8002396:	4911      	ldr	r1, [pc, #68]	; (80023dc <nRF24_RX_Mode+0x54>)
 8002398:	2000      	movs	r0, #0
 800239a:	f000 f9b6 	bl	800270a <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f81f 	bl	80023f4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80023b6:	2070      	movs	r0, #112	; 0x70
 80023b8:	f000 f877 	bl	80024aa <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80023bc:	f000 f884 	bl	80024c8 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80023c0:	f000 f89c 	bl	80024fc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80023c4:	2201      	movs	r2, #1
 80023c6:	2110      	movs	r1, #16
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <nRF24_RX_Mode+0x58>)
 80023ca:	f002 fc0f 	bl	8004bec <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7ff ff0b 	bl	80021ea <nRF24_Delay_ms>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000348 	.word	0x20000348
 80023e0:	40010c00 	.word	0x40010c00

080023e4 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff ff37 	bl	800225c <nRF24_ReadRegister>
 80023ee:	4603      	mov	r3, r0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4619      	mov	r1, r3
 8002402:	2000      	movs	r0, #0
 8002404:	f7ff ff72 	bl	80022ec <nRF24_WriteRegister>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800241a:	2006      	movs	r0, #6
 800241c:	f7ff ff1e 	bl	800225c <nRF24_ReadRegister>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	f023 0307 	bic.w	r3, r3, #7
 800242a:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	b25a      	sxtb	r2, r3
 8002432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002436:	4313      	orrs	r3, r2
 8002438:	b25b      	sxtb	r3, r3
 800243a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	4619      	mov	r1, r3
 8002440:	2006      	movs	r0, #6
 8002442:	f7ff ff53 	bl	80022ec <nRF24_WriteRegister>
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002458:	2006      	movs	r0, #6
 800245a:	f7ff feff 	bl	800225c <nRF24_ReadRegister>
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002468:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d104      	bne.n	800247a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	f043 0320 	orr.w	r3, r3, #32
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e006      	b.n	8002488 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d103      	bne.n	8002488 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	4619      	mov	r1, r3
 800248c:	2006      	movs	r0, #6
 800248e:	f7ff ff2d 	bl	80022ec <nRF24_WriteRegister>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800249e:	2007      	movs	r0, #7
 80024a0:	f7ff fedc 	bl	800225c <nRF24_ReadRegister>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}

080024aa <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	4619      	mov	r1, r3
 80024b8:	2007      	movs	r0, #7
 80024ba:	f7ff ff17 	bl	80022ec <nRF24_WriteRegister>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80024ce:	23e2      	movs	r3, #226	; 0xe2
 80024d0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80024d2:	2200      	movs	r2, #0
 80024d4:	2104      	movs	r1, #4
 80024d6:	4808      	ldr	r0, [pc, #32]	; (80024f8 <nRF24_FlushRX+0x30>)
 80024d8:	f002 fb88 	bl	8004bec <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80024dc:	1dfb      	adds	r3, r7, #7
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fe8f 	bl	8002204 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80024e6:	2201      	movs	r2, #1
 80024e8:	2104      	movs	r1, #4
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <nRF24_FlushRX+0x30>)
 80024ec:	f002 fb7e 	bl	8004bec <HAL_GPIO_WritePin>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40011400 	.word	0x40011400

080024fc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8002502:	23e1      	movs	r3, #225	; 0xe1
 8002504:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2104      	movs	r1, #4
 800250a:	4808      	ldr	r0, [pc, #32]	; (800252c <nRF24_FlushTX+0x30>)
 800250c:	f002 fb6e 	bl	8004bec <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	2101      	movs	r1, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fe75 	bl	8002204 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800251a:	2201      	movs	r2, #1
 800251c:	2104      	movs	r1, #4
 800251e:	4803      	ldr	r0, [pc, #12]	; (800252c <nRF24_FlushTX+0x30>)
 8002520:	f002 fb64 	bl	8004bec <HAL_GPIO_WritePin>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40011400 	.word	0x40011400

08002530 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800253a:	f7ff ff53 	bl	80023e4 <nRF24_ReadConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e003      	b.n	800255a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	f023 0308 	bic.w	r3, r3, #8
 8002558:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff49 	bl	80023f4 <nRF24_WriteConfig>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002574:	f7ff ff36 	bl	80023e4 <nRF24_ReadConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d104      	bne.n	800258c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e003      	b.n	8002594 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	f023 0304 	bic.w	r3, r3, #4
 8002592:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff2c 	bl	80023f4 <nRF24_WriteConfig>
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	460a      	mov	r2, r1
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	b25a      	sxtb	r2, r3
 80025ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	2004      	movs	r0, #4
 80025ce:	f7ff fe8d 	bl	80022ec <nRF24_WriteRegister>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	4619      	mov	r1, r3
 80025ee:	2005      	movs	r0, #5
 80025f0:	f7ff fe7c 	bl	80022ec <nRF24_WriteRegister>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	460a      	mov	r2, r1
 8002606:	71fb      	strb	r3, [r7, #7]
 8002608:	4613      	mov	r3, r2
 800260a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2b05      	cmp	r3, #5
 8002610:	d901      	bls.n	8002616 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002612:	2305      	movs	r3, #5
 8002614:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8002616:	2002      	movs	r0, #2
 8002618:	f7ff fe20 	bl	800225c <nRF24_ReadRegister>
 800261c:	4603      	mov	r3, r0
 800261e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10a      	bne.n	800263c <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	2201      	movs	r2, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	b25a      	sxtb	r2, r3
 8002630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002634:	4313      	orrs	r3, r2
 8002636:	b25b      	sxtb	r3, r3
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e00b      	b.n	8002654 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2201      	movs	r2, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	b25b      	sxtb	r3, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	b25a      	sxtb	r2, r3
 800264a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264e:	4013      	ands	r3, r2
 8002650:	b25b      	sxtb	r3, r3
 8002652:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	4619      	mov	r1, r3
 8002658:	2002      	movs	r0, #2
 800265a:	f7ff fe47 	bl	80022ec <nRF24_WriteRegister>
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	460a      	mov	r2, r1
 8002670:	71fb      	strb	r3, [r7, #7]
 8002672:	4613      	mov	r3, r2
 8002674:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b05      	cmp	r3, #5
 800267a:	d901      	bls.n	8002680 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 800267c:	2305      	movs	r3, #5
 800267e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002680:	2001      	movs	r0, #1
 8002682:	f7ff fdeb 	bl	800225c <nRF24_ReadRegister>
 8002686:	4603      	mov	r3, r0
 8002688:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10a      	bne.n	80026a6 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	2201      	movs	r2, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	b25a      	sxtb	r2, r3
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	4313      	orrs	r3, r2
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e00b      	b.n	80026be <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2201      	movs	r2, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	b25a      	sxtb	r2, r3
 80026b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b8:	4013      	ands	r3, r2
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	4619      	mov	r1, r3
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7ff fe12 	bl	80022ec <nRF24_WriteRegister>
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d901      	bls.n	80026e4 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80026e0:	2305      	movs	r3, #5
 80026e2:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d801      	bhi.n	80026ee <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80026ea:	2303      	movs	r3, #3
 80026ec:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b02      	subs	r3, #2
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	2003      	movs	r0, #3
 80026fe:	f7ff fdf5 	bl	80022ec <nRF24_WriteRegister>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	6039      	str	r1, [r7, #0]
 8002714:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <nRF24_SetRXAddress+0x18>
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d11d      	bne.n	800275e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e00d      	b.n	8002744 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	441a      	add	r2, r3
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	f1c3 0302 	rsb	r3, r3, #2
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	3310      	adds	r3, #16
 8002738:	443b      	add	r3, r7
 800273a:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3301      	adds	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d9ee      	bls.n	8002728 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	330a      	adds	r3, #10
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f107 010c 	add.w	r1, r7, #12
 8002754:	2203      	movs	r2, #3
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fdee 	bl	8002338 <nRF24_WriteRegisters>
	{
 800275c:	e00a      	b.n	8002774 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	330a      	adds	r3, #10
 8002762:	b2da      	uxtb	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3302      	adds	r3, #2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f7ff fdbd 	bl	80022ec <nRF24_WriteRegister>
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	2203      	movs	r2, #3
 800278a:	4619      	mov	r1, r3
 800278c:	200a      	movs	r0, #10
 800278e:	f7ff fd89 	bl	80022a4 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	e00c      	b.n	80027b2 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	f1c3 0302 	rsb	r3, r3, #2
 80027a0:	3210      	adds	r2, #16
 80027a2:	443a      	add	r2, r7
 80027a4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80027a8:	4a16      	ldr	r2, [pc, #88]	; (8002804 <nRF24_SetTXAddress+0x88>)
 80027aa:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	3301      	adds	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d9ef      	bls.n	8002798 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e00d      	b.n	80027da <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	441a      	add	r2, r3
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	f1c3 0302 	rsb	r3, r3, #2
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	3310      	adds	r3, #16
 80027ce:	443b      	add	r3, r7
 80027d0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	3301      	adds	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d9ee      	bls.n	80027be <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	2203      	movs	r2, #3
 80027e6:	4619      	mov	r1, r3
 80027e8:	200a      	movs	r0, #10
 80027ea:	f7ff fda5 	bl	8002338 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	2203      	movs	r2, #3
 80027f4:	4619      	mov	r1, r3
 80027f6:	2010      	movs	r0, #16
 80027f8:	f7ff fd9e 	bl	8002338 <nRF24_WriteRegisters>

}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000348 	.word	0x20000348

08002808 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800280e:	f7ff fe44 	bl	800249a <nRF24_ReadStatus>
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800281c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fe42 	bl	80024aa <nRF24_WriteStatus>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8002838:	2060      	movs	r0, #96	; 0x60
 800283a:	f7ff fd0f 	bl	800225c <nRF24_ReadRegister>
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	2b20      	cmp	r3, #32
 8002846:	d906      	bls.n	8002856 <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8002848:	f7ff fe3e 	bl	80024c8 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 800284c:	2002      	movs	r0, #2
 800284e:	f7ff fccc 	bl	80021ea <nRF24_Delay_ms>
        return 0;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8002856:	79fb      	ldrb	r3, [r7, #7]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800286a:	f7ff fdbb 	bl	80023e4 <nRF24_ReadConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e003      	b.n	800288a <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002888:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fdb1 	bl	80023f4 <nRF24_WriteConfig>
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80028a4:	f7ff fd9e 	bl	80023e4 <nRF24_ReadConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	f043 0320 	orr.w	r3, r3, #32
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	e003      	b.n	80028c4 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	f023 0320 	bic.w	r3, r3, #32
 80028c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fd94 	bl	80023f4 <nRF24_WriteConfig>
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80028de:	f7ff fd81 	bl	80023e4 <nRF24_ReadConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	f043 0310 	orr.w	r3, r3, #16
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e003      	b.n	80028fe <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	f023 0310 	bic.w	r3, r3, #16
 80028fc:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fd77 	bl	80023f4 <nRF24_WriteConfig>
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8002918:	f7ff ff89 	bl	800282e <nRF24_GetDynamicPayloadSize>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	2061      	movs	r0, #97	; 0x61
 800292e:	f7ff fcb9 	bl	80022a4 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <nRF24_IRQ_Handler+0x14>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2000034e 	.word	0x2000034e

08002954 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <nRF24_IRQ_Read+0x7c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d130      	bne.n	80029c6 <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <nRF24_IRQ_Read+0x7c>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 800296a:	f7ff fd96 	bl	800249a <nRF24_ReadStatus>
 800296e:	4603      	mov	r3, r0
 8002970:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8002976:	79bb      	ldrb	r3, [r7, #6]
 8002978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <nRF24_IRQ_Read+0x80>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298c:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <nRF24_IRQ_Read+0x84>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f043 0320 	orr.w	r3, r3, #32
 80029a4:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 80029a6:	79bb      	ldrb	r3, [r7, #6]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <nRF24_IRQ_Read+0x88>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	f043 0310 	orr.w	r3, r3, #16
 80029bc:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fd72 	bl	80024aa <nRF24_WriteStatus>
	}
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000034e 	.word	0x2000034e
 80029d4:	2000034b 	.word	0x2000034b
 80029d8:	2000034c 	.word	0x2000034c
 80029dc:	2000034d 	.word	0x2000034d

080029e0 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 80029e4:	f7ff ffb6 	bl	8002954 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <nRF24_Event+0x44>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 80029f0:	f7ff fa64 	bl	8001ebc <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <nRF24_Event+0x44>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <nRF24_Event+0x48>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8002a02:	f7ff fa4b 	bl	8001e9c <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <nRF24_Event+0x48>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <nRF24_Event+0x4c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8002a14:	f7ff fa7c 	bl	8001f10 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <nRF24_Event+0x4c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
	}
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000034b 	.word	0x2000034b
 8002a28:	2000034c 	.word	0x2000034c
 8002a2c:	2000034d 	.word	0x2000034d

08002a30 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002a38:	4a2e      	ldr	r2, [pc, #184]	; (8002af4 <nRF24_Init+0xc4>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2110      	movs	r1, #16
 8002a42:	482d      	ldr	r0, [pc, #180]	; (8002af8 <nRF24_Init+0xc8>)
 8002a44:	f002 f8d2 	bl	8004bec <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	482b      	ldr	r0, [pc, #172]	; (8002afc <nRF24_Init+0xcc>)
 8002a4e:	f002 f8cd 	bl	8004bec <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8002a52:	2005      	movs	r0, #5
 8002a54:	f7ff fbc9 	bl	80021ea <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002a58:	2003      	movs	r0, #3
 8002a5a:	f7ff fcd9 	bl	8002410 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f7ff fcf5 	bl	800244e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002a64:	2001      	movs	r0, #1
 8002a66:	f7ff fd63 	bl	8002530 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7ff fd7d 	bl	800256a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002a70:	2107      	movs	r1, #7
 8002a72:	2004      	movs	r0, #4
 8002a74:	f7ff fd96 	bl	80025a4 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002a78:	201d      	movs	r0, #29
 8002a7a:	f7ff fbef 	bl	800225c <nRF24_ReadRegister>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	201d      	movs	r0, #29
 8002a8a:	f7ff fc2f 	bl	80022ec <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002a8e:	213f      	movs	r1, #63	; 0x3f
 8002a90:	201c      	movs	r0, #28
 8002a92:	f7ff fc2b 	bl	80022ec <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8002a96:	200a      	movs	r0, #10
 8002a98:	f7ff fd9f 	bl	80025da <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7ff fdac 	bl	80025fc <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fddd 	bl	8002666 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002aac:	2003      	movs	r0, #3
 8002aae:	f7ff fe0f 	bl	80026d0 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7ff fb99 	bl	80021ea <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f7ff fed1 	bl	8002860 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7ff feeb 	bl	800289a <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7ff ff05 	bl	80028d4 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7ff fb8d 	bl	80021ea <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8002ad0:	f7ff fe9a 	bl	8002808 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 8002ad4:	201d      	movs	r0, #29
 8002ad6:	f7ff fbc1 	bl	800225c <nRF24_ReadRegister>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	201d      	movs	r0, #29
 8002ae6:	f7ff fc01 	bl	80022ec <nRF24_WriteRegister>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000344 	.word	0x20000344
 8002af8:	40010c00 	.word	0x40010c00
 8002afc:	40011400 	.word	0x40011400

08002b00 <nRF24_WriteAckPayload>:
//
//
//

nRF24_TX_Status nRF24_WriteAckPayload(uint8_t pipe, uint8_t * data, uint8_t size)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71bb      	strb	r3, [r7, #6]
	if(size > 32)
 8002b10:	79bb      	ldrb	r3, [r7, #6]
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d901      	bls.n	8002b1a <nRF24_WriteAckPayload+0x1a>
		return NRF24_NO_TRANSMITTED_PACKET;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00d      	b.n	8002b36 <nRF24_WriteAckPayload+0x36>

	pipe &= 0x07;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegisters((NRF24_CMD_W_ACK_PAYLOAD | pipe), data, size);
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f063 0357 	orn	r3, r3, #87	; 0x57
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	79ba      	ldrb	r2, [r7, #6]
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fc02 	bl	8002338 <nRF24_WriteRegisters>

	return NRF24_TRANSMITTED_PACKET;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <vTaskOnboardDiode>:




void vTaskOnboardDiode(void *pvParameters)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4804      	ldr	r0, [pc, #16]	; (8002b5c <vTaskOnboardDiode+0x1c>)
 8002b4c:	f002 f866 	bl	8004c1c <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8002b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b54:	f005 fefa 	bl	800894c <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002b58:	e7f6      	b.n	8002b48 <vTaskOnboardDiode+0x8>
 8002b5a:	bf00      	nop
 8002b5c:	40011000 	.word	0x40011000

08002b60 <vTaskRadio>:
{
	xTaskCreate(vTaskRadio, "NRF24 Task", 512, NULL, 1, &xTaskRadioHandle);
}

void vTaskRadio(void *pvParameters)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

	QueueRadioTX = xQueueCreate(32, 1);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2020      	movs	r0, #32
 8002b6e:	f005 f912 	bl	8007d96 <xQueueGenericCreate>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <vTaskRadio+0x38>)
 8002b76:	6013      	str	r3, [r2, #0]
	/* Transceiver init */
	nRF24_Init(&hspi3);
 8002b78:	4808      	ldr	r0, [pc, #32]	; (8002b9c <vTaskRadio+0x3c>)
 8002b7a:	f7ff ff59 	bl	8002a30 <nRF24_Init>
	/* Set communication addresses */
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8002b7e:	4908      	ldr	r1, [pc, #32]	; (8002ba0 <vTaskRadio+0x40>)
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff fdc2 	bl	800270a <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 8002b86:	4807      	ldr	r0, [pc, #28]	; (8002ba4 <vTaskRadio+0x44>)
 8002b88:	f7ff fdf8 	bl	800277c <nRF24_SetTXAddress>
	/* Enable RX mode */
	nRF24_RX_Mode();
 8002b8c:	f7ff fbfc 	bl	8002388 <nRF24_RX_Mode>

	for(;;)
	{

		/* Check for IRQ's */
		nRF24_Event();
 8002b90:	f7ff ff26 	bl	80029e0 <nRF24_Event>
 8002b94:	e7fc      	b.n	8002b90 <vTaskRadio+0x30>
 8002b96:	bf00      	nop
 8002b98:	20000354 	.word	0x20000354
 8002b9c:	20000358 	.word	0x20000358
 8002ba0:	0800e59c 	.word	0x0800e59c
 8002ba4:	0800e5a0 	.word	0x0800e5a0

08002ba8 <Radio_HandlerIRQ>:



/* Whole interrupt mechanism should be more optimised for RTOS usage but now I want to just get it work... */
void Radio_HandlerIRQ(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
	/* Set Interrupt Flag to 1 */
	nRF24_IRQ_Handler();
 8002bb2:	f7ff fec3 	bl	800293c <nRF24_IRQ_Handler>
	/* Notify the radio Task */
	vTaskNotifyGiveFromISR(xTaskRadioHandle, &xHigherPriorityTaskWoken);
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <Radio_HandlerIRQ+0x3c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1d3a      	adds	r2, r7, #4
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f006 fbd0 	bl	8009364 <vTaskNotifyGiveFromISR>
	/* yield if unblocked task (radio) has higher priority than current task */
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <Radio_HandlerIRQ+0x32>
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <Radio_HandlerIRQ+0x40>)
 8002bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	f3bf 8f6f 	isb	sy
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000350 	.word	0x20000350
 8002be8:	e000ed04 	.word	0xe000ed04

08002bec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002bf2:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <MX_SPI3_Init+0x68>)
 8002bf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c20:	2218      	movs	r2, #24
 8002c22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c38:	220a      	movs	r2, #10
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c3c:	4804      	ldr	r0, [pc, #16]	; (8002c50 <MX_SPI3_Init+0x64>)
 8002c3e:	f002 fed9 	bl	80059f4 <HAL_SPI_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002c48:	f7ff faca 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000358 	.word	0x20000358
 8002c54:	40003c00 	.word	0x40003c00

08002c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_SPI_MspInit+0xa8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d13f      	bne.n	8002cf8 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_SPI_MspInit+0xac>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <HAL_SPI_MspInit+0xac>)
 8002c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c82:	61d3      	str	r3, [r2, #28]
 8002c84:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <HAL_SPI_MspInit+0xac>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c90:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <HAL_SPI_MspInit+0xac>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a1b      	ldr	r2, [pc, #108]	; (8002d04 <HAL_SPI_MspInit+0xac>)
 8002c96:	f043 0310 	orr.w	r3, r3, #16
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_SPI_MspInit+0xac>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 8002ca8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4812      	ldr	r0, [pc, #72]	; (8002d08 <HAL_SPI_MspInit+0xb0>)
 8002cbe:	f001 fe11 	bl	80048e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 8002cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <HAL_SPI_MspInit+0xb0>)
 8002cd8:	f001 fe04 	bl	80048e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_SPI_MspInit+0xb4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf2:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <HAL_SPI_MspInit+0xb4>)
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40003c00 	.word	0x40003c00
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40011000 	.word	0x40011000
 8002d0c:	40010000 	.word	0x40010000

08002d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d16:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_MspInit+0x68>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_MspInit+0x68>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6193      	str	r3, [r2, #24]
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_MspInit+0x68>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_MspInit+0x68>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_MspInit+0x68>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	61d3      	str	r3, [r2, #28]
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_MspInit+0x68>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	210f      	movs	r1, #15
 8002d4a:	f06f 0001 	mvn.w	r0, #1
 8002d4e:	f001 fd9e 	bl	800488e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_MspInit+0x6c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_MspInit+0x6c>)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40010000 	.word	0x40010000

08002d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	; 0x38
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_InitTick+0xe8>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a33      	ldr	r2, [pc, #204]	; (8002e68 <HAL_InitTick+0xe8>)
 8002d9c:	f043 0310 	orr.w	r3, r3, #16
 8002da0:	61d3      	str	r3, [r2, #28]
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_InitTick+0xe8>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dae:	f107 0210 	add.w	r2, r7, #16
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 fdcd 	bl	8005958 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f002 fd9e 	bl	8005908 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	6378      	str	r0, [r7, #52]	; 0x34
 8002dce:	e004      	b.n	8002dda <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002dd0:	f002 fd9a 	bl	8005908 <HAL_RCC_GetPCLK1Freq>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <HAL_InitTick+0xec>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	3b01      	subs	r3, #1
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002de8:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <HAL_InitTick+0xf0>)
 8002dea:	4a22      	ldr	r2, [pc, #136]	; (8002e74 <HAL_InitTick+0xf4>)
 8002dec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_InitTick+0xf0>)
 8002df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002df6:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_InitTick+0xf0>)
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_InitTick+0xf0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_InitTick+0xf0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_InitTick+0xf0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002e0e:	4818      	ldr	r0, [pc, #96]	; (8002e70 <HAL_InitTick+0xf0>)
 8002e10:	f003 fb78 	bl	8006504 <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11b      	bne.n	8002e5a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e22:	4813      	ldr	r0, [pc, #76]	; (8002e70 <HAL_InitTick+0xf0>)
 8002e24:	f003 fbbe 	bl	80065a4 <HAL_TIM_Base_Start_IT>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d111      	bne.n	8002e5a <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002e36:	2036      	movs	r0, #54	; 0x36
 8002e38:	f001 fd45 	bl	80048c6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	d808      	bhi.n	8002e54 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002e42:	2200      	movs	r2, #0
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	2036      	movs	r0, #54	; 0x36
 8002e48:	f001 fd21 	bl	800488e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <HAL_InitTick+0xf8>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e002      	b.n	8002e5a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3738      	adds	r7, #56	; 0x38
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	431bde83 	.word	0x431bde83
 8002e70:	200003b0 	.word	0x200003b0
 8002e74:	40001000 	.word	0x40001000
 8002e78:	200000a4 	.word	0x200000a4

08002e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <NMI_Handler+0x4>

08002e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e86:	e7fe      	b.n	8002e86 <HardFault_Handler+0x4>

08002e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <MemManage_Handler+0x4>

08002e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002eaa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002eae:	f001 fecf 	bl	8004c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <TIM6_IRQHandler+0x10>)
 8002ebe:	f003 fdfd 	bl	8006abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200003b0 	.word	0x200003b0

08002ecc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <TIM7_IRQHandler+0x10>)
 8002ed2:	f003 fdf3 	bl	8006abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200004d4 	.word	0x200004d4

08002ee0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return 1;
 8002ee4:	2301      	movs	r3, #1
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <_kill>:

int _kill(int pid, int sig)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ef8:	f008 fe06 	bl	800bb08 <__errno>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2216      	movs	r2, #22
 8002f00:	601a      	str	r2, [r3, #0]
  return -1;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_exit>:

void _exit (int status)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f16:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffe7 	bl	8002eee <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f20:	e7fe      	b.n	8002f20 <_exit+0x12>

08002f22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e00a      	b.n	8002f4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f34:	f3af 8000 	nop.w
 8002f38:	4601      	mov	r1, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	60ba      	str	r2, [r7, #8]
 8002f40:	b2ca      	uxtb	r2, r1
 8002f42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3301      	adds	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	dbf0      	blt.n	8002f34 <_read+0x12>
  }

  return len;
 8002f52:	687b      	ldr	r3, [r7, #4]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	e009      	b.n	8002f82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	60ba      	str	r2, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f8fa 	bl	8002170 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dbf1      	blt.n	8002f6e <_write+0x12>
  }
  return len;
 8002f8a:	687b      	ldr	r3, [r7, #4]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_close>:

int _close(int file)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fba:	605a      	str	r2, [r3, #4]
  return 0;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <_isatty>:

int _isatty(int file)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fd0:	2301      	movs	r3, #1
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <_sbrk+0x5c>)
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <_sbrk+0x60>)
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <_sbrk+0x64>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <_sbrk+0x64>)
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <_sbrk+0x68>)
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <_sbrk+0x64>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	429a      	cmp	r2, r3
 8003022:	d207      	bcs.n	8003034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003024:	f008 fd70 	bl	800bb08 <__errno>
 8003028:	4603      	mov	r3, r0
 800302a:	220c      	movs	r2, #12
 800302c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	e009      	b.n	8003048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <_sbrk+0x64>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	4a05      	ldr	r2, [pc, #20]	; (8003058 <_sbrk+0x64>)
 8003044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20010000 	.word	0x20010000
 8003054:	00001000 	.word	0x00001000
 8003058:	200003f8 	.word	0x200003f8
 800305c:	20002580 	.word	0x20002580

08003060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	; 0x30
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003072:	f107 030c 	add.w	r3, r7, #12
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f008 fcdf 	bl	800ba3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <MX_TIM1_Init+0xa8>)
 800308a:	4a23      	ldr	r2, [pc, #140]	; (8003118 <MX_TIM1_Init+0xac>)
 800308c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <MX_TIM1_Init+0xa8>)
 8003090:	2200      	movs	r2, #0
 8003092:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003094:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <MX_TIM1_Init+0xa8>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <MX_TIM1_Init+0xa8>)
 800309c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a2:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <MX_TIM1_Init+0xa8>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <MX_TIM1_Init+0xa8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <MX_TIM1_Init+0xa8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030b4:	2303      	movs	r3, #3
 80030b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030bc:	2301      	movs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030cc:	2301      	movs	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	4619      	mov	r1, r3
 80030de:	480d      	ldr	r0, [pc, #52]	; (8003114 <MX_TIM1_Init+0xa8>)
 80030e0:	f003 fbbc 	bl	800685c <HAL_TIM_Encoder_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80030ea:	f7ff f879 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	4806      	ldr	r0, [pc, #24]	; (8003114 <MX_TIM1_Init+0xa8>)
 80030fc:	f004 fa42 	bl	8007584 <HAL_TIMEx_MasterConfigSynchronization>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003106:	f7ff f86b 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800310a:	bf00      	nop
 800310c:	3730      	adds	r7, #48	; 0x30
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200003fc 	.word	0x200003fc
 8003118:	40012c00 	.word	0x40012c00

0800311c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	; 0x38
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003130:	f107 0320 	add.w	r3, r7, #32
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
 8003148:	615a      	str	r2, [r3, #20]
 800314a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800314c:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <MX_TIM3_Init+0x124>)
 800314e:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <MX_TIM3_Init+0x128>)
 8003150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <MX_TIM3_Init+0x124>)
 8003154:	2201      	movs	r2, #1
 8003156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003158:	4b39      	ldr	r3, [pc, #228]	; (8003240 <MX_TIM3_Init+0x124>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800315e:	4b38      	ldr	r3, [pc, #224]	; (8003240 <MX_TIM3_Init+0x124>)
 8003160:	22ff      	movs	r2, #255	; 0xff
 8003162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003164:	4b36      	ldr	r3, [pc, #216]	; (8003240 <MX_TIM3_Init+0x124>)
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316a:	4b35      	ldr	r3, [pc, #212]	; (8003240 <MX_TIM3_Init+0x124>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003170:	4833      	ldr	r0, [pc, #204]	; (8003240 <MX_TIM3_Init+0x124>)
 8003172:	f003 f9c7 	bl	8006504 <HAL_TIM_Base_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800317c:	f7ff f830 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800318a:	4619      	mov	r1, r3
 800318c:	482c      	ldr	r0, [pc, #176]	; (8003240 <MX_TIM3_Init+0x124>)
 800318e:	f003 fe5f 	bl	8006e50 <HAL_TIM_ConfigClockSource>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003198:	f7ff f822 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800319c:	4828      	ldr	r0, [pc, #160]	; (8003240 <MX_TIM3_Init+0x124>)
 800319e:	f003 fa5b 	bl	8006658 <HAL_TIM_PWM_Init>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80031a8:	f7ff f81a 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031b4:	f107 0320 	add.w	r3, r7, #32
 80031b8:	4619      	mov	r1, r3
 80031ba:	4821      	ldr	r0, [pc, #132]	; (8003240 <MX_TIM3_Init+0x124>)
 80031bc:	f004 f9e2 	bl	8007584 <HAL_TIMEx_MasterConfigSynchronization>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80031c6:	f7ff f80b 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ca:	2360      	movs	r3, #96	; 0x60
 80031cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80031d6:	2304      	movs	r3, #4
 80031d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	2200      	movs	r2, #0
 80031de:	4619      	mov	r1, r3
 80031e0:	4817      	ldr	r0, [pc, #92]	; (8003240 <MX_TIM3_Init+0x124>)
 80031e2:	f003 fd73 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80031ec:	f7fe fff8 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	2204      	movs	r2, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4812      	ldr	r0, [pc, #72]	; (8003240 <MX_TIM3_Init+0x124>)
 80031f8:	f003 fd68 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8003202:	f7fe ffed 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2208      	movs	r2, #8
 800320a:	4619      	mov	r1, r3
 800320c:	480c      	ldr	r0, [pc, #48]	; (8003240 <MX_TIM3_Init+0x124>)
 800320e:	f003 fd5d 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8003218:	f7fe ffe2 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	220c      	movs	r2, #12
 8003220:	4619      	mov	r1, r3
 8003222:	4807      	ldr	r0, [pc, #28]	; (8003240 <MX_TIM3_Init+0x124>)
 8003224:	f003 fd52 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 800322e:	f7fe ffd7 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003232:	4803      	ldr	r0, [pc, #12]	; (8003240 <MX_TIM3_Init+0x124>)
 8003234:	f000 f93a 	bl	80034ac <HAL_TIM_MspPostInit>

}
 8003238:	bf00      	nop
 800323a:	3738      	adds	r7, #56	; 0x38
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000444 	.word	0x20000444
 8003244:	40000400 	.word	0x40000400

08003248 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800324e:	f107 030c 	add.w	r3, r7, #12
 8003252:	2224      	movs	r2, #36	; 0x24
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f008 fbf1 	bl	800ba3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <MX_TIM4_Init+0xa0>)
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <MX_TIM4_Init+0xa4>)
 8003268:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800326a:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <MX_TIM4_Init+0xa0>)
 800326c:	2200      	movs	r2, #0
 800326e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <MX_TIM4_Init+0xa0>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <MX_TIM4_Init+0xa0>)
 8003278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <MX_TIM4_Init+0xa0>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <MX_TIM4_Init+0xa0>)
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800328a:	2303      	movs	r3, #3
 800328c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800328e:	2302      	movs	r3, #2
 8003290:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003292:	2301      	movs	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800329e:	2302      	movs	r3, #2
 80032a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032a2:	2301      	movs	r3, #1
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	4619      	mov	r1, r3
 80032b4:	480c      	ldr	r0, [pc, #48]	; (80032e8 <MX_TIM4_Init+0xa0>)
 80032b6:	f003 fad1 	bl	800685c <HAL_TIM_Encoder_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80032c0:	f7fe ff8e 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	4619      	mov	r1, r3
 80032d0:	4805      	ldr	r0, [pc, #20]	; (80032e8 <MX_TIM4_Init+0xa0>)
 80032d2:	f004 f957 	bl	8007584 <HAL_TIMEx_MasterConfigSynchronization>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80032dc:	f7fe ff80 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032e0:	bf00      	nop
 80032e2:	3730      	adds	r7, #48	; 0x30
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	2000048c 	.word	0x2000048c
 80032ec:	40000800 	.word	0x40000800

080032f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f6:	463b      	mov	r3, r7
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <MX_TIM7_Init+0x64>)
 8003300:	4a15      	ldr	r2, [pc, #84]	; (8003358 <MX_TIM7_Init+0x68>)
 8003302:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <MX_TIM7_Init+0x64>)
 8003306:	2247      	movs	r2, #71	; 0x47
 8003308:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <MX_TIM7_Init+0x64>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <MX_TIM7_Init+0x64>)
 8003312:	f242 720f 	movw	r2, #9999	; 0x270f
 8003316:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <MX_TIM7_Init+0x64>)
 800331a:	2200      	movs	r2, #0
 800331c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800331e:	480d      	ldr	r0, [pc, #52]	; (8003354 <MX_TIM7_Init+0x64>)
 8003320:	f003 f8f0 	bl	8006504 <HAL_TIM_Base_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800332a:	f7fe ff59 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003336:	463b      	mov	r3, r7
 8003338:	4619      	mov	r1, r3
 800333a:	4806      	ldr	r0, [pc, #24]	; (8003354 <MX_TIM7_Init+0x64>)
 800333c:	f004 f922 	bl	8007584 <HAL_TIMEx_MasterConfigSynchronization>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003346:	f7fe ff4b 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200004d4 	.word	0x200004d4
 8003358:	40001400 	.word	0x40001400

0800335c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	f107 0318 	add.w	r3, r7, #24
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d125      	bne.n	80033c8 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	4a29      	ldr	r2, [pc, #164]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003386:	6193      	str	r3, [r2, #24]
 8003388:	4b27      	ldr	r3, [pc, #156]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	4a23      	ldr	r2, [pc, #140]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6193      	str	r3, [r2, #24]
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 80033ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ba:	f107 0318 	add.w	r3, r7, #24
 80033be:	4619      	mov	r1, r3
 80033c0:	481a      	ldr	r0, [pc, #104]	; (800342c <HAL_TIM_Encoder_MspInit+0xd0>)
 80033c2:	f001 fa8f 	bl	80048e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80033c6:	e028      	b.n	800341a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_TIM_Encoder_MspInit+0xd4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d123      	bne.n	800341a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	61d3      	str	r3, [r2, #28]
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ea:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	6193      	str	r3, [r2, #24]
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <HAL_TIM_Encoder_MspInit+0xcc>)
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 8003402:	23c0      	movs	r3, #192	; 0xc0
 8003404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340e:	f107 0318 	add.w	r3, r7, #24
 8003412:	4619      	mov	r1, r3
 8003414:	4807      	ldr	r0, [pc, #28]	; (8003434 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003416:	f001 fa65 	bl	80048e4 <HAL_GPIO_Init>
}
 800341a:	bf00      	nop
 800341c:	3728      	adds	r7, #40	; 0x28
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40010800 	.word	0x40010800
 8003430:	40000800 	.word	0x40000800
 8003434:	40010c00 	.word	0x40010c00

08003438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <HAL_TIM_Base_MspInit+0x68>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10c      	bne.n	8003464 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800344a:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_TIM_Base_MspInit+0x6c>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <HAL_TIM_Base_MspInit+0x6c>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	61d3      	str	r3, [r2, #28]
 8003456:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <HAL_TIM_Base_MspInit+0x6c>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003462:	e018      	b.n	8003496 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <HAL_TIM_Base_MspInit+0x70>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d113      	bne.n	8003496 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <HAL_TIM_Base_MspInit+0x6c>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <HAL_TIM_Base_MspInit+0x6c>)
 8003474:	f043 0320 	orr.w	r3, r3, #32
 8003478:	61d3      	str	r3, [r2, #28]
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_TIM_Base_MspInit+0x6c>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2105      	movs	r1, #5
 800348a:	2037      	movs	r0, #55	; 0x37
 800348c:	f001 f9ff 	bl	800488e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003490:	2037      	movs	r0, #55	; 0x37
 8003492:	f001 fa18 	bl	80048c6 <HAL_NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40001400 	.word	0x40001400

080034ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_TIM_MspPostInit+0x80>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d12a      	bne.n	8003522 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_TIM_MspPostInit+0x84>)
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <HAL_TIM_MspPostInit+0x84>)
 80034d2:	f043 0310 	orr.w	r3, r3, #16
 80034d6:	6193      	str	r3, [r2, #24]
 80034d8:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_TIM_MspPostInit+0x84>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 80034e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80034e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4619      	mov	r1, r3
 80034f8:	480e      	ldr	r0, [pc, #56]	; (8003534 <HAL_TIM_MspPostInit+0x88>)
 80034fa:	f001 f9f3 	bl	80048e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_TIM_MspPostInit+0x8c>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	4a06      	ldr	r2, [pc, #24]	; (8003538 <HAL_TIM_MspPostInit+0x8c>)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003522:	bf00      	nop
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40000400 	.word	0x40000400
 8003530:	40021000 	.word	0x40021000
 8003534:	40011000 	.word	0x40011000
 8003538:	40010000 	.word	0x40010000

0800353c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <MX_USART2_UART_Init+0x50>)
 8003544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800354c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003562:	220c      	movs	r2, #12
 8003564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003572:	4805      	ldr	r0, [pc, #20]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003574:	f004 f87e 	bl	8007674 <HAL_UART_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800357e:	f7fe fe2f 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	2000051c 	.word	0x2000051c
 800358c:	40004400 	.word	0x40004400

08003590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0310 	add.w	r3, r7, #16
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d12f      	bne.n	8003610 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_UART_MspInit+0x8c>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_UART_MspInit+0x8c>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ba:	61d3      	str	r3, [r2, #28]
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_UART_MspInit+0x8c>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_UART_MspInit+0x8c>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	4a13      	ldr	r2, [pc, #76]	; (800361c <HAL_UART_MspInit+0x8c>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6193      	str	r3, [r2, #24]
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_UART_MspInit+0x8c>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035e0:	2304      	movs	r3, #4
 80035e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e8:	2303      	movs	r3, #3
 80035ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ec:	f107 0310 	add.w	r3, r7, #16
 80035f0:	4619      	mov	r1, r3
 80035f2:	480b      	ldr	r0, [pc, #44]	; (8003620 <HAL_UART_MspInit+0x90>)
 80035f4:	f001 f976 	bl	80048e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035f8:	2308      	movs	r3, #8
 80035fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	4619      	mov	r1, r3
 800360a:	4805      	ldr	r0, [pc, #20]	; (8003620 <HAL_UART_MspInit+0x90>)
 800360c:	f001 f96a 	bl	80048e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40004400 	.word	0x40004400
 800361c:	40021000 	.word	0x40021000
 8003620:	40010800 	.word	0x40010800

08003624 <DRV8836_Init>:
 */
#include "Motors/drv8836.h"
#include "tim.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	460b      	mov	r3, r1
 8003634:	80fb      	strh	r3, [r7, #6]
 8003636:	4613      	mov	r3, r2
 8003638:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	88ba      	ldrh	r2, [r7, #4]
 800364a:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8b3a      	ldrh	r2, [r7, #24]
 8003650:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8bba      	ldrh	r2, [r7, #28]
 8003656:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	891b      	ldrh	r3, [r3, #8]
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f003 f850 	bl	8006708 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	895b      	ldrh	r3, [r3, #10]
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f003 f848 	bl	8006708 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	899b      	ldrh	r3, [r3, #12]
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f003 f840 	bl	8006708 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	89db      	ldrh	r3, [r3, #14]
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f003 f838 	bl	8006708 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <DRV8836_Init+0x86>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2200      	movs	r2, #0
 80036a6:	635a      	str	r2, [r3, #52]	; 0x34
 80036a8:	e016      	b.n	80036d8 <DRV8836_Init+0xb4>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d105      	bne.n	80036bc <DRV8836_Init+0x98>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	6393      	str	r3, [r2, #56]	; 0x38
 80036ba:	e00d      	b.n	80036d8 <DRV8836_Init+0xb4>
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d105      	bne.n	80036ce <DRV8836_Init+0xaa>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 80036cc:	e004      	b.n	80036d8 <DRV8836_Init+0xb4>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 80036d8:	88bb      	ldrh	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <DRV8836_Init+0xc6>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34
 80036e8:	e016      	b.n	8003718 <DRV8836_Init+0xf4>
 80036ea:	88bb      	ldrh	r3, [r7, #4]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d105      	bne.n	80036fc <DRV8836_Init+0xd8>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2300      	movs	r3, #0
 80036f8:	6393      	str	r3, [r2, #56]	; 0x38
 80036fa:	e00d      	b.n	8003718 <DRV8836_Init+0xf4>
 80036fc:	88bb      	ldrh	r3, [r7, #4]
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d105      	bne.n	800370e <DRV8836_Init+0xea>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800370c:	e004      	b.n	8003718 <DRV8836_Init+0xf4>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2300      	movs	r3, #0
 8003716:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 8003718:	8b3b      	ldrh	r3, [r7, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <DRV8836_Init+0x106>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	635a      	str	r2, [r3, #52]	; 0x34
 8003728:	e016      	b.n	8003758 <DRV8836_Init+0x134>
 800372a:	8b3b      	ldrh	r3, [r7, #24]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d105      	bne.n	800373c <DRV8836_Init+0x118>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	6393      	str	r3, [r2, #56]	; 0x38
 800373a:	e00d      	b.n	8003758 <DRV8836_Init+0x134>
 800373c:	8b3b      	ldrh	r3, [r7, #24]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d105      	bne.n	800374e <DRV8836_Init+0x12a>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2300      	movs	r3, #0
 800374a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800374c:	e004      	b.n	8003758 <DRV8836_Init+0x134>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2300      	movs	r3, #0
 8003756:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8003758:	8bbb      	ldrh	r3, [r7, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <DRV8836_Init+0x146>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003768:	e016      	b.n	8003798 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800376a:	8bbb      	ldrh	r3, [r7, #28]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d105      	bne.n	800377c <DRV8836_Init+0x158>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	2300      	movs	r3, #0
 8003778:	6393      	str	r3, [r2, #56]	; 0x38
}
 800377a:	e00d      	b.n	8003798 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800377c:	8bbb      	ldrh	r3, [r7, #28]
 800377e:	2b08      	cmp	r3, #8
 8003780:	d105      	bne.n	800378e <DRV8836_Init+0x16a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800378c:	e004      	b.n	8003798 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <DRV8836_SetMotor>:

DRV8836_Error_t DRV8836_SetMotor(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction, uint16_t speed)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	70fb      	strb	r3, [r7, #3]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70bb      	strb	r3, [r7, #2]
 80037b6:	4613      	mov	r3, r2
 80037b8:	803b      	strh	r3, [r7, #0]
	DRV8836_Direction_t *TargetDirection;
	uint16_t *TargetSpeed;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;

	if(speed > ic->drv_htim->Instance->ARR) //check if pwm value fit the counter period range
 80037ba:	883a      	ldrh	r2, [r7, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d901      	bls.n	80037cc <DRV8836_SetMotor+0x2c>
	{
		return DRV8836_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e14e      	b.n	8003a6a <DRV8836_SetMotor+0x2ca>
	}

	if(MOTOR_A == output)
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10c      	bne.n	80037ec <DRV8836_SetMotor+0x4c>
	{
		TargetForwardChannel = ic->a_forward_channel;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	891b      	ldrh	r3, [r3, #8]
 80037d6:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->a_reverse_channel;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	895b      	ldrh	r3, [r3, #10]
 80037dc:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->a_speed);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3310      	adds	r3, #16
 80037e2:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3314      	adds	r3, #20
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e011      	b.n	8003810 <DRV8836_SetMotor+0x70>
	}
	else if(MOTOR_B == output)
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10c      	bne.n	800380c <DRV8836_SetMotor+0x6c>
	{
		TargetForwardChannel = ic->b_forward_channel;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	899b      	ldrh	r3, [r3, #12]
 80037f6:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->b_reverse_channel;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	89db      	ldrh	r3, [r3, #14]
 80037fc:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->b_speed);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3312      	adds	r3, #18
 8003802:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->b_direction);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3315      	adds	r3, #21
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e001      	b.n	8003810 <DRV8836_SetMotor+0x70>
	}
	else
	{
		return DRV8836_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e12c      	b.n	8003a6a <DRV8836_SetMotor+0x2ca>
	}

	switch(direction)
 8003810:	78bb      	ldrb	r3, [r7, #2]
 8003812:	2b03      	cmp	r3, #3
 8003814:	f200 8120 	bhi.w	8003a58 <DRV8836_SetMotor+0x2b8>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <DRV8836_SetMotor+0x80>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003831 	.word	0x08003831
 8003824:	080038b3 	.word	0x080038b3
 8003828:	08003935 	.word	0x08003935
 800382c:	080039b7 	.word	0x080039b7
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8003830:	89fb      	ldrh	r3, [r7, #14]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <DRV8836_SetMotor+0xa2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	635a      	str	r2, [r3, #52]	; 0x34
 8003840:	e016      	b.n	8003870 <DRV8836_SetMotor+0xd0>
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d105      	bne.n	8003854 <DRV8836_SetMotor+0xb4>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	6393      	str	r3, [r2, #56]	; 0x38
 8003852:	e00d      	b.n	8003870 <DRV8836_SetMotor+0xd0>
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d105      	bne.n	8003866 <DRV8836_SetMotor+0xc6>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	2300      	movs	r3, #0
 8003862:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003864:	e004      	b.n	8003870 <DRV8836_SetMotor+0xd0>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	2300      	movs	r3, #0
 800386e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003870:	89bb      	ldrh	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <DRV8836_SetMotor+0xe2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2200      	movs	r2, #0
 800387e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003880:	e0ec      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003882:	89bb      	ldrh	r3, [r7, #12]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d105      	bne.n	8003894 <DRV8836_SetMotor+0xf4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	2300      	movs	r3, #0
 8003890:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003892:	e0e3      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003894:	89bb      	ldrh	r3, [r7, #12]
 8003896:	2b08      	cmp	r3, #8
 8003898:	d105      	bne.n	80038a6 <DRV8836_SetMotor+0x106>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80038a4:	e0da      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2300      	movs	r3, #0
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80038b0:	e0d4      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 80038b2:	89fb      	ldrh	r3, [r7, #14]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <DRV8836_SetMotor+0x124>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34
 80038c2:	e016      	b.n	80038f2 <DRV8836_SetMotor+0x152>
 80038c4:	89fb      	ldrh	r3, [r7, #14]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d105      	bne.n	80038d6 <DRV8836_SetMotor+0x136>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2300      	movs	r3, #0
 80038d2:	6393      	str	r3, [r2, #56]	; 0x38
 80038d4:	e00d      	b.n	80038f2 <DRV8836_SetMotor+0x152>
 80038d6:	89fb      	ldrh	r3, [r7, #14]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d105      	bne.n	80038e8 <DRV8836_SetMotor+0x148>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80038e6:	e004      	b.n	80038f2 <DRV8836_SetMotor+0x152>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2300      	movs	r3, #0
 80038f0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80038f2:	89bb      	ldrh	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <DRV8836_SetMotor+0x164>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	883a      	ldrh	r2, [r7, #0]
 8003900:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003902:	e0ab      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8003904:	89bb      	ldrh	r3, [r7, #12]
 8003906:	2b04      	cmp	r3, #4
 8003908:	d105      	bne.n	8003916 <DRV8836_SetMotor+0x176>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	883b      	ldrh	r3, [r7, #0]
 8003912:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003914:	e0a2      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8003916:	89bb      	ldrh	r3, [r7, #12]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d105      	bne.n	8003928 <DRV8836_SetMotor+0x188>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	883b      	ldrh	r3, [r7, #0]
 8003924:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003926:	e099      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	883b      	ldrh	r3, [r7, #0]
 8003930:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003932:	e093      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, speed);
 8003934:	89fb      	ldrh	r3, [r7, #14]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <DRV8836_SetMotor+0x1a6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	883a      	ldrh	r2, [r7, #0]
 8003942:	635a      	str	r2, [r3, #52]	; 0x34
 8003944:	e016      	b.n	8003974 <DRV8836_SetMotor+0x1d4>
 8003946:	89fb      	ldrh	r3, [r7, #14]
 8003948:	2b04      	cmp	r3, #4
 800394a:	d105      	bne.n	8003958 <DRV8836_SetMotor+0x1b8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	883b      	ldrh	r3, [r7, #0]
 8003954:	6393      	str	r3, [r2, #56]	; 0x38
 8003956:	e00d      	b.n	8003974 <DRV8836_SetMotor+0x1d4>
 8003958:	89fb      	ldrh	r3, [r7, #14]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d105      	bne.n	800396a <DRV8836_SetMotor+0x1ca>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	883b      	ldrh	r3, [r7, #0]
 8003966:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003968:	e004      	b.n	8003974 <DRV8836_SetMotor+0x1d4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	883b      	ldrh	r3, [r7, #0]
 8003972:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003974:	89bb      	ldrh	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d105      	bne.n	8003986 <DRV8836_SetMotor+0x1e6>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2200      	movs	r2, #0
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003984:	e06a      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003986:	89bb      	ldrh	r3, [r7, #12]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d105      	bne.n	8003998 <DRV8836_SetMotor+0x1f8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2300      	movs	r3, #0
 8003994:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003996:	e061      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8003998:	89bb      	ldrh	r3, [r7, #12]
 800399a:	2b08      	cmp	r3, #8
 800399c:	d105      	bne.n	80039aa <DRV8836_SetMotor+0x20a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80039a8:	e058      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	2300      	movs	r3, #0
 80039b2:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80039b4:	e052      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 80039b6:	89fb      	ldrh	r3, [r7, #14]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <DRV8836_SetMotor+0x22c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68d2      	ldr	r2, [r2, #12]
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34
 80039ca:	e01c      	b.n	8003a06 <DRV8836_SetMotor+0x266>
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d107      	bne.n	80039e2 <DRV8836_SetMotor+0x242>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6852      	ldr	r2, [r2, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	6393      	str	r3, [r2, #56]	; 0x38
 80039e0:	e011      	b.n	8003a06 <DRV8836_SetMotor+0x266>
 80039e2:	89fb      	ldrh	r3, [r7, #14]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d107      	bne.n	80039f8 <DRV8836_SetMotor+0x258>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6852      	ldr	r2, [r2, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80039f6:	e006      	b.n	8003a06 <DRV8836_SetMotor+0x266>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6852      	ldr	r2, [r2, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8003a06:	89bb      	ldrh	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <DRV8836_SetMotor+0x27c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68d2      	ldr	r2, [r2, #12]
 8003a18:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003a1a:	e01f      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d107      	bne.n	8003a32 <DRV8836_SetMotor+0x292>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6852      	ldr	r2, [r2, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003a30:	e014      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8003a32:	89bb      	ldrh	r3, [r7, #12]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d107      	bne.n	8003a48 <DRV8836_SetMotor+0x2a8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003a46:	e009      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6852      	ldr	r2, [r2, #4]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003a56:	e001      	b.n	8003a5c <DRV8836_SetMotor+0x2bc>

	default:
		return DRV8836_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e006      	b.n	8003a6a <DRV8836_SetMotor+0x2ca>
		break;
	}

	*TargetDirection = direction;	//save set direction and speed to struct
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	78ba      	ldrb	r2, [r7, #2]
 8003a60:	701a      	strb	r2, [r3, #0]
	*TargetSpeed = speed;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	883a      	ldrh	r2, [r7, #0]
 8003a66:	801a      	strh	r2, [r3, #0]

	return DRV8836_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <MotorEnc_Init>:
int32_t FilterSum;
uint16_t OldestMember;


void MotorEnc_Init(MotorEncoder_t *encoder, TIM_HandleTypeDef *htim)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
	encoder->htimEnc = htim;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8003a84:	213c      	movs	r1, #60	; 0x3c
 8003a86:	6838      	ldr	r0, [r7, #0]
 8003a88:	f002 ff8a 	bl	80069a0 <HAL_TIM_Encoder_Start>
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <MotorEnc_Update>:


void MotorEnc_Update(MotorEncoder_t *encoder)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	int16_t TempPosition = encoder->Position;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	899b      	ldrh	r3, [r3, #12]
 8003aa0:	81fb      	strh	r3, [r7, #14]

	/* Calculate counter difference */
	int CounterDif = encoder->htimEnc->Instance->CNT - encoder->LastCounter;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	60bb      	str	r3, [r7, #8]
	/* Check if counter has changed */
	if(CounterDif >= 1 || CounterDif <= -1)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	dc02      	bgt.n	8003abe <MotorEnc_Update+0x2a>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da0a      	bge.n	8003ad4 <MotorEnc_Update+0x40>
	{
		/* Velocity is equal to difference, very important type casting! */
		/* Casting uint32_t to int8_t solves overflow problem in fast and correct way */
		encoder->Velocity = (int8_t)(CounterDif);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	b25a      	sxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	711a      	strb	r2, [r3, #4]
		encoder->LastCounter = encoder->htimEnc->Instance->CNT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	e002      	b.n	8003ada <MotorEnc_Update+0x46>
	}
	else
	{
		encoder->Velocity = 0;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	711a      	strb	r2, [r3, #4]
	}

	TempPosition = encoder->Position + encoder->Velocity;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	81fb      	strh	r3, [r7, #14]

	if(encoder->Velocity != 0)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d024      	beq.n	8003b44 <MotorEnc_Update+0xb0>
	{
		if(TempPosition >= 0)
 8003afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db16      	blt.n	8003b30 <MotorEnc_Update+0x9c>
		{
			encoder->Position = (encoder->Position + encoder->Velocity) % PULSES_PER_ROTATION;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <MotorEnc_Update+0xbc>)
 8003b14:	fb82 1203 	smull	r1, r2, r2, r3
 8003b18:	1251      	asrs	r1, r2, #9
 8003b1a:	17da      	asrs	r2, r3, #31
 8003b1c:	1a8a      	subs	r2, r1, r2
 8003b1e:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8003b22:	fb01 f202 	mul.w	r2, r1, r2
 8003b26:	1a9a      	subs	r2, r3, r2
 8003b28:	b212      	sxth	r2, r2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	819a      	strh	r2, [r3, #12]


	//TODO: calculate RPM, position and start working on PID
	// 300RPM, 1:50 ratio,

}
 8003b2e:	e009      	b.n	8003b44 <MotorEnc_Update+0xb0>
			encoder->Position = PULSES_PER_ROTATION + encoder->Velocity;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	b21a      	sxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	819a      	strh	r2, [r3, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	5d9f7391 	.word	0x5d9f7391

08003b54 <Motors_Init>:
//
// -- Init --
//

void Motors_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af02      	add	r7, sp, #8
	DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	2308      	movs	r3, #8
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2304      	movs	r3, #4
 8003b64:	2200      	movs	r2, #0
 8003b66:	490a      	ldr	r1, [pc, #40]	; (8003b90 <Motors_Init+0x3c>)
 8003b68:	480a      	ldr	r0, [pc, #40]	; (8003b94 <Motors_Init+0x40>)
 8003b6a:	f7ff fd5b 	bl	8003624 <DRV8836_Init>
	MotorEnc_Init(&MotorEncoderA, &htim1);
 8003b6e:	490a      	ldr	r1, [pc, #40]	; (8003b98 <Motors_Init+0x44>)
 8003b70:	480a      	ldr	r0, [pc, #40]	; (8003b9c <Motors_Init+0x48>)
 8003b72:	f7ff ff7f 	bl	8003a74 <MotorEnc_Init>
	MotorEnc_Init(&MotorEncoderB, &htim4);
 8003b76:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <Motors_Init+0x4c>)
 8003b78:	480a      	ldr	r0, [pc, #40]	; (8003ba4 <Motors_Init+0x50>)
 8003b7a:	f7ff ff7b 	bl	8003a74 <MotorEnc_Init>

	FIRFilter_Init(&EncoderFilterA);
 8003b7e:	480a      	ldr	r0, [pc, #40]	; (8003ba8 <Motors_Init+0x54>)
 8003b80:	f7fd fd14 	bl	80015ac <FIRFilter_Init>
	FIRFilter_Init(&EncoderFilterB);
 8003b84:	4809      	ldr	r0, [pc, #36]	; (8003bac <Motors_Init+0x58>)
 8003b86:	f7fd fd11 	bl	80015ac <FIRFilter_Init>
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000444 	.word	0x20000444
 8003b94:	20000564 	.word	0x20000564
 8003b98:	200003fc 	.word	0x200003fc
 8003b9c:	2000057c 	.word	0x2000057c
 8003ba0:	2000048c 	.word	0x2000048c
 8003ba4:	20000594 	.word	0x20000594
 8003ba8:	200005ac 	.word	0x200005ac
 8003bac:	20000618 	.word	0x20000618

08003bb0 <Motors_SetMotor>:
//
// -- Setters --
//

void Motors_SetMotor(DRV8836_Output_t motorAB, DRV8836_Direction_t direction, uint16_t speed)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	71bb      	strb	r3, [r7, #6]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80bb      	strh	r3, [r7, #4]
	DRV8836_SetMotor(&MotorDriver, motorAB, direction, speed);
 8003bc2:	88bb      	ldrh	r3, [r7, #4]
 8003bc4:	79ba      	ldrb	r2, [r7, #6]
 8003bc6:	79f9      	ldrb	r1, [r7, #7]
 8003bc8:	4803      	ldr	r0, [pc, #12]	; (8003bd8 <Motors_SetMotor+0x28>)
 8003bca:	f7ff fde9 	bl	80037a0 <DRV8836_SetMotor>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000564 	.word	0x20000564

08003bdc <Motors_SetMotorPWM>:

Motors_Error_t Motors_SetMotorPWM(DRV8836_Output_t motorAB, uint16_t speed)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	460a      	mov	r2, r1
 8003be6:	71fb      	strb	r3, [r7, #7]
 8003be8:	4613      	mov	r3, r2
 8003bea:	80bb      	strh	r3, [r7, #4]
	switch(motorAB)
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <Motors_SetMotorPWM+0x1c>
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d009      	beq.n	8003c0a <Motors_SetMotorPWM+0x2e>
 8003bf6:	e011      	b.n	8003c1c <Motors_SetMotorPWM+0x40>
	{
	case MOTOR_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.a_direction, speed);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <Motors_SetMotorPWM+0x4c>)
 8003bfa:	7d1a      	ldrb	r2, [r3, #20]
 8003bfc:	88bb      	ldrh	r3, [r7, #4]
 8003bfe:	79f9      	ldrb	r1, [r7, #7]
 8003c00:	4809      	ldr	r0, [pc, #36]	; (8003c28 <Motors_SetMotorPWM+0x4c>)
 8003c02:	f7ff fdcd 	bl	80037a0 <DRV8836_SetMotor>
 8003c06:	4603      	mov	r3, r0
 8003c08:	e009      	b.n	8003c1e <Motors_SetMotorPWM+0x42>
		break;

	case MOTOR_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.b_direction, speed);
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <Motors_SetMotorPWM+0x4c>)
 8003c0c:	7d5a      	ldrb	r2, [r3, #21]
 8003c0e:	88bb      	ldrh	r3, [r7, #4]
 8003c10:	79f9      	ldrb	r1, [r7, #7]
 8003c12:	4805      	ldr	r0, [pc, #20]	; (8003c28 <Motors_SetMotorPWM+0x4c>)
 8003c14:	f7ff fdc4 	bl	80037a0 <DRV8836_SetMotor>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	e000      	b.n	8003c1e <Motors_SetMotorPWM+0x42>
		break;

	default:
		return MOTORS_ERROR;
 8003c1c:	2301      	movs	r3, #1
		break;
	}
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000564 	.word	0x20000564

08003c2c <Motors_SetMotorDirection>:

Motors_Error_t Motors_SetMotorDirection(DRV8836_Output_t motorAB, DRV8836_Direction_t direction)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	460a      	mov	r2, r1
 8003c36:	71fb      	strb	r3, [r7, #7]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	71bb      	strb	r3, [r7, #6]
	switch(motorAB)
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <Motors_SetMotorDirection+0x1c>
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d009      	beq.n	8003c5a <Motors_SetMotorDirection+0x2e>
 8003c46:	e011      	b.n	8003c6c <Motors_SetMotorDirection+0x40>
	{
	case MOTOR_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.a_speed);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <Motors_SetMotorDirection+0x4c>)
 8003c4a:	8a1b      	ldrh	r3, [r3, #16]
 8003c4c:	79ba      	ldrb	r2, [r7, #6]
 8003c4e:	79f9      	ldrb	r1, [r7, #7]
 8003c50:	4809      	ldr	r0, [pc, #36]	; (8003c78 <Motors_SetMotorDirection+0x4c>)
 8003c52:	f7ff fda5 	bl	80037a0 <DRV8836_SetMotor>
 8003c56:	4603      	mov	r3, r0
 8003c58:	e009      	b.n	8003c6e <Motors_SetMotorDirection+0x42>
		break;

	case MOTOR_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.b_speed);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <Motors_SetMotorDirection+0x4c>)
 8003c5c:	8a5b      	ldrh	r3, [r3, #18]
 8003c5e:	79ba      	ldrb	r2, [r7, #6]
 8003c60:	79f9      	ldrb	r1, [r7, #7]
 8003c62:	4805      	ldr	r0, [pc, #20]	; (8003c78 <Motors_SetMotorDirection+0x4c>)
 8003c64:	f7ff fd9c 	bl	80037a0 <DRV8836_SetMotor>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	e000      	b.n	8003c6e <Motors_SetMotorDirection+0x42>
		break;

	default:
		return MOTORS_ERROR;
 8003c6c:	2301      	movs	r3, #1
		break;
	}
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000564 	.word	0x20000564

08003c7c <Motors_SetMotorsOff>:

Motors_Error_t Motors_SetMotorsOff(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
	Motors_Error_t status = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, MOTOR_A, Coast, 0);
 8003c86:	2300      	movs	r3, #0
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	480b      	ldr	r0, [pc, #44]	; (8003cbc <Motors_SetMotorsOff+0x40>)
 8003c8e:	f7ff fd87 	bl	80037a0 <DRV8836_SetMotor>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, MOTOR_B, Coast, 0);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4806      	ldr	r0, [pc, #24]	; (8003cbc <Motors_SetMotorsOff+0x40>)
 8003ca4:	f7ff fd7c 	bl	80037a0 <DRV8836_SetMotor>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	461a      	mov	r2, r3
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	71fb      	strb	r3, [r7, #7]
	return status;
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000564 	.word	0x20000564

08003cc0 <Motors_EncoderSample>:
//
// -- Encoder routine --
//

void Motors_EncoderSample(void)						//call this function with encoder sampling frequency
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	/* Read encoder values and calculate velocity */
	MotorEnc_Update(&MotorEncoderA);
 8003cc4:	4875      	ldr	r0, [pc, #468]	; (8003e9c <Motors_EncoderSample+0x1dc>)
 8003cc6:	f7ff fee5 	bl	8003a94 <MotorEnc_Update>
	MotorEnc_Update(&MotorEncoderB);
 8003cca:	4875      	ldr	r0, [pc, #468]	; (8003ea0 <Motors_EncoderSample+0x1e0>)
 8003ccc:	f7ff fee2 	bl	8003a94 <MotorEnc_Update>

	/* Filter velocity values */
	MotorEncoderA.VelocityFiltered = FIRFilter_Update(&EncoderFilterA, MotorEncoderA.Velocity);
 8003cd0:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <Motors_EncoderSample+0x1dc>)
 8003cd2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd f870 	bl	8000dbc <__aeabi_i2f>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4870      	ldr	r0, [pc, #448]	; (8003ea4 <Motors_EncoderSample+0x1e4>)
 8003ce2:	f7fd fc83 	bl	80015ec <FIRFilter_Update>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a6c      	ldr	r2, [pc, #432]	; (8003e9c <Motors_EncoderSample+0x1dc>)
 8003cea:	6093      	str	r3, [r2, #8]
	MotorEncoderB.VelocityFiltered = FIRFilter_Update(&EncoderFilterB, MotorEncoderB.Velocity);
 8003cec:	4b6c      	ldr	r3, [pc, #432]	; (8003ea0 <Motors_EncoderSample+0x1e0>)
 8003cee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd f862 	bl	8000dbc <__aeabi_i2f>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	486a      	ldr	r0, [pc, #424]	; (8003ea8 <Motors_EncoderSample+0x1e8>)
 8003cfe:	f7fd fc75 	bl	80015ec <FIRFilter_Update>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4a66      	ldr	r2, [pc, #408]	; (8003ea0 <Motors_EncoderSample+0x1e0>)
 8003d06:	6093      	str	r3, [r2, #8]

	/* Calculate RPM */
	//MotorEncoderB.RPM = (MotorEncoderB.Velocity * 60 * (1000/ENCODER_SAMPLING_TIME_MS)) / PULSES_PER_ROTATION;

	if(MotorsControllPID == 1)
 8003d08:	4b68      	ldr	r3, [pc, #416]	; (8003eac <Motors_EncoderSample+0x1ec>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 80a6 	bne.w	8003e5e <Motors_EncoderSample+0x19e>
	{
		/* Update motor's A PID if any of its gains its greater than 0 */
		if(MotorPID_A.kp > 0 || MotorPID_A.ki > 0|| MotorPID_A.kd > 0)
 8003d12:	4b67      	ldr	r3, [pc, #412]	; (8003eb0 <Motors_EncoderSample+0x1f0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd fa5e 	bl	80011dc <__aeabi_fcmpgt>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d113      	bne.n	8003d4e <Motors_EncoderSample+0x8e>
 8003d26:	4b62      	ldr	r3, [pc, #392]	; (8003eb0 <Motors_EncoderSample+0x1f0>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fa54 	bl	80011dc <__aeabi_fcmpgt>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <Motors_EncoderSample+0x8e>
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	; (8003eb0 <Motors_EncoderSample+0x1f0>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f04f 0100 	mov.w	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fa4a 	bl	80011dc <__aeabi_fcmpgt>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d034      	beq.n	8003db8 <Motors_EncoderSample+0xf8>
		{
			PID_Update(&MotorPID_A, TargetVelocityA - MotorEncoderA.VelocityFiltered , 1000 / ENCODER_SAMPLING_TIME_MS);
 8003d4e:	4b59      	ldr	r3, [pc, #356]	; (8003eb4 <Motors_EncoderSample+0x1f4>)
 8003d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd f831 	bl	8000dbc <__aeabi_i2f>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b4f      	ldr	r3, [pc, #316]	; (8003e9c <Motors_EncoderSample+0x1dc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7fc ff74 	bl	8000c50 <__aeabi_fsub>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fa40 	bl	80011f0 <__aeabi_f2iz>
 8003d70:	4603      	mov	r3, r0
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	2264      	movs	r2, #100	; 0x64
 8003d76:	4619      	mov	r1, r3
 8003d78:	484d      	ldr	r0, [pc, #308]	; (8003eb0 <Motors_EncoderSample+0x1f0>)
 8003d7a:	f7fd fcb4 	bl	80016e6 <PID_Update>

			if(MotorPID_A.Output > 0)
 8003d7e:	4b4c      	ldr	r3, [pc, #304]	; (8003eb0 <Motors_EncoderSample+0x1f0>)
 8003d80:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	dd0b      	ble.n	8003da0 <Motors_EncoderSample+0xe0>
			{
				Motors_SetMotor(MOTOR_A, Reverse, DEAD_PWM_OFFSET + MotorPID_A.Output);
 8003d88:	4b49      	ldr	r3, [pc, #292]	; (8003eb0 <Motors_EncoderSample+0x1f0>)
 8003d8a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3396      	adds	r3, #150	; 0x96
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	2101      	movs	r1, #1
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f7ff ff09 	bl	8003bb0 <Motors_SetMotor>
 8003d9e:	e00b      	b.n	8003db8 <Motors_EncoderSample+0xf8>
			}
			else
			{
				Motors_SetMotor(MOTOR_A, Forward, DEAD_PWM_OFFSET + (-MotorPID_A.Output) );
 8003da0:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <Motors_EncoderSample+0x1f0>)
 8003da2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	2102      	movs	r1, #2
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7ff fefc 	bl	8003bb0 <Motors_SetMotor>
			}
		}
		/* Same for motor B */
		if(MotorPID_B.kp > 0 || MotorPID_B.ki > 0|| MotorPID_B.kd > 0)
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <Motors_EncoderSample+0x1f8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd fa0b 	bl	80011dc <__aeabi_fcmpgt>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <Motors_EncoderSample+0x134>
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	; (8003eb8 <Motors_EncoderSample+0x1f8>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f04f 0100 	mov.w	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd fa01 	bl	80011dc <__aeabi_fcmpgt>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <Motors_EncoderSample+0x134>
 8003de0:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <Motors_EncoderSample+0x1f8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f04f 0100 	mov.w	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd f9f7 	bl	80011dc <__aeabi_fcmpgt>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d034      	beq.n	8003e5e <Motors_EncoderSample+0x19e>
		{
			PID_Update(&MotorPID_B, TargetVelocityB - MotorEncoderB.VelocityFiltered , 1000 / ENCODER_SAMPLING_TIME_MS);
 8003df4:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <Motors_EncoderSample+0x1fc>)
 8003df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc ffde 	bl	8000dbc <__aeabi_i2f>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <Motors_EncoderSample+0x1e0>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7fc ff21 	bl	8000c50 <__aeabi_fsub>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd f9ed 	bl	80011f0 <__aeabi_f2iz>
 8003e16:	4603      	mov	r3, r0
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	2264      	movs	r2, #100	; 0x64
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <Motors_EncoderSample+0x1f8>)
 8003e20:	f7fd fc61 	bl	80016e6 <PID_Update>

			if(MotorPID_B.Output > 0)
 8003e24:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <Motors_EncoderSample+0x1f8>)
 8003e26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	dd0b      	ble.n	8003e46 <Motors_EncoderSample+0x186>
			{
				Motors_SetMotor(MOTOR_B, Reverse, DEAD_PWM_OFFSET + MotorPID_B.Output);
 8003e2e:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <Motors_EncoderSample+0x1f8>)
 8003e30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3396      	adds	r3, #150	; 0x96
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f7ff feb6 	bl	8003bb0 <Motors_SetMotor>
 8003e44:	e00b      	b.n	8003e5e <Motors_EncoderSample+0x19e>
			}
			else
			{
				Motors_SetMotor(MOTOR_B, Forward, DEAD_PWM_OFFSET + (-MotorPID_B.Output) );
 8003e46:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <Motors_EncoderSample+0x1f8>)
 8003e48:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	2102      	movs	r1, #2
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f7ff fea9 	bl	8003bb0 <Motors_SetMotor>
	}



	/* Debug UART print */
	UartBufferLength = sprintf((char*) UartBuffer, "$%d %d;",(int16_t) MotorEncoderB.VelocityFiltered, MotorPID_B.Output );
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <Motors_EncoderSample+0x1e0>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd f9c4 	bl	80011f0 <__aeabi_f2iz>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	b21b      	sxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <Motors_EncoderSample+0x1f8>)
 8003e70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003e74:	4912      	ldr	r1, [pc, #72]	; (8003ec0 <Motors_EncoderSample+0x200>)
 8003e76:	4813      	ldr	r0, [pc, #76]	; (8003ec4 <Motors_EncoderSample+0x204>)
 8003e78:	f007 fd7e 	bl	800b978 <siprintf>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <Motors_EncoderSample+0x208>)
 8003e82:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, UartBuffer, UartBufferLength, 500);
 8003e84:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <Motors_EncoderSample+0x208>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e8e:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <Motors_EncoderSample+0x204>)
 8003e90:	480e      	ldr	r0, [pc, #56]	; (8003ecc <Motors_EncoderSample+0x20c>)
 8003e92:	f003 fc3f 	bl	8007714 <HAL_UART_Transmit>

}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	2000057c 	.word	0x2000057c
 8003ea0:	20000594 	.word	0x20000594
 8003ea4:	200005ac 	.word	0x200005ac
 8003ea8:	20000618 	.word	0x20000618
 8003eac:	20000684 	.word	0x20000684
 8003eb0:	2000068c 	.word	0x2000068c
 8003eb4:	20000686 	.word	0x20000686
 8003eb8:	200006ac 	.word	0x200006ac
 8003ebc:	20000688 	.word	0x20000688
 8003ec0:	0800e5a4 	.word	0x0800e5a4
 8003ec4:	200006cc 	.word	0x200006cc
 8003ec8:	200006dc 	.word	0x200006dc
 8003ecc:	2000051c 	.word	0x2000051c

08003ed0 <Motors_SetControllPID>:
// PID Related functions
//

/* Enable or disable PID controll */
Motors_Error_t Motors_SetControllPID(uint8_t ONOFF)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]
	if(ONOFF != PID_ON && ONOFF != PID_OFF)
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d004      	beq.n	8003eea <Motors_SetControllPID+0x1a>
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <Motors_SetControllPID+0x1a>
	{
		return MOTORS_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e003      	b.n	8003ef2 <Motors_SetControllPID+0x22>
	}

	MotorsControllPID = ONOFF;
 8003eea:	4a04      	ldr	r2, [pc, #16]	; (8003efc <Motors_SetControllPID+0x2c>)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	7013      	strb	r3, [r2, #0]
	return MOTORS_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	20000684 	.word	0x20000684

08003f00 <Motors_SetPIDTarget>:


/* Set target speed for motor */
Motors_Error_t Motors_SetPIDTarget(DRV8836_Output_t motorAB, int16_t Target)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	460a      	mov	r2, r1
 8003f0a:	71fb      	strb	r3, [r7, #7]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	80bb      	strh	r3, [r7, #4]
	if(Target > MAX_VELOCITY_VALUE || Target < -MAX_VELOCITY_VALUE)
 8003f10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f14:	2b46      	cmp	r3, #70	; 0x46
 8003f16:	dc04      	bgt.n	8003f22 <Motors_SetPIDTarget+0x22>
 8003f18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f1c:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8003f20:	da01      	bge.n	8003f26 <Motors_SetPIDTarget+0x26>
	{
		return MOTORS_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e01c      	b.n	8003f60 <Motors_SetPIDTarget+0x60>
	}

	switch(motorAB)
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d010      	beq.n	8003f4e <Motors_SetPIDTarget+0x4e>
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	dc16      	bgt.n	8003f5e <Motors_SetPIDTarget+0x5e>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <Motors_SetPIDTarget+0x3a>
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d005      	beq.n	8003f44 <Motors_SetPIDTarget+0x44>
 8003f38:	e011      	b.n	8003f5e <Motors_SetPIDTarget+0x5e>
	{
	case MOTOR_A:
		TargetVelocityA = Target;
 8003f3a:	4a0c      	ldr	r2, [pc, #48]	; (8003f6c <Motors_SetPIDTarget+0x6c>)
 8003f3c:	88bb      	ldrh	r3, [r7, #4]
 8003f3e:	8013      	strh	r3, [r2, #0]
		return MOTORS_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e00d      	b.n	8003f60 <Motors_SetPIDTarget+0x60>

	case MOTOR_B:
		TargetVelocityB = Target;
 8003f44:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <Motors_SetPIDTarget+0x70>)
 8003f46:	88bb      	ldrh	r3, [r7, #4]
 8003f48:	8013      	strh	r3, [r2, #0]
		return MOTORS_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e008      	b.n	8003f60 <Motors_SetPIDTarget+0x60>

	case MOTOR_ALL:
		TargetVelocityA = Target;
 8003f4e:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <Motors_SetPIDTarget+0x6c>)
 8003f50:	88bb      	ldrh	r3, [r7, #4]
 8003f52:	8013      	strh	r3, [r2, #0]
		TargetVelocityB = Target;
 8003f54:	4a06      	ldr	r2, [pc, #24]	; (8003f70 <Motors_SetPIDTarget+0x70>)
 8003f56:	88bb      	ldrh	r3, [r7, #4]
 8003f58:	8013      	strh	r3, [r2, #0]
		return MOTORS_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e000      	b.n	8003f60 <Motors_SetPIDTarget+0x60>

	default:
		return MOTORS_ERROR;
 8003f5e:	2301      	movs	r3, #1
	}
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000686 	.word	0x20000686
 8003f70:	20000688 	.word	0x20000688

08003f74 <Motors_SetKP>:
// Gains set & get
//

/* KP */
Motors_Error_t Motors_SetKP(DRV8836_Output_t motorAB, float p)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
	switch(motorAB)
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d01a      	beq.n	8003fbc <Motors_SetKP+0x48>
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	dc2a      	bgt.n	8003fe0 <Motors_SetKP+0x6c>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <Motors_SetKP+0x20>
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d00a      	beq.n	8003fa8 <Motors_SetKP+0x34>
 8003f92:	e025      	b.n	8003fe0 <Motors_SetKP+0x6c>
	{
	case MOTOR_A:
		PID_SetGains(&MotorPID_A, p, MotorPID_A.ki, MotorPID_A.kd);
 8003f94:	4b15      	ldr	r3, [pc, #84]	; (8003fec <Motors_SetKP+0x78>)
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	4b14      	ldr	r3, [pc, #80]	; (8003fec <Motors_SetKP+0x78>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	6839      	ldr	r1, [r7, #0]
 8003f9e:	4813      	ldr	r0, [pc, #76]	; (8003fec <Motors_SetKP+0x78>)
 8003fa0:	f7fd fb7a 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e01c      	b.n	8003fe2 <Motors_SetKP+0x6e>

	case MOTOR_B:
		PID_SetGains(&MotorPID_B, p, MotorPID_B.ki, MotorPID_B.kd);
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <Motors_SetKP+0x7c>)
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <Motors_SetKP+0x7c>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	480f      	ldr	r0, [pc, #60]	; (8003ff0 <Motors_SetKP+0x7c>)
 8003fb4:	f7fd fb70 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e012      	b.n	8003fe2 <Motors_SetKP+0x6e>

	case MOTOR_ALL:
		PID_SetGains(&MotorPID_A, p, MotorPID_A.ki, MotorPID_A.kd);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <Motors_SetKP+0x78>)
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <Motors_SetKP+0x78>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	6839      	ldr	r1, [r7, #0]
 8003fc6:	4809      	ldr	r0, [pc, #36]	; (8003fec <Motors_SetKP+0x78>)
 8003fc8:	f7fd fb66 	bl	8001698 <PID_SetGains>
		PID_SetGains(&MotorPID_B, p, MotorPID_B.ki, MotorPID_B.kd);
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <Motors_SetKP+0x7c>)
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <Motors_SetKP+0x7c>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	6839      	ldr	r1, [r7, #0]
 8003fd6:	4806      	ldr	r0, [pc, #24]	; (8003ff0 <Motors_SetKP+0x7c>)
 8003fd8:	f7fd fb5e 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <Motors_SetKP+0x6e>

	default:
		return MOTORS_ERROR;
 8003fe0:	2301      	movs	r3, #1
	}
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000068c 	.word	0x2000068c
 8003ff0:	200006ac 	.word	0x200006ac

08003ff4 <Motors_SetKI>:
	}
}

/* KI */
Motors_Error_t Motors_SetKI(DRV8836_Output_t motorAB, float i)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	71fb      	strb	r3, [r7, #7]
	switch(motorAB)
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d01a      	beq.n	800403c <Motors_SetKI+0x48>
 8004006:	2b02      	cmp	r3, #2
 8004008:	dc2a      	bgt.n	8004060 <Motors_SetKI+0x6c>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <Motors_SetKI+0x20>
 800400e:	2b01      	cmp	r3, #1
 8004010:	d00a      	beq.n	8004028 <Motors_SetKI+0x34>
 8004012:	e025      	b.n	8004060 <Motors_SetKI+0x6c>
	{
	case MOTOR_A:
		PID_SetGains(&MotorPID_A, MotorPID_A.kp, i, MotorPID_A.kd);
 8004014:	4b15      	ldr	r3, [pc, #84]	; (800406c <Motors_SetKI+0x78>)
 8004016:	6819      	ldr	r1, [r3, #0]
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <Motors_SetKI+0x78>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	4813      	ldr	r0, [pc, #76]	; (800406c <Motors_SetKI+0x78>)
 8004020:	f7fd fb3a 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e01c      	b.n	8004062 <Motors_SetKI+0x6e>

	case MOTOR_B:
		PID_SetGains(&MotorPID_B, MotorPID_B.kp, i, MotorPID_B.kd);
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <Motors_SetKI+0x7c>)
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <Motors_SetKI+0x7c>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	480f      	ldr	r0, [pc, #60]	; (8004070 <Motors_SetKI+0x7c>)
 8004034:	f7fd fb30 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e012      	b.n	8004062 <Motors_SetKI+0x6e>

	case MOTOR_ALL:
		PID_SetGains(&MotorPID_A, MotorPID_A.kp, i, MotorPID_A.kd);
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <Motors_SetKI+0x78>)
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <Motors_SetKI+0x78>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	4809      	ldr	r0, [pc, #36]	; (800406c <Motors_SetKI+0x78>)
 8004048:	f7fd fb26 	bl	8001698 <PID_SetGains>
		PID_SetGains(&MotorPID_B, MotorPID_B.kp, i, MotorPID_B.kd);
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <Motors_SetKI+0x7c>)
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <Motors_SetKI+0x7c>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	4806      	ldr	r0, [pc, #24]	; (8004070 <Motors_SetKI+0x7c>)
 8004058:	f7fd fb1e 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <Motors_SetKI+0x6e>

	default:
		return MOTORS_ERROR;
 8004060:	2301      	movs	r3, #1
	}
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	2000068c 	.word	0x2000068c
 8004070:	200006ac 	.word	0x200006ac

08004074 <Motors_SetKD>:
	}
}

/* KD */
Motors_Error_t Motors_SetKD(DRV8836_Output_t motorAB, float d)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
	switch(motorAB)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d01a      	beq.n	80040bc <Motors_SetKD+0x48>
 8004086:	2b02      	cmp	r3, #2
 8004088:	dc2a      	bgt.n	80040e0 <Motors_SetKD+0x6c>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <Motors_SetKD+0x20>
 800408e:	2b01      	cmp	r3, #1
 8004090:	d00a      	beq.n	80040a8 <Motors_SetKD+0x34>
 8004092:	e025      	b.n	80040e0 <Motors_SetKD+0x6c>
	{
	case MOTOR_A:
		PID_SetGains(&MotorPID_A, MotorPID_A.kp, MotorPID_A.ki, d);
 8004094:	4b15      	ldr	r3, [pc, #84]	; (80040ec <Motors_SetKD+0x78>)
 8004096:	6819      	ldr	r1, [r3, #0]
 8004098:	4b14      	ldr	r3, [pc, #80]	; (80040ec <Motors_SetKD+0x78>)
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4813      	ldr	r0, [pc, #76]	; (80040ec <Motors_SetKD+0x78>)
 80040a0:	f7fd fafa 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e01c      	b.n	80040e2 <Motors_SetKD+0x6e>

	case MOTOR_B:
		PID_SetGains(&MotorPID_B, MotorPID_B.kp, MotorPID_B.ki, d);
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <Motors_SetKD+0x7c>)
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <Motors_SetKD+0x7c>)
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	480f      	ldr	r0, [pc, #60]	; (80040f0 <Motors_SetKD+0x7c>)
 80040b4:	f7fd faf0 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e012      	b.n	80040e2 <Motors_SetKD+0x6e>

	case MOTOR_ALL:
		PID_SetGains(&MotorPID_A, MotorPID_A.kp, MotorPID_A.ki, d);
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <Motors_SetKD+0x78>)
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <Motors_SetKD+0x78>)
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4809      	ldr	r0, [pc, #36]	; (80040ec <Motors_SetKD+0x78>)
 80040c8:	f7fd fae6 	bl	8001698 <PID_SetGains>
		PID_SetGains(&MotorPID_B, MotorPID_B.kp, MotorPID_B.ki, d);
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <Motors_SetKD+0x7c>)
 80040ce:	6819      	ldr	r1, [r3, #0]
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <Motors_SetKD+0x7c>)
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4806      	ldr	r0, [pc, #24]	; (80040f0 <Motors_SetKD+0x7c>)
 80040d8:	f7fd fade 	bl	8001698 <PID_SetGains>
		return MOTORS_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <Motors_SetKD+0x6e>

	default:
		return MOTORS_ERROR;
 80040e0:	2301      	movs	r3, #1
	}
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000068c 	.word	0x2000068c
 80040f0:	200006ac 	.word	0x200006ac

080040f4 <Motors_ResetTemps>:
	}
}

/* Reset temporary PID's variables */
Motors_Error_t Motors_ResetTemps(DRV8836_Output_t motorAB)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
	switch(motorAB)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d010      	beq.n	8004126 <Motors_ResetTemps+0x32>
 8004104:	2b02      	cmp	r3, #2
 8004106:	dc16      	bgt.n	8004136 <Motors_ResetTemps+0x42>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <Motors_ResetTemps+0x1e>
 800410c:	2b01      	cmp	r3, #1
 800410e:	d005      	beq.n	800411c <Motors_ResetTemps+0x28>
 8004110:	e011      	b.n	8004136 <Motors_ResetTemps+0x42>
	{
	case MOTOR_A:
		PID_ResetTemps(&MotorPID_A);
 8004112:	480b      	ldr	r0, [pc, #44]	; (8004140 <Motors_ResetTemps+0x4c>)
 8004114:	f7fd fad5 	bl	80016c2 <PID_ResetTemps>
		return MOTORS_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e00d      	b.n	8004138 <Motors_ResetTemps+0x44>

	case MOTOR_B:
		PID_ResetTemps(&MotorPID_B);
 800411c:	4809      	ldr	r0, [pc, #36]	; (8004144 <Motors_ResetTemps+0x50>)
 800411e:	f7fd fad0 	bl	80016c2 <PID_ResetTemps>
		return MOTORS_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e008      	b.n	8004138 <Motors_ResetTemps+0x44>

	case MOTOR_ALL:
		PID_ResetTemps(&MotorPID_A);
 8004126:	4806      	ldr	r0, [pc, #24]	; (8004140 <Motors_ResetTemps+0x4c>)
 8004128:	f7fd facb 	bl	80016c2 <PID_ResetTemps>
		PID_ResetTemps(&MotorPID_B);
 800412c:	4805      	ldr	r0, [pc, #20]	; (8004144 <Motors_ResetTemps+0x50>)
 800412e:	f7fd fac8 	bl	80016c2 <PID_ResetTemps>
		return MOTORS_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <Motors_ResetTemps+0x44>

	default:
		return MOTORS_ERROR;
 8004136:	2301      	movs	r3, #1
	}
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2000068c 	.word	0x2000068c
 8004144:	200006ac 	.word	0x200006ac

08004148 <Prog_CalibPID_Init>:
//
// -- Init & Deinit functions for Diode Test Program --
//

Programs_error_t Prog_CalibPID_Init(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0

	return PROGRAMS_OK;
 800414c:	2300      	movs	r3, #0

}
 800414e:	4618      	mov	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <Prog_CalibPID_Deinit>:

Programs_error_t Prog_CalibPID_Deinit(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
	return PROGRAMS_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <Prog_CalibPID_Program>:
//
// -- Main Diode Test Program for Robot --
//

Programs_error_t Prog_CalibPID_Program(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
	/* Main program "loop" */




	return PROGRAMS_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
	...

08004174 <Prog_CalibPID_Launch>:
//
// -- Set / Launch function --
//

Programs_error_t Prog_CalibPID_Launch(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
	return Programs_SetProgram(&CalibPIDProgram);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <Prog_CalibPID_Launch+0x10>)
 800417a:	f000 f9b7 	bl	80044ec <Programs_SetProgram>
 800417e:	4603      	mov	r3, r0
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000068 	.word	0x20000068

08004188 <Prog_CalibPID_Parser>:
//
// -- Diode Test Program Parser --
//

void Prog_CalibPID_Parser(uint8_t *command, uint8_t length)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	623b      	str	r3, [r7, #32]
	uint8_t Buffer[3];
	uint8_t ExeResult = _OK;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char GainBuffer[7];
	float Gain;
	DRV8836_Output_t MotorID;
	int16_t Target;

	switch(*CurrentByte)
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	3b20      	subs	r3, #32
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	f200 80e5 	bhi.w	8004374 <Prog_CalibPID_Parser+0x1ec>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <Prog_CalibPID_Parser+0x28>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	08004375 	.word	0x08004375
 80041b8:	08004375 	.word	0x08004375
 80041bc:	08004375 	.word	0x08004375
 80041c0:	08004375 	.word	0x08004375
 80041c4:	0800428f 	.word	0x0800428f
 80041c8:	0800431d 	.word	0x0800431d
 80041cc:	0800433d 	.word	0x0800433d
 80041d0:	080042fd 	.word	0x080042fd
	{
	case PID_SET_GAIN:
		/* Frame: [... , PID_SET_GAIN, Motor ID, (ASCII, 7 bytes), Gain type  */
		/* Get motor ID */
		CurrentByte++;
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	3301      	adds	r3, #1
 80041d8:	623b      	str	r3, [r7, #32]
		MotorID = *CurrentByte;
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	77fb      	strb	r3, [r7, #31]
		if(MotorID > MOTOR_ALL)
 80041e0:	7ffb      	ldrb	r3, [r7, #31]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d902      	bls.n	80041ec <Prog_CalibPID_Parser+0x64>
		{
			ExeResult = _ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		/* Get Gain in ASCII */
		CurrentByte++;
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	3301      	adds	r3, #1
 80041f0:	623b      	str	r3, [r7, #32]
		memcpy(GainBuffer, CurrentByte, 7);	//TODO: AWARE HERE
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	f107 030c 	add.w	r3, r7, #12
 80041f8:	6810      	ldr	r0, [r2, #0]
 80041fa:	6018      	str	r0, [r3, #0]
 80041fc:	8891      	ldrh	r1, [r2, #4]
 80041fe:	7992      	ldrb	r2, [r2, #6]
 8004200:	8099      	strh	r1, [r3, #4]
 8004202:	719a      	strb	r2, [r3, #6]
		/* Convert ASCII to float */
		Gain = atof(GainBuffer);
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	4618      	mov	r0, r3
 800420a:	f006 f86f 	bl	800a2ec <atof>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	f7fc fcc7 	bl	8000ba8 <__aeabi_d2f>
 800421a:	4603      	mov	r3, r0
 800421c:	61bb      	str	r3, [r7, #24]
		/* Get gain type */
		CurrentByte += 7;
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	3307      	adds	r3, #7
 8004222:	623b      	str	r3, [r7, #32]
		GainType = *CurrentByte;
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	75fb      	strb	r3, [r7, #23]
		/* Set proper gain */
		if(ExeResult == _OK)
 800422a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11f      	bne.n	8004272 <Prog_CalibPID_Parser+0xea>
		{
			switch(GainType)
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b32      	cmp	r3, #50	; 0x32
 8004236:	d012      	beq.n	800425e <Prog_CalibPID_Parser+0xd6>
 8004238:	2b32      	cmp	r3, #50	; 0x32
 800423a:	dc16      	bgt.n	800426a <Prog_CalibPID_Parser+0xe2>
 800423c:	2b30      	cmp	r3, #48	; 0x30
 800423e:	d002      	beq.n	8004246 <Prog_CalibPID_Parser+0xbe>
 8004240:	2b31      	cmp	r3, #49	; 0x31
 8004242:	d006      	beq.n	8004252 <Prog_CalibPID_Parser+0xca>
 8004244:	e011      	b.n	800426a <Prog_CalibPID_Parser+0xe2>
			{
			case KP:
				Motors_SetKP(MotorID, Gain);
 8004246:	7ffb      	ldrb	r3, [r7, #31]
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fe92 	bl	8003f74 <Motors_SetKP>
				break;
 8004250:	e00f      	b.n	8004272 <Prog_CalibPID_Parser+0xea>
			case KI:
				Motors_SetKI(MotorID, Gain);
 8004252:	7ffb      	ldrb	r3, [r7, #31]
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fecc 	bl	8003ff4 <Motors_SetKI>
				break;
 800425c:	e009      	b.n	8004272 <Prog_CalibPID_Parser+0xea>

			case KD:
				Motors_SetKD(MotorID, Gain);
 800425e:	7ffb      	ldrb	r3, [r7, #31]
 8004260:	69b9      	ldr	r1, [r7, #24]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ff06 	bl	8004074 <Motors_SetKD>
				break;
 8004268:	e003      	b.n	8004272 <Prog_CalibPID_Parser+0xea>
			default:
				ExeResult = _ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8004270:	bf00      	nop
			}
		}
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 8004272:	23d2      	movs	r3, #210	; 0xd2
 8004274:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_SET_GAIN;
 8004276:	2320      	movs	r3, #32
 8004278:	757b      	strb	r3, [r7, #21]
		Buffer[2] = ExeResult;
 800427a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800427e:	75bb      	strb	r3, [r7, #22]
		Radio_TxBufferPut(Buffer, 3);
 8004280:	f107 0314 	add.w	r3, r7, #20
 8004284:	2103      	movs	r1, #3
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd fd4e 	bl	8001d28 <Radio_TxBufferPut>
		break;
 800428c:	e073      	b.n	8004376 <Prog_CalibPID_Parser+0x1ee>

	case PID_SET_TARGET:
		/* Frame: [... , PID_SET_TARGET, Motor ID, Target */
		/* Get Motor ID */
		CurrentByte++;
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	3301      	adds	r3, #1
 8004292:	623b      	str	r3, [r7, #32]
		MotorID = *CurrentByte;
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	77fb      	strb	r3, [r7, #31]
		if(MotorID > MOTOR_ALL)
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d902      	bls.n	80042a6 <Prog_CalibPID_Parser+0x11e>
		{
			ExeResult = _ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		/* Get target value */
		CurrentByte++;
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	3301      	adds	r3, #1
 80042aa:	623b      	str	r3, [r7, #32]
		Target = *CurrentByte;
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	83bb      	strh	r3, [r7, #28]
		if(Target > MAX_VELOCITY_VALUE && Target < -MAX_VELOCITY_VALUE)
 80042b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80042b6:	2b46      	cmp	r3, #70	; 0x46
 80042b8:	dd07      	ble.n	80042ca <Prog_CalibPID_Parser+0x142>
 80042ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80042be:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80042c2:	da02      	bge.n	80042ca <Prog_CalibPID_Parser+0x142>
		{
			ExeResult = _ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if(ExeResult == _OK)
 80042ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <Prog_CalibPID_Parser+0x158>
		{
			Motors_SetPIDTarget(MotorID, Target);
 80042d2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80042d6:	7ffb      	ldrb	r3, [r7, #31]
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fe10 	bl	8003f00 <Motors_SetPIDTarget>
		}
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 80042e0:	23d2      	movs	r3, #210	; 0xd2
 80042e2:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_SET_TARGET;
 80042e4:	2325      	movs	r3, #37	; 0x25
 80042e6:	757b      	strb	r3, [r7, #21]
		Buffer[2] = ExeResult;
 80042e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ec:	75bb      	strb	r3, [r7, #22]
		Radio_TxBufferPut(Buffer, 3);
 80042ee:	f107 0314 	add.w	r3, r7, #20
 80042f2:	2103      	movs	r1, #3
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fd17 	bl	8001d28 <Radio_TxBufferPut>
		break;
 80042fa:	e03c      	b.n	8004376 <Prog_CalibPID_Parser+0x1ee>

	case PID_RESET_TEMPS:
		/* Frame: [... , PID_RESET_TEMPS ] */
		Motors_ResetTemps(MOTOR_ALL);
 80042fc:	2002      	movs	r0, #2
 80042fe:	f7ff fef9 	bl	80040f4 <Motors_ResetTemps>
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 8004302:	23d2      	movs	r3, #210	; 0xd2
 8004304:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_RESET_TEMPS;
 8004306:	2328      	movs	r3, #40	; 0x28
 8004308:	757b      	strb	r3, [r7, #21]
		Buffer[2] = _OK;
 800430a:	2300      	movs	r3, #0
 800430c:	75bb      	strb	r3, [r7, #22]
		Radio_TxBufferPut(Buffer, 3);
 800430e:	f107 0314 	add.w	r3, r7, #20
 8004312:	2103      	movs	r1, #3
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd fd07 	bl	8001d28 <Radio_TxBufferPut>
		break;
 800431a:	e02c      	b.n	8004376 <Prog_CalibPID_Parser+0x1ee>

	case PID_START_IMPULSE:
		/* Frame: [..., PID_START_IMPULSE ] */
		/* Turn on PID */
		Motors_SetControllPID(1);
 800431c:	2001      	movs	r0, #1
 800431e:	f7ff fdd7 	bl	8003ed0 <Motors_SetControllPID>
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 8004322:	23d2      	movs	r3, #210	; 0xd2
 8004324:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_START_IMPULSE;
 8004326:	2326      	movs	r3, #38	; 0x26
 8004328:	757b      	strb	r3, [r7, #21]
		Buffer[2] = _OK;
 800432a:	2300      	movs	r3, #0
 800432c:	75bb      	strb	r3, [r7, #22]
		Radio_TxBufferPut(Buffer, 3);
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	2103      	movs	r1, #3
 8004334:	4618      	mov	r0, r3
 8004336:	f7fd fcf7 	bl	8001d28 <Radio_TxBufferPut>
		break;
 800433a:	e01c      	b.n	8004376 <Prog_CalibPID_Parser+0x1ee>

	case PID_STOP_MOTOR:
		/* Frame: [..., PID_STOP_MOTOR ] */
		/* Turn off PID */
		Motors_SetControllPID(0);
 800433c:	2000      	movs	r0, #0
 800433e:	f7ff fdc7 	bl	8003ed0 <Motors_SetControllPID>
		/* Stop motors */
		Motors_SetMotor(MOTOR_A, Coast, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	2000      	movs	r0, #0
 8004348:	f7ff fc32 	bl	8003bb0 <Motors_SetMotor>
		Motors_SetMotor(MOTOR_B, Coast, 0);
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	2001      	movs	r0, #1
 8004352:	f7ff fc2d 	bl	8003bb0 <Motors_SetMotor>
		/* Reset PID temps */
		Motors_ResetTemps(MOTOR_ALL);
 8004356:	2002      	movs	r0, #2
 8004358:	f7ff fecc 	bl	80040f4 <Motors_ResetTemps>
		/* Send response */
		Buffer[0] = PID_CALIBRATION;
 800435c:	23d2      	movs	r3, #210	; 0xd2
 800435e:	753b      	strb	r3, [r7, #20]
		Buffer[1] = PID_STOP_MOTOR;
 8004360:	2327      	movs	r3, #39	; 0x27
 8004362:	757b      	strb	r3, [r7, #21]
		Buffer[2] = _OK;
 8004364:	2300      	movs	r3, #0
 8004366:	75bb      	strb	r3, [r7, #22]
		Radio_TxBufferPut(Buffer, 3);
 8004368:	f107 0314 	add.w	r3, r7, #20
 800436c:	2103      	movs	r1, #3
 800436e:	4618      	mov	r0, r3
 8004370:	f7fd fcda 	bl	8001d28 <Radio_TxBufferPut>
	default:
		break;
 8004374:	bf00      	nop
	}

}
 8004376:	bf00      	nop
 8004378:	3728      	adds	r7, #40	; 0x28
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop

08004380 <Prog_DiodeTest_Init>:
//
// -- Init & Deinit functions for Diode Test Program --
//

Programs_error_t Prog_DiodeTest_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004384:	2201      	movs	r2, #1
 8004386:	2101      	movs	r1, #1
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <Prog_DiodeTest_Init+0x14>)
 800438a:	f000 fc2f 	bl	8004bec <HAL_GPIO_WritePin>
	return PROGRAMS_OK;
 800438e:	2300      	movs	r3, #0

}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40011000 	.word	0x40011000

08004398 <Prog_DiodeTest_Deinit>:

Programs_error_t Prog_DiodeTest_Deinit(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
	return PROGRAMS_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <Prog_DiodeTest_Program>:
//
// -- Main Diode Test Program for Robot --
//

Programs_error_t Prog_DiodeTest_Program(void)
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0
	/* Main program "loop" */
	return PROGRAMS_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <Prog_DiodeTest_Launch>:
//
// -- Set / Launch function --
//

Programs_error_t Prog_DiodeTest_Launch(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	return Programs_SetProgram(&DiodeTestProgram);
 80043b8:	4802      	ldr	r0, [pc, #8]	; (80043c4 <Prog_DiodeTest_Launch+0x10>)
 80043ba:	f000 f897 	bl	80044ec <Programs_SetProgram>
 80043be:	4603      	mov	r3, r0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	2000007c 	.word	0x2000007c

080043c8 <Prog_DiodeTest_Parser>:
//
// -- Diode Test Program Parser --
//

void Prog_DiodeTest_Parser(uint8_t *command, uint8_t length)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60fb      	str	r3, [r7, #12]
	uint8_t Buffer[3];

	switch(*CurrentByte)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d002      	beq.n	80043e6 <Prog_DiodeTest_Parser+0x1e>
 80043e0:	2b21      	cmp	r3, #33	; 0x21
 80043e2:	d012      	beq.n	800440a <Prog_DiodeTest_Parser+0x42>
		Buffer[2] = 0;
		Radio_TxBufferPut(Buffer, 3);
		break;

	default:
		break;
 80043e4:	e023      	b.n	800442e <Prog_DiodeTest_Parser+0x66>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2101      	movs	r1, #1
 80043ea:	4813      	ldr	r0, [pc, #76]	; (8004438 <Prog_DiodeTest_Parser+0x70>)
 80043ec:	f000 fbfe 	bl	8004bec <HAL_GPIO_WritePin>
		Buffer[0] = DIODE_TEST;
 80043f0:	23d0      	movs	r3, #208	; 0xd0
 80043f2:	723b      	strb	r3, [r7, #8]
		Buffer[1] = DIODE_REAL_STATE;
 80043f4:	2322      	movs	r3, #34	; 0x22
 80043f6:	727b      	strb	r3, [r7, #9]
		Buffer[2] = 1;				//TODO: USE READPIN HERE
 80043f8:	2301      	movs	r3, #1
 80043fa:	72bb      	strb	r3, [r7, #10]
		Radio_TxBufferPut(Buffer, 3);
 80043fc:	f107 0308 	add.w	r3, r7, #8
 8004400:	2103      	movs	r1, #3
 8004402:	4618      	mov	r0, r3
 8004404:	f7fd fc90 	bl	8001d28 <Radio_TxBufferPut>
		break;
 8004408:	e011      	b.n	800442e <Prog_DiodeTest_Parser+0x66>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800440a:	2201      	movs	r2, #1
 800440c:	2101      	movs	r1, #1
 800440e:	480a      	ldr	r0, [pc, #40]	; (8004438 <Prog_DiodeTest_Parser+0x70>)
 8004410:	f000 fbec 	bl	8004bec <HAL_GPIO_WritePin>
		Buffer[0] = DIODE_TEST;
 8004414:	23d0      	movs	r3, #208	; 0xd0
 8004416:	723b      	strb	r3, [r7, #8]
		Buffer[1] = DIODE_REAL_STATE;
 8004418:	2322      	movs	r3, #34	; 0x22
 800441a:	727b      	strb	r3, [r7, #9]
		Buffer[2] = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	72bb      	strb	r3, [r7, #10]
		Radio_TxBufferPut(Buffer, 3);
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	2103      	movs	r1, #3
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fc7e 	bl	8001d28 <Radio_TxBufferPut>
		break;
 800442c:	bf00      	nop
	}

}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40011000 	.word	0x40011000

0800443c <Prog_MotorsDebug_Init>:
//
// -- Init & Deinit functions for Diode Test Program --
//

Programs_error_t Prog_MotorsDebug_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004440:	2201      	movs	r2, #1
 8004442:	2101      	movs	r1, #1
 8004444:	4803      	ldr	r0, [pc, #12]	; (8004454 <Prog_MotorsDebug_Init+0x18>)
 8004446:	f000 fbd1 	bl	8004bec <HAL_GPIO_WritePin>
	Motors_SetMotorsOff();
 800444a:	f7ff fc17 	bl	8003c7c <Motors_SetMotorsOff>
	return PROGRAMS_OK;
 800444e:	2300      	movs	r3, #0

}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40011000 	.word	0x40011000

08004458 <Prog_MotorsDebug_Deinit>:

Programs_error_t Prog_MotorsDebug_Deinit(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
	Motors_SetMotorsOff();
 800445c:	f7ff fc0e 	bl	8003c7c <Motors_SetMotorsOff>
	return PROGRAMS_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	bd80      	pop	{r7, pc}

08004466 <Prog_MotorsDebug_Program>:
//
// -- Main Diode Test Program for Robot --
//

Programs_error_t Prog_MotorsDebug_Program(void)
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
	/* Main program "loop" */

	return PROGRAMS_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <Prog_MotorsDebug_Launch>:
//
// -- Set / Launch function --
//

Programs_error_t Prog_MotorsDebug_Launch(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
	return Programs_SetProgram(&MotorsDebugProgram);
 8004478:	4802      	ldr	r0, [pc, #8]	; (8004484 <Prog_MotorsDebug_Launch+0x10>)
 800447a:	f000 f837 	bl	80044ec <Programs_SetProgram>
 800447e:	4603      	mov	r3, r0
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000090 	.word	0x20000090

08004488 <Prog_MotorsDebug_Parser>:
//
// -- Diode Test Program Parser --
//

void Prog_MotorsDebug_Parser(uint8_t *command, uint8_t length)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60fb      	str	r3, [r7, #12]

	DRV8836_Output_t Motor;
	DRV8836_Direction_t ReceivedDir;
	uint8_t ReceivedPWM;

	switch(*CurrentByte)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b20      	cmp	r3, #32
 800449e:	d002      	beq.n	80044a6 <Prog_MotorsDebug_Parser+0x1e>
 80044a0:	2b21      	cmp	r3, #33	; 0x21
 80044a2:	d00f      	beq.n	80044c4 <Prog_MotorsDebug_Parser+0x3c>
		Motors_SetMotorDirection(Motor, ReceivedDir);
		break;

	default:
		/* Unknown command! */
		break;
 80044a4:	e01d      	b.n	80044e2 <Prog_MotorsDebug_Parser+0x5a>
		Motor = *(CurrentByte + 1);									//TODO: The same value writing safety
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	72fb      	strb	r3, [r7, #11]
		ReceivedPWM = *(CurrentByte + 2);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	789b      	ldrb	r3, [r3, #2]
 80044b2:	727b      	strb	r3, [r7, #9]
		Motors_SetMotorPWM(Motor, ReceivedPWM);
 80044b4:	7a7b      	ldrb	r3, [r7, #9]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fb8d 	bl	8003bdc <Motors_SetMotorPWM>
		break;
 80044c2:	e00e      	b.n	80044e2 <Prog_MotorsDebug_Parser+0x5a>
		Motor = *(CurrentByte + 1);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	72fb      	strb	r3, [r7, #11]
		ReceivedDir = *(CurrentByte + 2);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3302      	adds	r3, #2
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	72bb      	strb	r3, [r7, #10]
		Motors_SetMotorDirection(Motor, ReceivedDir);
 80044d4:	7aba      	ldrb	r2, [r7, #10]
 80044d6:	7afb      	ldrb	r3, [r7, #11]
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fba6 	bl	8003c2c <Motors_SetMotorDirection>
		break;
 80044e0:	bf00      	nop
	}

}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <Programs_SetProgram>:
//

/* Function starting a launch of specific program by setting current pointer
 * to program and calling it's init function				*/
Programs_error_t Programs_SetProgram(Programs_Program_t *ProgramToSet)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToSet)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <Programs_SetProgram+0x12>
	{
		return PROGRAMS_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e010      	b.n	8004520 <Programs_SetProgram+0x34>
	}

	if(NULL == CurrentlyRunningProg)
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <Programs_SetProgram+0x3c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <Programs_SetProgram+0x32>
	{
		/* Set current program pointer */
		CurrentlyRunningProg = ProgramToSet;
 8004506:	4a08      	ldr	r2, [pc, #32]	; (8004528 <Programs_SetProgram+0x3c>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6013      	str	r3, [r2, #0]
		/* Call it's init function */
		CurrentlyRunningProg->ProgramInitFunction();
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <Programs_SetProgram+0x3c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4798      	blx	r3
		/* Change state to program in progrss, it will allow it to run in perfom fun */
		ProgramState = PROGRAM_IN_PROGRESS;
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <Programs_SetProgram+0x40>)
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
		return PROGRAMS_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e000      	b.n	8004520 <Programs_SetProgram+0x34>
	}
	else
	{
		return PROGRAMS_ERROR;
 800451e:	2301      	movs	r3, #1
	}
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	200006e0 	.word	0x200006e0
 800452c:	200006e4 	.word	0x200006e4

08004530 <Programs_ExitProgram>:

/* Function starting a exit program process */
void Programs_ExitProgram(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	/* Call program DeInit function */
	CurrentlyRunningProg->ProgramExitFunction();
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <Programs_ExitProgram+0x18>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4798      	blx	r3
	/* Change state to program completed */
	ProgramState = PROGRAM_COMPLETED;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <Programs_ExitProgram+0x1c>)
 800453e:	2202      	movs	r2, #2
 8004540:	701a      	strb	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	200006e0 	.word	0x200006e0
 800454c:	200006e4 	.word	0x200006e4

08004550 <Programs_GetProgram>:

/* Function which returns current pointer to program */
Programs_Program_t* Programs_GetProgram(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
	return CurrentlyRunningProg;
 8004554:	4b02      	ldr	r3, [pc, #8]	; (8004560 <Programs_GetProgram+0x10>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	200006e0 	.word	0x200006e0

08004564 <Programs_ClearProgram>:

/* Clearing the program pointer and status variable */
void Programs_ClearProgram(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
	CurrentlyRunningProg = NULL;
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <Programs_ClearProgram+0x18>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
	ProgramState = NO_PROGRAM_SET;
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <Programs_ClearProgram+0x1c>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	200006e0 	.word	0x200006e0
 8004580:	200006e4 	.word	0x200006e4

08004584 <Programs_PerformProgram>:

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
	switch(ProgramState)
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <Programs_PerformProgram+0x44>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d010      	beq.n	80045b2 <Programs_PerformProgram+0x2e>
 8004590:	2b02      	cmp	r3, #2
 8004592:	dc10      	bgt.n	80045b6 <Programs_PerformProgram+0x32>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <Programs_PerformProgram+0x36>
 8004598:	2b01      	cmp	r3, #1
 800459a:	d000      	beq.n	800459e <Programs_PerformProgram+0x1a>
		/* Clear the program after completing*/
		//Programs_ClearProgram();
		break;

	default:
		break;
 800459c:	e00b      	b.n	80045b6 <Programs_PerformProgram+0x32>
		if(NULL != CurrentlyRunningProg->ProgramRoutine)
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <Programs_PerformProgram+0x48>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <Programs_PerformProgram+0x3a>
			CurrentlyRunningProg->ProgramRoutine();
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <Programs_PerformProgram+0x48>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	4798      	blx	r3
		break;
 80045b0:	e005      	b.n	80045be <Programs_PerformProgram+0x3a>
		break;
 80045b2:	bf00      	nop
 80045b4:	e004      	b.n	80045c0 <Programs_PerformProgram+0x3c>
		break;
 80045b6:	bf00      	nop
 80045b8:	e002      	b.n	80045c0 <Programs_PerformProgram+0x3c>
		break;
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <Programs_PerformProgram+0x3c>
		break;
 80045be:	bf00      	nop
	}

	return ProgramState;
 80045c0:	4b01      	ldr	r3, [pc, #4]	; (80045c8 <Programs_PerformProgram+0x44>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	200006e4 	.word	0x200006e4
 80045cc:	200006e0 	.word	0x200006e0

080045d0 <Programs_SendProgramStartedACK>:
//

/* This functions are called after program launch / exit. Sending it is needed for controller to proper functionality and sync with robot */

Programs_error_t Programs_SendProgramStartedACK(uint8_t ProgramID, uint8_t ACKorNACK)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	460a      	mov	r2, r1
 80045da:	71fb      	strb	r3, [r7, #7]
 80045dc:	4613      	mov	r3, r2
 80045de:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[3];
	Buffer[0] = START_PROGRAM;
 80045e0:	2310      	movs	r3, #16
 80045e2:	733b      	strb	r3, [r7, #12]
	Buffer[1] = ProgramID;
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	737b      	strb	r3, [r7, #13]
	Buffer[2] = ACKorNACK;
 80045e8:	79bb      	ldrb	r3, [r7, #6]
 80045ea:	73bb      	strb	r3, [r7, #14]
	return Radio_TxBufferPut(Buffer, 3);
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	2103      	movs	r1, #3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fb98 	bl	8001d28 <Radio_TxBufferPut>
 80045f8:	4603      	mov	r3, r0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <Programs_SendProgramExitACK>:

Programs_error_t Programs_SendProgramExitACK(uint8_t ACKorNACK)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	4603      	mov	r3, r0
 800460a:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = EXIT_PROGRAM;
 800460c:	2311      	movs	r3, #17
 800460e:	733b      	strb	r3, [r7, #12]
	Buffer[1] = ACKorNACK;
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 8004614:	f107 030c 	add.w	r3, r7, #12
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fb84 	bl	8001d28 <Radio_TxBufferPut>
 8004620:	4603      	mov	r3, r0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800462c:	f7fe fd18 	bl	8003060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004630:	480b      	ldr	r0, [pc, #44]	; (8004660 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004632:	490c      	ldr	r1, [pc, #48]	; (8004664 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004634:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004638:	e002      	b.n	8004640 <LoopCopyDataInit>

0800463a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800463c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800463e:	3304      	adds	r3, #4

08004640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004644:	d3f9      	bcc.n	800463a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004648:	4c09      	ldr	r4, [pc, #36]	; (8004670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800464a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800464c:	e001      	b.n	8004652 <LoopFillZerobss>

0800464e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800464e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004650:	3204      	adds	r2, #4

08004652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004654:	d3fb      	bcc.n	800464e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8004656:	f007 fa5d 	bl	800bb14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800465a:	f7fd fce7 	bl	800202c <main>
  bx lr
 800465e:	4770      	bx	lr
  ldr r0, =_sdata
 8004660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004664:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8004668:	0800ea34 	.word	0x0800ea34
  ldr r2, =_sbss
 800466c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8004670:	2000257c 	.word	0x2000257c

08004674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004674:	e7fe      	b.n	8004674 <ADC1_2_IRQHandler>
	...

08004678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <HAL_Init+0x28>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_Init+0x28>)
 8004682:	f043 0310 	orr.w	r3, r3, #16
 8004686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004688:	2003      	movs	r0, #3
 800468a:	f000 f8f5 	bl	8004878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800468e:	200f      	movs	r0, #15
 8004690:	f7fe fb76 	bl	8002d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004694:	f7fe fb3c 	bl	8002d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40022000 	.word	0x40022000

080046a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_IncTick+0x1c>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_IncTick+0x20>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4413      	add	r3, r2
 80046b4:	4a03      	ldr	r2, [pc, #12]	; (80046c4 <HAL_IncTick+0x20>)
 80046b6:	6013      	str	r3, [r2, #0]
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr
 80046c0:	200000a8 	.word	0x200000a8
 80046c4:	200006e8 	.word	0x200006e8

080046c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return uwTick;
 80046cc:	4b02      	ldr	r3, [pc, #8]	; (80046d8 <HAL_GetTick+0x10>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	200006e8 	.word	0x200006e8

080046dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_GetTick>
 80046e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d005      	beq.n	8004702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046f6:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <HAL_Delay+0x44>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004702:	bf00      	nop
 8004704:	f7ff ffe0 	bl	80046c8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	429a      	cmp	r2, r3
 8004712:	d8f7      	bhi.n	8004704 <HAL_Delay+0x28>
  {
  }
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200000a8 	.word	0x200000a8

08004724 <__NVIC_SetPriorityGrouping>:
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <__NVIC_SetPriorityGrouping+0x44>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004740:	4013      	ands	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800474c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004756:	4a04      	ldr	r2, [pc, #16]	; (8004768 <__NVIC_SetPriorityGrouping+0x44>)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	60d3      	str	r3, [r2, #12]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <__NVIC_GetPriorityGrouping>:
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <__NVIC_GetPriorityGrouping+0x18>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	f003 0307 	and.w	r3, r3, #7
}
 800477a:	4618      	mov	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <__NVIC_EnableIRQ>:
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004796:	2b00      	cmp	r3, #0
 8004798:	db0b      	blt.n	80047b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	4906      	ldr	r1, [pc, #24]	; (80047bc <__NVIC_EnableIRQ+0x34>)
 80047a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2001      	movs	r0, #1
 80047aa:	fa00 f202 	lsl.w	r2, r0, r2
 80047ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr
 80047bc:	e000e100 	.word	0xe000e100

080047c0 <__NVIC_SetPriority>:
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	db0a      	blt.n	80047ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	490c      	ldr	r1, [pc, #48]	; (800480c <__NVIC_SetPriority+0x4c>)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	0112      	lsls	r2, r2, #4
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	440b      	add	r3, r1
 80047e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047e8:	e00a      	b.n	8004800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4908      	ldr	r1, [pc, #32]	; (8004810 <__NVIC_SetPriority+0x50>)
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	3b04      	subs	r3, #4
 80047f8:	0112      	lsls	r2, r2, #4
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	440b      	add	r3, r1
 80047fe:	761a      	strb	r2, [r3, #24]
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000e100 	.word	0xe000e100
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <NVIC_EncodePriority>:
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f1c3 0307 	rsb	r3, r3, #7
 800482e:	2b04      	cmp	r3, #4
 8004830:	bf28      	it	cs
 8004832:	2304      	movcs	r3, #4
 8004834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3304      	adds	r3, #4
 800483a:	2b06      	cmp	r3, #6
 800483c:	d902      	bls.n	8004844 <NVIC_EncodePriority+0x30>
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3b03      	subs	r3, #3
 8004842:	e000      	b.n	8004846 <NVIC_EncodePriority+0x32>
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004848:	f04f 32ff 	mov.w	r2, #4294967295
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	401a      	ands	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800485c:	f04f 31ff 	mov.w	r1, #4294967295
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	43d9      	mvns	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800486c:	4313      	orrs	r3, r2
}
 800486e:	4618      	mov	r0, r3
 8004870:	3724      	adds	r7, #36	; 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff4f 	bl	8004724 <__NVIC_SetPriorityGrouping>
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	4603      	mov	r3, r0
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048a0:	f7ff ff64 	bl	800476c <__NVIC_GetPriorityGrouping>
 80048a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f7ff ffb2 	bl	8004814 <NVIC_EncodePriority>
 80048b0:	4602      	mov	r2, r0
 80048b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff ff81 	bl	80047c0 <__NVIC_SetPriority>
}
 80048be:	bf00      	nop
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	4603      	mov	r3, r0
 80048ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ff57 	bl	8004788 <__NVIC_EnableIRQ>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b08b      	sub	sp, #44	; 0x2c
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048ee:	2300      	movs	r3, #0
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048f6:	e169      	b.n	8004bcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80048f8:	2201      	movs	r2, #1
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	429a      	cmp	r2, r3
 8004912:	f040 8158 	bne.w	8004bc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4a9a      	ldr	r2, [pc, #616]	; (8004b84 <HAL_GPIO_Init+0x2a0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d05e      	beq.n	80049de <HAL_GPIO_Init+0xfa>
 8004920:	4a98      	ldr	r2, [pc, #608]	; (8004b84 <HAL_GPIO_Init+0x2a0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d875      	bhi.n	8004a12 <HAL_GPIO_Init+0x12e>
 8004926:	4a98      	ldr	r2, [pc, #608]	; (8004b88 <HAL_GPIO_Init+0x2a4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d058      	beq.n	80049de <HAL_GPIO_Init+0xfa>
 800492c:	4a96      	ldr	r2, [pc, #600]	; (8004b88 <HAL_GPIO_Init+0x2a4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d86f      	bhi.n	8004a12 <HAL_GPIO_Init+0x12e>
 8004932:	4a96      	ldr	r2, [pc, #600]	; (8004b8c <HAL_GPIO_Init+0x2a8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d052      	beq.n	80049de <HAL_GPIO_Init+0xfa>
 8004938:	4a94      	ldr	r2, [pc, #592]	; (8004b8c <HAL_GPIO_Init+0x2a8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d869      	bhi.n	8004a12 <HAL_GPIO_Init+0x12e>
 800493e:	4a94      	ldr	r2, [pc, #592]	; (8004b90 <HAL_GPIO_Init+0x2ac>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d04c      	beq.n	80049de <HAL_GPIO_Init+0xfa>
 8004944:	4a92      	ldr	r2, [pc, #584]	; (8004b90 <HAL_GPIO_Init+0x2ac>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d863      	bhi.n	8004a12 <HAL_GPIO_Init+0x12e>
 800494a:	4a92      	ldr	r2, [pc, #584]	; (8004b94 <HAL_GPIO_Init+0x2b0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d046      	beq.n	80049de <HAL_GPIO_Init+0xfa>
 8004950:	4a90      	ldr	r2, [pc, #576]	; (8004b94 <HAL_GPIO_Init+0x2b0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d85d      	bhi.n	8004a12 <HAL_GPIO_Init+0x12e>
 8004956:	2b12      	cmp	r3, #18
 8004958:	d82a      	bhi.n	80049b0 <HAL_GPIO_Init+0xcc>
 800495a:	2b12      	cmp	r3, #18
 800495c:	d859      	bhi.n	8004a12 <HAL_GPIO_Init+0x12e>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <HAL_GPIO_Init+0x80>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	080049df 	.word	0x080049df
 8004968:	080049b9 	.word	0x080049b9
 800496c:	080049cb 	.word	0x080049cb
 8004970:	08004a0d 	.word	0x08004a0d
 8004974:	08004a13 	.word	0x08004a13
 8004978:	08004a13 	.word	0x08004a13
 800497c:	08004a13 	.word	0x08004a13
 8004980:	08004a13 	.word	0x08004a13
 8004984:	08004a13 	.word	0x08004a13
 8004988:	08004a13 	.word	0x08004a13
 800498c:	08004a13 	.word	0x08004a13
 8004990:	08004a13 	.word	0x08004a13
 8004994:	08004a13 	.word	0x08004a13
 8004998:	08004a13 	.word	0x08004a13
 800499c:	08004a13 	.word	0x08004a13
 80049a0:	08004a13 	.word	0x08004a13
 80049a4:	08004a13 	.word	0x08004a13
 80049a8:	080049c1 	.word	0x080049c1
 80049ac:	080049d5 	.word	0x080049d5
 80049b0:	4a79      	ldr	r2, [pc, #484]	; (8004b98 <HAL_GPIO_Init+0x2b4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049b6:	e02c      	b.n	8004a12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	623b      	str	r3, [r7, #32]
          break;
 80049be:	e029      	b.n	8004a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	3304      	adds	r3, #4
 80049c6:	623b      	str	r3, [r7, #32]
          break;
 80049c8:	e024      	b.n	8004a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	3308      	adds	r3, #8
 80049d0:	623b      	str	r3, [r7, #32]
          break;
 80049d2:	e01f      	b.n	8004a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	330c      	adds	r3, #12
 80049da:	623b      	str	r3, [r7, #32]
          break;
 80049dc:	e01a      	b.n	8004a14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049e6:	2304      	movs	r3, #4
 80049e8:	623b      	str	r3, [r7, #32]
          break;
 80049ea:	e013      	b.n	8004a14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049f4:	2308      	movs	r3, #8
 80049f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	611a      	str	r2, [r3, #16]
          break;
 80049fe:	e009      	b.n	8004a14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a00:	2308      	movs	r3, #8
 8004a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	615a      	str	r2, [r3, #20]
          break;
 8004a0a:	e003      	b.n	8004a14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	623b      	str	r3, [r7, #32]
          break;
 8004a10:	e000      	b.n	8004a14 <HAL_GPIO_Init+0x130>
          break;
 8004a12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2bff      	cmp	r3, #255	; 0xff
 8004a18:	d801      	bhi.n	8004a1e <HAL_GPIO_Init+0x13a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	e001      	b.n	8004a22 <HAL_GPIO_Init+0x13e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2bff      	cmp	r3, #255	; 0xff
 8004a28:	d802      	bhi.n	8004a30 <HAL_GPIO_Init+0x14c>
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	e002      	b.n	8004a36 <HAL_GPIO_Init+0x152>
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	3b08      	subs	r3, #8
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	210f      	movs	r1, #15
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	6a39      	ldr	r1, [r7, #32]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	431a      	orrs	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80b1 	beq.w	8004bc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a64:	4b4d      	ldr	r3, [pc, #308]	; (8004b9c <HAL_GPIO_Init+0x2b8>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	4a4c      	ldr	r2, [pc, #304]	; (8004b9c <HAL_GPIO_Init+0x2b8>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6193      	str	r3, [r2, #24]
 8004a70:	4b4a      	ldr	r3, [pc, #296]	; (8004b9c <HAL_GPIO_Init+0x2b8>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a7c:	4a48      	ldr	r2, [pc, #288]	; (8004ba0 <HAL_GPIO_Init+0x2bc>)
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	3302      	adds	r3, #2
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	220f      	movs	r2, #15
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a40      	ldr	r2, [pc, #256]	; (8004ba4 <HAL_GPIO_Init+0x2c0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <HAL_GPIO_Init+0x1ec>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a3f      	ldr	r2, [pc, #252]	; (8004ba8 <HAL_GPIO_Init+0x2c4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00d      	beq.n	8004acc <HAL_GPIO_Init+0x1e8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a3e      	ldr	r2, [pc, #248]	; (8004bac <HAL_GPIO_Init+0x2c8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <HAL_GPIO_Init+0x1e4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a3d      	ldr	r2, [pc, #244]	; (8004bb0 <HAL_GPIO_Init+0x2cc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_GPIO_Init+0x1e0>
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e006      	b.n	8004ad2 <HAL_GPIO_Init+0x1ee>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	e004      	b.n	8004ad2 <HAL_GPIO_Init+0x1ee>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e002      	b.n	8004ad2 <HAL_GPIO_Init+0x1ee>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_GPIO_Init+0x1ee>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	f002 0203 	and.w	r2, r2, #3
 8004ad8:	0092      	lsls	r2, r2, #2
 8004ada:	4093      	lsls	r3, r2
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ae2:	492f      	ldr	r1, [pc, #188]	; (8004ba0 <HAL_GPIO_Init+0x2bc>)
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	3302      	adds	r3, #2
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004afc:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	492c      	ldr	r1, [pc, #176]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]
 8004b08:	e006      	b.n	8004b18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	4928      	ldr	r1, [pc, #160]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d006      	beq.n	8004b32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b24:	4b23      	ldr	r3, [pc, #140]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	4922      	ldr	r1, [pc, #136]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
 8004b30:	e006      	b.n	8004b40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b32:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	491e      	ldr	r1, [pc, #120]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4918      	ldr	r1, [pc, #96]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
 8004b58:	e006      	b.n	8004b68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	4914      	ldr	r1, [pc, #80]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d021      	beq.n	8004bb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	490e      	ldr	r1, [pc, #56]	; (8004bb4 <HAL_GPIO_Init+0x2d0>)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
 8004b80:	e021      	b.n	8004bc6 <HAL_GPIO_Init+0x2e2>
 8004b82:	bf00      	nop
 8004b84:	10320000 	.word	0x10320000
 8004b88:	10310000 	.word	0x10310000
 8004b8c:	10220000 	.word	0x10220000
 8004b90:	10210000 	.word	0x10210000
 8004b94:	10120000 	.word	0x10120000
 8004b98:	10110000 	.word	0x10110000
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010800 	.word	0x40010800
 8004ba8:	40010c00 	.word	0x40010c00
 8004bac:	40011000 	.word	0x40011000
 8004bb0:	40011400 	.word	0x40011400
 8004bb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_GPIO_Init+0x304>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	4909      	ldr	r1, [pc, #36]	; (8004be8 <HAL_GPIO_Init+0x304>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	3301      	adds	r3, #1
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f47f ae8e 	bne.w	80048f8 <HAL_GPIO_Init+0x14>
  }
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	372c      	adds	r7, #44	; 0x2c
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr
 8004be8:	40010400 	.word	0x40010400

08004bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bfc:	787b      	ldrb	r3, [r7, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c08:	e003      	b.n	8004c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	611a      	str	r2, [r3, #16]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c2e:	887a      	ldrh	r2, [r7, #2]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4013      	ands	r3, r2
 8004c34:	041a      	lsls	r2, r3, #16
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	43d9      	mvns	r1, r3
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	400b      	ands	r3, r1
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	611a      	str	r2, [r3, #16]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
	...

08004c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d006      	beq.n	8004c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fd fa8b 	bl	800218a <HAL_GPIO_EXTI_Callback>
  }
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40010400 	.word	0x40010400

08004c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e12b      	b.n	8004eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc ff08 	bl	8001abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2224      	movs	r2, #36	; 0x24
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f000 fe10 	bl	8005908 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4a81      	ldr	r2, [pc, #516]	; (8004ef4 <HAL_I2C_Init+0x274>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d807      	bhi.n	8004d04 <HAL_I2C_Init+0x84>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a80      	ldr	r2, [pc, #512]	; (8004ef8 <HAL_I2C_Init+0x278>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bf94      	ite	ls
 8004cfc:	2301      	movls	r3, #1
 8004cfe:	2300      	movhi	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e006      	b.n	8004d12 <HAL_I2C_Init+0x92>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a7d      	ldr	r2, [pc, #500]	; (8004efc <HAL_I2C_Init+0x27c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	bf94      	ite	ls
 8004d0c:	2301      	movls	r3, #1
 8004d0e:	2300      	movhi	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0e7      	b.n	8004eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a78      	ldr	r2, [pc, #480]	; (8004f00 <HAL_I2C_Init+0x280>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	0c9b      	lsrs	r3, r3, #18
 8004d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a6a      	ldr	r2, [pc, #424]	; (8004ef4 <HAL_I2C_Init+0x274>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d802      	bhi.n	8004d54 <HAL_I2C_Init+0xd4>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3301      	adds	r3, #1
 8004d52:	e009      	b.n	8004d68 <HAL_I2C_Init+0xe8>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	4a69      	ldr	r2, [pc, #420]	; (8004f04 <HAL_I2C_Init+0x284>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	099b      	lsrs	r3, r3, #6
 8004d66:	3301      	adds	r3, #1
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	495c      	ldr	r1, [pc, #368]	; (8004ef4 <HAL_I2C_Init+0x274>)
 8004d84:	428b      	cmp	r3, r1
 8004d86:	d819      	bhi.n	8004dbc <HAL_I2C_Init+0x13c>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1e59      	subs	r1, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d96:	1c59      	adds	r1, r3, #1
 8004d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d9c:	400b      	ands	r3, r1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_I2C_Init+0x138>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1e59      	subs	r1, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db0:	3301      	adds	r3, #1
 8004db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db6:	e051      	b.n	8004e5c <HAL_I2C_Init+0x1dc>
 8004db8:	2304      	movs	r3, #4
 8004dba:	e04f      	b.n	8004e5c <HAL_I2C_Init+0x1dc>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d111      	bne.n	8004de8 <HAL_I2C_Init+0x168>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1e58      	subs	r0, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	440b      	add	r3, r1
 8004dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e012      	b.n	8004e0e <HAL_I2C_Init+0x18e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1e58      	subs	r0, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	0099      	lsls	r1, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Init+0x196>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e022      	b.n	8004e5c <HAL_I2C_Init+0x1dc>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10e      	bne.n	8004e3c <HAL_I2C_Init+0x1bc>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1e58      	subs	r0, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	460b      	mov	r3, r1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	440b      	add	r3, r1
 8004e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e30:	3301      	adds	r3, #1
 8004e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3a:	e00f      	b.n	8004e5c <HAL_I2C_Init+0x1dc>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1e58      	subs	r0, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6859      	ldr	r1, [r3, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	0099      	lsls	r1, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e52:	3301      	adds	r3, #1
 8004e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	6809      	ldr	r1, [r1, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6911      	ldr	r1, [r2, #16]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68d2      	ldr	r2, [r2, #12]
 8004e96:	4311      	orrs	r1, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	000186a0 	.word	0x000186a0
 8004ef8:	001e847f 	.word	0x001e847f
 8004efc:	003d08ff 	.word	0x003d08ff
 8004f00:	431bde83 	.word	0x431bde83
 8004f04:	10624dd3 	.word	0x10624dd3

08004f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e304      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8087 	beq.w	8005036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f28:	4b92      	ldr	r3, [pc, #584]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d00c      	beq.n	8004f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f34:	4b8f      	ldr	r3, [pc, #572]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d112      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5e>
 8004f40:	4b8c      	ldr	r3, [pc, #560]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4c:	d10b      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4e:	4b89      	ldr	r3, [pc, #548]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d06c      	beq.n	8005034 <HAL_RCC_OscConfig+0x12c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d168      	bne.n	8005034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e2de      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x76>
 8004f70:	4b80      	ldr	r3, [pc, #512]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a7f      	ldr	r2, [pc, #508]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e02e      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x98>
 8004f86:	4b7b      	ldr	r3, [pc, #492]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a7a      	ldr	r2, [pc, #488]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	4b78      	ldr	r3, [pc, #480]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a77      	ldr	r2, [pc, #476]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e01d      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0xbc>
 8004faa:	4b72      	ldr	r3, [pc, #456]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a71      	ldr	r2, [pc, #452]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b6f      	ldr	r3, [pc, #444]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6e      	ldr	r2, [pc, #440]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0xd4>
 8004fc4:	4b6b      	ldr	r3, [pc, #428]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6a      	ldr	r2, [pc, #424]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b68      	ldr	r3, [pc, #416]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a67      	ldr	r2, [pc, #412]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7ff fb70 	bl	80046c8 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fec:	f7ff fb6c 	bl	80046c8 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	; 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e292      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	4b5d      	ldr	r3, [pc, #372]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0xe4>
 800500a:	e014      	b.n	8005036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7ff fb5c 	bl	80046c8 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005014:	f7ff fb58 	bl	80046c8 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	; 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e27e      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	4b53      	ldr	r3, [pc, #332]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x10c>
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d063      	beq.n	800510a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005042:	4b4c      	ldr	r3, [pc, #304]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800504e:	4b49      	ldr	r3, [pc, #292]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b08      	cmp	r3, #8
 8005058:	d11c      	bne.n	8005094 <HAL_RCC_OscConfig+0x18c>
 800505a:	4b46      	ldr	r3, [pc, #280]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005066:	4b43      	ldr	r3, [pc, #268]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x176>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e252      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507e:	4b3d      	ldr	r3, [pc, #244]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4939      	ldr	r1, [pc, #228]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	e03a      	b.n	800510a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <HAL_RCC_OscConfig+0x270>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a2:	f7ff fb11 	bl	80046c8 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050aa:	f7ff fb0d 	bl	80046c8 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e233      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	4b2d      	ldr	r3, [pc, #180]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b2a      	ldr	r3, [pc, #168]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4927      	ldr	r1, [pc, #156]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
 80050dc:	e015      	b.n	800510a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050de:	4b26      	ldr	r3, [pc, #152]	; (8005178 <HAL_RCC_OscConfig+0x270>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7ff faf0 	bl	80046c8 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ec:	f7ff faec 	bl	80046c8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e212      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03a      	beq.n	800518c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d019      	beq.n	8005152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511e:	4b17      	ldr	r3, [pc, #92]	; (800517c <HAL_RCC_OscConfig+0x274>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005124:	f7ff fad0 	bl	80046c8 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800512c:	f7ff facc 	bl	80046c8 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e1f2      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <HAL_RCC_OscConfig+0x26c>)
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800514a:	2001      	movs	r0, #1
 800514c:	f000 fc34 	bl	80059b8 <RCC_Delay>
 8005150:	e01c      	b.n	800518c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <HAL_RCC_OscConfig+0x274>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005158:	f7ff fab6 	bl	80046c8 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800515e:	e00f      	b.n	8005180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005160:	f7ff fab2 	bl	80046c8 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d908      	bls.n	8005180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1d8      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
 8005172:	bf00      	nop
 8005174:	40021000 	.word	0x40021000
 8005178:	42420000 	.word	0x42420000
 800517c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	4b9b      	ldr	r3, [pc, #620]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e9      	bne.n	8005160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80a6 	beq.w	80052e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519e:	4b94      	ldr	r3, [pc, #592]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10d      	bne.n	80051c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b91      	ldr	r3, [pc, #580]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	4a90      	ldr	r2, [pc, #576]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b4:	61d3      	str	r3, [r2, #28]
 80051b6:	4b8e      	ldr	r3, [pc, #568]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c6:	4b8b      	ldr	r3, [pc, #556]	; (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d118      	bne.n	8005204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d2:	4b88      	ldr	r3, [pc, #544]	; (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a87      	ldr	r2, [pc, #540]	; (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051de:	f7ff fa73 	bl	80046c8 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7ff fa6f 	bl	80046c8 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b64      	cmp	r3, #100	; 0x64
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e195      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	4b7e      	ldr	r3, [pc, #504]	; (80053f4 <HAL_RCC_OscConfig+0x4ec>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <HAL_RCC_OscConfig+0x312>
 800520c:	4b78      	ldr	r3, [pc, #480]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	4a77      	ldr	r2, [pc, #476]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	6213      	str	r3, [r2, #32]
 8005218:	e02d      	b.n	8005276 <HAL_RCC_OscConfig+0x36e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10c      	bne.n	800523c <HAL_RCC_OscConfig+0x334>
 8005222:	4b73      	ldr	r3, [pc, #460]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	4a72      	ldr	r2, [pc, #456]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	6213      	str	r3, [r2, #32]
 800522e:	4b70      	ldr	r3, [pc, #448]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	4a6f      	ldr	r2, [pc, #444]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005234:	f023 0304 	bic.w	r3, r3, #4
 8005238:	6213      	str	r3, [r2, #32]
 800523a:	e01c      	b.n	8005276 <HAL_RCC_OscConfig+0x36e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b05      	cmp	r3, #5
 8005242:	d10c      	bne.n	800525e <HAL_RCC_OscConfig+0x356>
 8005244:	4b6a      	ldr	r3, [pc, #424]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4a69      	ldr	r2, [pc, #420]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	6213      	str	r3, [r2, #32]
 8005250:	4b67      	ldr	r3, [pc, #412]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	4a66      	ldr	r2, [pc, #408]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6213      	str	r3, [r2, #32]
 800525c:	e00b      	b.n	8005276 <HAL_RCC_OscConfig+0x36e>
 800525e:	4b64      	ldr	r3, [pc, #400]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	4a63      	ldr	r2, [pc, #396]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	6213      	str	r3, [r2, #32]
 800526a:	4b61      	ldr	r3, [pc, #388]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4a60      	ldr	r2, [pc, #384]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d015      	beq.n	80052aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527e:	f7ff fa23 	bl	80046c8 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	e00a      	b.n	800529c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7ff fa1f 	bl	80046c8 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e143      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529c:	4b54      	ldr	r3, [pc, #336]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ee      	beq.n	8005286 <HAL_RCC_OscConfig+0x37e>
 80052a8:	e014      	b.n	80052d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052aa:	f7ff fa0d 	bl	80046c8 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7ff fa09 	bl	80046c8 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e12d      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c8:	4b49      	ldr	r3, [pc, #292]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ee      	bne.n	80052b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052da:	4b45      	ldr	r3, [pc, #276]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4a44      	ldr	r2, [pc, #272]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 808c 	beq.w	8005408 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80052f0:	4b3f      	ldr	r3, [pc, #252]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d10e      	bne.n	800531c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80052fe:	4b3c      	ldr	r3, [pc, #240]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005306:	2b08      	cmp	r3, #8
 8005308:	d108      	bne.n	800531c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800530a:	4b39      	ldr	r3, [pc, #228]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e103      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	2b02      	cmp	r3, #2
 8005322:	d14e      	bne.n	80053c2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005324:	4b32      	ldr	r3, [pc, #200]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005330:	4b2f      	ldr	r3, [pc, #188]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0ef      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005344:	4b2c      	ldr	r3, [pc, #176]	; (80053f8 <HAL_RCC_OscConfig+0x4f0>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7ff f9bd 	bl	80046c8 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005352:	f7ff f9b9 	bl	80046c8 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b64      	cmp	r3, #100	; 0x64
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0df      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005364:	4b22      	ldr	r3, [pc, #136]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005370:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537c:	491c      	ldr	r1, [pc, #112]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005382:	4b1b      	ldr	r3, [pc, #108]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4918      	ldr	r1, [pc, #96]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005394:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <HAL_RCC_OscConfig+0x4f0>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7ff f995 	bl	80046c8 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053a2:	f7ff f991 	bl	80046c8 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b64      	cmp	r3, #100	; 0x64
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0b7      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80053b4:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x49a>
 80053c0:	e022      	b.n	8005408 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <HAL_RCC_OscConfig+0x4e8>)
 80053c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <HAL_RCC_OscConfig+0x4f0>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7ff f978 	bl	80046c8 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80053da:	e00f      	b.n	80053fc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053dc:	f7ff f974 	bl	80046c8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d908      	bls.n	80053fc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e09a      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40007000 	.word	0x40007000
 80053f8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80053fc:	4b4b      	ldr	r3, [pc, #300]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e9      	bne.n	80053dc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8088 	beq.w	8005522 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005412:	4b46      	ldr	r3, [pc, #280]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b08      	cmp	r3, #8
 800541c:	d068      	beq.n	80054f0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d14d      	bne.n	80054c2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b42      	ldr	r3, [pc, #264]	; (8005530 <HAL_RCC_OscConfig+0x628>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7ff f94c 	bl	80046c8 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005434:	f7ff f948 	bl	80046c8 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e06e      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545a:	d10f      	bne.n	800547c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800545c:	4b33      	ldr	r3, [pc, #204]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4931      	ldr	r1, [pc, #196]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005466:	4313      	orrs	r3, r2
 8005468:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800546a:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	f023 020f 	bic.w	r2, r3, #15
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	492d      	ldr	r1, [pc, #180]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005478:	4313      	orrs	r3, r2
 800547a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800547c:	4b2b      	ldr	r3, [pc, #172]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	430b      	orrs	r3, r1
 800548e:	4927      	ldr	r1, [pc, #156]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005494:	4b26      	ldr	r3, [pc, #152]	; (8005530 <HAL_RCC_OscConfig+0x628>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7ff f915 	bl	80046c8 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a2:	f7ff f911 	bl	80046c8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e037      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x59a>
 80054c0:	e02f      	b.n	8005522 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <HAL_RCC_OscConfig+0x628>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7ff f8fe 	bl	80046c8 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7ff f8fa 	bl	80046c8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e020      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x5c8>
 80054ee:	e018      	b.n	8005522 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e013      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	429a      	cmp	r2, r3
 800550e:	d106      	bne.n	800551e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	42420060 	.word	0x42420060

08005534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0d0      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b6a      	ldr	r3, [pc, #424]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b67      	ldr	r3, [pc, #412]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	4965      	ldr	r1, [pc, #404]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b63      	ldr	r3, [pc, #396]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0b8      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d020      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005590:	4b59      	ldr	r3, [pc, #356]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4a58      	ldr	r2, [pc, #352]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005596:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800559a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a8:	4b53      	ldr	r3, [pc, #332]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a52      	ldr	r2, [pc, #328]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80055b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b4:	4b50      	ldr	r3, [pc, #320]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	494d      	ldr	r1, [pc, #308]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d040      	beq.n	8005654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055da:	4b47      	ldr	r3, [pc, #284]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d115      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e07f      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e073      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	4b3d      	ldr	r3, [pc, #244]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06b      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4936      	ldr	r1, [pc, #216]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005620:	4313      	orrs	r3, r2
 8005622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005624:	f7ff f850 	bl	80046c8 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7ff f84c 	bl	80046c8 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e053      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d210      	bcs.n	8005684 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 0207 	bic.w	r2, r3, #7
 800566a:	4922      	ldr	r1, [pc, #136]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e032      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005690:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4916      	ldr	r1, [pc, #88]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	490e      	ldr	r1, [pc, #56]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056c2:	f000 f821 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	490a      	ldr	r1, [pc, #40]	; (80056fc <HAL_RCC_ClockConfig+0x1c8>)
 80056d4:	5ccb      	ldrb	r3, [r1, r3]
 80056d6:	fa22 f303 	lsr.w	r3, r2, r3
 80056da:	4a09      	ldr	r2, [pc, #36]	; (8005700 <HAL_RCC_ClockConfig+0x1cc>)
 80056dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <HAL_RCC_ClockConfig+0x1d0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fd fb4c 	bl	8002d80 <HAL_InitTick>

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40021000 	.word	0x40021000
 80056fc:	0800e5c4 	.word	0x0800e5c4
 8005700:	20000064 	.word	0x20000064
 8005704:	200000a4 	.word	0x200000a4

08005708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800570c:	b092      	sub	sp, #72	; 0x48
 800570e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005714:	2300      	movs	r3, #0
 8005716:	63bb      	str	r3, [r7, #56]	; 0x38
 8005718:	2300      	movs	r3, #0
 800571a:	647b      	str	r3, [r7, #68]	; 0x44
 800571c:	2300      	movs	r3, #0
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
 8005728:	2300      	movs	r3, #0
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800572c:	4b6b      	ldr	r3, [pc, #428]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b04      	cmp	r3, #4
 800573a:	d002      	beq.n	8005742 <HAL_RCC_GetSysClockFreq+0x3a>
 800573c:	2b08      	cmp	r3, #8
 800573e:	d003      	beq.n	8005748 <HAL_RCC_GetSysClockFreq+0x40>
 8005740:	e0c3      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005742:	4b67      	ldr	r3, [pc, #412]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005744:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005746:	e0c3      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	0c9b      	lsrs	r3, r3, #18
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	4b64      	ldr	r3, [pc, #400]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8005752:	5c9b      	ldrb	r3, [r3, r2]
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80ac 	beq.w	80058ba <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005762:	4b5e      	ldr	r3, [pc, #376]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	f003 020f 	and.w	r2, r3, #15
 800576a:	4b5f      	ldr	r3, [pc, #380]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x1e0>)
 800576c:	5c9b      	ldrb	r3, [r3, r2]
 800576e:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005770:	4b5a      	ldr	r3, [pc, #360]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 808c 	beq.w	8005896 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800577e:	4b57      	ldr	r3, [pc, #348]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	3301      	adds	r3, #1
 800578a:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800578c:	4b53      	ldr	r3, [pc, #332]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	3302      	adds	r3, #2
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	2200      	movs	r2, #0
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	627a      	str	r2, [r7, #36]	; 0x24
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	2200      	movs	r2, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	4611      	mov	r1, r2
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	fb00 f203 	mul.w	r2, r0, r3
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	fb03 f301 	mul.w	r3, r3, r1
 80057b6:	4413      	add	r3, r2
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	fba2 4500 	umull	r4, r5, r2, r0
 80057be:	442b      	add	r3, r5
 80057c0:	461d      	mov	r5, r3
 80057c2:	4622      	mov	r2, r4
 80057c4:	462b      	mov	r3, r5
 80057c6:	f04f 0000 	mov.w	r0, #0
 80057ca:	f04f 0100 	mov.w	r1, #0
 80057ce:	0159      	lsls	r1, r3, #5
 80057d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057d4:	0150      	lsls	r0, r2, #5
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	ebb2 0a04 	subs.w	sl, r2, r4
 80057de:	eb63 0b05 	sbc.w	fp, r3, r5
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057ee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057f2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057f6:	ebb2 080a 	subs.w	r8, r2, sl
 80057fa:	eb63 090b 	sbc.w	r9, r3, fp
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800580a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800580e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005812:	4690      	mov	r8, r2
 8005814:	4699      	mov	r9, r3
 8005816:	eb18 0304 	adds.w	r3, r8, r4
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	eb49 0305 	adc.w	r3, r9, r5
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800582e:	4629      	mov	r1, r5
 8005830:	028b      	lsls	r3, r1, #10
 8005832:	4620      	mov	r0, r4
 8005834:	4629      	mov	r1, r5
 8005836:	4604      	mov	r4, r0
 8005838:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800583c:	4601      	mov	r1, r0
 800583e:	028a      	lsls	r2, r1, #10
 8005840:	4610      	mov	r0, r2
 8005842:	4619      	mov	r1, r3
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	2200      	movs	r2, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	617a      	str	r2, [r7, #20]
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	2200      	movs	r2, #0
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	60fa      	str	r2, [r7, #12]
 8005854:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005858:	4622      	mov	r2, r4
 800585a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800585e:	4645      	mov	r5, r8
 8005860:	fb05 f202 	mul.w	r2, r5, r2
 8005864:	46cc      	mov	ip, r9
 8005866:	4625      	mov	r5, r4
 8005868:	461c      	mov	r4, r3
 800586a:	4623      	mov	r3, r4
 800586c:	fb03 f30c 	mul.w	r3, r3, ip
 8005870:	4413      	add	r3, r2
 8005872:	4622      	mov	r2, r4
 8005874:	4644      	mov	r4, r8
 8005876:	fba2 2404 	umull	r2, r4, r2, r4
 800587a:	61fc      	str	r4, [r7, #28]
 800587c:	61ba      	str	r2, [r7, #24]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005888:	f7fb fcd8 	bl	800123c <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
 8005894:	e007      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800589a:	fb03 f202 	mul.w	r2, r3, r2
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80058a8:	7b5b      	ldrb	r3, [r3, #13]
 80058aa:	461a      	mov	r2, r3
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 80058b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
 80058b8:	e004      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	4a0b      	ldr	r2, [pc, #44]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1e4>)
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 80058c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80058c8:	e002      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80058cc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80058ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3748      	adds	r7, #72	; 0x48
 80058d6:	46bd      	mov	sp, r7
 80058d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	00f42400 	.word	0x00f42400
 80058e4:	0800e5dc 	.word	0x0800e5dc
 80058e8:	0800e5ec 	.word	0x0800e5ec
 80058ec:	003d0900 	.word	0x003d0900
 80058f0:	007a1200 	.word	0x007a1200

080058f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f8:	4b02      	ldr	r3, [pc, #8]	; (8005904 <HAL_RCC_GetHCLKFreq+0x10>)
 80058fa:	681b      	ldr	r3, [r3, #0]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	20000064 	.word	0x20000064

08005908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800590c:	f7ff fff2 	bl	80058f4 <HAL_RCC_GetHCLKFreq>
 8005910:	4602      	mov	r2, r0
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	0a1b      	lsrs	r3, r3, #8
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	4903      	ldr	r1, [pc, #12]	; (800592c <HAL_RCC_GetPCLK1Freq+0x24>)
 800591e:	5ccb      	ldrb	r3, [r1, r3]
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	0800e5d4 	.word	0x0800e5d4

08005930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005934:	f7ff ffde 	bl	80058f4 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	0adb      	lsrs	r3, r3, #11
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4903      	ldr	r1, [pc, #12]	; (8005954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000
 8005954:	0800e5d4 	.word	0x0800e5d4

08005958 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	220f      	movs	r2, #15
 8005966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005968:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <HAL_RCC_GetClockConfig+0x58>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 0203 	and.w	r2, r3, #3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <HAL_RCC_GetClockConfig+0x58>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <HAL_RCC_GetClockConfig+0x58>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800598c:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <HAL_RCC_GetClockConfig+0x58>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	08db      	lsrs	r3, r3, #3
 8005992:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_RCC_GetClockConfig+0x5c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0207 	and.w	r2, r3, #7
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40022000 	.word	0x40022000

080059b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <RCC_Delay+0x34>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a0a      	ldr	r2, [pc, #40]	; (80059f0 <RCC_Delay+0x38>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	0a5b      	lsrs	r3, r3, #9
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059d4:	bf00      	nop
  }
  while (Delay --);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1e5a      	subs	r2, r3, #1
 80059da:	60fa      	str	r2, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f9      	bne.n	80059d4 <RCC_Delay+0x1c>
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	20000064 	.word	0x20000064
 80059f0:	10624dd3 	.word	0x10624dd3

080059f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e076      	b.n	8005af4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a16:	d009      	beq.n	8005a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	61da      	str	r2, [r3, #28]
 8005a1e:	e005      	b.n	8005a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fd f906 	bl	8002c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab0:	ea42 0103 	orr.w	r1, r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	0c1a      	lsrs	r2, r3, #16
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f002 0204 	and.w	r2, r2, #4
 8005ad2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69da      	ldr	r2, [r3, #28]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_SPI_Transmit+0x22>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e12d      	b.n	8005d7a <HAL_SPI_Transmit+0x27e>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b26:	f7fe fdcf 	bl	80046c8 <HAL_GetTick>
 8005b2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b40:	e116      	b.n	8005d70 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_Transmit+0x52>
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b52:	e10d      	b.n	8005d70 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2203      	movs	r2, #3
 8005b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	88fa      	ldrh	r2, [r7, #6]
 8005b72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	d10f      	bne.n	8005bbc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005baa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d007      	beq.n	8005bda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be2:	d14f      	bne.n	8005c84 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_Transmit+0xf6>
 8005bec:	8afb      	ldrh	r3, [r7, #22]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d142      	bne.n	8005c78 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	1c9a      	adds	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c16:	e02f      	b.n	8005c78 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d112      	bne.n	8005c4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	881a      	ldrh	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c4a:	e015      	b.n	8005c78 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c4c:	f7fe fd3c 	bl	80046c8 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d803      	bhi.n	8005c64 <HAL_SPI_Transmit+0x168>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d102      	bne.n	8005c6a <HAL_SPI_Transmit+0x16e>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c76:	e07b      	b.n	8005d70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1ca      	bne.n	8005c18 <HAL_SPI_Transmit+0x11c>
 8005c82:	e050      	b.n	8005d26 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_Transmit+0x196>
 8005c8c:	8afb      	ldrh	r3, [r7, #22]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d144      	bne.n	8005d1c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	7812      	ldrb	r2, [r2, #0]
 8005c9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cb8:	e030      	b.n	8005d1c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d113      	bne.n	8005cf0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cee:	e015      	b.n	8005d1c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf0:	f7fe fcea 	bl	80046c8 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d803      	bhi.n	8005d08 <HAL_SPI_Transmit+0x20c>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d102      	bne.n	8005d0e <HAL_SPI_Transmit+0x212>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d1a:	e029      	b.n	8005d70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1c9      	bne.n	8005cba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fbcc 	bl	80064c8 <SPI_EndRxTxTransaction>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d44:	2300      	movs	r3, #0
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e003      	b.n	8005d70 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b088      	sub	sp, #32
 8005d86:	af02      	add	r7, sp, #8
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d002      	beq.n	8005da8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
 8005da4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005da6:	e0fb      	b.n	8005fa0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005db0:	d112      	bne.n	8005dd8 <HAL_SPI_Receive+0x56>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10e      	bne.n	8005dd8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f8ef 	bl	8005fb2 <HAL_SPI_TransmitReceive>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	e0e8      	b.n	8005faa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_SPI_Receive+0x64>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e0e1      	b.n	8005faa <HAL_SPI_Receive+0x228>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dee:	f7fe fc6b 	bl	80046c8 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Receive+0x7e>
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e04:	e0cc      	b.n	8005fa0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2204      	movs	r2, #4
 8005e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	88fa      	ldrh	r2, [r7, #6]
 8005e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4c:	d10f      	bne.n	8005e6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d007      	beq.n	8005e8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d16a      	bne.n	8005f6a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e94:	e032      	b.n	8005efc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d115      	bne.n	8005ed0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f103 020c 	add.w	r2, r3, #12
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ece:	e015      	b.n	8005efc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed0:	f7fe fbfa 	bl	80046c8 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d803      	bhi.n	8005ee8 <HAL_SPI_Receive+0x166>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d102      	bne.n	8005eee <HAL_SPI_Receive+0x16c>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005efa:	e051      	b.n	8005fa0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1c7      	bne.n	8005e96 <HAL_SPI_Receive+0x114>
 8005f06:	e035      	b.n	8005f74 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d113      	bne.n	8005f3e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	b292      	uxth	r2, r2
 8005f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	1c9a      	adds	r2, r3, #2
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f3c:	e015      	b.n	8005f6a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f3e:	f7fe fbc3 	bl	80046c8 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d803      	bhi.n	8005f56 <HAL_SPI_Receive+0x1d4>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f54:	d102      	bne.n	8005f5c <HAL_SPI_Receive+0x1da>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005f68:	e01a      	b.n	8005fa0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1c9      	bne.n	8005f08 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fa53 	bl	8006424 <SPI_EndRxTransaction>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
 8005f96:	e003      	b.n	8005fa0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08c      	sub	sp, #48	; 0x30
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x26>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e198      	b.n	800630a <HAL_SPI_TransmitReceive+0x358>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fe0:	f7fe fb72 	bl	80046c8 <HAL_GetTick>
 8005fe4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ff6:	887b      	ldrh	r3, [r7, #2]
 8005ff8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d00f      	beq.n	8006022 <HAL_SPI_TransmitReceive+0x70>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006008:	d107      	bne.n	800601a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d103      	bne.n	800601a <HAL_SPI_TransmitReceive+0x68>
 8006012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006016:	2b04      	cmp	r3, #4
 8006018:	d003      	beq.n	8006022 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800601a:	2302      	movs	r3, #2
 800601c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006020:	e16d      	b.n	80062fe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x82>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x82>
 800602e:	887b      	ldrh	r3, [r7, #2]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800603a:	e160      	b.n	80062fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b04      	cmp	r3, #4
 8006046:	d003      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2205      	movs	r2, #5
 800604c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	887a      	ldrh	r2, [r7, #2]
 8006060:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	887a      	ldrh	r2, [r7, #2]
 8006066:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	887a      	ldrh	r2, [r7, #2]
 8006072:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d007      	beq.n	80060a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ac:	d17c      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_SPI_TransmitReceive+0x10a>
 80060b6:	8b7b      	ldrh	r3, [r7, #26]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d16a      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e0:	e057      	b.n	8006192 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d11b      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x176>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d016      	beq.n	8006128 <HAL_SPI_TransmitReceive+0x176>
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d113      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	881a      	ldrh	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	1c9a      	adds	r2, r3, #2
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b01      	cmp	r3, #1
 8006134:	d119      	bne.n	800616a <HAL_SPI_TransmitReceive+0x1b8>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d014      	beq.n	800616a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	b292      	uxth	r2, r2
 800614c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	1c9a      	adds	r2, r3, #2
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006166:	2301      	movs	r3, #1
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800616a:	f7fe faad 	bl	80046c8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006176:	429a      	cmp	r2, r3
 8006178:	d80b      	bhi.n	8006192 <HAL_SPI_TransmitReceive+0x1e0>
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d007      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006190:	e0b5      	b.n	80062fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1a2      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x130>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d19d      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x130>
 80061a6:	e080      	b.n	80062aa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0x204>
 80061b0:	8b7b      	ldrh	r3, [r7, #26]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d16f      	bne.n	8006296 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061dc:	e05b      	b.n	8006296 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d11c      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x274>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d017      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x274>
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d114      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	7812      	ldrb	r2, [r2, #0]
 8006208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d119      	bne.n	8006268 <HAL_SPI_TransmitReceive+0x2b6>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d014      	beq.n	8006268 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006264:	2301      	movs	r3, #1
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006268:	f7fe fa2e 	bl	80046c8 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006274:	429a      	cmp	r2, r3
 8006276:	d803      	bhi.n	8006280 <HAL_SPI_TransmitReceive+0x2ce>
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d102      	bne.n	8006286 <HAL_SPI_TransmitReceive+0x2d4>
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	2b00      	cmp	r3, #0
 8006284:	d107      	bne.n	8006296 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006294:	e033      	b.n	80062fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d19e      	bne.n	80061de <HAL_SPI_TransmitReceive+0x22c>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d199      	bne.n	80061de <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f90a 	bl	80064c8 <SPI_EndRxTxTransaction>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d006      	beq.n	80062c8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062c6:	e01a      	b.n	80062fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062f4:	e003      	b.n	80062fe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800630a:	4618      	mov	r0, r3
 800630c:	3730      	adds	r7, #48	; 0x30
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006324:	f7fe f9d0 	bl	80046c8 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	4413      	add	r3, r2
 8006332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006334:	f7fe f9c8 	bl	80046c8 <HAL_GetTick>
 8006338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800633a:	4b39      	ldr	r3, [pc, #228]	; (8006420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	015b      	lsls	r3, r3, #5
 8006340:	0d1b      	lsrs	r3, r3, #20
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	fb02 f303 	mul.w	r3, r2, r3
 8006348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800634a:	e054      	b.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d050      	beq.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006354:	f7fe f9b8 	bl	80046c8 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	429a      	cmp	r2, r3
 8006362:	d902      	bls.n	800636a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d13d      	bne.n	80063e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006382:	d111      	bne.n	80063a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638c:	d004      	beq.n	8006398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006396:	d107      	bne.n	80063a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b0:	d10f      	bne.n	80063d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e017      	b.n	8006416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4013      	ands	r3, r2
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	429a      	cmp	r2, r3
 8006404:	bf0c      	ite	eq
 8006406:	2301      	moveq	r3, #1
 8006408:	2300      	movne	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	429a      	cmp	r2, r3
 8006412:	d19b      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000064 	.word	0x20000064

08006424 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006438:	d111      	bne.n	800645e <SPI_EndRxTransaction+0x3a>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006442:	d004      	beq.n	800644e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644c:	d107      	bne.n	800645e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006466:	d117      	bne.n	8006498 <SPI_EndRxTransaction+0x74>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006470:	d112      	bne.n	8006498 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2200      	movs	r2, #0
 800647a:	2101      	movs	r1, #1
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff ff49 	bl	8006314 <SPI_WaitFlagStateUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01a      	beq.n	80064be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e013      	b.n	80064c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff ff36 	bl	8006314 <SPI_WaitFlagStateUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e000      	b.n	80064c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2200      	movs	r2, #0
 80064dc:	2180      	movs	r1, #128	; 0x80
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff ff18 	bl	8006314 <SPI_WaitFlagStateUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e000      	b.n	80064fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e041      	b.n	800659a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fc ff84 	bl	8003438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f000 fd70 	bl	8007028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d001      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e03f      	b.n	800663c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <HAL_TIM_Base_Start_IT+0xa4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_TIM_Base_Start_IT+0x62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e6:	d00e      	beq.n	8006606 <HAL_TIM_Base_Start_IT+0x62>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a17      	ldr	r2, [pc, #92]	; (800664c <HAL_TIM_Base_Start_IT+0xa8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIM_Base_Start_IT+0x62>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a16      	ldr	r2, [pc, #88]	; (8006650 <HAL_TIM_Base_Start_IT+0xac>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIM_Base_Start_IT+0x62>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a14      	ldr	r2, [pc, #80]	; (8006654 <HAL_TIM_Base_Start_IT+0xb0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d111      	bne.n	800662a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b06      	cmp	r3, #6
 8006616:	d010      	beq.n	800663a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006628:	e007      	b.n	800663a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0201 	orr.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40012c00 	.word	0x40012c00
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00

08006658 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e041      	b.n	80066ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f839 	bl	80066f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f000 fcc6 	bl	8007028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	bc80      	pop	{r7}
 8006706:	4770      	bx	lr

08006708 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <HAL_TIM_PWM_Start+0x24>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	bf14      	ite	ne
 8006724:	2301      	movne	r3, #1
 8006726:	2300      	moveq	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	e022      	b.n	8006772 <HAL_TIM_PWM_Start+0x6a>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b04      	cmp	r3, #4
 8006730:	d109      	bne.n	8006746 <HAL_TIM_PWM_Start+0x3e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b01      	cmp	r3, #1
 800673c:	bf14      	ite	ne
 800673e:	2301      	movne	r3, #1
 8006740:	2300      	moveq	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	e015      	b.n	8006772 <HAL_TIM_PWM_Start+0x6a>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d109      	bne.n	8006760 <HAL_TIM_PWM_Start+0x58>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	bf14      	ite	ne
 8006758:	2301      	movne	r3, #1
 800675a:	2300      	moveq	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	e008      	b.n	8006772 <HAL_TIM_PWM_Start+0x6a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e063      	b.n	8006842 <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <HAL_TIM_PWM_Start+0x82>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006788:	e013      	b.n	80067b2 <HAL_TIM_PWM_Start+0xaa>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b04      	cmp	r3, #4
 800678e:	d104      	bne.n	800679a <HAL_TIM_PWM_Start+0x92>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006798:	e00b      	b.n	80067b2 <HAL_TIM_PWM_Start+0xaa>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d104      	bne.n	80067aa <HAL_TIM_PWM_Start+0xa2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a8:	e003      	b.n	80067b2 <HAL_TIM_PWM_Start+0xaa>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 febe 	bl	800753c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a21      	ldr	r2, [pc, #132]	; (800684c <HAL_TIM_PWM_Start+0x144>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d107      	bne.n	80067da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1b      	ldr	r2, [pc, #108]	; (800684c <HAL_TIM_PWM_Start+0x144>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d013      	beq.n	800680c <HAL_TIM_PWM_Start+0x104>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ec:	d00e      	beq.n	800680c <HAL_TIM_PWM_Start+0x104>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a17      	ldr	r2, [pc, #92]	; (8006850 <HAL_TIM_PWM_Start+0x148>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d009      	beq.n	800680c <HAL_TIM_PWM_Start+0x104>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a15      	ldr	r2, [pc, #84]	; (8006854 <HAL_TIM_PWM_Start+0x14c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d004      	beq.n	800680c <HAL_TIM_PWM_Start+0x104>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a14      	ldr	r2, [pc, #80]	; (8006858 <HAL_TIM_PWM_Start+0x150>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d111      	bne.n	8006830 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b06      	cmp	r3, #6
 800681c:	d010      	beq.n	8006840 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0201 	orr.w	r2, r2, #1
 800682c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682e:	e007      	b.n	8006840 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40000400 	.word	0x40000400
 8006854:	40000800 	.word	0x40000800
 8006858:	40000c00 	.word	0x40000c00

0800685c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e093      	b.n	8006998 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fc fd69 	bl	800335c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6812      	ldr	r2, [r2, #0]
 800689c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a0:	f023 0307 	bic.w	r3, r3, #7
 80068a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f000 fbb9 	bl	8007028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	4313      	orrs	r3, r2
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068fc:	f023 030c 	bic.w	r3, r3, #12
 8006900:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	4313      	orrs	r3, r2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	011a      	lsls	r2, r3, #4
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	031b      	lsls	r3, r3, #12
 800692c:	4313      	orrs	r3, r2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800693a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	4313      	orrs	r3, r2
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d110      	bne.n	80069f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d102      	bne.n	80069dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069d6:	7b7b      	ldrb	r3, [r7, #13]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d001      	beq.n	80069e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e069      	b.n	8006ab4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f0:	e031      	b.n	8006a56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d110      	bne.n	8006a1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069f8:	7bbb      	ldrb	r3, [r7, #14]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d102      	bne.n	8006a04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069fe:	7b3b      	ldrb	r3, [r7, #12]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d001      	beq.n	8006a08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e055      	b.n	8006ab4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a18:	e01d      	b.n	8006a56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d108      	bne.n	8006a32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d105      	bne.n	8006a32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a26:	7b7b      	ldrb	r3, [r7, #13]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d102      	bne.n	8006a32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a2c:	7b3b      	ldrb	r3, [r7, #12]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d001      	beq.n	8006a36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e03e      	b.n	8006ab4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_TIM_Encoder_Start+0xc4>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d008      	beq.n	8006a74 <HAL_TIM_Encoder_Start+0xd4>
 8006a62:	e00f      	b.n	8006a84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fd65 	bl	800753c <TIM_CCxChannelCmd>
      break;
 8006a72:	e016      	b.n	8006aa2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	2104      	movs	r1, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fd5d 	bl	800753c <TIM_CCxChannelCmd>
      break;
 8006a82:	e00e      	b.n	8006aa2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fd55 	bl	800753c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2201      	movs	r2, #1
 8006a98:	2104      	movs	r1, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fd4e 	bl	800753c <TIM_CCxChannelCmd>
      break;
 8006aa0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0201 	orr.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d122      	bne.n	8006b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d11b      	bne.n	8006b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0202 	mvn.w	r2, #2
 8006ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa76 	bl	8006ff0 <HAL_TIM_IC_CaptureCallback>
 8006b04:	e005      	b.n	8006b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa69 	bl	8006fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fa78 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f003 0304 	and.w	r3, r3, #4
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d122      	bne.n	8006b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d11b      	bne.n	8006b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f06f 0204 	mvn.w	r2, #4
 8006b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa4c 	bl	8006ff0 <HAL_TIM_IC_CaptureCallback>
 8006b58:	e005      	b.n	8006b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa3f 	bl	8006fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fa4e 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d122      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d11b      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f06f 0208 	mvn.w	r2, #8
 8006b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2204      	movs	r2, #4
 8006b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa22 	bl	8006ff0 <HAL_TIM_IC_CaptureCallback>
 8006bac:	e005      	b.n	8006bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa15 	bl	8006fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa24 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	d122      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	2b10      	cmp	r3, #16
 8006bda:	d11b      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0210 	mvn.w	r2, #16
 8006be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2208      	movs	r2, #8
 8006bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9f8 	bl	8006ff0 <HAL_TIM_IC_CaptureCallback>
 8006c00:	e005      	b.n	8006c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9eb 	bl	8006fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f9fa 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10e      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d107      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0201 	mvn.w	r2, #1
 8006c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fb fab4 	bl	80021a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4a:	2b80      	cmp	r3, #128	; 0x80
 8006c4c:	d10e      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c58:	2b80      	cmp	r3, #128	; 0x80
 8006c5a:	d107      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fcfb 	bl	8007662 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d10e      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d107      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9be 	bl	8007014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d10e      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d107      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0220 	mvn.w	r2, #32
 8006cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fcc6 	bl	8007650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0ae      	b.n	8006e48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b0c      	cmp	r3, #12
 8006cf6:	f200 809f 	bhi.w	8006e38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006e39 	.word	0x08006e39
 8006d08:	08006e39 	.word	0x08006e39
 8006d0c:	08006e39 	.word	0x08006e39
 8006d10:	08006d75 	.word	0x08006d75
 8006d14:	08006e39 	.word	0x08006e39
 8006d18:	08006e39 	.word	0x08006e39
 8006d1c:	08006e39 	.word	0x08006e39
 8006d20:	08006db7 	.word	0x08006db7
 8006d24:	08006e39 	.word	0x08006e39
 8006d28:	08006e39 	.word	0x08006e39
 8006d2c:	08006e39 	.word	0x08006e39
 8006d30:	08006df7 	.word	0x08006df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f9e0 	bl	8007100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0208 	orr.w	r2, r2, #8
 8006d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6999      	ldr	r1, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	619a      	str	r2, [r3, #24]
      break;
 8006d72:	e064      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fa26 	bl	80071cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6999      	ldr	r1, [r3, #24]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	619a      	str	r2, [r3, #24]
      break;
 8006db4:	e043      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fa6f 	bl	80072a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0208 	orr.w	r2, r2, #8
 8006dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0204 	bic.w	r2, r2, #4
 8006de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69d9      	ldr	r1, [r3, #28]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	61da      	str	r2, [r3, #28]
      break;
 8006df4:	e023      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fab9 	bl	8007374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69d9      	ldr	r1, [r3, #28]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	021a      	lsls	r2, r3, #8
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	61da      	str	r2, [r3, #28]
      break;
 8006e36:	e002      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_TIM_ConfigClockSource+0x1c>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e0b4      	b.n	8006fd6 <HAL_TIM_ConfigClockSource+0x186>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea4:	d03e      	beq.n	8006f24 <HAL_TIM_ConfigClockSource+0xd4>
 8006ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eaa:	f200 8087 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb2:	f000 8086 	beq.w	8006fc2 <HAL_TIM_ConfigClockSource+0x172>
 8006eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eba:	d87f      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ebc:	2b70      	cmp	r3, #112	; 0x70
 8006ebe:	d01a      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8006ec0:	2b70      	cmp	r3, #112	; 0x70
 8006ec2:	d87b      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ec4:	2b60      	cmp	r3, #96	; 0x60
 8006ec6:	d050      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x11a>
 8006ec8:	2b60      	cmp	r3, #96	; 0x60
 8006eca:	d877      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ecc:	2b50      	cmp	r3, #80	; 0x50
 8006ece:	d03c      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0xfa>
 8006ed0:	2b50      	cmp	r3, #80	; 0x50
 8006ed2:	d873      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ed4:	2b40      	cmp	r3, #64	; 0x40
 8006ed6:	d058      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x13a>
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d86f      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006edc:	2b30      	cmp	r3, #48	; 0x30
 8006ede:	d064      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ee0:	2b30      	cmp	r3, #48	; 0x30
 8006ee2:	d86b      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d060      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d867      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d05c      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d05a      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ef4:	e062      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f06:	f000 fafa 	bl	80074fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	609a      	str	r2, [r3, #8]
      break;
 8006f22:	e04f      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f34:	f000 fae3 	bl	80074fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f46:	609a      	str	r2, [r3, #8]
      break;
 8006f48:	e03c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f56:	461a      	mov	r2, r3
 8006f58:	f000 fa5a 	bl	8007410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2150      	movs	r1, #80	; 0x50
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fab1 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006f68:	e02c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f76:	461a      	mov	r2, r3
 8006f78:	f000 fa78 	bl	800746c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2160      	movs	r1, #96	; 0x60
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 faa1 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006f88:	e01c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f96:	461a      	mov	r2, r3
 8006f98:	f000 fa3a 	bl	8007410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2140      	movs	r1, #64	; 0x40
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fa91 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006fa8:	e00c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f000 fa88 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006fba:	e003      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc0:	e000      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr

08007014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr
	...

08007028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a2d      	ldr	r2, [pc, #180]	; (80070f0 <TIM_Base_SetConfig+0xc8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00f      	beq.n	8007060 <TIM_Base_SetConfig+0x38>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007046:	d00b      	beq.n	8007060 <TIM_Base_SetConfig+0x38>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a2a      	ldr	r2, [pc, #168]	; (80070f4 <TIM_Base_SetConfig+0xcc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <TIM_Base_SetConfig+0x38>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a29      	ldr	r2, [pc, #164]	; (80070f8 <TIM_Base_SetConfig+0xd0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_Base_SetConfig+0x38>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a28      	ldr	r2, [pc, #160]	; (80070fc <TIM_Base_SetConfig+0xd4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d108      	bne.n	8007072 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <TIM_Base_SetConfig+0xc8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00f      	beq.n	800709a <TIM_Base_SetConfig+0x72>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007080:	d00b      	beq.n	800709a <TIM_Base_SetConfig+0x72>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1b      	ldr	r2, [pc, #108]	; (80070f4 <TIM_Base_SetConfig+0xcc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d007      	beq.n	800709a <TIM_Base_SetConfig+0x72>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <TIM_Base_SetConfig+0xd0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_Base_SetConfig+0x72>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a19      	ldr	r2, [pc, #100]	; (80070fc <TIM_Base_SetConfig+0xd4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d108      	bne.n	80070ac <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a07      	ldr	r2, [pc, #28]	; (80070f0 <TIM_Base_SetConfig+0xc8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d103      	bne.n	80070e0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	615a      	str	r2, [r3, #20]
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40000400 	.word	0x40000400
 80070f8:	40000800 	.word	0x40000800
 80070fc:	40000c00 	.word	0x40000c00

08007100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	f023 0201 	bic.w	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f023 0302 	bic.w	r3, r3, #2
 8007148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a1c      	ldr	r2, [pc, #112]	; (80071c8 <TIM_OC1_SetConfig+0xc8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d10c      	bne.n	8007176 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0308 	bic.w	r3, r3, #8
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f023 0304 	bic.w	r3, r3, #4
 8007174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a13      	ldr	r2, [pc, #76]	; (80071c8 <TIM_OC1_SetConfig+0xc8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d111      	bne.n	80071a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800718c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	621a      	str	r2, [r3, #32]
}
 80071bc:	bf00      	nop
 80071be:	371c      	adds	r7, #28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40012c00 	.word	0x40012c00

080071cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	f023 0210 	bic.w	r2, r3, #16
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0320 	bic.w	r3, r3, #32
 8007216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a1d      	ldr	r2, [pc, #116]	; (800729c <TIM_OC2_SetConfig+0xd0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d10d      	bne.n	8007248 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a14      	ldr	r2, [pc, #80]	; (800729c <TIM_OC2_SetConfig+0xd0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d113      	bne.n	8007278 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800725e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	40012c00 	.word	0x40012c00

080072a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0303 	bic.w	r3, r3, #3
 80072d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <TIM_OC3_SetConfig+0xd0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d10d      	bne.n	800731a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a14      	ldr	r2, [pc, #80]	; (8007370 <TIM_OC3_SetConfig+0xd0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d113      	bne.n	800734a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4313      	orrs	r3, r2
 800733c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	621a      	str	r2, [r3, #32]
}
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	bc80      	pop	{r7}
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40012c00 	.word	0x40012c00

08007374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a0f      	ldr	r2, [pc, #60]	; (800740c <TIM_OC4_SetConfig+0x98>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d109      	bne.n	80073e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	019b      	lsls	r3, r3, #6
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr
 800740c:	40012c00 	.word	0x40012c00

08007410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f023 0201 	bic.w	r2, r3, #1
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800743a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f023 030a 	bic.w	r3, r3, #10
 800744c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f023 0210 	bic.w	r2, r3, #16
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	031b      	lsls	r3, r3, #12
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr

080074ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f043 0307 	orr.w	r3, r3, #7
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	609a      	str	r2, [r3, #8]
}
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr

080074fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074fe:	b480      	push	{r7}
 8007500:	b087      	sub	sp, #28
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	607a      	str	r2, [r7, #4]
 800750a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007518:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	021a      	lsls	r2, r3, #8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	431a      	orrs	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4313      	orrs	r3, r2
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	609a      	str	r2, [r3, #8]
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr

0800753c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f003 031f 	and.w	r3, r3, #31
 800754e:	2201      	movs	r2, #1
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	43db      	mvns	r3, r3
 800755e:	401a      	ands	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f003 031f 	and.w	r3, r3, #31
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	fa01 f303 	lsl.w	r3, r1, r3
 8007574:	431a      	orrs	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	621a      	str	r2, [r3, #32]
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr

08007584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007598:	2302      	movs	r3, #2
 800759a:	e04b      	b.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a19      	ldr	r2, [pc, #100]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d013      	beq.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e8:	d00e      	beq.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a15      	ldr	r2, [pc, #84]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d009      	beq.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a13      	ldr	r2, [pc, #76]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a12      	ldr	r2, [pc, #72]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d10c      	bne.n	8007622 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	4313      	orrs	r3, r2
 8007618:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	bc80      	pop	{r7}
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40012c00 	.word	0x40012c00
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800
 800764c:	40000c00 	.word	0x40000c00

08007650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr

08007662 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr

08007674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e042      	b.n	800770c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fb ff78 	bl	8003590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2224      	movs	r2, #36	; 0x24
 80076a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f91d 	bl	80078f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	695a      	ldr	r2, [r3, #20]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2220      	movs	r2, #32
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af02      	add	r7, sp, #8
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	4613      	mov	r3, r2
 8007722:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b20      	cmp	r3, #32
 8007732:	d16d      	bne.n	8007810 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <HAL_UART_Transmit+0x2c>
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e066      	b.n	8007812 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2221      	movs	r2, #33	; 0x21
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007752:	f7fc ffb9 	bl	80046c8 <HAL_GetTick>
 8007756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	88fa      	ldrh	r2, [r7, #6]
 800775c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	88fa      	ldrh	r2, [r7, #6]
 8007762:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776c:	d108      	bne.n	8007780 <HAL_UART_Transmit+0x6c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	e003      	b.n	8007788 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007788:	e02a      	b.n	80077e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2200      	movs	r2, #0
 8007792:	2180      	movs	r1, #128	; 0x80
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f840 	bl	800781a <UART_WaitOnFlagUntilTimeout>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e036      	b.n	8007812 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	3302      	adds	r3, #2
 80077be:	61bb      	str	r3, [r7, #24]
 80077c0:	e007      	b.n	80077d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	781a      	ldrb	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	3301      	adds	r3, #1
 80077d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1cf      	bne.n	800778a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2200      	movs	r2, #0
 80077f2:	2140      	movs	r1, #64	; 0x40
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f810 	bl	800781a <UART_WaitOnFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e006      	b.n	8007812 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	e000      	b.n	8007812 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007810:	2302      	movs	r3, #2
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b090      	sub	sp, #64	; 0x40
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	603b      	str	r3, [r7, #0]
 8007826:	4613      	mov	r3, r2
 8007828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800782a:	e050      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d04c      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <UART_WaitOnFlagUntilTimeout+0x30>
 800783a:	f7fc ff45 	bl	80046c8 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007846:	429a      	cmp	r2, r3
 8007848:	d241      	bcs.n	80078ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	330c      	adds	r3, #12
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800786a:	637a      	str	r2, [r7, #52]	; 0x34
 800786c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e5      	bne.n	800784a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3314      	adds	r3, #20
 8007884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	613b      	str	r3, [r7, #16]
   return(result);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	63bb      	str	r3, [r7, #56]	; 0x38
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3314      	adds	r3, #20
 800789c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800789e:	623a      	str	r2, [r7, #32]
 80078a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	69f9      	ldr	r1, [r7, #28]
 80078a4:	6a3a      	ldr	r2, [r7, #32]
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e5      	bne.n	800787e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e00f      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4013      	ands	r3, r2
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	bf0c      	ite	eq
 80078de:	2301      	moveq	r3, #1
 80078e0:	2300      	movne	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d09f      	beq.n	800782c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3740      	adds	r7, #64	; 0x40
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007932:	f023 030c 	bic.w	r3, r3, #12
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	430b      	orrs	r3, r1
 800793e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a2c      	ldr	r2, [pc, #176]	; (8007a0c <UART_SetConfig+0x114>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d103      	bne.n	8007968 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007960:	f7fd ffe6 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	e002      	b.n	800796e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007968:	f7fd ffce 	bl	8005908 <HAL_RCC_GetPCLK1Freq>
 800796c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	009a      	lsls	r2, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	fbb2 f3f3 	udiv	r3, r2, r3
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <UART_SetConfig+0x118>)
 8007986:	fba2 2303 	umull	r2, r3, r2, r3
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	0119      	lsls	r1, r3, #4
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009a      	lsls	r2, r3, #2
 8007998:	441a      	add	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <UART_SetConfig+0x118>)
 80079a6:	fba3 0302 	umull	r0, r3, r3, r2
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	2064      	movs	r0, #100	; 0x64
 80079ae:	fb00 f303 	mul.w	r3, r0, r3
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	3332      	adds	r3, #50	; 0x32
 80079b8:	4a15      	ldr	r2, [pc, #84]	; (8007a10 <UART_SetConfig+0x118>)
 80079ba:	fba2 2303 	umull	r2, r3, r2, r3
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079c4:	4419      	add	r1, r3
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	009a      	lsls	r2, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <UART_SetConfig+0x118>)
 80079de:	fba3 0302 	umull	r0, r3, r3, r2
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	2064      	movs	r0, #100	; 0x64
 80079e6:	fb00 f303 	mul.w	r3, r0, r3
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	3332      	adds	r3, #50	; 0x32
 80079f0:	4a07      	ldr	r2, [pc, #28]	; (8007a10 <UART_SetConfig+0x118>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	f003 020f 	and.w	r2, r3, #15
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	440a      	add	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a04:	bf00      	nop
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40013800 	.word	0x40013800
 8007a10:	51eb851f 	.word	0x51eb851f

08007a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4a06      	ldr	r2, [pc, #24]	; (8007a3c <vApplicationGetIdleTaskMemory+0x28>)
 8007a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4a05      	ldr	r2, [pc, #20]	; (8007a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2280      	movs	r2, #128	; 0x80
 8007a30:	601a      	str	r2, [r3, #0]
}
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	200006ec 	.word	0x200006ec
 8007a40:	20000748 	.word	0x20000748

08007a44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4a07      	ldr	r2, [pc, #28]	; (8007a70 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	4a06      	ldr	r2, [pc, #24]	; (8007a74 <vApplicationGetTimerTaskMemory+0x30>)
 8007a5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	20000948 	.word	0x20000948
 8007a74:	200009a4 	.word	0x200009a4

08007a78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 0208 	add.w	r2, r3, #8
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f103 0208 	add.w	r2, r3, #8
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f103 0208 	add.w	r2, r3, #8
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr

08007ab6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr

08007ace <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	601a      	str	r2, [r3, #0]
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2a:	d103      	bne.n	8007b34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e00c      	b.n	8007b4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3308      	adds	r3, #8
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	e002      	b.n	8007b42 <vListInsert+0x2e>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d2f6      	bcs.n	8007b3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bc80      	pop	{r7}
 8007b82:	4770      	bx	lr

08007b84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6892      	ldr	r2, [r2, #8]
 8007b9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6852      	ldr	r2, [r2, #4]
 8007ba4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d103      	bne.n	8007bb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	1e5a      	subs	r2, r3, #1
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr
	...

08007bd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c02:	f002 f89b 	bl	8009d3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	441a      	add	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	3b01      	subs	r3, #1
 8007c34:	68f9      	ldr	r1, [r7, #12]
 8007c36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c38:	fb01 f303 	mul.w	r3, r1, r3
 8007c3c:	441a      	add	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	22ff      	movs	r2, #255	; 0xff
 8007c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d114      	bne.n	8007c82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01a      	beq.n	8007c96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3310      	adds	r3, #16
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 f92f 	bl	8008ec8 <xTaskRemoveFromEventList>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d012      	beq.n	8007c96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c70:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <xQueueGenericReset+0xcc>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	e009      	b.n	8007c96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3310      	adds	r3, #16
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff fef6 	bl	8007a78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3324      	adds	r3, #36	; 0x24
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff fef1 	bl	8007a78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c96:	f002 f881 	bl	8009d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c9a:	2301      	movs	r3, #1
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	e000ed04 	.word	0xe000ed04

08007ca8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08e      	sub	sp, #56	; 0x38
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <xQueueGenericCreateStatic+0x52>
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <xQueueGenericCreateStatic+0x56>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e000      	b.n	8007d00 <xQueueGenericCreateStatic+0x58>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	623b      	str	r3, [r7, #32]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <xQueueGenericCreateStatic+0x7e>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <xQueueGenericCreateStatic+0x82>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <xQueueGenericCreateStatic+0x84>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	61fb      	str	r3, [r7, #28]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d46:	2350      	movs	r3, #80	; 0x50
 8007d48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2b50      	cmp	r3, #80	; 0x50
 8007d4e:	d00a      	beq.n	8007d66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	61bb      	str	r3, [r7, #24]
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00d      	beq.n	8007d8c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f843 	bl	8007e12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3730      	adds	r7, #48	; 0x30
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b08a      	sub	sp, #40	; 0x28
 8007d9a:	af02      	add	r7, sp, #8
 8007d9c:	60f8      	str	r0, [r7, #12]
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	4613      	mov	r3, r2
 8007da2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10a      	bne.n	8007dc0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	613b      	str	r3, [r7, #16]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61fb      	str	r3, [r7, #28]
 8007dca:	e004      	b.n	8007dd6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
 8007dd4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	3350      	adds	r3, #80	; 0x50
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f002 f8ae 	bl	8009f3c <pvPortMalloc>
 8007de0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00f      	beq.n	8007e08 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	3350      	adds	r3, #80	; 0x50
 8007dec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007df6:	79fa      	ldrb	r2, [r7, #7]
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 f805 	bl	8007e12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e08:	69bb      	ldr	r3, [r7, #24]
	}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3720      	adds	r7, #32
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d103      	bne.n	8007e2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e002      	b.n	8007e34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e40:	2101      	movs	r1, #1
 8007e42:	69b8      	ldr	r0, [r7, #24]
 8007e44:	f7ff fec8 	bl	8007bd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08e      	sub	sp, #56	; 0x38
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e66:	2300      	movs	r3, #0
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xQueueGenericSend+0x32>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <xQueueGenericSend+0x40>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <xQueueGenericSend+0x44>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <xQueueGenericSend+0x46>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <xQueueGenericSend+0x60>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d103      	bne.n	8007ec6 <xQueueGenericSend+0x6e>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d101      	bne.n	8007eca <xQueueGenericSend+0x72>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <xQueueGenericSend+0x74>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	623b      	str	r3, [r7, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ee6:	f001 f9b1 	bl	800924c <xTaskGetSchedulerState>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xQueueGenericSend+0x9e>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <xQueueGenericSend+0xa2>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <xQueueGenericSend+0xa4>
 8007efa:	2300      	movs	r3, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	61fb      	str	r3, [r7, #28]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f16:	f001 ff11 	bl	8009d3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d302      	bcc.n	8007f2c <xQueueGenericSend+0xd4>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d129      	bne.n	8007f80 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f32:	f000 fa07 	bl	8008344 <prvCopyDataToQueue>
 8007f36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d010      	beq.n	8007f62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	3324      	adds	r3, #36	; 0x24
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 ffbf 	bl	8008ec8 <xTaskRemoveFromEventList>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d013      	beq.n	8007f78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f50:	4b3f      	ldr	r3, [pc, #252]	; (8008050 <xQueueGenericSend+0x1f8>)
 8007f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	e00a      	b.n	8007f78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f68:	4b39      	ldr	r3, [pc, #228]	; (8008050 <xQueueGenericSend+0x1f8>)
 8007f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f78:	f001 ff10 	bl	8009d9c <vPortExitCritical>
				return pdPASS;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e063      	b.n	8008048 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d103      	bne.n	8007f8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f86:	f001 ff09 	bl	8009d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e05c      	b.n	8008048 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fff9 	bl	8008f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fa2:	f001 fefb 	bl	8009d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fa6:	f000 fd6b 	bl	8008a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007faa:	f001 fec7 	bl	8009d3c <vPortEnterCritical>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb4:	b25b      	sxtb	r3, r3
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fba:	d103      	bne.n	8007fc4 <xQueueGenericSend+0x16c>
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fca:	b25b      	sxtb	r3, r3
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd0:	d103      	bne.n	8007fda <xQueueGenericSend+0x182>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fda:	f001 fedf 	bl	8009d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fde:	1d3a      	adds	r2, r7, #4
 8007fe0:	f107 0314 	add.w	r3, r7, #20
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 ffe8 	bl	8008fbc <xTaskCheckForTimeOut>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d124      	bne.n	800803c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ff4:	f000 fa9e 	bl	8008534 <prvIsQueueFull>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d018      	beq.n	8008030 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	3310      	adds	r3, #16
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f000 ff0e 	bl	8008e28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800800c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800800e:	f000 fa29 	bl	8008464 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008012:	f000 fd43 	bl	8008a9c <xTaskResumeAll>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	f47f af7c 	bne.w	8007f16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800801e:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <xQueueGenericSend+0x1f8>)
 8008020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	e772      	b.n	8007f16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008032:	f000 fa17 	bl	8008464 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008036:	f000 fd31 	bl	8008a9c <xTaskResumeAll>
 800803a:	e76c      	b.n	8007f16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800803c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800803e:	f000 fa11 	bl	8008464 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008042:	f000 fd2b 	bl	8008a9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008046:	2300      	movs	r3, #0
		}
	}
}
 8008048:	4618      	mov	r0, r3
 800804a:	3738      	adds	r7, #56	; 0x38
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	e000ed04 	.word	0xe000ed04

08008054 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08e      	sub	sp, #56	; 0x38
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d103      	bne.n	8008090 <xQueueGenericSendFromISR+0x3c>
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <xQueueGenericSendFromISR+0x40>
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <xQueueGenericSendFromISR+0x42>
 8008094:	2300      	movs	r3, #0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	623b      	str	r3, [r7, #32]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d103      	bne.n	80080be <xQueueGenericSendFromISR+0x6a>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <xQueueGenericSendFromISR+0x6e>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <xQueueGenericSendFromISR+0x70>
 80080c2:	2300      	movs	r3, #0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	61fb      	str	r3, [r7, #28]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080de:	f001 feef 	bl	8009ec0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080e2:	f3ef 8211 	mrs	r2, BASEPRI
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	61ba      	str	r2, [r7, #24]
 80080f8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80080fa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	429a      	cmp	r2, r3
 8008108:	d302      	bcc.n	8008110 <xQueueGenericSendFromISR+0xbc>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d12c      	bne.n	800816a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008120:	f000 f910 	bl	8008344 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008124:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812c:	d112      	bne.n	8008154 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	2b00      	cmp	r3, #0
 8008134:	d016      	beq.n	8008164 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	3324      	adds	r3, #36	; 0x24
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fec4 	bl	8008ec8 <xTaskRemoveFromEventList>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00e      	beq.n	8008164 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e007      	b.n	8008164 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008158:	3301      	adds	r3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	b25a      	sxtb	r2, r3
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008164:	2301      	movs	r3, #1
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008168:	e001      	b.n	800816e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800816a:	2300      	movs	r3, #0
 800816c:	637b      	str	r3, [r7, #52]	; 0x34
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008178:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800817c:	4618      	mov	r0, r3
 800817e:	3738      	adds	r7, #56	; 0x38
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08c      	sub	sp, #48	; 0x30
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008190:	2300      	movs	r3, #0
 8008192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <xQueueReceive+0x30>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	623b      	str	r3, [r7, #32]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <xQueueReceive+0x3e>
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <xQueueReceive+0x42>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <xQueueReceive+0x44>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <xQueueReceive+0x5e>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	61fb      	str	r3, [r7, #28]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081e2:	f001 f833 	bl	800924c <xTaskGetSchedulerState>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <xQueueReceive+0x6e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <xQueueReceive+0x72>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <xQueueReceive+0x74>
 80081f6:	2300      	movs	r3, #0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueReceive+0x8e>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	61bb      	str	r3, [r7, #24]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008212:	f001 fd93 	bl	8009d3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01f      	beq.n	8008262 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008226:	f000 f8f7 	bl	8008418 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	1e5a      	subs	r2, r3, #1
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00f      	beq.n	800825a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	3310      	adds	r3, #16
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fe42 	bl	8008ec8 <xTaskRemoveFromEventList>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800824a:	4b3d      	ldr	r3, [pc, #244]	; (8008340 <xQueueReceive+0x1bc>)
 800824c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800825a:	f001 fd9f 	bl	8009d9c <vPortExitCritical>
				return pdPASS;
 800825e:	2301      	movs	r3, #1
 8008260:	e069      	b.n	8008336 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d103      	bne.n	8008270 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008268:	f001 fd98 	bl	8009d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800826c:	2300      	movs	r3, #0
 800826e:	e062      	b.n	8008336 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d106      	bne.n	8008284 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008276:	f107 0310 	add.w	r3, r7, #16
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fe88 	bl	8008f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008284:	f001 fd8a 	bl	8009d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008288:	f000 fbfa 	bl	8008a80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800828c:	f001 fd56 	bl	8009d3c <vPortEnterCritical>
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008296:	b25b      	sxtb	r3, r3
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d103      	bne.n	80082a6 <xQueueReceive+0x122>
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ac:	b25b      	sxtb	r3, r3
 80082ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b2:	d103      	bne.n	80082bc <xQueueReceive+0x138>
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082bc:	f001 fd6e 	bl	8009d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082c0:	1d3a      	adds	r2, r7, #4
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fe77 	bl	8008fbc <xTaskCheckForTimeOut>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d123      	bne.n	800831c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d6:	f000 f917 	bl	8008508 <prvIsQueueEmpty>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d017      	beq.n	8008310 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	3324      	adds	r3, #36	; 0x24
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fd9d 	bl	8008e28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f0:	f000 f8b8 	bl	8008464 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082f4:	f000 fbd2 	bl	8008a9c <xTaskResumeAll>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d189      	bne.n	8008212 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80082fe:	4b10      	ldr	r3, [pc, #64]	; (8008340 <xQueueReceive+0x1bc>)
 8008300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	e780      	b.n	8008212 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008312:	f000 f8a7 	bl	8008464 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008316:	f000 fbc1 	bl	8008a9c <xTaskResumeAll>
 800831a:	e77a      	b.n	8008212 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800831c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800831e:	f000 f8a1 	bl	8008464 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008322:	f000 fbbb 	bl	8008a9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008328:	f000 f8ee 	bl	8008508 <prvIsQueueEmpty>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	f43f af6f 	beq.w	8008212 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008336:	4618      	mov	r0, r3
 8008338:	3730      	adds	r7, #48	; 0x30
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10d      	bne.n	800837e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d14d      	bne.n	8008406 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4618      	mov	r0, r3
 8008370:	f000 ff8a 	bl	8009288 <xTaskPriorityDisinherit>
 8008374:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	e043      	b.n	8008406 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d119      	bne.n	80083b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6898      	ldr	r0, [r3, #8]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	461a      	mov	r2, r3
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	f003 fbf5 	bl	800bb7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839c:	441a      	add	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d32b      	bcc.n	8008406 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	609a      	str	r2, [r3, #8]
 80083b6:	e026      	b.n	8008406 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	68d8      	ldr	r0, [r3, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	461a      	mov	r2, r3
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	f003 fbdb 	bl	800bb7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	425b      	negs	r3, r3
 80083d2:	441a      	add	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68da      	ldr	r2, [r3, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d207      	bcs.n	80083f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	425b      	negs	r3, r3
 80083ee:	441a      	add	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d105      	bne.n	8008406 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	3b01      	subs	r3, #1
 8008404:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800840e:	697b      	ldr	r3, [r7, #20]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d018      	beq.n	800845c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	441a      	add	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d303      	bcc.n	800844c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68d9      	ldr	r1, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	461a      	mov	r2, r3
 8008456:	6838      	ldr	r0, [r7, #0]
 8008458:	f003 fb91 	bl	800bb7e <memcpy>
	}
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800846c:	f001 fc66 	bl	8009d3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008476:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008478:	e011      	b.n	800849e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	d012      	beq.n	80084a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3324      	adds	r3, #36	; 0x24
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fd1e 	bl	8008ec8 <xTaskRemoveFromEventList>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008492:	f000 fdf5 	bl	8009080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008496:	7bfb      	ldrb	r3, [r7, #15]
 8008498:	3b01      	subs	r3, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800849e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dce9      	bgt.n	800847a <prvUnlockQueue+0x16>
 80084a6:	e000      	b.n	80084aa <prvUnlockQueue+0x46>
					break;
 80084a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	22ff      	movs	r2, #255	; 0xff
 80084ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80084b2:	f001 fc73 	bl	8009d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084b6:	f001 fc41 	bl	8009d3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084c2:	e011      	b.n	80084e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d012      	beq.n	80084f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3310      	adds	r3, #16
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fcf9 	bl	8008ec8 <xTaskRemoveFromEventList>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084dc:	f000 fdd0 	bl	8009080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dce9      	bgt.n	80084c4 <prvUnlockQueue+0x60>
 80084f0:	e000      	b.n	80084f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	22ff      	movs	r2, #255	; 0xff
 80084f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80084fc:	f001 fc4e 	bl	8009d9c <vPortExitCritical>
}
 8008500:	bf00      	nop
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008510:	f001 fc14 	bl	8009d3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	e001      	b.n	8008526 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008522:	2300      	movs	r3, #0
 8008524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008526:	f001 fc39 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 800852a:	68fb      	ldr	r3, [r7, #12]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800853c:	f001 fbfe 	bl	8009d3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008548:	429a      	cmp	r2, r3
 800854a:	d102      	bne.n	8008552 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800854c:	2301      	movs	r3, #1
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	e001      	b.n	8008556 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008556:	f001 fc21 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 800855a:	68fb      	ldr	r3, [r7, #12]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e014      	b.n	800859e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008574:	4a0e      	ldr	r2, [pc, #56]	; (80085b0 <vQueueAddToRegistry+0x4c>)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10b      	bne.n	8008598 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008580:	490b      	ldr	r1, [pc, #44]	; (80085b0 <vQueueAddToRegistry+0x4c>)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800858a:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <vQueueAddToRegistry+0x4c>)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008596:	e006      	b.n	80085a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3301      	adds	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b07      	cmp	r3, #7
 80085a2:	d9e7      	bls.n	8008574 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr
 80085b0:	20000da4 	.word	0x20000da4

080085b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085c4:	f001 fbba 	bl	8009d3c <vPortEnterCritical>
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085ce:	b25b      	sxtb	r3, r3
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d103      	bne.n	80085de <vQueueWaitForMessageRestricted+0x2a>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e4:	b25b      	sxtb	r3, r3
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d103      	bne.n	80085f4 <vQueueWaitForMessageRestricted+0x40>
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085f4:	f001 fbd2 	bl	8009d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d106      	bne.n	800860e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	3324      	adds	r3, #36	; 0x24
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fc31 	bl	8008e70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800860e:	6978      	ldr	r0, [r7, #20]
 8008610:	f7ff ff28 	bl	8008464 <prvUnlockQueue>
	}
 8008614:	bf00      	nop
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08e      	sub	sp, #56	; 0x38
 8008620:	af04      	add	r7, sp, #16
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	623b      	str	r3, [r7, #32]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <xTaskCreateStatic+0x46>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	61fb      	str	r3, [r7, #28]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008662:	235c      	movs	r3, #92	; 0x5c
 8008664:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2b5c      	cmp	r3, #92	; 0x5c
 800866a:	d00a      	beq.n	8008682 <xTaskCreateStatic+0x66>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	61bb      	str	r3, [r7, #24]
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01e      	beq.n	80086c6 <xTaskCreateStatic+0xaa>
 8008688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868a:	2b00      	cmp	r3, #0
 800868c:	d01b      	beq.n	80086c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008696:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	2202      	movs	r2, #2
 800869c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086a0:	2300      	movs	r3, #0
 80086a2:	9303      	str	r3, [sp, #12]
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	9302      	str	r3, [sp, #8]
 80086a8:	f107 0314 	add.w	r3, r7, #20
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	68b9      	ldr	r1, [r7, #8]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f850 	bl	800875e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086c0:	f000 f8d4 	bl	800886c <prvAddNewTaskToReadyList>
 80086c4:	e001      	b.n	80086ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086ca:	697b      	ldr	r3, [r7, #20]
	}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3728      	adds	r7, #40	; 0x28
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08c      	sub	sp, #48	; 0x30
 80086d8:	af04      	add	r7, sp, #16
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	4613      	mov	r3, r2
 80086e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e4:	88fb      	ldrh	r3, [r7, #6]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fc27 	bl	8009f3c <pvPortMalloc>
 80086ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00e      	beq.n	8008714 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80086f6:	205c      	movs	r0, #92	; 0x5c
 80086f8:	f001 fc20 	bl	8009f3c <pvPortMalloc>
 80086fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	631a      	str	r2, [r3, #48]	; 0x30
 800870a:	e005      	b.n	8008718 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800870c:	6978      	ldr	r0, [r7, #20]
 800870e:	f001 fcd9 	bl	800a0c4 <vPortFree>
 8008712:	e001      	b.n	8008718 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d017      	beq.n	800874e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008726:	88fa      	ldrh	r2, [r7, #6]
 8008728:	2300      	movs	r3, #0
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	9302      	str	r3, [sp, #8]
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f80e 	bl	800875e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008742:	69f8      	ldr	r0, [r7, #28]
 8008744:	f000 f892 	bl	800886c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008748:	2301      	movs	r3, #1
 800874a:	61bb      	str	r3, [r7, #24]
 800874c:	e002      	b.n	8008754 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800874e:	f04f 33ff 	mov.w	r3, #4294967295
 8008752:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008754:	69bb      	ldr	r3, [r7, #24]
	}
 8008756:	4618      	mov	r0, r3
 8008758:	3720      	adds	r7, #32
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b088      	sub	sp, #32
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	461a      	mov	r2, r3
 8008776:	21a5      	movs	r1, #165	; 0xa5
 8008778:	f003 f961 	bl	800ba3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008786:	3b01      	subs	r3, #1
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	f023 0307 	bic.w	r3, r3, #7
 8008794:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	f003 0307 	and.w	r3, r3, #7
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00a      	beq.n	80087b6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	617b      	str	r3, [r7, #20]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087b6:	2300      	movs	r3, #0
 80087b8:	61fb      	str	r3, [r7, #28]
 80087ba:	e012      	b.n	80087e2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	4413      	add	r3, r2
 80087c2:	7819      	ldrb	r1, [r3, #0]
 80087c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	4413      	add	r3, r2
 80087ca:	3334      	adds	r3, #52	; 0x34
 80087cc:	460a      	mov	r2, r1
 80087ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d006      	beq.n	80087ea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	3301      	adds	r3, #1
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	2b0f      	cmp	r3, #15
 80087e6:	d9e9      	bls.n	80087bc <prvInitialiseNewTask+0x5e>
 80087e8:	e000      	b.n	80087ec <prvInitialiseNewTask+0x8e>
		{
			break;
 80087ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	2b37      	cmp	r3, #55	; 0x37
 80087f8:	d901      	bls.n	80087fe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087fa:	2337      	movs	r3, #55	; 0x37
 80087fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008802:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008808:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	2200      	movs	r2, #0
 800880e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	3304      	adds	r3, #4
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff f94e 	bl	8007ab6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	3318      	adds	r3, #24
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff f949 	bl	8007ab6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008828:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008838:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	2200      	movs	r2, #0
 800883e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	69b8      	ldr	r0, [r7, #24]
 800884e:	f001 f983 	bl	8009b58 <pxPortInitialiseStack>
 8008852:	4602      	mov	r2, r0
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008862:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008864:	bf00      	nop
 8008866:	3720      	adds	r7, #32
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008874:	f001 fa62 	bl	8009d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008878:	4b2d      	ldr	r3, [pc, #180]	; (8008930 <prvAddNewTaskToReadyList+0xc4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	4a2c      	ldr	r2, [pc, #176]	; (8008930 <prvAddNewTaskToReadyList+0xc4>)
 8008880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008882:	4b2c      	ldr	r3, [pc, #176]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800888a:	4a2a      	ldr	r2, [pc, #168]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008890:	4b27      	ldr	r3, [pc, #156]	; (8008930 <prvAddNewTaskToReadyList+0xc4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d110      	bne.n	80088ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008898:	f000 fc16 	bl	80090c8 <prvInitialiseTaskLists>
 800889c:	e00d      	b.n	80088ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800889e:	4b26      	ldr	r3, [pc, #152]	; (8008938 <prvAddNewTaskToReadyList+0xcc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d109      	bne.n	80088ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088a6:	4b23      	ldr	r3, [pc, #140]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d802      	bhi.n	80088ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088b4:	4a1f      	ldr	r2, [pc, #124]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088ba:	4b20      	ldr	r3, [pc, #128]	; (800893c <prvAddNewTaskToReadyList+0xd0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3301      	adds	r3, #1
 80088c0:	4a1e      	ldr	r2, [pc, #120]	; (800893c <prvAddNewTaskToReadyList+0xd0>)
 80088c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088c4:	4b1d      	ldr	r3, [pc, #116]	; (800893c <prvAddNewTaskToReadyList+0xd0>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <prvAddNewTaskToReadyList+0xd4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d903      	bls.n	80088e0 <prvAddNewTaskToReadyList+0x74>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	4a18      	ldr	r2, [pc, #96]	; (8008940 <prvAddNewTaskToReadyList+0xd4>)
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4a15      	ldr	r2, [pc, #84]	; (8008944 <prvAddNewTaskToReadyList+0xd8>)
 80088ee:	441a      	add	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3304      	adds	r3, #4
 80088f4:	4619      	mov	r1, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	f7ff f8e9 	bl	8007ace <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088fc:	f001 fa4e 	bl	8009d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008900:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <prvAddNewTaskToReadyList+0xcc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00e      	beq.n	8008926 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <prvAddNewTaskToReadyList+0xc8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	429a      	cmp	r2, r3
 8008914:	d207      	bcs.n	8008926 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008916:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <prvAddNewTaskToReadyList+0xdc>)
 8008918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200012b8 	.word	0x200012b8
 8008934:	20000de4 	.word	0x20000de4
 8008938:	200012c4 	.word	0x200012c4
 800893c:	200012d4 	.word	0x200012d4
 8008940:	200012c0 	.word	0x200012c0
 8008944:	20000de8 	.word	0x20000de8
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008954:	2300      	movs	r3, #0
 8008956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d017      	beq.n	800898e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800895e:	4b13      	ldr	r3, [pc, #76]	; (80089ac <vTaskDelay+0x60>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <vTaskDelay+0x30>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	60bb      	str	r3, [r7, #8]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800897c:	f000 f880 	bl	8008a80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008980:	2100      	movs	r1, #0
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fd82 	bl	800948c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008988:	f000 f888 	bl	8008a9c <xTaskResumeAll>
 800898c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d107      	bne.n	80089a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008994:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <vTaskDelay+0x64>)
 8008996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	200012e0 	.word	0x200012e0
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	; 0x28
 80089b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089c2:	463a      	mov	r2, r7
 80089c4:	1d39      	adds	r1, r7, #4
 80089c6:	f107 0308 	add.w	r3, r7, #8
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff f822 	bl	8007a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	9202      	str	r2, [sp, #8]
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	2300      	movs	r3, #0
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	2300      	movs	r3, #0
 80089e0:	460a      	mov	r2, r1
 80089e2:	4921      	ldr	r1, [pc, #132]	; (8008a68 <vTaskStartScheduler+0xb4>)
 80089e4:	4821      	ldr	r0, [pc, #132]	; (8008a6c <vTaskStartScheduler+0xb8>)
 80089e6:	f7ff fe19 	bl	800861c <xTaskCreateStatic>
 80089ea:	4603      	mov	r3, r0
 80089ec:	4a20      	ldr	r2, [pc, #128]	; (8008a70 <vTaskStartScheduler+0xbc>)
 80089ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089f0:	4b1f      	ldr	r3, [pc, #124]	; (8008a70 <vTaskStartScheduler+0xbc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089f8:	2301      	movs	r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	e001      	b.n	8008a02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d102      	bne.n	8008a0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a08:	f000 fd94 	bl	8009534 <xTimerCreateTimerTask>
 8008a0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d116      	bne.n	8008a42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	613b      	str	r3, [r7, #16]
}
 8008a26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a28:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <vTaskStartScheduler+0xc0>)
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a30:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <vTaskStartScheduler+0xc4>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008a36:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <vTaskStartScheduler+0xc8>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a3c:	f001 f90c 	bl	8009c58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a40:	e00e      	b.n	8008a60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a48:	d10a      	bne.n	8008a60 <vTaskStartScheduler+0xac>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	60fb      	str	r3, [r7, #12]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <vTaskStartScheduler+0xaa>
}
 8008a60:	bf00      	nop
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	0800e5ac 	.word	0x0800e5ac
 8008a6c:	08009099 	.word	0x08009099
 8008a70:	200012dc 	.word	0x200012dc
 8008a74:	200012d8 	.word	0x200012d8
 8008a78:	200012c4 	.word	0x200012c4
 8008a7c:	200012bc 	.word	0x200012bc

08008a80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <vTaskSuspendAll+0x18>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	4a03      	ldr	r2, [pc, #12]	; (8008a98 <vTaskSuspendAll+0x18>)
 8008a8c:	6013      	str	r3, [r2, #0]
}
 8008a8e:	bf00      	nop
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	200012e0 	.word	0x200012e0

08008a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008aaa:	4b42      	ldr	r3, [pc, #264]	; (8008bb4 <xTaskResumeAll+0x118>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	603b      	str	r3, [r7, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	e7fe      	b.n	8008ac6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ac8:	f001 f938 	bl	8009d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008acc:	4b39      	ldr	r3, [pc, #228]	; (8008bb4 <xTaskResumeAll+0x118>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	4a38      	ldr	r2, [pc, #224]	; (8008bb4 <xTaskResumeAll+0x118>)
 8008ad4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ad6:	4b37      	ldr	r3, [pc, #220]	; (8008bb4 <xTaskResumeAll+0x118>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d162      	bne.n	8008ba4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ade:	4b36      	ldr	r3, [pc, #216]	; (8008bb8 <xTaskResumeAll+0x11c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d05e      	beq.n	8008ba4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ae6:	e02f      	b.n	8008b48 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008ae8:	4b34      	ldr	r3, [pc, #208]	; (8008bbc <xTaskResumeAll+0x120>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3318      	adds	r3, #24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff f845 	bl	8007b84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3304      	adds	r3, #4
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff f840 	bl	8007b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4b2d      	ldr	r3, [pc, #180]	; (8008bc0 <xTaskResumeAll+0x124>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d903      	bls.n	8008b18 <xTaskResumeAll+0x7c>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	4a2a      	ldr	r2, [pc, #168]	; (8008bc0 <xTaskResumeAll+0x124>)
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4a27      	ldr	r2, [pc, #156]	; (8008bc4 <xTaskResumeAll+0x128>)
 8008b26:	441a      	add	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	4610      	mov	r0, r2
 8008b30:	f7fe ffcd 	bl	8007ace <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b38:	4b23      	ldr	r3, [pc, #140]	; (8008bc8 <xTaskResumeAll+0x12c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d302      	bcc.n	8008b48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008b42:	4b22      	ldr	r3, [pc, #136]	; (8008bcc <xTaskResumeAll+0x130>)
 8008b44:	2201      	movs	r2, #1
 8008b46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b48:	4b1c      	ldr	r3, [pc, #112]	; (8008bbc <xTaskResumeAll+0x120>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1cb      	bne.n	8008ae8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b56:	f000 fb55 	bl	8009204 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b5a:	4b1d      	ldr	r3, [pc, #116]	; (8008bd0 <xTaskResumeAll+0x134>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d010      	beq.n	8008b88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b66:	f000 f845 	bl	8008bf4 <xTaskIncrementTick>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <xTaskResumeAll+0x130>)
 8008b72:	2201      	movs	r2, #1
 8008b74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f1      	bne.n	8008b66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008b82:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <xTaskResumeAll+0x134>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b88:	4b10      	ldr	r3, [pc, #64]	; (8008bcc <xTaskResumeAll+0x130>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b90:	2301      	movs	r3, #1
 8008b92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <xTaskResumeAll+0x138>)
 8008b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ba4:	f001 f8fa 	bl	8009d9c <vPortExitCritical>

	return xAlreadyYielded;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	200012e0 	.word	0x200012e0
 8008bb8:	200012b8 	.word	0x200012b8
 8008bbc:	20001278 	.word	0x20001278
 8008bc0:	200012c0 	.word	0x200012c0
 8008bc4:	20000de8 	.word	0x20000de8
 8008bc8:	20000de4 	.word	0x20000de4
 8008bcc:	200012cc 	.word	0x200012cc
 8008bd0:	200012c8 	.word	0x200012c8
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008bde:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <xTaskGetTickCount+0x18>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008be4:	687b      	ldr	r3, [r7, #4]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr
 8008bf0:	200012bc 	.word	0x200012bc

08008bf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bfe:	4b51      	ldr	r3, [pc, #324]	; (8008d44 <xTaskIncrementTick+0x150>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f040 808e 	bne.w	8008d24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c08:	4b4f      	ldr	r3, [pc, #316]	; (8008d48 <xTaskIncrementTick+0x154>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c10:	4a4d      	ldr	r2, [pc, #308]	; (8008d48 <xTaskIncrementTick+0x154>)
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d120      	bne.n	8008c5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c1c:	4b4b      	ldr	r3, [pc, #300]	; (8008d4c <xTaskIncrementTick+0x158>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <xTaskIncrementTick+0x48>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	603b      	str	r3, [r7, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <xTaskIncrementTick+0x46>
 8008c3c:	4b43      	ldr	r3, [pc, #268]	; (8008d4c <xTaskIncrementTick+0x158>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	4b43      	ldr	r3, [pc, #268]	; (8008d50 <xTaskIncrementTick+0x15c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a41      	ldr	r2, [pc, #260]	; (8008d4c <xTaskIncrementTick+0x158>)
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	4a41      	ldr	r2, [pc, #260]	; (8008d50 <xTaskIncrementTick+0x15c>)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	4b40      	ldr	r3, [pc, #256]	; (8008d54 <xTaskIncrementTick+0x160>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	4a3f      	ldr	r2, [pc, #252]	; (8008d54 <xTaskIncrementTick+0x160>)
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	f000 fad3 	bl	8009204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c5e:	4b3e      	ldr	r3, [pc, #248]	; (8008d58 <xTaskIncrementTick+0x164>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d34e      	bcc.n	8008d06 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c68:	4b38      	ldr	r3, [pc, #224]	; (8008d4c <xTaskIncrementTick+0x158>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <xTaskIncrementTick+0x82>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <xTaskIncrementTick+0x84>
 8008c76:	2300      	movs	r3, #0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c7c:	4b36      	ldr	r3, [pc, #216]	; (8008d58 <xTaskIncrementTick+0x164>)
 8008c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c82:	601a      	str	r2, [r3, #0]
					break;
 8008c84:	e03f      	b.n	8008d06 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c86:	4b31      	ldr	r3, [pc, #196]	; (8008d4c <xTaskIncrementTick+0x158>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d203      	bcs.n	8008ca6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c9e:	4a2e      	ldr	r2, [pc, #184]	; (8008d58 <xTaskIncrementTick+0x164>)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6013      	str	r3, [r2, #0]
						break;
 8008ca4:	e02f      	b.n	8008d06 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe ff6a 	bl	8007b84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d004      	beq.n	8008cc2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	3318      	adds	r3, #24
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe ff61 	bl	8007b84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc6:	4b25      	ldr	r3, [pc, #148]	; (8008d5c <xTaskIncrementTick+0x168>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d903      	bls.n	8008cd6 <xTaskIncrementTick+0xe2>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4a22      	ldr	r2, [pc, #136]	; (8008d5c <xTaskIncrementTick+0x168>)
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <xTaskIncrementTick+0x16c>)
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f7fe feee 	bl	8007ace <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf6:	4b1b      	ldr	r3, [pc, #108]	; (8008d64 <xTaskIncrementTick+0x170>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d3b3      	bcc.n	8008c68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d00:	2301      	movs	r3, #1
 8008d02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d04:	e7b0      	b.n	8008c68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d06:	4b17      	ldr	r3, [pc, #92]	; (8008d64 <xTaskIncrementTick+0x170>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	4914      	ldr	r1, [pc, #80]	; (8008d60 <xTaskIncrementTick+0x16c>)
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d907      	bls.n	8008d2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	617b      	str	r3, [r7, #20]
 8008d22:	e004      	b.n	8008d2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <xTaskIncrementTick+0x174>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	4a0f      	ldr	r2, [pc, #60]	; (8008d68 <xTaskIncrementTick+0x174>)
 8008d2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <xTaskIncrementTick+0x178>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d3a:	697b      	ldr	r3, [r7, #20]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	200012e0 	.word	0x200012e0
 8008d48:	200012bc 	.word	0x200012bc
 8008d4c:	20001270 	.word	0x20001270
 8008d50:	20001274 	.word	0x20001274
 8008d54:	200012d0 	.word	0x200012d0
 8008d58:	200012d8 	.word	0x200012d8
 8008d5c:	200012c0 	.word	0x200012c0
 8008d60:	20000de8 	.word	0x20000de8
 8008d64:	20000de4 	.word	0x20000de4
 8008d68:	200012c8 	.word	0x200012c8
 8008d6c:	200012cc 	.word	0x200012cc

08008d70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d76:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <vTaskSwitchContext+0xa4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d7e:	4b26      	ldr	r3, [pc, #152]	; (8008e18 <vTaskSwitchContext+0xa8>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d84:	e041      	b.n	8008e0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <vTaskSwitchContext+0xa8>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008d8c:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <vTaskSwitchContext+0xac>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	e010      	b.n	8008db6 <vTaskSwitchContext+0x46>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <vTaskSwitchContext+0x40>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	607b      	str	r3, [r7, #4]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <vTaskSwitchContext+0x3e>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	491a      	ldr	r1, [pc, #104]	; (8008e20 <vTaskSwitchContext+0xb0>)
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	440b      	add	r3, r1
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0e4      	beq.n	8008d94 <vTaskSwitchContext+0x24>
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4a12      	ldr	r2, [pc, #72]	; (8008e20 <vTaskSwitchContext+0xb0>)
 8008dd6:	4413      	add	r3, r2
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	605a      	str	r2, [r3, #4]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	3308      	adds	r3, #8
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d104      	bne.n	8008dfa <vTaskSwitchContext+0x8a>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	605a      	str	r2, [r3, #4]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	4a08      	ldr	r2, [pc, #32]	; (8008e24 <vTaskSwitchContext+0xb4>)
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	4a05      	ldr	r2, [pc, #20]	; (8008e1c <vTaskSwitchContext+0xac>)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6013      	str	r3, [r2, #0]
}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr
 8008e14:	200012e0 	.word	0x200012e0
 8008e18:	200012cc 	.word	0x200012cc
 8008e1c:	200012c0 	.word	0x200012c0
 8008e20:	20000de8 	.word	0x20000de8
 8008e24:	20000de4 	.word	0x20000de4

08008e28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	60fb      	str	r3, [r7, #12]
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e4e:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <vTaskPlaceOnEventList+0x44>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3318      	adds	r3, #24
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7fe fe5c 	bl	8007b14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	6838      	ldr	r0, [r7, #0]
 8008e60:	f000 fb14 	bl	800948c <prvAddCurrentTaskToDelayedList>
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000de4 	.word	0x20000de4

08008e70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	617b      	str	r3, [r7, #20]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3318      	adds	r3, #24
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7fe fe14 	bl	8007ace <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008eac:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	68b8      	ldr	r0, [r7, #8]
 8008eb6:	f000 fae9 	bl	800948c <prvAddCurrentTaskToDelayedList>
	}
 8008eba:	bf00      	nop
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000de4 	.word	0x20000de4

08008ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	60fb      	str	r3, [r7, #12]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	3318      	adds	r3, #24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe fe43 	bl	8007b84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008efe:	4b1e      	ldr	r3, [pc, #120]	; (8008f78 <xTaskRemoveFromEventList+0xb0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d11d      	bne.n	8008f42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fe3a 	bl	8007b84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	4b19      	ldr	r3, [pc, #100]	; (8008f7c <xTaskRemoveFromEventList+0xb4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d903      	bls.n	8008f24 <xTaskRemoveFromEventList+0x5c>
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	4a16      	ldr	r2, [pc, #88]	; (8008f7c <xTaskRemoveFromEventList+0xb4>)
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4a13      	ldr	r2, [pc, #76]	; (8008f80 <xTaskRemoveFromEventList+0xb8>)
 8008f32:	441a      	add	r2, r3
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f7fe fdc7 	bl	8007ace <vListInsertEnd>
 8008f40:	e005      	b.n	8008f4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3318      	adds	r3, #24
 8008f46:	4619      	mov	r1, r3
 8008f48:	480e      	ldr	r0, [pc, #56]	; (8008f84 <xTaskRemoveFromEventList+0xbc>)
 8008f4a:	f7fe fdc0 	bl	8007ace <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f52:	4b0d      	ldr	r3, [pc, #52]	; (8008f88 <xTaskRemoveFromEventList+0xc0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d905      	bls.n	8008f68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <xTaskRemoveFromEventList+0xc4>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e001      	b.n	8008f6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008f6c:	697b      	ldr	r3, [r7, #20]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	200012e0 	.word	0x200012e0
 8008f7c:	200012c0 	.word	0x200012c0
 8008f80:	20000de8 	.word	0x20000de8
 8008f84:	20001278 	.word	0x20001278
 8008f88:	20000de4 	.word	0x20000de4
 8008f8c:	200012cc 	.word	0x200012cc

08008f90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <vTaskInternalSetTimeOutState+0x24>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <vTaskInternalSetTimeOutState+0x28>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	605a      	str	r2, [r3, #4]
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	200012d0 	.word	0x200012d0
 8008fb8:	200012bc 	.word	0x200012bc

08008fbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	613b      	str	r3, [r7, #16]
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	60fb      	str	r3, [r7, #12]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ffe:	f000 fe9d 	bl	8009d3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009002:	4b1d      	ldr	r3, [pc, #116]	; (8009078 <xTaskCheckForTimeOut+0xbc>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	69ba      	ldr	r2, [r7, #24]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901a:	d102      	bne.n	8009022 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800901c:	2300      	movs	r3, #0
 800901e:	61fb      	str	r3, [r7, #28]
 8009020:	e023      	b.n	800906a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4b15      	ldr	r3, [pc, #84]	; (800907c <xTaskCheckForTimeOut+0xc0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d007      	beq.n	800903e <xTaskCheckForTimeOut+0x82>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	429a      	cmp	r2, r3
 8009036:	d302      	bcc.n	800903e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009038:	2301      	movs	r3, #1
 800903a:	61fb      	str	r3, [r7, #28]
 800903c:	e015      	b.n	800906a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	429a      	cmp	r2, r3
 8009046:	d20b      	bcs.n	8009060 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	1ad2      	subs	r2, r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff ff9b 	bl	8008f90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	61fb      	str	r3, [r7, #28]
 800905e:	e004      	b.n	800906a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009066:	2301      	movs	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800906a:	f000 fe97 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 800906e:	69fb      	ldr	r3, [r7, #28]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3720      	adds	r7, #32
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	200012bc 	.word	0x200012bc
 800907c:	200012d0 	.word	0x200012d0

08009080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009084:	4b03      	ldr	r3, [pc, #12]	; (8009094 <vTaskMissedYield+0x14>)
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]
}
 800908a:	bf00      	nop
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	200012cc 	.word	0x200012cc

08009098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090a0:	f000 f852 	bl	8009148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090a4:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <prvIdleTask+0x28>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d9f9      	bls.n	80090a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <prvIdleTask+0x2c>)
 80090ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090bc:	e7f0      	b.n	80090a0 <prvIdleTask+0x8>
 80090be:	bf00      	nop
 80090c0:	20000de8 	.word	0x20000de8
 80090c4:	e000ed04 	.word	0xe000ed04

080090c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090ce:	2300      	movs	r3, #0
 80090d0:	607b      	str	r3, [r7, #4]
 80090d2:	e00c      	b.n	80090ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4a12      	ldr	r2, [pc, #72]	; (8009128 <prvInitialiseTaskLists+0x60>)
 80090e0:	4413      	add	r3, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fcc8 	bl	8007a78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3301      	adds	r3, #1
 80090ec:	607b      	str	r3, [r7, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b37      	cmp	r3, #55	; 0x37
 80090f2:	d9ef      	bls.n	80090d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090f4:	480d      	ldr	r0, [pc, #52]	; (800912c <prvInitialiseTaskLists+0x64>)
 80090f6:	f7fe fcbf 	bl	8007a78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090fa:	480d      	ldr	r0, [pc, #52]	; (8009130 <prvInitialiseTaskLists+0x68>)
 80090fc:	f7fe fcbc 	bl	8007a78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009100:	480c      	ldr	r0, [pc, #48]	; (8009134 <prvInitialiseTaskLists+0x6c>)
 8009102:	f7fe fcb9 	bl	8007a78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009106:	480c      	ldr	r0, [pc, #48]	; (8009138 <prvInitialiseTaskLists+0x70>)
 8009108:	f7fe fcb6 	bl	8007a78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800910c:	480b      	ldr	r0, [pc, #44]	; (800913c <prvInitialiseTaskLists+0x74>)
 800910e:	f7fe fcb3 	bl	8007a78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009112:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <prvInitialiseTaskLists+0x78>)
 8009114:	4a05      	ldr	r2, [pc, #20]	; (800912c <prvInitialiseTaskLists+0x64>)
 8009116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <prvInitialiseTaskLists+0x7c>)
 800911a:	4a05      	ldr	r2, [pc, #20]	; (8009130 <prvInitialiseTaskLists+0x68>)
 800911c:	601a      	str	r2, [r3, #0]
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000de8 	.word	0x20000de8
 800912c:	20001248 	.word	0x20001248
 8009130:	2000125c 	.word	0x2000125c
 8009134:	20001278 	.word	0x20001278
 8009138:	2000128c 	.word	0x2000128c
 800913c:	200012a4 	.word	0x200012a4
 8009140:	20001270 	.word	0x20001270
 8009144:	20001274 	.word	0x20001274

08009148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800914e:	e019      	b.n	8009184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009150:	f000 fdf4 	bl	8009d3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009154:	4b10      	ldr	r3, [pc, #64]	; (8009198 <prvCheckTasksWaitingTermination+0x50>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fd0f 	bl	8007b84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009166:	4b0d      	ldr	r3, [pc, #52]	; (800919c <prvCheckTasksWaitingTermination+0x54>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3b01      	subs	r3, #1
 800916c:	4a0b      	ldr	r2, [pc, #44]	; (800919c <prvCheckTasksWaitingTermination+0x54>)
 800916e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <prvCheckTasksWaitingTermination+0x58>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3b01      	subs	r3, #1
 8009176:	4a0a      	ldr	r2, [pc, #40]	; (80091a0 <prvCheckTasksWaitingTermination+0x58>)
 8009178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800917a:	f000 fe0f 	bl	8009d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f810 	bl	80091a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009184:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <prvCheckTasksWaitingTermination+0x58>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e1      	bne.n	8009150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800918c:	bf00      	nop
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	2000128c 	.word	0x2000128c
 800919c:	200012b8 	.word	0x200012b8
 80091a0:	200012a0 	.word	0x200012a0

080091a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d108      	bne.n	80091c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 ff82 	bl	800a0c4 <vPortFree>
				vPortFree( pxTCB );
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 ff7f 	bl	800a0c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091c6:	e018      	b.n	80091fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d103      	bne.n	80091da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 ff76 	bl	800a0c4 <vPortFree>
	}
 80091d8:	e00f      	b.n	80091fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d00a      	beq.n	80091fa <prvDeleteTCB+0x56>
	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	60fb      	str	r3, [r7, #12]
}
 80091f6:	bf00      	nop
 80091f8:	e7fe      	b.n	80091f8 <prvDeleteTCB+0x54>
	}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800920a:	4b0e      	ldr	r3, [pc, #56]	; (8009244 <prvResetNextTaskUnblockTime+0x40>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <prvResetNextTaskUnblockTime+0x14>
 8009214:	2301      	movs	r3, #1
 8009216:	e000      	b.n	800921a <prvResetNextTaskUnblockTime+0x16>
 8009218:	2300      	movs	r3, #0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d004      	beq.n	8009228 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800921e:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <prvResetNextTaskUnblockTime+0x44>)
 8009220:	f04f 32ff 	mov.w	r2, #4294967295
 8009224:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009226:	e008      	b.n	800923a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009228:	4b06      	ldr	r3, [pc, #24]	; (8009244 <prvResetNextTaskUnblockTime+0x40>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	4a04      	ldr	r2, [pc, #16]	; (8009248 <prvResetNextTaskUnblockTime+0x44>)
 8009238:	6013      	str	r3, [r2, #0]
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	bc80      	pop	{r7}
 8009242:	4770      	bx	lr
 8009244:	20001270 	.word	0x20001270
 8009248:	200012d8 	.word	0x200012d8

0800924c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009252:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <xTaskGetSchedulerState+0x34>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d102      	bne.n	8009260 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800925a:	2301      	movs	r3, #1
 800925c:	607b      	str	r3, [r7, #4]
 800925e:	e008      	b.n	8009272 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009260:	4b08      	ldr	r3, [pc, #32]	; (8009284 <xTaskGetSchedulerState+0x38>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009268:	2302      	movs	r3, #2
 800926a:	607b      	str	r3, [r7, #4]
 800926c:	e001      	b.n	8009272 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800926e:	2300      	movs	r3, #0
 8009270:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009272:	687b      	ldr	r3, [r7, #4]
	}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	bc80      	pop	{r7}
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	200012c4 	.word	0x200012c4
 8009284:	200012e0 	.word	0x200012e0

08009288 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d056      	beq.n	800934c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800929e:	4b2e      	ldr	r3, [pc, #184]	; (8009358 <xTaskPriorityDisinherit+0xd0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d00a      	beq.n	80092be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	60fb      	str	r3, [r7, #12]
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	60bb      	str	r3, [r7, #8]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e0:	1e5a      	subs	r2, r3, #1
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d02c      	beq.n	800934c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d128      	bne.n	800934c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fc40 	bl	8007b84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009310:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931c:	4b0f      	ldr	r3, [pc, #60]	; (800935c <xTaskPriorityDisinherit+0xd4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <xTaskPriorityDisinherit+0xa4>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	4a0c      	ldr	r2, [pc, #48]	; (800935c <xTaskPriorityDisinherit+0xd4>)
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4a09      	ldr	r2, [pc, #36]	; (8009360 <xTaskPriorityDisinherit+0xd8>)
 800933a:	441a      	add	r2, r3
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	3304      	adds	r3, #4
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f7fe fbc3 	bl	8007ace <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009348:	2301      	movs	r3, #1
 800934a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800934c:	697b      	ldr	r3, [r7, #20]
	}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000de4 	.word	0x20000de4
 800935c:	200012c0 	.word	0x200012c0
 8009360:	20000de8 	.word	0x20000de8

08009364 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08a      	sub	sp, #40	; 0x28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	61bb      	str	r3, [r7, #24]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800938a:	f000 fd99 	bl	8009ec0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009392:	f3ef 8211 	mrs	r2, BASEPRI
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	617a      	str	r2, [r7, #20]
 80093a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80093aa:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093ac:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80093b4:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	2202      	movs	r2, #2
 80093ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80093c8:	7ffb      	ldrb	r3, [r7, #31]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d147      	bne.n	800945e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	60fb      	str	r3, [r7, #12]
}
 80093e8:	bf00      	nop
 80093ea:	e7fe      	b.n	80093ea <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ec:	4b21      	ldr	r3, [pc, #132]	; (8009474 <vTaskNotifyGiveFromISR+0x110>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d11d      	bne.n	8009430 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	3304      	adds	r3, #4
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fbc3 	bl	8007b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009402:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <vTaskNotifyGiveFromISR+0x114>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d903      	bls.n	8009412 <vTaskNotifyGiveFromISR+0xae>
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	4a1a      	ldr	r2, [pc, #104]	; (8009478 <vTaskNotifyGiveFromISR+0x114>)
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4a17      	ldr	r2, [pc, #92]	; (800947c <vTaskNotifyGiveFromISR+0x118>)
 8009420:	441a      	add	r2, r3
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fe fb50 	bl	8007ace <vListInsertEnd>
 800942e:	e005      	b.n	800943c <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	3318      	adds	r3, #24
 8009434:	4619      	mov	r1, r3
 8009436:	4812      	ldr	r0, [pc, #72]	; (8009480 <vTaskNotifyGiveFromISR+0x11c>)
 8009438:	f7fe fb49 	bl	8007ace <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009440:	4b10      	ldr	r3, [pc, #64]	; (8009484 <vTaskNotifyGiveFromISR+0x120>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	429a      	cmp	r2, r3
 8009448:	d909      	bls.n	800945e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2201      	movs	r2, #1
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e002      	b.n	800945e <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8009458:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <vTaskNotifyGiveFromISR+0x124>)
 800945a:	2201      	movs	r2, #1
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f383 8811 	msr	BASEPRI, r3
}
 8009468:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800946a:	bf00      	nop
 800946c:	3728      	adds	r7, #40	; 0x28
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	200012e0 	.word	0x200012e0
 8009478:	200012c0 	.word	0x200012c0
 800947c:	20000de8 	.word	0x20000de8
 8009480:	20001278 	.word	0x20001278
 8009484:	20000de4 	.word	0x20000de4
 8009488:	200012cc 	.word	0x200012cc

0800948c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009496:	4b21      	ldr	r3, [pc, #132]	; (800951c <prvAddCurrentTaskToDelayedList+0x90>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800949c:	4b20      	ldr	r3, [pc, #128]	; (8009520 <prvAddCurrentTaskToDelayedList+0x94>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3304      	adds	r3, #4
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe fb6e 	bl	8007b84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d10a      	bne.n	80094c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b6:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <prvAddCurrentTaskToDelayedList+0x94>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4619      	mov	r1, r3
 80094be:	4819      	ldr	r0, [pc, #100]	; (8009524 <prvAddCurrentTaskToDelayedList+0x98>)
 80094c0:	f7fe fb05 	bl	8007ace <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094c4:	e026      	b.n	8009514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4413      	add	r3, r2
 80094cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094ce:	4b14      	ldr	r3, [pc, #80]	; (8009520 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d209      	bcs.n	80094f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094de:	4b12      	ldr	r3, [pc, #72]	; (8009528 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <prvAddCurrentTaskToDelayedList+0x94>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3304      	adds	r3, #4
 80094e8:	4619      	mov	r1, r3
 80094ea:	4610      	mov	r0, r2
 80094ec:	f7fe fb12 	bl	8007b14 <vListInsert>
}
 80094f0:	e010      	b.n	8009514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094f2:	4b0e      	ldr	r3, [pc, #56]	; (800952c <prvAddCurrentTaskToDelayedList+0xa0>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b0a      	ldr	r3, [pc, #40]	; (8009520 <prvAddCurrentTaskToDelayedList+0x94>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7fe fb08 	bl	8007b14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009504:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	429a      	cmp	r2, r3
 800950c:	d202      	bcs.n	8009514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800950e:	4a08      	ldr	r2, [pc, #32]	; (8009530 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6013      	str	r3, [r2, #0]
}
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	200012bc 	.word	0x200012bc
 8009520:	20000de4 	.word	0x20000de4
 8009524:	200012a4 	.word	0x200012a4
 8009528:	20001274 	.word	0x20001274
 800952c:	20001270 	.word	0x20001270
 8009530:	200012d8 	.word	0x200012d8

08009534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08a      	sub	sp, #40	; 0x28
 8009538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800953e:	f000 facb 	bl	8009ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009542:	4b1c      	ldr	r3, [pc, #112]	; (80095b4 <xTimerCreateTimerTask+0x80>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d021      	beq.n	800958e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009552:	1d3a      	adds	r2, r7, #4
 8009554:	f107 0108 	add.w	r1, r7, #8
 8009558:	f107 030c 	add.w	r3, r7, #12
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fa71 	bl	8007a44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	9202      	str	r2, [sp, #8]
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	2302      	movs	r3, #2
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	2300      	movs	r3, #0
 8009572:	460a      	mov	r2, r1
 8009574:	4910      	ldr	r1, [pc, #64]	; (80095b8 <xTimerCreateTimerTask+0x84>)
 8009576:	4811      	ldr	r0, [pc, #68]	; (80095bc <xTimerCreateTimerTask+0x88>)
 8009578:	f7ff f850 	bl	800861c <xTaskCreateStatic>
 800957c:	4603      	mov	r3, r0
 800957e:	4a10      	ldr	r2, [pc, #64]	; (80095c0 <xTimerCreateTimerTask+0x8c>)
 8009580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009582:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <xTimerCreateTimerTask+0x8c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800958a:	2301      	movs	r3, #1
 800958c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	613b      	str	r3, [r7, #16]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80095aa:	697b      	ldr	r3, [r7, #20]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20001314 	.word	0x20001314
 80095b8:	0800e5b4 	.word	0x0800e5b4
 80095bc:	080096e1 	.word	0x080096e1
 80095c0:	20001318 	.word	0x20001318

080095c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08a      	sub	sp, #40	; 0x28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	623b      	str	r3, [r7, #32]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095f2:	4b1a      	ldr	r3, [pc, #104]	; (800965c <xTimerGenericCommand+0x98>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d02a      	beq.n	8009650 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2b05      	cmp	r3, #5
 800960a:	dc18      	bgt.n	800963e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800960c:	f7ff fe1e 	bl	800924c <xTaskGetSchedulerState>
 8009610:	4603      	mov	r3, r0
 8009612:	2b02      	cmp	r3, #2
 8009614:	d109      	bne.n	800962a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009616:	4b11      	ldr	r3, [pc, #68]	; (800965c <xTimerGenericCommand+0x98>)
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	f107 0110 	add.w	r1, r7, #16
 800961e:	2300      	movs	r3, #0
 8009620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009622:	f7fe fc19 	bl	8007e58 <xQueueGenericSend>
 8009626:	6278      	str	r0, [r7, #36]	; 0x24
 8009628:	e012      	b.n	8009650 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800962a:	4b0c      	ldr	r3, [pc, #48]	; (800965c <xTimerGenericCommand+0x98>)
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	f107 0110 	add.w	r1, r7, #16
 8009632:	2300      	movs	r3, #0
 8009634:	2200      	movs	r2, #0
 8009636:	f7fe fc0f 	bl	8007e58 <xQueueGenericSend>
 800963a:	6278      	str	r0, [r7, #36]	; 0x24
 800963c:	e008      	b.n	8009650 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800963e:	4b07      	ldr	r3, [pc, #28]	; (800965c <xTimerGenericCommand+0x98>)
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	f107 0110 	add.w	r1, r7, #16
 8009646:	2300      	movs	r3, #0
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	f7fe fd03 	bl	8008054 <xQueueGenericSendFromISR>
 800964e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009652:	4618      	mov	r0, r3
 8009654:	3728      	adds	r7, #40	; 0x28
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20001314 	.word	0x20001314

08009660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af02      	add	r7, sp, #8
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800966a:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <prvProcessExpiredTimer+0x7c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	3304      	adds	r3, #4
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe fa83 	bl	8007b84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d122      	bne.n	80096cc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	699a      	ldr	r2, [r3, #24]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	18d1      	adds	r1, r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	6978      	ldr	r0, [r7, #20]
 8009694:	f000 f8c8 	bl	8009828 <prvInsertTimerInActiveList>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d016      	beq.n	80096cc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800969e:	2300      	movs	r3, #0
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	2300      	movs	r3, #0
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	2100      	movs	r1, #0
 80096a8:	6978      	ldr	r0, [r7, #20]
 80096aa:	f7ff ff8b 	bl	80095c4 <xTimerGenericCommand>
 80096ae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10a      	bne.n	80096cc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60fb      	str	r3, [r7, #12]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	6978      	ldr	r0, [r7, #20]
 80096d2:	4798      	blx	r3
}
 80096d4:	bf00      	nop
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	2000130c 	.word	0x2000130c

080096e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096e8:	f107 0308 	add.w	r3, r7, #8
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 f857 	bl	80097a0 <prvGetNextExpireTime>
 80096f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	4619      	mov	r1, r3
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 f803 	bl	8009704 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096fe:	f000 f8d5 	bl	80098ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009702:	e7f1      	b.n	80096e8 <prvTimerTask+0x8>

08009704 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800970e:	f7ff f9b7 	bl	8008a80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009712:	f107 0308 	add.w	r3, r7, #8
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f866 	bl	80097e8 <prvSampleTimeNow>
 800971c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d130      	bne.n	8009786 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <prvProcessTimerOrBlockTask+0x3c>
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	429a      	cmp	r2, r3
 8009730:	d806      	bhi.n	8009740 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009732:	f7ff f9b3 	bl	8008a9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009736:	68f9      	ldr	r1, [r7, #12]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff ff91 	bl	8009660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800973e:	e024      	b.n	800978a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d008      	beq.n	8009758 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009746:	4b13      	ldr	r3, [pc, #76]	; (8009794 <prvProcessTimerOrBlockTask+0x90>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	bf0c      	ite	eq
 8009750:	2301      	moveq	r3, #1
 8009752:	2300      	movne	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009758:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <prvProcessTimerOrBlockTask+0x94>)
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4619      	mov	r1, r3
 8009766:	f7fe ff25 	bl	80085b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800976a:	f7ff f997 	bl	8008a9c <xTaskResumeAll>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009774:	4b09      	ldr	r3, [pc, #36]	; (800979c <prvProcessTimerOrBlockTask+0x98>)
 8009776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	f3bf 8f6f 	isb	sy
}
 8009784:	e001      	b.n	800978a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009786:	f7ff f989 	bl	8008a9c <xTaskResumeAll>
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20001310 	.word	0x20001310
 8009798:	20001314 	.word	0x20001314
 800979c:	e000ed04 	.word	0xe000ed04

080097a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097a8:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <prvGetNextExpireTime+0x44>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bf0c      	ite	eq
 80097b2:	2301      	moveq	r3, #1
 80097b4:	2300      	movne	r3, #0
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d105      	bne.n	80097d2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c6:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <prvGetNextExpireTime+0x44>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e001      	b.n	80097d6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097d6:	68fb      	ldr	r3, [r7, #12]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	bc80      	pop	{r7}
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	2000130c 	.word	0x2000130c

080097e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097f0:	f7ff f9f2 	bl	8008bd8 <xTaskGetTickCount>
 80097f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097f6:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <prvSampleTimeNow+0x3c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d205      	bcs.n	800980c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009800:	f000 f908 	bl	8009a14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	e002      	b.n	8009812 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009812:	4a04      	ldr	r2, [pc, #16]	; (8009824 <prvSampleTimeNow+0x3c>)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009818:	68fb      	ldr	r3, [r7, #12]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2000131c 	.word	0x2000131c

08009828 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
 8009834:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	429a      	cmp	r2, r3
 800984c:	d812      	bhi.n	8009874 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	1ad2      	subs	r2, r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	429a      	cmp	r2, r3
 800985a:	d302      	bcc.n	8009862 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	e01b      	b.n	800989a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009862:	4b10      	ldr	r3, [pc, #64]	; (80098a4 <prvInsertTimerInActiveList+0x7c>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3304      	adds	r3, #4
 800986a:	4619      	mov	r1, r3
 800986c:	4610      	mov	r0, r2
 800986e:	f7fe f951 	bl	8007b14 <vListInsert>
 8009872:	e012      	b.n	800989a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	429a      	cmp	r2, r3
 800987a:	d206      	bcs.n	800988a <prvInsertTimerInActiveList+0x62>
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d302      	bcc.n	800988a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e007      	b.n	800989a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800988a:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <prvInsertTimerInActiveList+0x80>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3304      	adds	r3, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f7fe f93d 	bl	8007b14 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800989a:	697b      	ldr	r3, [r7, #20]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20001310 	.word	0x20001310
 80098a8:	2000130c 	.word	0x2000130c

080098ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08e      	sub	sp, #56	; 0x38
 80098b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098b2:	e09d      	b.n	80099f0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da18      	bge.n	80098ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098ba:	1d3b      	adds	r3, r7, #4
 80098bc:	3304      	adds	r3, #4
 80098be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	61fb      	str	r3, [r7, #28]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098e2:	6850      	ldr	r0, [r2, #4]
 80098e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098e6:	6892      	ldr	r2, [r2, #8]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	db7e      	blt.n	80099f0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	3304      	adds	r3, #4
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe f93e 	bl	8007b84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009908:	463b      	mov	r3, r7
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff ff6c 	bl	80097e8 <prvSampleTimeNow>
 8009910:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b09      	cmp	r3, #9
 8009916:	d86a      	bhi.n	80099ee <prvProcessReceivedCommands+0x142>
 8009918:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <prvProcessReceivedCommands+0x74>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009949 	.word	0x08009949
 8009924:	08009949 	.word	0x08009949
 8009928:	08009949 	.word	0x08009949
 800992c:	080099f1 	.word	0x080099f1
 8009930:	080099a5 	.word	0x080099a5
 8009934:	080099dd 	.word	0x080099dd
 8009938:	08009949 	.word	0x08009949
 800993c:	08009949 	.word	0x08009949
 8009940:	080099f1 	.word	0x080099f1
 8009944:	080099a5 	.word	0x080099a5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	18d1      	adds	r1, r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009956:	f7ff ff67 	bl	8009828 <prvInsertTimerInActiveList>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d047      	beq.n	80099f0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009966:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d13f      	bne.n	80099f0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	441a      	add	r2, r3
 8009978:	2300      	movs	r3, #0
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	2300      	movs	r3, #0
 800997e:	2100      	movs	r1, #0
 8009980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009982:	f7ff fe1f 	bl	80095c4 <xTimerGenericCommand>
 8009986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d130      	bne.n	80099f0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	61bb      	str	r3, [r7, #24]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	617b      	str	r3, [r7, #20]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	699a      	ldr	r2, [r3, #24]
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	18d1      	adds	r1, r2, r3
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d6:	f7ff ff27 	bl	8009828 <prvInsertTimerInActiveList>
					break;
 80099da:	e009      	b.n	80099f0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80099e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099e8:	f000 fb6c 	bl	800a0c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099ec:	e000      	b.n	80099f0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80099ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <prvProcessReceivedCommands+0x164>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	1d39      	adds	r1, r7, #4
 80099f6:	2200      	movs	r2, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fbc3 	bl	8008184 <xQueueReceive>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f47f af57 	bne.w	80098b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	3730      	adds	r7, #48	; 0x30
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20001314 	.word	0x20001314

08009a14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a1a:	e045      	b.n	8009aa8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a1c:	4b2c      	ldr	r3, [pc, #176]	; (8009ad0 <prvSwitchTimerLists+0xbc>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a26:	4b2a      	ldr	r3, [pc, #168]	; (8009ad0 <prvSwitchTimerLists+0xbc>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	3304      	adds	r3, #4
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fe f8a5 	bl	8007b84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d12e      	bne.n	8009aa8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	4413      	add	r3, r2
 8009a52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d90e      	bls.n	8009a7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a68:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <prvSwitchTimerLists+0xbc>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f7fe f84e 	bl	8007b14 <vListInsert>
 8009a78:	e016      	b.n	8009aa8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	2300      	movs	r3, #0
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	2100      	movs	r1, #0
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7ff fd9d 	bl	80095c4 <xTimerGenericCommand>
 8009a8a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10a      	bne.n	8009aa8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	603b      	str	r3, [r7, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	e7fe      	b.n	8009aa6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aa8:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <prvSwitchTimerLists+0xbc>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1b4      	bne.n	8009a1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ab2:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <prvSwitchTimerLists+0xbc>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ab8:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <prvSwitchTimerLists+0xc0>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a04      	ldr	r2, [pc, #16]	; (8009ad0 <prvSwitchTimerLists+0xbc>)
 8009abe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ac0:	4a04      	ldr	r2, [pc, #16]	; (8009ad4 <prvSwitchTimerLists+0xc0>)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	6013      	str	r3, [r2, #0]
}
 8009ac6:	bf00      	nop
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	2000130c 	.word	0x2000130c
 8009ad4:	20001310 	.word	0x20001310

08009ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ade:	f000 f92d 	bl	8009d3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ae2:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <prvCheckForValidListAndQueue+0x60>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d120      	bne.n	8009b2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009aea:	4814      	ldr	r0, [pc, #80]	; (8009b3c <prvCheckForValidListAndQueue+0x64>)
 8009aec:	f7fd ffc4 	bl	8007a78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009af0:	4813      	ldr	r0, [pc, #76]	; (8009b40 <prvCheckForValidListAndQueue+0x68>)
 8009af2:	f7fd ffc1 	bl	8007a78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009af6:	4b13      	ldr	r3, [pc, #76]	; (8009b44 <prvCheckForValidListAndQueue+0x6c>)
 8009af8:	4a10      	ldr	r2, [pc, #64]	; (8009b3c <prvCheckForValidListAndQueue+0x64>)
 8009afa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009afc:	4b12      	ldr	r3, [pc, #72]	; (8009b48 <prvCheckForValidListAndQueue+0x70>)
 8009afe:	4a10      	ldr	r2, [pc, #64]	; (8009b40 <prvCheckForValidListAndQueue+0x68>)
 8009b00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b02:	2300      	movs	r3, #0
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	4b11      	ldr	r3, [pc, #68]	; (8009b4c <prvCheckForValidListAndQueue+0x74>)
 8009b08:	4a11      	ldr	r2, [pc, #68]	; (8009b50 <prvCheckForValidListAndQueue+0x78>)
 8009b0a:	2110      	movs	r1, #16
 8009b0c:	200a      	movs	r0, #10
 8009b0e:	f7fe f8cb 	bl	8007ca8 <xQueueGenericCreateStatic>
 8009b12:	4603      	mov	r3, r0
 8009b14:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <prvCheckForValidListAndQueue+0x60>)
 8009b16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b18:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <prvCheckForValidListAndQueue+0x60>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b20:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <prvCheckForValidListAndQueue+0x60>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	490b      	ldr	r1, [pc, #44]	; (8009b54 <prvCheckForValidListAndQueue+0x7c>)
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fd1c 	bl	8008564 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b2c:	f000 f936 	bl	8009d9c <vPortExitCritical>
}
 8009b30:	bf00      	nop
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20001314 	.word	0x20001314
 8009b3c:	200012e4 	.word	0x200012e4
 8009b40:	200012f8 	.word	0x200012f8
 8009b44:	2000130c 	.word	0x2000130c
 8009b48:	20001310 	.word	0x20001310
 8009b4c:	200013c0 	.word	0x200013c0
 8009b50:	20001320 	.word	0x20001320
 8009b54:	0800e5bc 	.word	0x0800e5bc

08009b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3b04      	subs	r3, #4
 8009b68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3b04      	subs	r3, #4
 8009b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	f023 0201 	bic.w	r2, r3, #1
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3b04      	subs	r3, #4
 8009b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b88:	4a08      	ldr	r2, [pc, #32]	; (8009bac <pxPortInitialiseStack+0x54>)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3b14      	subs	r3, #20
 8009b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3b20      	subs	r3, #32
 8009b9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr
 8009bac:	08009bb1 	.word	0x08009bb1

08009bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bba:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <prvTaskExitError+0x54>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d00a      	beq.n	8009bda <prvTaskExitError+0x2a>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60fb      	str	r3, [r7, #12]
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <prvTaskExitError+0x28>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	60bb      	str	r3, [r7, #8]
}
 8009bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bee:	bf00      	nop
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0fc      	beq.n	8009bf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bc80      	pop	{r7}
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	200000ac 	.word	0x200000ac
	...

08009c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c10:	4b07      	ldr	r3, [pc, #28]	; (8009c30 <pxCurrentTCBConst2>)
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	6808      	ldr	r0, [r1, #0]
 8009c16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c1a:	f380 8809 	msr	PSP, r0
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f04f 0000 	mov.w	r0, #0
 8009c26:	f380 8811 	msr	BASEPRI, r0
 8009c2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009c2e:	4770      	bx	lr

08009c30 <pxCurrentTCBConst2>:
 8009c30:	20000de4 	.word	0x20000de4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop

08009c38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009c38:	4806      	ldr	r0, [pc, #24]	; (8009c54 <prvPortStartFirstTask+0x1c>)
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	6800      	ldr	r0, [r0, #0]
 8009c3e:	f380 8808 	msr	MSP, r0
 8009c42:	b662      	cpsie	i
 8009c44:	b661      	cpsie	f
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	df00      	svc	0
 8009c50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c52:	bf00      	nop
 8009c54:	e000ed08 	.word	0xe000ed08

08009c58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c5e:	4b32      	ldr	r3, [pc, #200]	; (8009d28 <xPortStartScheduler+0xd0>)
 8009c60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	22ff      	movs	r2, #255	; 0xff
 8009c6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	4b2a      	ldr	r3, [pc, #168]	; (8009d2c <xPortStartScheduler+0xd4>)
 8009c84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c86:	4b2a      	ldr	r3, [pc, #168]	; (8009d30 <xPortStartScheduler+0xd8>)
 8009c88:	2207      	movs	r2, #7
 8009c8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c8c:	e009      	b.n	8009ca2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009c8e:	4b28      	ldr	r3, [pc, #160]	; (8009d30 <xPortStartScheduler+0xd8>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	4a26      	ldr	r2, [pc, #152]	; (8009d30 <xPortStartScheduler+0xd8>)
 8009c96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009caa:	2b80      	cmp	r3, #128	; 0x80
 8009cac:	d0ef      	beq.n	8009c8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cae:	4b20      	ldr	r3, [pc, #128]	; (8009d30 <xPortStartScheduler+0xd8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f1c3 0307 	rsb	r3, r3, #7
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d00a      	beq.n	8009cd0 <xPortStartScheduler+0x78>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	60bb      	str	r3, [r7, #8]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cd0:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <xPortStartScheduler+0xd8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	021b      	lsls	r3, r3, #8
 8009cd6:	4a16      	ldr	r2, [pc, #88]	; (8009d30 <xPortStartScheduler+0xd8>)
 8009cd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cda:	4b15      	ldr	r3, [pc, #84]	; (8009d30 <xPortStartScheduler+0xd8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ce2:	4a13      	ldr	r2, [pc, #76]	; (8009d30 <xPortStartScheduler+0xd8>)
 8009ce4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cee:	4b11      	ldr	r3, [pc, #68]	; (8009d34 <xPortStartScheduler+0xdc>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a10      	ldr	r2, [pc, #64]	; (8009d34 <xPortStartScheduler+0xdc>)
 8009cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cfa:	4b0e      	ldr	r3, [pc, #56]	; (8009d34 <xPortStartScheduler+0xdc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a0d      	ldr	r2, [pc, #52]	; (8009d34 <xPortStartScheduler+0xdc>)
 8009d00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d06:	f000 f8b9 	bl	8009e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d0a:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <xPortStartScheduler+0xe0>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d10:	f7ff ff92 	bl	8009c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d14:	f7ff f82c 	bl	8008d70 <vTaskSwitchContext>
	prvTaskExitError();
 8009d18:	f7ff ff4a 	bl	8009bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	e000e400 	.word	0xe000e400
 8009d2c:	20001410 	.word	0x20001410
 8009d30:	20001414 	.word	0x20001414
 8009d34:	e000ed20 	.word	0xe000ed20
 8009d38:	200000ac 	.word	0x200000ac

08009d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	607b      	str	r3, [r7, #4]
}
 8009d54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d56:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <vPortEnterCritical+0x58>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	4a0d      	ldr	r2, [pc, #52]	; (8009d94 <vPortEnterCritical+0x58>)
 8009d5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d60:	4b0c      	ldr	r3, [pc, #48]	; (8009d94 <vPortEnterCritical+0x58>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d10f      	bne.n	8009d88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d68:	4b0b      	ldr	r3, [pc, #44]	; (8009d98 <vPortEnterCritical+0x5c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00a      	beq.n	8009d88 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	603b      	str	r3, [r7, #0]
}
 8009d84:	bf00      	nop
 8009d86:	e7fe      	b.n	8009d86 <vPortEnterCritical+0x4a>
	}
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bc80      	pop	{r7}
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	200000ac 	.word	0x200000ac
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009da2:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <vPortExitCritical+0x4c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <vPortExitCritical+0x24>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	607b      	str	r3, [r7, #4]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009dc0:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <vPortExitCritical+0x4c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	4a08      	ldr	r2, [pc, #32]	; (8009de8 <vPortExitCritical+0x4c>)
 8009dc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dca:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <vPortExitCritical+0x4c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d105      	bne.n	8009dde <vPortExitCritical+0x42>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	f383 8811 	msr	BASEPRI, r3
}
 8009ddc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dde:	bf00      	nop
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bc80      	pop	{r7}
 8009de6:	4770      	bx	lr
 8009de8:	200000ac 	.word	0x200000ac
 8009dec:	00000000 	.word	0x00000000

08009df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009df0:	f3ef 8009 	mrs	r0, PSP
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	4b0d      	ldr	r3, [pc, #52]	; (8009e30 <pxCurrentTCBConst>)
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e00:	6010      	str	r0, [r2, #0]
 8009e02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009e06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e0a:	f380 8811 	msr	BASEPRI, r0
 8009e0e:	f7fe ffaf 	bl	8008d70 <vTaskSwitchContext>
 8009e12:	f04f 0000 	mov.w	r0, #0
 8009e16:	f380 8811 	msr	BASEPRI, r0
 8009e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e1e:	6819      	ldr	r1, [r3, #0]
 8009e20:	6808      	ldr	r0, [r1, #0]
 8009e22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e26:	f380 8809 	msr	PSP, r0
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	4770      	bx	lr

08009e30 <pxCurrentTCBConst>:
 8009e30:	20000de4 	.word	0x20000de4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop

08009e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	607b      	str	r3, [r7, #4]
}
 8009e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e52:	f7fe fecf 	bl	8008bf4 <xTaskIncrementTick>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <SysTick_Handler+0x40>)
 8009e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	2300      	movs	r3, #0
 8009e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	f383 8811 	msr	BASEPRI, r3
}
 8009e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	e000ed04 	.word	0xe000ed04

08009e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e80:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <vPortSetupTimerInterrupt+0x30>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e86:	4b0a      	ldr	r3, [pc, #40]	; (8009eb0 <vPortSetupTimerInterrupt+0x34>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e8c:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <vPortSetupTimerInterrupt+0x38>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a09      	ldr	r2, [pc, #36]	; (8009eb8 <vPortSetupTimerInterrupt+0x3c>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	099b      	lsrs	r3, r3, #6
 8009e98:	4a08      	ldr	r2, [pc, #32]	; (8009ebc <vPortSetupTimerInterrupt+0x40>)
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e9e:	4b03      	ldr	r3, [pc, #12]	; (8009eac <vPortSetupTimerInterrupt+0x30>)
 8009ea0:	2207      	movs	r2, #7
 8009ea2:	601a      	str	r2, [r3, #0]
}
 8009ea4:	bf00      	nop
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr
 8009eac:	e000e010 	.word	0xe000e010
 8009eb0:	e000e018 	.word	0xe000e018
 8009eb4:	20000064 	.word	0x20000064
 8009eb8:	10624dd3 	.word	0x10624dd3
 8009ebc:	e000e014 	.word	0xe000e014

08009ec0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ec6:	f3ef 8305 	mrs	r3, IPSR
 8009eca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b0f      	cmp	r3, #15
 8009ed0:	d914      	bls.n	8009efc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ed2:	4a16      	ldr	r2, [pc, #88]	; (8009f2c <vPortValidateInterruptPriority+0x6c>)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009edc:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <vPortValidateInterruptPriority+0x70>)
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	7afa      	ldrb	r2, [r7, #11]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d20a      	bcs.n	8009efc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	607b      	str	r3, [r7, #4]
}
 8009ef8:	bf00      	nop
 8009efa:	e7fe      	b.n	8009efa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009efc:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <vPortValidateInterruptPriority+0x74>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f04:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <vPortValidateInterruptPriority+0x78>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d90a      	bls.n	8009f22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	603b      	str	r3, [r7, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <vPortValidateInterruptPriority+0x60>
	}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bc80      	pop	{r7}
 8009f2a:	4770      	bx	lr
 8009f2c:	e000e3f0 	.word	0xe000e3f0
 8009f30:	20001410 	.word	0x20001410
 8009f34:	e000ed0c 	.word	0xe000ed0c
 8009f38:	20001414 	.word	0x20001414

08009f3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	; 0x28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f44:	2300      	movs	r3, #0
 8009f46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f48:	f7fe fd9a 	bl	8008a80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f4c:	4b58      	ldr	r3, [pc, #352]	; (800a0b0 <pvPortMalloc+0x174>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f54:	f000 f910 	bl	800a178 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f58:	4b56      	ldr	r3, [pc, #344]	; (800a0b4 <pvPortMalloc+0x178>)
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4013      	ands	r3, r2
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f040 808e 	bne.w	800a082 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01d      	beq.n	8009fa8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009f6c:	2208      	movs	r2, #8
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4413      	add	r3, r2
 8009f72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f003 0307 	and.w	r3, r3, #7
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d014      	beq.n	8009fa8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f023 0307 	bic.w	r3, r3, #7
 8009f84:	3308      	adds	r3, #8
 8009f86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f003 0307 	and.w	r3, r3, #7
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <pvPortMalloc+0x6c>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	617b      	str	r3, [r7, #20]
}
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d069      	beq.n	800a082 <pvPortMalloc+0x146>
 8009fae:	4b42      	ldr	r3, [pc, #264]	; (800a0b8 <pvPortMalloc+0x17c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d864      	bhi.n	800a082 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009fb8:	4b40      	ldr	r3, [pc, #256]	; (800a0bc <pvPortMalloc+0x180>)
 8009fba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009fbc:	4b3f      	ldr	r3, [pc, #252]	; (800a0bc <pvPortMalloc+0x180>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fc2:	e004      	b.n	8009fce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d903      	bls.n	8009fe0 <pvPortMalloc+0xa4>
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1f1      	bne.n	8009fc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fe0:	4b33      	ldr	r3, [pc, #204]	; (800a0b0 <pvPortMalloc+0x174>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d04b      	beq.n	800a082 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2208      	movs	r2, #8
 8009ff0:	4413      	add	r3, r2
 8009ff2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	6a3b      	ldr	r3, [r7, #32]
 8009ffa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	1ad2      	subs	r2, r2, r3
 800a004:	2308      	movs	r3, #8
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	429a      	cmp	r2, r3
 800a00a:	d91f      	bls.n	800a04c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4413      	add	r3, r2
 800a012:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	f003 0307 	and.w	r3, r3, #7
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <pvPortMalloc+0xf8>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	613b      	str	r3, [r7, #16]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	1ad2      	subs	r2, r2, r3
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a046:	69b8      	ldr	r0, [r7, #24]
 800a048:	f000 f8f8 	bl	800a23c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a04c:	4b1a      	ldr	r3, [pc, #104]	; (800a0b8 <pvPortMalloc+0x17c>)
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	4a18      	ldr	r2, [pc, #96]	; (800a0b8 <pvPortMalloc+0x17c>)
 800a058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a05a:	4b17      	ldr	r3, [pc, #92]	; (800a0b8 <pvPortMalloc+0x17c>)
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4b18      	ldr	r3, [pc, #96]	; (800a0c0 <pvPortMalloc+0x184>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d203      	bcs.n	800a06e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a066:	4b14      	ldr	r3, [pc, #80]	; (800a0b8 <pvPortMalloc+0x17c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a15      	ldr	r2, [pc, #84]	; (800a0c0 <pvPortMalloc+0x184>)
 800a06c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	4b10      	ldr	r3, [pc, #64]	; (800a0b4 <pvPortMalloc+0x178>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	431a      	orrs	r2, r3
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	2200      	movs	r2, #0
 800a080:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a082:	f7fe fd0b 	bl	8008a9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <pvPortMalloc+0x16a>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	60fb      	str	r3, [r7, #12]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <pvPortMalloc+0x168>
	return pvReturn;
 800a0a6:	69fb      	ldr	r3, [r7, #28]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3728      	adds	r7, #40	; 0x28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20002420 	.word	0x20002420
 800a0b4:	2000242c 	.word	0x2000242c
 800a0b8:	20002424 	.word	0x20002424
 800a0bc:	20002418 	.word	0x20002418
 800a0c0:	20002428 	.word	0x20002428

0800a0c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d048      	beq.n	800a168 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	425b      	negs	r3, r3
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4413      	add	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	4b21      	ldr	r3, [pc, #132]	; (800a170 <vPortFree+0xac>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10a      	bne.n	800a108 <vPortFree+0x44>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	60fb      	str	r3, [r7, #12]
}
 800a104:	bf00      	nop
 800a106:	e7fe      	b.n	800a106 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00a      	beq.n	800a126 <vPortFree+0x62>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	60bb      	str	r3, [r7, #8]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	4b11      	ldr	r3, [pc, #68]	; (800a170 <vPortFree+0xac>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4013      	ands	r3, r2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d019      	beq.n	800a168 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d115      	bne.n	800a168 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <vPortFree+0xac>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	43db      	mvns	r3, r3
 800a146:	401a      	ands	r2, r3
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a14c:	f7fe fc98 	bl	8008a80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	4b07      	ldr	r3, [pc, #28]	; (800a174 <vPortFree+0xb0>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4413      	add	r3, r2
 800a15a:	4a06      	ldr	r2, [pc, #24]	; (800a174 <vPortFree+0xb0>)
 800a15c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a15e:	6938      	ldr	r0, [r7, #16]
 800a160:	f000 f86c 	bl	800a23c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a164:	f7fe fc9a 	bl	8008a9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a168:	bf00      	nop
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	2000242c 	.word	0x2000242c
 800a174:	20002424 	.word	0x20002424

0800a178 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a17e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a182:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a184:	4b27      	ldr	r3, [pc, #156]	; (800a224 <prvHeapInit+0xac>)
 800a186:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f003 0307 	and.w	r3, r3, #7
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00c      	beq.n	800a1ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3307      	adds	r3, #7
 800a196:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0307 	bic.w	r3, r3, #7
 800a19e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	4a1f      	ldr	r2, [pc, #124]	; (800a224 <prvHeapInit+0xac>)
 800a1a8:	4413      	add	r3, r2
 800a1aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a1b0:	4a1d      	ldr	r2, [pc, #116]	; (800a228 <prvHeapInit+0xb0>)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a1b6:	4b1c      	ldr	r3, [pc, #112]	; (800a228 <prvHeapInit+0xb0>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1c4:	2208      	movs	r2, #8
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	1a9b      	subs	r3, r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 0307 	bic.w	r3, r3, #7
 800a1d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4a15      	ldr	r2, [pc, #84]	; (800a22c <prvHeapInit+0xb4>)
 800a1d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <prvHeapInit+0xb4>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1e2:	4b12      	ldr	r3, [pc, #72]	; (800a22c <prvHeapInit+0xb4>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	1ad2      	subs	r2, r2, r3
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1f8:	4b0c      	ldr	r3, [pc, #48]	; (800a22c <prvHeapInit+0xb4>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	4a0a      	ldr	r2, [pc, #40]	; (800a230 <prvHeapInit+0xb8>)
 800a206:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	4a09      	ldr	r2, [pc, #36]	; (800a234 <prvHeapInit+0xbc>)
 800a20e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a210:	4b09      	ldr	r3, [pc, #36]	; (800a238 <prvHeapInit+0xc0>)
 800a212:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a216:	601a      	str	r2, [r3, #0]
}
 800a218:	bf00      	nop
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bc80      	pop	{r7}
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20001418 	.word	0x20001418
 800a228:	20002418 	.word	0x20002418
 800a22c:	20002420 	.word	0x20002420
 800a230:	20002428 	.word	0x20002428
 800a234:	20002424 	.word	0x20002424
 800a238:	2000242c 	.word	0x2000242c

0800a23c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a244:	4b27      	ldr	r3, [pc, #156]	; (800a2e4 <prvInsertBlockIntoFreeList+0xa8>)
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	e002      	b.n	800a250 <prvInsertBlockIntoFreeList+0x14>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	429a      	cmp	r2, r3
 800a258:	d8f7      	bhi.n	800a24a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	4413      	add	r3, r2
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d108      	bne.n	800a27e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	441a      	add	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	441a      	add	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d118      	bne.n	800a2c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	4b14      	ldr	r3, [pc, #80]	; (800a2e8 <prvInsertBlockIntoFreeList+0xac>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d00d      	beq.n	800a2ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	441a      	add	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	e008      	b.n	800a2cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <prvInsertBlockIntoFreeList+0xac>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	e003      	b.n	800a2cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d002      	beq.n	800a2da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2da:	bf00      	nop
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr
 800a2e4:	20002418 	.word	0x20002418
 800a2e8:	20002420 	.word	0x20002420

0800a2ec <atof>:
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	f000 be17 	b.w	800af20 <strtod>

0800a2f2 <sulp>:
 800a2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	4690      	mov	r8, r2
 800a2fa:	f003 fa99 	bl	800d830 <__ulp>
 800a2fe:	4604      	mov	r4, r0
 800a300:	460d      	mov	r5, r1
 800a302:	f1b8 0f00 	cmp.w	r8, #0
 800a306:	d011      	beq.n	800a32c <sulp+0x3a>
 800a308:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a30c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a310:	2b00      	cmp	r3, #0
 800a312:	dd0b      	ble.n	800a32c <sulp+0x3a>
 800a314:	2400      	movs	r4, #0
 800a316:	051b      	lsls	r3, r3, #20
 800a318:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a31c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a320:	4622      	mov	r2, r4
 800a322:	462b      	mov	r3, r5
 800a324:	f7f6 f948 	bl	80005b8 <__aeabi_dmul>
 800a328:	4604      	mov	r4, r0
 800a32a:	460d      	mov	r5, r1
 800a32c:	4620      	mov	r0, r4
 800a32e:	4629      	mov	r1, r5
 800a330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a334:	0000      	movs	r0, r0
	...

0800a338 <_strtod_l>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	b09f      	sub	sp, #124	; 0x7c
 800a33e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a340:	2200      	movs	r2, #0
 800a342:	4604      	mov	r4, r0
 800a344:	921a      	str	r2, [sp, #104]	; 0x68
 800a346:	460d      	mov	r5, r1
 800a348:	f04f 0800 	mov.w	r8, #0
 800a34c:	f04f 0900 	mov.w	r9, #0
 800a350:	460a      	mov	r2, r1
 800a352:	9219      	str	r2, [sp, #100]	; 0x64
 800a354:	7811      	ldrb	r1, [r2, #0]
 800a356:	292b      	cmp	r1, #43	; 0x2b
 800a358:	d04a      	beq.n	800a3f0 <_strtod_l+0xb8>
 800a35a:	d838      	bhi.n	800a3ce <_strtod_l+0x96>
 800a35c:	290d      	cmp	r1, #13
 800a35e:	d832      	bhi.n	800a3c6 <_strtod_l+0x8e>
 800a360:	2908      	cmp	r1, #8
 800a362:	d832      	bhi.n	800a3ca <_strtod_l+0x92>
 800a364:	2900      	cmp	r1, #0
 800a366:	d03b      	beq.n	800a3e0 <_strtod_l+0xa8>
 800a368:	2200      	movs	r2, #0
 800a36a:	920e      	str	r2, [sp, #56]	; 0x38
 800a36c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a36e:	7832      	ldrb	r2, [r6, #0]
 800a370:	2a30      	cmp	r2, #48	; 0x30
 800a372:	f040 80b2 	bne.w	800a4da <_strtod_l+0x1a2>
 800a376:	7872      	ldrb	r2, [r6, #1]
 800a378:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a37c:	2a58      	cmp	r2, #88	; 0x58
 800a37e:	d16e      	bne.n	800a45e <_strtod_l+0x126>
 800a380:	9302      	str	r3, [sp, #8]
 800a382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a384:	4620      	mov	r0, r4
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	ab1a      	add	r3, sp, #104	; 0x68
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	4a8c      	ldr	r2, [pc, #560]	; (800a5c0 <_strtod_l+0x288>)
 800a38e:	ab1b      	add	r3, sp, #108	; 0x6c
 800a390:	a919      	add	r1, sp, #100	; 0x64
 800a392:	f002 fb29 	bl	800c9e8 <__gethex>
 800a396:	f010 070f 	ands.w	r7, r0, #15
 800a39a:	4605      	mov	r5, r0
 800a39c:	d005      	beq.n	800a3aa <_strtod_l+0x72>
 800a39e:	2f06      	cmp	r7, #6
 800a3a0:	d128      	bne.n	800a3f4 <_strtod_l+0xbc>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	3601      	adds	r6, #1
 800a3a6:	9619      	str	r6, [sp, #100]	; 0x64
 800a3a8:	930e      	str	r3, [sp, #56]	; 0x38
 800a3aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f040 85a0 	bne.w	800aef2 <_strtod_l+0xbba>
 800a3b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3b4:	b1cb      	cbz	r3, 800a3ea <_strtod_l+0xb2>
 800a3b6:	4642      	mov	r2, r8
 800a3b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4619      	mov	r1, r3
 800a3c0:	b01f      	add	sp, #124	; 0x7c
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	2920      	cmp	r1, #32
 800a3c8:	d1ce      	bne.n	800a368 <_strtod_l+0x30>
 800a3ca:	3201      	adds	r2, #1
 800a3cc:	e7c1      	b.n	800a352 <_strtod_l+0x1a>
 800a3ce:	292d      	cmp	r1, #45	; 0x2d
 800a3d0:	d1ca      	bne.n	800a368 <_strtod_l+0x30>
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	910e      	str	r1, [sp, #56]	; 0x38
 800a3d6:	1c51      	adds	r1, r2, #1
 800a3d8:	9119      	str	r1, [sp, #100]	; 0x64
 800a3da:	7852      	ldrb	r2, [r2, #1]
 800a3dc:	2a00      	cmp	r2, #0
 800a3de:	d1c5      	bne.n	800a36c <_strtod_l+0x34>
 800a3e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3e2:	9519      	str	r5, [sp, #100]	; 0x64
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f040 8582 	bne.w	800aeee <_strtod_l+0xbb6>
 800a3ea:	4642      	mov	r2, r8
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	e7e5      	b.n	800a3bc <_strtod_l+0x84>
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	e7ef      	b.n	800a3d4 <_strtod_l+0x9c>
 800a3f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3f6:	b13a      	cbz	r2, 800a408 <_strtod_l+0xd0>
 800a3f8:	2135      	movs	r1, #53	; 0x35
 800a3fa:	a81c      	add	r0, sp, #112	; 0x70
 800a3fc:	f003 fb04 	bl	800da08 <__copybits>
 800a400:	4620      	mov	r0, r4
 800a402:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a404:	f002 fee8 	bl	800d1d8 <_Bfree>
 800a408:	3f01      	subs	r7, #1
 800a40a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a40c:	2f04      	cmp	r7, #4
 800a40e:	d806      	bhi.n	800a41e <_strtod_l+0xe6>
 800a410:	e8df f007 	tbb	[pc, r7]
 800a414:	201d0314 	.word	0x201d0314
 800a418:	14          	.byte	0x14
 800a419:	00          	.byte	0x00
 800a41a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a41e:	05e9      	lsls	r1, r5, #23
 800a420:	bf48      	it	mi
 800a422:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a426:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a42a:	0d1b      	lsrs	r3, r3, #20
 800a42c:	051b      	lsls	r3, r3, #20
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1bb      	bne.n	800a3aa <_strtod_l+0x72>
 800a432:	f001 fb69 	bl	800bb08 <__errno>
 800a436:	2322      	movs	r3, #34	; 0x22
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	e7b6      	b.n	800a3aa <_strtod_l+0x72>
 800a43c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a440:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a444:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a448:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a44c:	e7e7      	b.n	800a41e <_strtod_l+0xe6>
 800a44e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a5c4 <_strtod_l+0x28c>
 800a452:	e7e4      	b.n	800a41e <_strtod_l+0xe6>
 800a454:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a458:	f04f 38ff 	mov.w	r8, #4294967295
 800a45c:	e7df      	b.n	800a41e <_strtod_l+0xe6>
 800a45e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	9219      	str	r2, [sp, #100]	; 0x64
 800a464:	785b      	ldrb	r3, [r3, #1]
 800a466:	2b30      	cmp	r3, #48	; 0x30
 800a468:	d0f9      	beq.n	800a45e <_strtod_l+0x126>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d09d      	beq.n	800a3aa <_strtod_l+0x72>
 800a46e:	2301      	movs	r3, #1
 800a470:	f04f 0a00 	mov.w	sl, #0
 800a474:	220a      	movs	r2, #10
 800a476:	46d3      	mov	fp, sl
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a47c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a480:	930b      	str	r3, [sp, #44]	; 0x2c
 800a482:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a484:	7806      	ldrb	r6, [r0, #0]
 800a486:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a48a:	b2d9      	uxtb	r1, r3
 800a48c:	2909      	cmp	r1, #9
 800a48e:	d926      	bls.n	800a4de <_strtod_l+0x1a6>
 800a490:	2201      	movs	r2, #1
 800a492:	494d      	ldr	r1, [pc, #308]	; (800a5c8 <_strtod_l+0x290>)
 800a494:	f001 fadb 	bl	800ba4e <strncmp>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d030      	beq.n	800a4fe <_strtod_l+0x1c6>
 800a49c:	2000      	movs	r0, #0
 800a49e:	4632      	mov	r2, r6
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	465e      	mov	r6, fp
 800a4a4:	9008      	str	r0, [sp, #32]
 800a4a6:	2a65      	cmp	r2, #101	; 0x65
 800a4a8:	d001      	beq.n	800a4ae <_strtod_l+0x176>
 800a4aa:	2a45      	cmp	r2, #69	; 0x45
 800a4ac:	d113      	bne.n	800a4d6 <_strtod_l+0x19e>
 800a4ae:	b91e      	cbnz	r6, 800a4b8 <_strtod_l+0x180>
 800a4b0:	9a05      	ldr	r2, [sp, #20]
 800a4b2:	4302      	orrs	r2, r0
 800a4b4:	d094      	beq.n	800a3e0 <_strtod_l+0xa8>
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a4ba:	1c6a      	adds	r2, r5, #1
 800a4bc:	9219      	str	r2, [sp, #100]	; 0x64
 800a4be:	786a      	ldrb	r2, [r5, #1]
 800a4c0:	2a2b      	cmp	r2, #43	; 0x2b
 800a4c2:	d074      	beq.n	800a5ae <_strtod_l+0x276>
 800a4c4:	2a2d      	cmp	r2, #45	; 0x2d
 800a4c6:	d078      	beq.n	800a5ba <_strtod_l+0x282>
 800a4c8:	f04f 0c00 	mov.w	ip, #0
 800a4cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a4d0:	2909      	cmp	r1, #9
 800a4d2:	d97f      	bls.n	800a5d4 <_strtod_l+0x29c>
 800a4d4:	9519      	str	r5, [sp, #100]	; 0x64
 800a4d6:	2700      	movs	r7, #0
 800a4d8:	e09e      	b.n	800a618 <_strtod_l+0x2e0>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	e7c8      	b.n	800a470 <_strtod_l+0x138>
 800a4de:	f1bb 0f08 	cmp.w	fp, #8
 800a4e2:	bfd8      	it	le
 800a4e4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800a4e6:	f100 0001 	add.w	r0, r0, #1
 800a4ea:	bfd6      	itet	le
 800a4ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4f0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a4f4:	930a      	strle	r3, [sp, #40]	; 0x28
 800a4f6:	f10b 0b01 	add.w	fp, fp, #1
 800a4fa:	9019      	str	r0, [sp, #100]	; 0x64
 800a4fc:	e7c1      	b.n	800a482 <_strtod_l+0x14a>
 800a4fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	9219      	str	r2, [sp, #100]	; 0x64
 800a504:	785a      	ldrb	r2, [r3, #1]
 800a506:	f1bb 0f00 	cmp.w	fp, #0
 800a50a:	d037      	beq.n	800a57c <_strtod_l+0x244>
 800a50c:	465e      	mov	r6, fp
 800a50e:	9008      	str	r0, [sp, #32]
 800a510:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a514:	2b09      	cmp	r3, #9
 800a516:	d912      	bls.n	800a53e <_strtod_l+0x206>
 800a518:	2301      	movs	r3, #1
 800a51a:	e7c4      	b.n	800a4a6 <_strtod_l+0x16e>
 800a51c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a51e:	3001      	adds	r0, #1
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	9219      	str	r2, [sp, #100]	; 0x64
 800a524:	785a      	ldrb	r2, [r3, #1]
 800a526:	2a30      	cmp	r2, #48	; 0x30
 800a528:	d0f8      	beq.n	800a51c <_strtod_l+0x1e4>
 800a52a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a52e:	2b08      	cmp	r3, #8
 800a530:	f200 84e4 	bhi.w	800aefc <_strtod_l+0xbc4>
 800a534:	9008      	str	r0, [sp, #32]
 800a536:	2000      	movs	r0, #0
 800a538:	4606      	mov	r6, r0
 800a53a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a53e:	3a30      	subs	r2, #48	; 0x30
 800a540:	f100 0301 	add.w	r3, r0, #1
 800a544:	d014      	beq.n	800a570 <_strtod_l+0x238>
 800a546:	9908      	ldr	r1, [sp, #32]
 800a548:	eb00 0c06 	add.w	ip, r0, r6
 800a54c:	4419      	add	r1, r3
 800a54e:	9108      	str	r1, [sp, #32]
 800a550:	4633      	mov	r3, r6
 800a552:	210a      	movs	r1, #10
 800a554:	4563      	cmp	r3, ip
 800a556:	d113      	bne.n	800a580 <_strtod_l+0x248>
 800a558:	1833      	adds	r3, r6, r0
 800a55a:	2b08      	cmp	r3, #8
 800a55c:	f106 0601 	add.w	r6, r6, #1
 800a560:	4406      	add	r6, r0
 800a562:	dc1a      	bgt.n	800a59a <_strtod_l+0x262>
 800a564:	230a      	movs	r3, #10
 800a566:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a568:	fb03 2301 	mla	r3, r3, r1, r2
 800a56c:	930a      	str	r3, [sp, #40]	; 0x28
 800a56e:	2300      	movs	r3, #0
 800a570:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a572:	4618      	mov	r0, r3
 800a574:	1c51      	adds	r1, r2, #1
 800a576:	9119      	str	r1, [sp, #100]	; 0x64
 800a578:	7852      	ldrb	r2, [r2, #1]
 800a57a:	e7c9      	b.n	800a510 <_strtod_l+0x1d8>
 800a57c:	4658      	mov	r0, fp
 800a57e:	e7d2      	b.n	800a526 <_strtod_l+0x1ee>
 800a580:	2b08      	cmp	r3, #8
 800a582:	f103 0301 	add.w	r3, r3, #1
 800a586:	dc03      	bgt.n	800a590 <_strtod_l+0x258>
 800a588:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a58a:	434f      	muls	r7, r1
 800a58c:	970a      	str	r7, [sp, #40]	; 0x28
 800a58e:	e7e1      	b.n	800a554 <_strtod_l+0x21c>
 800a590:	2b10      	cmp	r3, #16
 800a592:	bfd8      	it	le
 800a594:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a598:	e7dc      	b.n	800a554 <_strtod_l+0x21c>
 800a59a:	2e10      	cmp	r6, #16
 800a59c:	bfdc      	itt	le
 800a59e:	230a      	movle	r3, #10
 800a5a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a5a4:	e7e3      	b.n	800a56e <_strtod_l+0x236>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e780      	b.n	800a4b0 <_strtod_l+0x178>
 800a5ae:	f04f 0c00 	mov.w	ip, #0
 800a5b2:	1caa      	adds	r2, r5, #2
 800a5b4:	9219      	str	r2, [sp, #100]	; 0x64
 800a5b6:	78aa      	ldrb	r2, [r5, #2]
 800a5b8:	e788      	b.n	800a4cc <_strtod_l+0x194>
 800a5ba:	f04f 0c01 	mov.w	ip, #1
 800a5be:	e7f8      	b.n	800a5b2 <_strtod_l+0x27a>
 800a5c0:	0800e600 	.word	0x0800e600
 800a5c4:	7ff00000 	.word	0x7ff00000
 800a5c8:	0800e5fc 	.word	0x0800e5fc
 800a5cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5ce:	1c51      	adds	r1, r2, #1
 800a5d0:	9119      	str	r1, [sp, #100]	; 0x64
 800a5d2:	7852      	ldrb	r2, [r2, #1]
 800a5d4:	2a30      	cmp	r2, #48	; 0x30
 800a5d6:	d0f9      	beq.n	800a5cc <_strtod_l+0x294>
 800a5d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a5dc:	2908      	cmp	r1, #8
 800a5de:	f63f af7a 	bhi.w	800a4d6 <_strtod_l+0x19e>
 800a5e2:	3a30      	subs	r2, #48	; 0x30
 800a5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5e8:	920c      	str	r2, [sp, #48]	; 0x30
 800a5ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5ec:	1c57      	adds	r7, r2, #1
 800a5ee:	9719      	str	r7, [sp, #100]	; 0x64
 800a5f0:	7852      	ldrb	r2, [r2, #1]
 800a5f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a5f6:	f1be 0f09 	cmp.w	lr, #9
 800a5fa:	d938      	bls.n	800a66e <_strtod_l+0x336>
 800a5fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5fe:	1a7f      	subs	r7, r7, r1
 800a600:	2f08      	cmp	r7, #8
 800a602:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a606:	dc03      	bgt.n	800a610 <_strtod_l+0x2d8>
 800a608:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a60a:	428f      	cmp	r7, r1
 800a60c:	bfa8      	it	ge
 800a60e:	460f      	movge	r7, r1
 800a610:	f1bc 0f00 	cmp.w	ip, #0
 800a614:	d000      	beq.n	800a618 <_strtod_l+0x2e0>
 800a616:	427f      	negs	r7, r7
 800a618:	2e00      	cmp	r6, #0
 800a61a:	d14f      	bne.n	800a6bc <_strtod_l+0x384>
 800a61c:	9905      	ldr	r1, [sp, #20]
 800a61e:	4301      	orrs	r1, r0
 800a620:	f47f aec3 	bne.w	800a3aa <_strtod_l+0x72>
 800a624:	2b00      	cmp	r3, #0
 800a626:	f47f aedb 	bne.w	800a3e0 <_strtod_l+0xa8>
 800a62a:	2a69      	cmp	r2, #105	; 0x69
 800a62c:	d029      	beq.n	800a682 <_strtod_l+0x34a>
 800a62e:	dc26      	bgt.n	800a67e <_strtod_l+0x346>
 800a630:	2a49      	cmp	r2, #73	; 0x49
 800a632:	d026      	beq.n	800a682 <_strtod_l+0x34a>
 800a634:	2a4e      	cmp	r2, #78	; 0x4e
 800a636:	f47f aed3 	bne.w	800a3e0 <_strtod_l+0xa8>
 800a63a:	499a      	ldr	r1, [pc, #616]	; (800a8a4 <_strtod_l+0x56c>)
 800a63c:	a819      	add	r0, sp, #100	; 0x64
 800a63e:	f002 fc15 	bl	800ce6c <__match>
 800a642:	2800      	cmp	r0, #0
 800a644:	f43f aecc 	beq.w	800a3e0 <_strtod_l+0xa8>
 800a648:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	2b28      	cmp	r3, #40	; 0x28
 800a64e:	d12f      	bne.n	800a6b0 <_strtod_l+0x378>
 800a650:	4995      	ldr	r1, [pc, #596]	; (800a8a8 <_strtod_l+0x570>)
 800a652:	aa1c      	add	r2, sp, #112	; 0x70
 800a654:	a819      	add	r0, sp, #100	; 0x64
 800a656:	f002 fc1d 	bl	800ce94 <__hexnan>
 800a65a:	2805      	cmp	r0, #5
 800a65c:	d128      	bne.n	800a6b0 <_strtod_l+0x378>
 800a65e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a660:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a664:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a668:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a66c:	e69d      	b.n	800a3aa <_strtod_l+0x72>
 800a66e:	210a      	movs	r1, #10
 800a670:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a672:	fb01 2107 	mla	r1, r1, r7, r2
 800a676:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a67a:	9209      	str	r2, [sp, #36]	; 0x24
 800a67c:	e7b5      	b.n	800a5ea <_strtod_l+0x2b2>
 800a67e:	2a6e      	cmp	r2, #110	; 0x6e
 800a680:	e7d9      	b.n	800a636 <_strtod_l+0x2fe>
 800a682:	498a      	ldr	r1, [pc, #552]	; (800a8ac <_strtod_l+0x574>)
 800a684:	a819      	add	r0, sp, #100	; 0x64
 800a686:	f002 fbf1 	bl	800ce6c <__match>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f43f aea8 	beq.w	800a3e0 <_strtod_l+0xa8>
 800a690:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a692:	4987      	ldr	r1, [pc, #540]	; (800a8b0 <_strtod_l+0x578>)
 800a694:	3b01      	subs	r3, #1
 800a696:	a819      	add	r0, sp, #100	; 0x64
 800a698:	9319      	str	r3, [sp, #100]	; 0x64
 800a69a:	f002 fbe7 	bl	800ce6c <__match>
 800a69e:	b910      	cbnz	r0, 800a6a6 <_strtod_l+0x36e>
 800a6a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	9319      	str	r3, [sp, #100]	; 0x64
 800a6a6:	f04f 0800 	mov.w	r8, #0
 800a6aa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800a8b4 <_strtod_l+0x57c>
 800a6ae:	e67c      	b.n	800a3aa <_strtod_l+0x72>
 800a6b0:	4881      	ldr	r0, [pc, #516]	; (800a8b8 <_strtod_l+0x580>)
 800a6b2:	f001 fa73 	bl	800bb9c <nan>
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	4689      	mov	r9, r1
 800a6ba:	e676      	b.n	800a3aa <_strtod_l+0x72>
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	f1bb 0f00 	cmp.w	fp, #0
 800a6c2:	bf08      	it	eq
 800a6c4:	46b3      	moveq	fp, r6
 800a6c6:	1afb      	subs	r3, r7, r3
 800a6c8:	2e10      	cmp	r6, #16
 800a6ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6cc:	4635      	mov	r5, r6
 800a6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d0:	bfa8      	it	ge
 800a6d2:	2510      	movge	r5, #16
 800a6d4:	f7f5 fef6 	bl	80004c4 <__aeabi_ui2d>
 800a6d8:	2e09      	cmp	r6, #9
 800a6da:	4680      	mov	r8, r0
 800a6dc:	4689      	mov	r9, r1
 800a6de:	dd13      	ble.n	800a708 <_strtod_l+0x3d0>
 800a6e0:	4b76      	ldr	r3, [pc, #472]	; (800a8bc <_strtod_l+0x584>)
 800a6e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6ea:	f7f5 ff65 	bl	80005b8 <__aeabi_dmul>
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	4650      	mov	r0, sl
 800a6f2:	4689      	mov	r9, r1
 800a6f4:	f7f5 fee6 	bl	80004c4 <__aeabi_ui2d>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	4649      	mov	r1, r9
 800a700:	f7f5 fda4 	bl	800024c <__adddf3>
 800a704:	4680      	mov	r8, r0
 800a706:	4689      	mov	r9, r1
 800a708:	2e0f      	cmp	r6, #15
 800a70a:	dc36      	bgt.n	800a77a <_strtod_l+0x442>
 800a70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f43f ae4b 	beq.w	800a3aa <_strtod_l+0x72>
 800a714:	dd22      	ble.n	800a75c <_strtod_l+0x424>
 800a716:	2b16      	cmp	r3, #22
 800a718:	dc09      	bgt.n	800a72e <_strtod_l+0x3f6>
 800a71a:	4968      	ldr	r1, [pc, #416]	; (800a8bc <_strtod_l+0x584>)
 800a71c:	4642      	mov	r2, r8
 800a71e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a722:	464b      	mov	r3, r9
 800a724:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a728:	f7f5 ff46 	bl	80005b8 <__aeabi_dmul>
 800a72c:	e7c3      	b.n	800a6b6 <_strtod_l+0x37e>
 800a72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a730:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a734:	4293      	cmp	r3, r2
 800a736:	db20      	blt.n	800a77a <_strtod_l+0x442>
 800a738:	4c60      	ldr	r4, [pc, #384]	; (800a8bc <_strtod_l+0x584>)
 800a73a:	f1c6 060f 	rsb	r6, r6, #15
 800a73e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a742:	4642      	mov	r2, r8
 800a744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a748:	464b      	mov	r3, r9
 800a74a:	f7f5 ff35 	bl	80005b8 <__aeabi_dmul>
 800a74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a750:	1b9e      	subs	r6, r3, r6
 800a752:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a756:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a75a:	e7e5      	b.n	800a728 <_strtod_l+0x3f0>
 800a75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75e:	3316      	adds	r3, #22
 800a760:	db0b      	blt.n	800a77a <_strtod_l+0x442>
 800a762:	9b08      	ldr	r3, [sp, #32]
 800a764:	4640      	mov	r0, r8
 800a766:	1bdf      	subs	r7, r3, r7
 800a768:	4b54      	ldr	r3, [pc, #336]	; (800a8bc <_strtod_l+0x584>)
 800a76a:	4649      	mov	r1, r9
 800a76c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a774:	f7f6 f84a 	bl	800080c <__aeabi_ddiv>
 800a778:	e79d      	b.n	800a6b6 <_strtod_l+0x37e>
 800a77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a77c:	1b75      	subs	r5, r6, r5
 800a77e:	441d      	add	r5, r3
 800a780:	2d00      	cmp	r5, #0
 800a782:	dd70      	ble.n	800a866 <_strtod_l+0x52e>
 800a784:	f015 030f 	ands.w	r3, r5, #15
 800a788:	d00a      	beq.n	800a7a0 <_strtod_l+0x468>
 800a78a:	494c      	ldr	r1, [pc, #304]	; (800a8bc <_strtod_l+0x584>)
 800a78c:	4642      	mov	r2, r8
 800a78e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a792:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a796:	464b      	mov	r3, r9
 800a798:	f7f5 ff0e 	bl	80005b8 <__aeabi_dmul>
 800a79c:	4680      	mov	r8, r0
 800a79e:	4689      	mov	r9, r1
 800a7a0:	f035 050f 	bics.w	r5, r5, #15
 800a7a4:	d04d      	beq.n	800a842 <_strtod_l+0x50a>
 800a7a6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a7aa:	dd22      	ble.n	800a7f2 <_strtod_l+0x4ba>
 800a7ac:	2600      	movs	r6, #0
 800a7ae:	46b3      	mov	fp, r6
 800a7b0:	960b      	str	r6, [sp, #44]	; 0x2c
 800a7b2:	9608      	str	r6, [sp, #32]
 800a7b4:	2322      	movs	r3, #34	; 0x22
 800a7b6:	f04f 0800 	mov.w	r8, #0
 800a7ba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800a8b4 <_strtod_l+0x57c>
 800a7be:	6023      	str	r3, [r4, #0]
 800a7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f43f adf1 	beq.w	800a3aa <_strtod_l+0x72>
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a7cc:	f002 fd04 	bl	800d1d8 <_Bfree>
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	9908      	ldr	r1, [sp, #32]
 800a7d4:	f002 fd00 	bl	800d1d8 <_Bfree>
 800a7d8:	4659      	mov	r1, fp
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f002 fcfc 	bl	800d1d8 <_Bfree>
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7e4:	f002 fcf8 	bl	800d1d8 <_Bfree>
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f002 fcf4 	bl	800d1d8 <_Bfree>
 800a7f0:	e5db      	b.n	800a3aa <_strtod_l+0x72>
 800a7f2:	4b33      	ldr	r3, [pc, #204]	; (800a8c0 <_strtod_l+0x588>)
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	9305      	str	r3, [sp, #20]
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	469a      	mov	sl, r3
 800a7fe:	112d      	asrs	r5, r5, #4
 800a800:	2d01      	cmp	r5, #1
 800a802:	dc21      	bgt.n	800a848 <_strtod_l+0x510>
 800a804:	b10b      	cbz	r3, 800a80a <_strtod_l+0x4d2>
 800a806:	4680      	mov	r8, r0
 800a808:	4689      	mov	r9, r1
 800a80a:	492d      	ldr	r1, [pc, #180]	; (800a8c0 <_strtod_l+0x588>)
 800a80c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a810:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a814:	4642      	mov	r2, r8
 800a816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a81a:	464b      	mov	r3, r9
 800a81c:	f7f5 fecc 	bl	80005b8 <__aeabi_dmul>
 800a820:	4b24      	ldr	r3, [pc, #144]	; (800a8b4 <_strtod_l+0x57c>)
 800a822:	460a      	mov	r2, r1
 800a824:	400b      	ands	r3, r1
 800a826:	4927      	ldr	r1, [pc, #156]	; (800a8c4 <_strtod_l+0x58c>)
 800a828:	4680      	mov	r8, r0
 800a82a:	428b      	cmp	r3, r1
 800a82c:	d8be      	bhi.n	800a7ac <_strtod_l+0x474>
 800a82e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a832:	428b      	cmp	r3, r1
 800a834:	bf86      	itte	hi
 800a836:	f04f 38ff 	movhi.w	r8, #4294967295
 800a83a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a8c8 <_strtod_l+0x590>
 800a83e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a842:	2300      	movs	r3, #0
 800a844:	9305      	str	r3, [sp, #20]
 800a846:	e07b      	b.n	800a940 <_strtod_l+0x608>
 800a848:	07ea      	lsls	r2, r5, #31
 800a84a:	d505      	bpl.n	800a858 <_strtod_l+0x520>
 800a84c:	9b05      	ldr	r3, [sp, #20]
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f7f5 feb1 	bl	80005b8 <__aeabi_dmul>
 800a856:	2301      	movs	r3, #1
 800a858:	9a05      	ldr	r2, [sp, #20]
 800a85a:	f10a 0a01 	add.w	sl, sl, #1
 800a85e:	3208      	adds	r2, #8
 800a860:	106d      	asrs	r5, r5, #1
 800a862:	9205      	str	r2, [sp, #20]
 800a864:	e7cc      	b.n	800a800 <_strtod_l+0x4c8>
 800a866:	d0ec      	beq.n	800a842 <_strtod_l+0x50a>
 800a868:	426d      	negs	r5, r5
 800a86a:	f015 020f 	ands.w	r2, r5, #15
 800a86e:	d00a      	beq.n	800a886 <_strtod_l+0x54e>
 800a870:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <_strtod_l+0x584>)
 800a872:	4640      	mov	r0, r8
 800a874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a878:	4649      	mov	r1, r9
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	f7f5 ffc5 	bl	800080c <__aeabi_ddiv>
 800a882:	4680      	mov	r8, r0
 800a884:	4689      	mov	r9, r1
 800a886:	112d      	asrs	r5, r5, #4
 800a888:	d0db      	beq.n	800a842 <_strtod_l+0x50a>
 800a88a:	2d1f      	cmp	r5, #31
 800a88c:	dd1e      	ble.n	800a8cc <_strtod_l+0x594>
 800a88e:	2600      	movs	r6, #0
 800a890:	46b3      	mov	fp, r6
 800a892:	960b      	str	r6, [sp, #44]	; 0x2c
 800a894:	9608      	str	r6, [sp, #32]
 800a896:	2322      	movs	r3, #34	; 0x22
 800a898:	f04f 0800 	mov.w	r8, #0
 800a89c:	f04f 0900 	mov.w	r9, #0
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	e78d      	b.n	800a7c0 <_strtod_l+0x488>
 800a8a4:	0800e65d 	.word	0x0800e65d
 800a8a8:	0800e614 	.word	0x0800e614
 800a8ac:	0800e655 	.word	0x0800e655
 800a8b0:	0800e68f 	.word	0x0800e68f
 800a8b4:	7ff00000 	.word	0x7ff00000
 800a8b8:	0800ea21 	.word	0x0800ea21
 800a8bc:	0800e800 	.word	0x0800e800
 800a8c0:	0800e7d8 	.word	0x0800e7d8
 800a8c4:	7ca00000 	.word	0x7ca00000
 800a8c8:	7fefffff 	.word	0x7fefffff
 800a8cc:	f015 0310 	ands.w	r3, r5, #16
 800a8d0:	bf18      	it	ne
 800a8d2:	236a      	movne	r3, #106	; 0x6a
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	9305      	str	r3, [sp, #20]
 800a8d8:	4649      	mov	r1, r9
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800aba8 <_strtod_l+0x870>
 800a8e0:	07ea      	lsls	r2, r5, #31
 800a8e2:	d504      	bpl.n	800a8ee <_strtod_l+0x5b6>
 800a8e4:	e9da 2300 	ldrd	r2, r3, [sl]
 800a8e8:	f7f5 fe66 	bl	80005b8 <__aeabi_dmul>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	106d      	asrs	r5, r5, #1
 800a8f0:	f10a 0a08 	add.w	sl, sl, #8
 800a8f4:	d1f4      	bne.n	800a8e0 <_strtod_l+0x5a8>
 800a8f6:	b10b      	cbz	r3, 800a8fc <_strtod_l+0x5c4>
 800a8f8:	4680      	mov	r8, r0
 800a8fa:	4689      	mov	r9, r1
 800a8fc:	9b05      	ldr	r3, [sp, #20]
 800a8fe:	b1bb      	cbz	r3, 800a930 <_strtod_l+0x5f8>
 800a900:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a904:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a908:	2b00      	cmp	r3, #0
 800a90a:	4649      	mov	r1, r9
 800a90c:	dd10      	ble.n	800a930 <_strtod_l+0x5f8>
 800a90e:	2b1f      	cmp	r3, #31
 800a910:	f340 8128 	ble.w	800ab64 <_strtod_l+0x82c>
 800a914:	2b34      	cmp	r3, #52	; 0x34
 800a916:	bfd8      	it	le
 800a918:	f04f 33ff 	movle.w	r3, #4294967295
 800a91c:	f04f 0800 	mov.w	r8, #0
 800a920:	bfcf      	iteee	gt
 800a922:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a926:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a92a:	4093      	lslle	r3, r2
 800a92c:	ea03 0901 	andle.w	r9, r3, r1
 800a930:	2200      	movs	r2, #0
 800a932:	2300      	movs	r3, #0
 800a934:	4640      	mov	r0, r8
 800a936:	4649      	mov	r1, r9
 800a938:	f7f6 f8a6 	bl	8000a88 <__aeabi_dcmpeq>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d1a6      	bne.n	800a88e <_strtod_l+0x556>
 800a940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a942:	465a      	mov	r2, fp
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	4620      	mov	r0, r4
 800a948:	4633      	mov	r3, r6
 800a94a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a94c:	f002 fcac 	bl	800d2a8 <__s2b>
 800a950:	900b      	str	r0, [sp, #44]	; 0x2c
 800a952:	2800      	cmp	r0, #0
 800a954:	f43f af2a 	beq.w	800a7ac <_strtod_l+0x474>
 800a958:	2600      	movs	r6, #0
 800a95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a95c:	9b08      	ldr	r3, [sp, #32]
 800a95e:	2a00      	cmp	r2, #0
 800a960:	eba3 0307 	sub.w	r3, r3, r7
 800a964:	bfa8      	it	ge
 800a966:	2300      	movge	r3, #0
 800a968:	46b3      	mov	fp, r6
 800a96a:	9312      	str	r3, [sp, #72]	; 0x48
 800a96c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a970:	9316      	str	r3, [sp, #88]	; 0x58
 800a972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a974:	4620      	mov	r0, r4
 800a976:	6859      	ldr	r1, [r3, #4]
 800a978:	f002 fbee 	bl	800d158 <_Balloc>
 800a97c:	9008      	str	r0, [sp, #32]
 800a97e:	2800      	cmp	r0, #0
 800a980:	f43f af18 	beq.w	800a7b4 <_strtod_l+0x47c>
 800a984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a986:	300c      	adds	r0, #12
 800a988:	691a      	ldr	r2, [r3, #16]
 800a98a:	f103 010c 	add.w	r1, r3, #12
 800a98e:	3202      	adds	r2, #2
 800a990:	0092      	lsls	r2, r2, #2
 800a992:	f001 f8f4 	bl	800bb7e <memcpy>
 800a996:	ab1c      	add	r3, sp, #112	; 0x70
 800a998:	9301      	str	r3, [sp, #4]
 800a99a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	4642      	mov	r2, r8
 800a9a0:	464b      	mov	r3, r9
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a9a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800a9ac:	f002 ffa8 	bl	800d900 <__d2b>
 800a9b0:	901a      	str	r0, [sp, #104]	; 0x68
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	f43f aefe 	beq.w	800a7b4 <_strtod_l+0x47c>
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f002 fd0c 	bl	800d3d8 <__i2b>
 800a9c0:	4683      	mov	fp, r0
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	f43f aef6 	beq.w	800a7b4 <_strtod_l+0x47c>
 800a9c8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a9ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a9cc:	2f00      	cmp	r7, #0
 800a9ce:	bfab      	itete	ge
 800a9d0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800a9d2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a9d4:	eb07 0a03 	addge.w	sl, r7, r3
 800a9d8:	1bdd      	sublt	r5, r3, r7
 800a9da:	9b05      	ldr	r3, [sp, #20]
 800a9dc:	bfa8      	it	ge
 800a9de:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a9e0:	eba7 0703 	sub.w	r7, r7, r3
 800a9e4:	4417      	add	r7, r2
 800a9e6:	4b71      	ldr	r3, [pc, #452]	; (800abac <_strtod_l+0x874>)
 800a9e8:	f107 37ff 	add.w	r7, r7, #4294967295
 800a9ec:	bfb8      	it	lt
 800a9ee:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800a9f2:	429f      	cmp	r7, r3
 800a9f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9f8:	f280 80c7 	bge.w	800ab8a <_strtod_l+0x852>
 800a9fc:	1bdb      	subs	r3, r3, r7
 800a9fe:	2b1f      	cmp	r3, #31
 800aa00:	f04f 0101 	mov.w	r1, #1
 800aa04:	eba2 0203 	sub.w	r2, r2, r3
 800aa08:	f300 80b3 	bgt.w	800ab72 <_strtod_l+0x83a>
 800aa0c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa10:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa12:	2300      	movs	r3, #0
 800aa14:	9310      	str	r3, [sp, #64]	; 0x40
 800aa16:	eb0a 0702 	add.w	r7, sl, r2
 800aa1a:	9b05      	ldr	r3, [sp, #20]
 800aa1c:	45ba      	cmp	sl, r7
 800aa1e:	4415      	add	r5, r2
 800aa20:	441d      	add	r5, r3
 800aa22:	4653      	mov	r3, sl
 800aa24:	bfa8      	it	ge
 800aa26:	463b      	movge	r3, r7
 800aa28:	42ab      	cmp	r3, r5
 800aa2a:	bfa8      	it	ge
 800aa2c:	462b      	movge	r3, r5
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	bfc2      	ittt	gt
 800aa32:	1aff      	subgt	r7, r7, r3
 800aa34:	1aed      	subgt	r5, r5, r3
 800aa36:	ebaa 0a03 	subgt.w	sl, sl, r3
 800aa3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	dd17      	ble.n	800aa70 <_strtod_l+0x738>
 800aa40:	4659      	mov	r1, fp
 800aa42:	461a      	mov	r2, r3
 800aa44:	4620      	mov	r0, r4
 800aa46:	f002 fd85 	bl	800d554 <__pow5mult>
 800aa4a:	4683      	mov	fp, r0
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	f43f aeb1 	beq.w	800a7b4 <_strtod_l+0x47c>
 800aa52:	4601      	mov	r1, r0
 800aa54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa56:	4620      	mov	r0, r4
 800aa58:	f002 fcd4 	bl	800d404 <__multiply>
 800aa5c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f43f aea8 	beq.w	800a7b4 <_strtod_l+0x47c>
 800aa64:	4620      	mov	r0, r4
 800aa66:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aa68:	f002 fbb6 	bl	800d1d8 <_Bfree>
 800aa6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa70:	2f00      	cmp	r7, #0
 800aa72:	f300 808f 	bgt.w	800ab94 <_strtod_l+0x85c>
 800aa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dd08      	ble.n	800aa8e <_strtod_l+0x756>
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa80:	9908      	ldr	r1, [sp, #32]
 800aa82:	f002 fd67 	bl	800d554 <__pow5mult>
 800aa86:	9008      	str	r0, [sp, #32]
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	f43f ae93 	beq.w	800a7b4 <_strtod_l+0x47c>
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	dd08      	ble.n	800aaa4 <_strtod_l+0x76c>
 800aa92:	462a      	mov	r2, r5
 800aa94:	4620      	mov	r0, r4
 800aa96:	9908      	ldr	r1, [sp, #32]
 800aa98:	f002 fdb6 	bl	800d608 <__lshift>
 800aa9c:	9008      	str	r0, [sp, #32]
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f43f ae88 	beq.w	800a7b4 <_strtod_l+0x47c>
 800aaa4:	f1ba 0f00 	cmp.w	sl, #0
 800aaa8:	dd08      	ble.n	800aabc <_strtod_l+0x784>
 800aaaa:	4659      	mov	r1, fp
 800aaac:	4652      	mov	r2, sl
 800aaae:	4620      	mov	r0, r4
 800aab0:	f002 fdaa 	bl	800d608 <__lshift>
 800aab4:	4683      	mov	fp, r0
 800aab6:	2800      	cmp	r0, #0
 800aab8:	f43f ae7c 	beq.w	800a7b4 <_strtod_l+0x47c>
 800aabc:	4620      	mov	r0, r4
 800aabe:	9a08      	ldr	r2, [sp, #32]
 800aac0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aac2:	f002 fe29 	bl	800d718 <__mdiff>
 800aac6:	4606      	mov	r6, r0
 800aac8:	2800      	cmp	r0, #0
 800aaca:	f43f ae73 	beq.w	800a7b4 <_strtod_l+0x47c>
 800aace:	2500      	movs	r5, #0
 800aad0:	68c3      	ldr	r3, [r0, #12]
 800aad2:	4659      	mov	r1, fp
 800aad4:	60c5      	str	r5, [r0, #12]
 800aad6:	930a      	str	r3, [sp, #40]	; 0x28
 800aad8:	f002 fe02 	bl	800d6e0 <__mcmp>
 800aadc:	42a8      	cmp	r0, r5
 800aade:	da6b      	bge.n	800abb8 <_strtod_l+0x880>
 800aae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae2:	ea53 0308 	orrs.w	r3, r3, r8
 800aae6:	f040 808f 	bne.w	800ac08 <_strtod_l+0x8d0>
 800aaea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f040 808a 	bne.w	800ac08 <_strtod_l+0x8d0>
 800aaf4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aaf8:	0d1b      	lsrs	r3, r3, #20
 800aafa:	051b      	lsls	r3, r3, #20
 800aafc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ab00:	f240 8082 	bls.w	800ac08 <_strtod_l+0x8d0>
 800ab04:	6973      	ldr	r3, [r6, #20]
 800ab06:	b913      	cbnz	r3, 800ab0e <_strtod_l+0x7d6>
 800ab08:	6933      	ldr	r3, [r6, #16]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	dd7c      	ble.n	800ac08 <_strtod_l+0x8d0>
 800ab0e:	4631      	mov	r1, r6
 800ab10:	2201      	movs	r2, #1
 800ab12:	4620      	mov	r0, r4
 800ab14:	f002 fd78 	bl	800d608 <__lshift>
 800ab18:	4659      	mov	r1, fp
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	f002 fde0 	bl	800d6e0 <__mcmp>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	dd71      	ble.n	800ac08 <_strtod_l+0x8d0>
 800ab24:	9905      	ldr	r1, [sp, #20]
 800ab26:	464b      	mov	r3, r9
 800ab28:	4a21      	ldr	r2, [pc, #132]	; (800abb0 <_strtod_l+0x878>)
 800ab2a:	2900      	cmp	r1, #0
 800ab2c:	f000 808d 	beq.w	800ac4a <_strtod_l+0x912>
 800ab30:	ea02 0109 	and.w	r1, r2, r9
 800ab34:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ab38:	f300 8087 	bgt.w	800ac4a <_strtod_l+0x912>
 800ab3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ab40:	f77f aea9 	ble.w	800a896 <_strtod_l+0x55e>
 800ab44:	4640      	mov	r0, r8
 800ab46:	4649      	mov	r1, r9
 800ab48:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <_strtod_l+0x87c>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f7f5 fd34 	bl	80005b8 <__aeabi_dmul>
 800ab50:	4b17      	ldr	r3, [pc, #92]	; (800abb0 <_strtod_l+0x878>)
 800ab52:	4680      	mov	r8, r0
 800ab54:	400b      	ands	r3, r1
 800ab56:	4689      	mov	r9, r1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f47f ae35 	bne.w	800a7c8 <_strtod_l+0x490>
 800ab5e:	2322      	movs	r3, #34	; 0x22
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	e631      	b.n	800a7c8 <_strtod_l+0x490>
 800ab64:	f04f 32ff 	mov.w	r2, #4294967295
 800ab68:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6c:	ea03 0808 	and.w	r8, r3, r8
 800ab70:	e6de      	b.n	800a930 <_strtod_l+0x5f8>
 800ab72:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800ab76:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800ab7a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800ab7e:	37e2      	adds	r7, #226	; 0xe2
 800ab80:	fa01 f307 	lsl.w	r3, r1, r7
 800ab84:	9310      	str	r3, [sp, #64]	; 0x40
 800ab86:	9113      	str	r1, [sp, #76]	; 0x4c
 800ab88:	e745      	b.n	800aa16 <_strtod_l+0x6de>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9310      	str	r3, [sp, #64]	; 0x40
 800ab8e:	2301      	movs	r3, #1
 800ab90:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab92:	e740      	b.n	800aa16 <_strtod_l+0x6de>
 800ab94:	463a      	mov	r2, r7
 800ab96:	4620      	mov	r0, r4
 800ab98:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ab9a:	f002 fd35 	bl	800d608 <__lshift>
 800ab9e:	901a      	str	r0, [sp, #104]	; 0x68
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f47f af68 	bne.w	800aa76 <_strtod_l+0x73e>
 800aba6:	e605      	b.n	800a7b4 <_strtod_l+0x47c>
 800aba8:	0800e628 	.word	0x0800e628
 800abac:	fffffc02 	.word	0xfffffc02
 800abb0:	7ff00000 	.word	0x7ff00000
 800abb4:	39500000 	.word	0x39500000
 800abb8:	46ca      	mov	sl, r9
 800abba:	d165      	bne.n	800ac88 <_strtod_l+0x950>
 800abbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abbe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abc2:	b352      	cbz	r2, 800ac1a <_strtod_l+0x8e2>
 800abc4:	4a9e      	ldr	r2, [pc, #632]	; (800ae40 <_strtod_l+0xb08>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d12a      	bne.n	800ac20 <_strtod_l+0x8e8>
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	4641      	mov	r1, r8
 800abce:	b1fb      	cbz	r3, 800ac10 <_strtod_l+0x8d8>
 800abd0:	4b9c      	ldr	r3, [pc, #624]	; (800ae44 <_strtod_l+0xb0c>)
 800abd2:	f04f 32ff 	mov.w	r2, #4294967295
 800abd6:	ea09 0303 	and.w	r3, r9, r3
 800abda:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800abde:	d81a      	bhi.n	800ac16 <_strtod_l+0x8de>
 800abe0:	0d1b      	lsrs	r3, r3, #20
 800abe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abe6:	fa02 f303 	lsl.w	r3, r2, r3
 800abea:	4299      	cmp	r1, r3
 800abec:	d118      	bne.n	800ac20 <_strtod_l+0x8e8>
 800abee:	4b96      	ldr	r3, [pc, #600]	; (800ae48 <_strtod_l+0xb10>)
 800abf0:	459a      	cmp	sl, r3
 800abf2:	d102      	bne.n	800abfa <_strtod_l+0x8c2>
 800abf4:	3101      	adds	r1, #1
 800abf6:	f43f addd 	beq.w	800a7b4 <_strtod_l+0x47c>
 800abfa:	f04f 0800 	mov.w	r8, #0
 800abfe:	4b91      	ldr	r3, [pc, #580]	; (800ae44 <_strtod_l+0xb0c>)
 800ac00:	ea0a 0303 	and.w	r3, sl, r3
 800ac04:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ac08:	9b05      	ldr	r3, [sp, #20]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d19a      	bne.n	800ab44 <_strtod_l+0x80c>
 800ac0e:	e5db      	b.n	800a7c8 <_strtod_l+0x490>
 800ac10:	f04f 33ff 	mov.w	r3, #4294967295
 800ac14:	e7e9      	b.n	800abea <_strtod_l+0x8b2>
 800ac16:	4613      	mov	r3, r2
 800ac18:	e7e7      	b.n	800abea <_strtod_l+0x8b2>
 800ac1a:	ea53 0308 	orrs.w	r3, r3, r8
 800ac1e:	d081      	beq.n	800ab24 <_strtod_l+0x7ec>
 800ac20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac22:	b1e3      	cbz	r3, 800ac5e <_strtod_l+0x926>
 800ac24:	ea13 0f0a 	tst.w	r3, sl
 800ac28:	d0ee      	beq.n	800ac08 <_strtod_l+0x8d0>
 800ac2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	4649      	mov	r1, r9
 800ac30:	9a05      	ldr	r2, [sp, #20]
 800ac32:	b1c3      	cbz	r3, 800ac66 <_strtod_l+0x92e>
 800ac34:	f7ff fb5d 	bl	800a2f2 <sulp>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac40:	f7f5 fb04 	bl	800024c <__adddf3>
 800ac44:	4680      	mov	r8, r0
 800ac46:	4689      	mov	r9, r1
 800ac48:	e7de      	b.n	800ac08 <_strtod_l+0x8d0>
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac50:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ac54:	f04f 38ff 	mov.w	r8, #4294967295
 800ac58:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ac5c:	e7d4      	b.n	800ac08 <_strtod_l+0x8d0>
 800ac5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac60:	ea13 0f08 	tst.w	r3, r8
 800ac64:	e7e0      	b.n	800ac28 <_strtod_l+0x8f0>
 800ac66:	f7ff fb44 	bl	800a2f2 <sulp>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ac72:	f7f5 fae9 	bl	8000248 <__aeabi_dsub>
 800ac76:	2200      	movs	r2, #0
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4680      	mov	r8, r0
 800ac7c:	4689      	mov	r9, r1
 800ac7e:	f7f5 ff03 	bl	8000a88 <__aeabi_dcmpeq>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d0c0      	beq.n	800ac08 <_strtod_l+0x8d0>
 800ac86:	e606      	b.n	800a896 <_strtod_l+0x55e>
 800ac88:	4659      	mov	r1, fp
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f002 fe8e 	bl	800d9ac <__ratio>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac9e:	f7f5 ff07 	bl	8000ab0 <__aeabi_dcmple>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d06f      	beq.n	800ad86 <_strtod_l+0xa4e>
 800aca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d17c      	bne.n	800ada6 <_strtod_l+0xa6e>
 800acac:	f1b8 0f00 	cmp.w	r8, #0
 800acb0:	d159      	bne.n	800ad66 <_strtod_l+0xa2e>
 800acb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d17b      	bne.n	800adb2 <_strtod_l+0xa7a>
 800acba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acbe:	2200      	movs	r2, #0
 800acc0:	4b62      	ldr	r3, [pc, #392]	; (800ae4c <_strtod_l+0xb14>)
 800acc2:	f7f5 feeb 	bl	8000a9c <__aeabi_dcmplt>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d15a      	bne.n	800ad80 <_strtod_l+0xa48>
 800acca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acce:	2200      	movs	r2, #0
 800acd0:	4b5f      	ldr	r3, [pc, #380]	; (800ae50 <_strtod_l+0xb18>)
 800acd2:	f7f5 fc71 	bl	80005b8 <__aeabi_dmul>
 800acd6:	4605      	mov	r5, r0
 800acd8:	460f      	mov	r7, r1
 800acda:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800acde:	9506      	str	r5, [sp, #24]
 800ace0:	9307      	str	r3, [sp, #28]
 800ace2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ace6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800acea:	4b56      	ldr	r3, [pc, #344]	; (800ae44 <_strtod_l+0xb0c>)
 800acec:	4a55      	ldr	r2, [pc, #340]	; (800ae44 <_strtod_l+0xb0c>)
 800acee:	ea0a 0303 	and.w	r3, sl, r3
 800acf2:	9313      	str	r3, [sp, #76]	; 0x4c
 800acf4:	4b57      	ldr	r3, [pc, #348]	; (800ae54 <_strtod_l+0xb1c>)
 800acf6:	ea0a 0202 	and.w	r2, sl, r2
 800acfa:	429a      	cmp	r2, r3
 800acfc:	f040 80b0 	bne.w	800ae60 <_strtod_l+0xb28>
 800ad00:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ad04:	4640      	mov	r0, r8
 800ad06:	4649      	mov	r1, r9
 800ad08:	f002 fd92 	bl	800d830 <__ulp>
 800ad0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad10:	f7f5 fc52 	bl	80005b8 <__aeabi_dmul>
 800ad14:	4642      	mov	r2, r8
 800ad16:	464b      	mov	r3, r9
 800ad18:	f7f5 fa98 	bl	800024c <__adddf3>
 800ad1c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800ae44 <_strtod_l+0xb0c>
 800ad20:	4a4d      	ldr	r2, [pc, #308]	; (800ae58 <_strtod_l+0xb20>)
 800ad22:	ea01 0a0a 	and.w	sl, r1, sl
 800ad26:	4592      	cmp	sl, r2
 800ad28:	4680      	mov	r8, r0
 800ad2a:	d948      	bls.n	800adbe <_strtod_l+0xa86>
 800ad2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad2e:	4b46      	ldr	r3, [pc, #280]	; (800ae48 <_strtod_l+0xb10>)
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d103      	bne.n	800ad3c <_strtod_l+0xa04>
 800ad34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad36:	3301      	adds	r3, #1
 800ad38:	f43f ad3c 	beq.w	800a7b4 <_strtod_l+0x47c>
 800ad3c:	f04f 38ff 	mov.w	r8, #4294967295
 800ad40:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800ae48 <_strtod_l+0xb10>
 800ad44:	4620      	mov	r0, r4
 800ad46:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad48:	f002 fa46 	bl	800d1d8 <_Bfree>
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	9908      	ldr	r1, [sp, #32]
 800ad50:	f002 fa42 	bl	800d1d8 <_Bfree>
 800ad54:	4659      	mov	r1, fp
 800ad56:	4620      	mov	r0, r4
 800ad58:	f002 fa3e 	bl	800d1d8 <_Bfree>
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f002 fa3a 	bl	800d1d8 <_Bfree>
 800ad64:	e605      	b.n	800a972 <_strtod_l+0x63a>
 800ad66:	f1b8 0f01 	cmp.w	r8, #1
 800ad6a:	d103      	bne.n	800ad74 <_strtod_l+0xa3c>
 800ad6c:	f1b9 0f00 	cmp.w	r9, #0
 800ad70:	f43f ad91 	beq.w	800a896 <_strtod_l+0x55e>
 800ad74:	2200      	movs	r2, #0
 800ad76:	4b39      	ldr	r3, [pc, #228]	; (800ae5c <_strtod_l+0xb24>)
 800ad78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad7e:	e016      	b.n	800adae <_strtod_l+0xa76>
 800ad80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad82:	4f33      	ldr	r7, [pc, #204]	; (800ae50 <_strtod_l+0xb18>)
 800ad84:	e7a9      	b.n	800acda <_strtod_l+0x9a2>
 800ad86:	4b32      	ldr	r3, [pc, #200]	; (800ae50 <_strtod_l+0xb18>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad8e:	f7f5 fc13 	bl	80005b8 <__aeabi_dmul>
 800ad92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad94:	4605      	mov	r5, r0
 800ad96:	460f      	mov	r7, r1
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d09e      	beq.n	800acda <_strtod_l+0x9a2>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ada4:	e79d      	b.n	800ace2 <_strtod_l+0x9aa>
 800ada6:	2200      	movs	r2, #0
 800ada8:	4b28      	ldr	r3, [pc, #160]	; (800ae4c <_strtod_l+0xb14>)
 800adaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adae:	4f27      	ldr	r7, [pc, #156]	; (800ae4c <_strtod_l+0xb14>)
 800adb0:	e797      	b.n	800ace2 <_strtod_l+0x9aa>
 800adb2:	2200      	movs	r2, #0
 800adb4:	4b29      	ldr	r3, [pc, #164]	; (800ae5c <_strtod_l+0xb24>)
 800adb6:	4645      	mov	r5, r8
 800adb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adbc:	e7f7      	b.n	800adae <_strtod_l+0xa76>
 800adbe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800adc2:	9b05      	ldr	r3, [sp, #20]
 800adc4:	46ca      	mov	sl, r9
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1bc      	bne.n	800ad44 <_strtod_l+0xa0c>
 800adca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800add0:	0d1b      	lsrs	r3, r3, #20
 800add2:	051b      	lsls	r3, r3, #20
 800add4:	429a      	cmp	r2, r3
 800add6:	d1b5      	bne.n	800ad44 <_strtod_l+0xa0c>
 800add8:	4628      	mov	r0, r5
 800adda:	4639      	mov	r1, r7
 800addc:	f7f6 fa46 	bl	800126c <__aeabi_d2lz>
 800ade0:	f7f5 fbbc 	bl	800055c <__aeabi_l2d>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	4628      	mov	r0, r5
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fa2c 	bl	8000248 <__aeabi_dsub>
 800adf0:	460b      	mov	r3, r1
 800adf2:	4602      	mov	r2, r0
 800adf4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800adf8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800adfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adfe:	ea4a 0a08 	orr.w	sl, sl, r8
 800ae02:	ea5a 0a03 	orrs.w	sl, sl, r3
 800ae06:	d06c      	beq.n	800aee2 <_strtod_l+0xbaa>
 800ae08:	a309      	add	r3, pc, #36	; (adr r3, 800ae30 <_strtod_l+0xaf8>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	f7f5 fe45 	bl	8000a9c <__aeabi_dcmplt>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	f47f acd8 	bne.w	800a7c8 <_strtod_l+0x490>
 800ae18:	a307      	add	r3, pc, #28	; (adr r3, 800ae38 <_strtod_l+0xb00>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae22:	f7f5 fe59 	bl	8000ad8 <__aeabi_dcmpgt>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d08c      	beq.n	800ad44 <_strtod_l+0xa0c>
 800ae2a:	e4cd      	b.n	800a7c8 <_strtod_l+0x490>
 800ae2c:	f3af 8000 	nop.w
 800ae30:	94a03595 	.word	0x94a03595
 800ae34:	3fdfffff 	.word	0x3fdfffff
 800ae38:	35afe535 	.word	0x35afe535
 800ae3c:	3fe00000 	.word	0x3fe00000
 800ae40:	000fffff 	.word	0x000fffff
 800ae44:	7ff00000 	.word	0x7ff00000
 800ae48:	7fefffff 	.word	0x7fefffff
 800ae4c:	3ff00000 	.word	0x3ff00000
 800ae50:	3fe00000 	.word	0x3fe00000
 800ae54:	7fe00000 	.word	0x7fe00000
 800ae58:	7c9fffff 	.word	0x7c9fffff
 800ae5c:	bff00000 	.word	0xbff00000
 800ae60:	9b05      	ldr	r3, [sp, #20]
 800ae62:	b333      	cbz	r3, 800aeb2 <_strtod_l+0xb7a>
 800ae64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae6a:	d822      	bhi.n	800aeb2 <_strtod_l+0xb7a>
 800ae6c:	a328      	add	r3, pc, #160	; (adr r3, 800af10 <_strtod_l+0xbd8>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	4628      	mov	r0, r5
 800ae74:	4639      	mov	r1, r7
 800ae76:	f7f5 fe1b 	bl	8000ab0 <__aeabi_dcmple>
 800ae7a:	b1a0      	cbz	r0, 800aea6 <_strtod_l+0xb6e>
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f7f5 fe72 	bl	8000b68 <__aeabi_d2uiz>
 800ae84:	2801      	cmp	r0, #1
 800ae86:	bf38      	it	cc
 800ae88:	2001      	movcc	r0, #1
 800ae8a:	f7f5 fb1b 	bl	80004c4 <__aeabi_ui2d>
 800ae8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae90:	4605      	mov	r5, r0
 800ae92:	460f      	mov	r7, r1
 800ae94:	bb03      	cbnz	r3, 800aed8 <_strtod_l+0xba0>
 800ae96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae9a:	9014      	str	r0, [sp, #80]	; 0x50
 800ae9c:	9315      	str	r3, [sp, #84]	; 0x54
 800ae9e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aea2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800aea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aea8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aeaa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aeae:	1a9b      	subs	r3, r3, r2
 800aeb0:	9311      	str	r3, [sp, #68]	; 0x44
 800aeb2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aeb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aeb6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800aeba:	f002 fcb9 	bl	800d830 <__ulp>
 800aebe:	4602      	mov	r2, r0
 800aec0:	460b      	mov	r3, r1
 800aec2:	4640      	mov	r0, r8
 800aec4:	4649      	mov	r1, r9
 800aec6:	f7f5 fb77 	bl	80005b8 <__aeabi_dmul>
 800aeca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aece:	f7f5 f9bd 	bl	800024c <__adddf3>
 800aed2:	4680      	mov	r8, r0
 800aed4:	4689      	mov	r9, r1
 800aed6:	e774      	b.n	800adc2 <_strtod_l+0xa8a>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800aee0:	e7dd      	b.n	800ae9e <_strtod_l+0xb66>
 800aee2:	a30d      	add	r3, pc, #52	; (adr r3, 800af18 <_strtod_l+0xbe0>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 fdd8 	bl	8000a9c <__aeabi_dcmplt>
 800aeec:	e79b      	b.n	800ae26 <_strtod_l+0xaee>
 800aeee:	2300      	movs	r3, #0
 800aef0:	930e      	str	r3, [sp, #56]	; 0x38
 800aef2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aef4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	f7ff ba5b 	b.w	800a3b2 <_strtod_l+0x7a>
 800aefc:	2a65      	cmp	r2, #101	; 0x65
 800aefe:	f43f ab52 	beq.w	800a5a6 <_strtod_l+0x26e>
 800af02:	2a45      	cmp	r2, #69	; 0x45
 800af04:	f43f ab4f 	beq.w	800a5a6 <_strtod_l+0x26e>
 800af08:	2301      	movs	r3, #1
 800af0a:	f7ff bb87 	b.w	800a61c <_strtod_l+0x2e4>
 800af0e:	bf00      	nop
 800af10:	ffc00000 	.word	0xffc00000
 800af14:	41dfffff 	.word	0x41dfffff
 800af18:	94a03595 	.word	0x94a03595
 800af1c:	3fcfffff 	.word	0x3fcfffff

0800af20 <strtod>:
 800af20:	460a      	mov	r2, r1
 800af22:	4601      	mov	r1, r0
 800af24:	4802      	ldr	r0, [pc, #8]	; (800af30 <strtod+0x10>)
 800af26:	4b03      	ldr	r3, [pc, #12]	; (800af34 <strtod+0x14>)
 800af28:	6800      	ldr	r0, [r0, #0]
 800af2a:	f7ff ba05 	b.w	800a338 <_strtod_l>
 800af2e:	bf00      	nop
 800af30:	20000274 	.word	0x20000274
 800af34:	200000bc 	.word	0x200000bc

0800af38 <__cvt>:
 800af38:	2b00      	cmp	r3, #0
 800af3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3e:	461f      	mov	r7, r3
 800af40:	bfbb      	ittet	lt
 800af42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800af46:	461f      	movlt	r7, r3
 800af48:	2300      	movge	r3, #0
 800af4a:	232d      	movlt	r3, #45	; 0x2d
 800af4c:	b088      	sub	sp, #32
 800af4e:	4614      	mov	r4, r2
 800af50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800af54:	7013      	strb	r3, [r2, #0]
 800af56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af58:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800af5c:	f023 0820 	bic.w	r8, r3, #32
 800af60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af64:	d005      	beq.n	800af72 <__cvt+0x3a>
 800af66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af6a:	d100      	bne.n	800af6e <__cvt+0x36>
 800af6c:	3501      	adds	r5, #1
 800af6e:	2302      	movs	r3, #2
 800af70:	e000      	b.n	800af74 <__cvt+0x3c>
 800af72:	2303      	movs	r3, #3
 800af74:	aa07      	add	r2, sp, #28
 800af76:	9204      	str	r2, [sp, #16]
 800af78:	aa06      	add	r2, sp, #24
 800af7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800af7e:	e9cd 3500 	strd	r3, r5, [sp]
 800af82:	4622      	mov	r2, r4
 800af84:	463b      	mov	r3, r7
 800af86:	f000 fe9b 	bl	800bcc0 <_dtoa_r>
 800af8a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af8e:	4606      	mov	r6, r0
 800af90:	d102      	bne.n	800af98 <__cvt+0x60>
 800af92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af94:	07db      	lsls	r3, r3, #31
 800af96:	d522      	bpl.n	800afde <__cvt+0xa6>
 800af98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af9c:	eb06 0905 	add.w	r9, r6, r5
 800afa0:	d110      	bne.n	800afc4 <__cvt+0x8c>
 800afa2:	7833      	ldrb	r3, [r6, #0]
 800afa4:	2b30      	cmp	r3, #48	; 0x30
 800afa6:	d10a      	bne.n	800afbe <__cvt+0x86>
 800afa8:	2200      	movs	r2, #0
 800afaa:	2300      	movs	r3, #0
 800afac:	4620      	mov	r0, r4
 800afae:	4639      	mov	r1, r7
 800afb0:	f7f5 fd6a 	bl	8000a88 <__aeabi_dcmpeq>
 800afb4:	b918      	cbnz	r0, 800afbe <__cvt+0x86>
 800afb6:	f1c5 0501 	rsb	r5, r5, #1
 800afba:	f8ca 5000 	str.w	r5, [sl]
 800afbe:	f8da 3000 	ldr.w	r3, [sl]
 800afc2:	4499      	add	r9, r3
 800afc4:	2200      	movs	r2, #0
 800afc6:	2300      	movs	r3, #0
 800afc8:	4620      	mov	r0, r4
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fd5c 	bl	8000a88 <__aeabi_dcmpeq>
 800afd0:	b108      	cbz	r0, 800afd6 <__cvt+0x9e>
 800afd2:	f8cd 901c 	str.w	r9, [sp, #28]
 800afd6:	2230      	movs	r2, #48	; 0x30
 800afd8:	9b07      	ldr	r3, [sp, #28]
 800afda:	454b      	cmp	r3, r9
 800afdc:	d307      	bcc.n	800afee <__cvt+0xb6>
 800afde:	4630      	mov	r0, r6
 800afe0:	9b07      	ldr	r3, [sp, #28]
 800afe2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800afe4:	1b9b      	subs	r3, r3, r6
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	b008      	add	sp, #32
 800afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afee:	1c59      	adds	r1, r3, #1
 800aff0:	9107      	str	r1, [sp, #28]
 800aff2:	701a      	strb	r2, [r3, #0]
 800aff4:	e7f0      	b.n	800afd8 <__cvt+0xa0>

0800aff6 <__exponent>:
 800aff6:	4603      	mov	r3, r0
 800aff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800affa:	2900      	cmp	r1, #0
 800affc:	f803 2b02 	strb.w	r2, [r3], #2
 800b000:	bfb6      	itet	lt
 800b002:	222d      	movlt	r2, #45	; 0x2d
 800b004:	222b      	movge	r2, #43	; 0x2b
 800b006:	4249      	neglt	r1, r1
 800b008:	2909      	cmp	r1, #9
 800b00a:	7042      	strb	r2, [r0, #1]
 800b00c:	dd2a      	ble.n	800b064 <__exponent+0x6e>
 800b00e:	f10d 0207 	add.w	r2, sp, #7
 800b012:	4617      	mov	r7, r2
 800b014:	260a      	movs	r6, #10
 800b016:	fb91 f5f6 	sdiv	r5, r1, r6
 800b01a:	4694      	mov	ip, r2
 800b01c:	fb06 1415 	mls	r4, r6, r5, r1
 800b020:	3430      	adds	r4, #48	; 0x30
 800b022:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b026:	460c      	mov	r4, r1
 800b028:	2c63      	cmp	r4, #99	; 0x63
 800b02a:	4629      	mov	r1, r5
 800b02c:	f102 32ff 	add.w	r2, r2, #4294967295
 800b030:	dcf1      	bgt.n	800b016 <__exponent+0x20>
 800b032:	3130      	adds	r1, #48	; 0x30
 800b034:	f1ac 0402 	sub.w	r4, ip, #2
 800b038:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b03c:	4622      	mov	r2, r4
 800b03e:	1c41      	adds	r1, r0, #1
 800b040:	42ba      	cmp	r2, r7
 800b042:	d30a      	bcc.n	800b05a <__exponent+0x64>
 800b044:	f10d 0209 	add.w	r2, sp, #9
 800b048:	eba2 020c 	sub.w	r2, r2, ip
 800b04c:	42bc      	cmp	r4, r7
 800b04e:	bf88      	it	hi
 800b050:	2200      	movhi	r2, #0
 800b052:	4413      	add	r3, r2
 800b054:	1a18      	subs	r0, r3, r0
 800b056:	b003      	add	sp, #12
 800b058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b05a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b05e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b062:	e7ed      	b.n	800b040 <__exponent+0x4a>
 800b064:	2330      	movs	r3, #48	; 0x30
 800b066:	3130      	adds	r1, #48	; 0x30
 800b068:	7083      	strb	r3, [r0, #2]
 800b06a:	70c1      	strb	r1, [r0, #3]
 800b06c:	1d03      	adds	r3, r0, #4
 800b06e:	e7f1      	b.n	800b054 <__exponent+0x5e>

0800b070 <_printf_float>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	b091      	sub	sp, #68	; 0x44
 800b076:	460c      	mov	r4, r1
 800b078:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b07c:	4616      	mov	r6, r2
 800b07e:	461f      	mov	r7, r3
 800b080:	4605      	mov	r5, r0
 800b082:	f000 fcf7 	bl	800ba74 <_localeconv_r>
 800b086:	6803      	ldr	r3, [r0, #0]
 800b088:	4618      	mov	r0, r3
 800b08a:	9309      	str	r3, [sp, #36]	; 0x24
 800b08c:	f7f5 f8d0 	bl	8000230 <strlen>
 800b090:	2300      	movs	r3, #0
 800b092:	930e      	str	r3, [sp, #56]	; 0x38
 800b094:	f8d8 3000 	ldr.w	r3, [r8]
 800b098:	900a      	str	r0, [sp, #40]	; 0x28
 800b09a:	3307      	adds	r3, #7
 800b09c:	f023 0307 	bic.w	r3, r3, #7
 800b0a0:	f103 0208 	add.w	r2, r3, #8
 800b0a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b0a8:	f8d4 b000 	ldr.w	fp, [r4]
 800b0ac:	f8c8 2000 	str.w	r2, [r8]
 800b0b0:	e9d3 a800 	ldrd	sl, r8, [r3]
 800b0b4:	4652      	mov	r2, sl
 800b0b6:	4643      	mov	r3, r8
 800b0b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b0bc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800b0c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c6:	4650      	mov	r0, sl
 800b0c8:	4b9c      	ldr	r3, [pc, #624]	; (800b33c <_printf_float+0x2cc>)
 800b0ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0cc:	f7f5 fd0e 	bl	8000aec <__aeabi_dcmpun>
 800b0d0:	bb70      	cbnz	r0, 800b130 <_printf_float+0xc0>
 800b0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d6:	4650      	mov	r0, sl
 800b0d8:	4b98      	ldr	r3, [pc, #608]	; (800b33c <_printf_float+0x2cc>)
 800b0da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0dc:	f7f5 fce8 	bl	8000ab0 <__aeabi_dcmple>
 800b0e0:	bb30      	cbnz	r0, 800b130 <_printf_float+0xc0>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4650      	mov	r0, sl
 800b0e8:	4641      	mov	r1, r8
 800b0ea:	f7f5 fcd7 	bl	8000a9c <__aeabi_dcmplt>
 800b0ee:	b110      	cbz	r0, 800b0f6 <_printf_float+0x86>
 800b0f0:	232d      	movs	r3, #45	; 0x2d
 800b0f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f6:	4a92      	ldr	r2, [pc, #584]	; (800b340 <_printf_float+0x2d0>)
 800b0f8:	4b92      	ldr	r3, [pc, #584]	; (800b344 <_printf_float+0x2d4>)
 800b0fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b0fe:	bf94      	ite	ls
 800b100:	4690      	movls	r8, r2
 800b102:	4698      	movhi	r8, r3
 800b104:	2303      	movs	r3, #3
 800b106:	f04f 0a00 	mov.w	sl, #0
 800b10a:	6123      	str	r3, [r4, #16]
 800b10c:	f02b 0304 	bic.w	r3, fp, #4
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	4633      	mov	r3, r6
 800b114:	4621      	mov	r1, r4
 800b116:	4628      	mov	r0, r5
 800b118:	9700      	str	r7, [sp, #0]
 800b11a:	aa0f      	add	r2, sp, #60	; 0x3c
 800b11c:	f000 f9d6 	bl	800b4cc <_printf_common>
 800b120:	3001      	adds	r0, #1
 800b122:	f040 8090 	bne.w	800b246 <_printf_float+0x1d6>
 800b126:	f04f 30ff 	mov.w	r0, #4294967295
 800b12a:	b011      	add	sp, #68	; 0x44
 800b12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b130:	4652      	mov	r2, sl
 800b132:	4643      	mov	r3, r8
 800b134:	4650      	mov	r0, sl
 800b136:	4641      	mov	r1, r8
 800b138:	f7f5 fcd8 	bl	8000aec <__aeabi_dcmpun>
 800b13c:	b148      	cbz	r0, 800b152 <_printf_float+0xe2>
 800b13e:	f1b8 0f00 	cmp.w	r8, #0
 800b142:	bfb8      	it	lt
 800b144:	232d      	movlt	r3, #45	; 0x2d
 800b146:	4a80      	ldr	r2, [pc, #512]	; (800b348 <_printf_float+0x2d8>)
 800b148:	bfb8      	it	lt
 800b14a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b14e:	4b7f      	ldr	r3, [pc, #508]	; (800b34c <_printf_float+0x2dc>)
 800b150:	e7d3      	b.n	800b0fa <_printf_float+0x8a>
 800b152:	6863      	ldr	r3, [r4, #4]
 800b154:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	d142      	bne.n	800b1e2 <_printf_float+0x172>
 800b15c:	2306      	movs	r3, #6
 800b15e:	6063      	str	r3, [r4, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	9206      	str	r2, [sp, #24]
 800b164:	aa0e      	add	r2, sp, #56	; 0x38
 800b166:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b16a:	aa0d      	add	r2, sp, #52	; 0x34
 800b16c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b170:	9203      	str	r2, [sp, #12]
 800b172:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b176:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	6863      	ldr	r3, [r4, #4]
 800b17e:	4652      	mov	r2, sl
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	4628      	mov	r0, r5
 800b184:	4643      	mov	r3, r8
 800b186:	910b      	str	r1, [sp, #44]	; 0x2c
 800b188:	f7ff fed6 	bl	800af38 <__cvt>
 800b18c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b18e:	4680      	mov	r8, r0
 800b190:	2947      	cmp	r1, #71	; 0x47
 800b192:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b194:	d108      	bne.n	800b1a8 <_printf_float+0x138>
 800b196:	1cc8      	adds	r0, r1, #3
 800b198:	db02      	blt.n	800b1a0 <_printf_float+0x130>
 800b19a:	6863      	ldr	r3, [r4, #4]
 800b19c:	4299      	cmp	r1, r3
 800b19e:	dd40      	ble.n	800b222 <_printf_float+0x1b2>
 800b1a0:	f1a9 0902 	sub.w	r9, r9, #2
 800b1a4:	fa5f f989 	uxtb.w	r9, r9
 800b1a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b1ac:	d81f      	bhi.n	800b1ee <_printf_float+0x17e>
 800b1ae:	464a      	mov	r2, r9
 800b1b0:	3901      	subs	r1, #1
 800b1b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b1b6:	910d      	str	r1, [sp, #52]	; 0x34
 800b1b8:	f7ff ff1d 	bl	800aff6 <__exponent>
 800b1bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1be:	4682      	mov	sl, r0
 800b1c0:	1813      	adds	r3, r2, r0
 800b1c2:	2a01      	cmp	r2, #1
 800b1c4:	6123      	str	r3, [r4, #16]
 800b1c6:	dc02      	bgt.n	800b1ce <_printf_float+0x15e>
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	07d2      	lsls	r2, r2, #31
 800b1cc:	d501      	bpl.n	800b1d2 <_printf_float+0x162>
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	6123      	str	r3, [r4, #16]
 800b1d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d09b      	beq.n	800b112 <_printf_float+0xa2>
 800b1da:	232d      	movs	r3, #45	; 0x2d
 800b1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e0:	e797      	b.n	800b112 <_printf_float+0xa2>
 800b1e2:	2947      	cmp	r1, #71	; 0x47
 800b1e4:	d1bc      	bne.n	800b160 <_printf_float+0xf0>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1ba      	bne.n	800b160 <_printf_float+0xf0>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e7b7      	b.n	800b15e <_printf_float+0xee>
 800b1ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b1f2:	d118      	bne.n	800b226 <_printf_float+0x1b6>
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	dd0b      	ble.n	800b212 <_printf_float+0x1a2>
 800b1fa:	6121      	str	r1, [r4, #16]
 800b1fc:	b913      	cbnz	r3, 800b204 <_printf_float+0x194>
 800b1fe:	6822      	ldr	r2, [r4, #0]
 800b200:	07d0      	lsls	r0, r2, #31
 800b202:	d502      	bpl.n	800b20a <_printf_float+0x19a>
 800b204:	3301      	adds	r3, #1
 800b206:	440b      	add	r3, r1
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	f04f 0a00 	mov.w	sl, #0
 800b20e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b210:	e7df      	b.n	800b1d2 <_printf_float+0x162>
 800b212:	b913      	cbnz	r3, 800b21a <_printf_float+0x1aa>
 800b214:	6822      	ldr	r2, [r4, #0]
 800b216:	07d2      	lsls	r2, r2, #31
 800b218:	d501      	bpl.n	800b21e <_printf_float+0x1ae>
 800b21a:	3302      	adds	r3, #2
 800b21c:	e7f4      	b.n	800b208 <_printf_float+0x198>
 800b21e:	2301      	movs	r3, #1
 800b220:	e7f2      	b.n	800b208 <_printf_float+0x198>
 800b222:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b228:	4299      	cmp	r1, r3
 800b22a:	db05      	blt.n	800b238 <_printf_float+0x1c8>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	6121      	str	r1, [r4, #16]
 800b230:	07d8      	lsls	r0, r3, #31
 800b232:	d5ea      	bpl.n	800b20a <_printf_float+0x19a>
 800b234:	1c4b      	adds	r3, r1, #1
 800b236:	e7e7      	b.n	800b208 <_printf_float+0x198>
 800b238:	2900      	cmp	r1, #0
 800b23a:	bfcc      	ite	gt
 800b23c:	2201      	movgt	r2, #1
 800b23e:	f1c1 0202 	rsble	r2, r1, #2
 800b242:	4413      	add	r3, r2
 800b244:	e7e0      	b.n	800b208 <_printf_float+0x198>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	055a      	lsls	r2, r3, #21
 800b24a:	d407      	bmi.n	800b25c <_printf_float+0x1ec>
 800b24c:	6923      	ldr	r3, [r4, #16]
 800b24e:	4642      	mov	r2, r8
 800b250:	4631      	mov	r1, r6
 800b252:	4628      	mov	r0, r5
 800b254:	47b8      	blx	r7
 800b256:	3001      	adds	r0, #1
 800b258:	d12b      	bne.n	800b2b2 <_printf_float+0x242>
 800b25a:	e764      	b.n	800b126 <_printf_float+0xb6>
 800b25c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b260:	f240 80dd 	bls.w	800b41e <_printf_float+0x3ae>
 800b264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b268:	2200      	movs	r2, #0
 800b26a:	2300      	movs	r3, #0
 800b26c:	f7f5 fc0c 	bl	8000a88 <__aeabi_dcmpeq>
 800b270:	2800      	cmp	r0, #0
 800b272:	d033      	beq.n	800b2dc <_printf_float+0x26c>
 800b274:	2301      	movs	r3, #1
 800b276:	4631      	mov	r1, r6
 800b278:	4628      	mov	r0, r5
 800b27a:	4a35      	ldr	r2, [pc, #212]	; (800b350 <_printf_float+0x2e0>)
 800b27c:	47b8      	blx	r7
 800b27e:	3001      	adds	r0, #1
 800b280:	f43f af51 	beq.w	800b126 <_printf_float+0xb6>
 800b284:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b288:	429a      	cmp	r2, r3
 800b28a:	db02      	blt.n	800b292 <_printf_float+0x222>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	07d8      	lsls	r0, r3, #31
 800b290:	d50f      	bpl.n	800b2b2 <_printf_float+0x242>
 800b292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b296:	4631      	mov	r1, r6
 800b298:	4628      	mov	r0, r5
 800b29a:	47b8      	blx	r7
 800b29c:	3001      	adds	r0, #1
 800b29e:	f43f af42 	beq.w	800b126 <_printf_float+0xb6>
 800b2a2:	f04f 0800 	mov.w	r8, #0
 800b2a6:	f104 091a 	add.w	r9, r4, #26
 800b2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	4543      	cmp	r3, r8
 800b2b0:	dc09      	bgt.n	800b2c6 <_printf_float+0x256>
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	079b      	lsls	r3, r3, #30
 800b2b6:	f100 8104 	bmi.w	800b4c2 <_printf_float+0x452>
 800b2ba:	68e0      	ldr	r0, [r4, #12]
 800b2bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2be:	4298      	cmp	r0, r3
 800b2c0:	bfb8      	it	lt
 800b2c2:	4618      	movlt	r0, r3
 800b2c4:	e731      	b.n	800b12a <_printf_float+0xba>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	464a      	mov	r2, r9
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	47b8      	blx	r7
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	f43f af28 	beq.w	800b126 <_printf_float+0xb6>
 800b2d6:	f108 0801 	add.w	r8, r8, #1
 800b2da:	e7e6      	b.n	800b2aa <_printf_float+0x23a>
 800b2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	dc38      	bgt.n	800b354 <_printf_float+0x2e4>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	4a19      	ldr	r2, [pc, #100]	; (800b350 <_printf_float+0x2e0>)
 800b2ea:	47b8      	blx	r7
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	f43f af1a 	beq.w	800b126 <_printf_float+0xb6>
 800b2f2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	d102      	bne.n	800b300 <_printf_float+0x290>
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	07d9      	lsls	r1, r3, #31
 800b2fe:	d5d8      	bpl.n	800b2b2 <_printf_float+0x242>
 800b300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b304:	4631      	mov	r1, r6
 800b306:	4628      	mov	r0, r5
 800b308:	47b8      	blx	r7
 800b30a:	3001      	adds	r0, #1
 800b30c:	f43f af0b 	beq.w	800b126 <_printf_float+0xb6>
 800b310:	f04f 0900 	mov.w	r9, #0
 800b314:	f104 0a1a 	add.w	sl, r4, #26
 800b318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b31a:	425b      	negs	r3, r3
 800b31c:	454b      	cmp	r3, r9
 800b31e:	dc01      	bgt.n	800b324 <_printf_float+0x2b4>
 800b320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b322:	e794      	b.n	800b24e <_printf_float+0x1de>
 800b324:	2301      	movs	r3, #1
 800b326:	4652      	mov	r2, sl
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	f43f aef9 	beq.w	800b126 <_printf_float+0xb6>
 800b334:	f109 0901 	add.w	r9, r9, #1
 800b338:	e7ee      	b.n	800b318 <_printf_float+0x2a8>
 800b33a:	bf00      	nop
 800b33c:	7fefffff 	.word	0x7fefffff
 800b340:	0800e650 	.word	0x0800e650
 800b344:	0800e654 	.word	0x0800e654
 800b348:	0800e658 	.word	0x0800e658
 800b34c:	0800e65c 	.word	0x0800e65c
 800b350:	0800e660 	.word	0x0800e660
 800b354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b358:	429a      	cmp	r2, r3
 800b35a:	bfa8      	it	ge
 800b35c:	461a      	movge	r2, r3
 800b35e:	2a00      	cmp	r2, #0
 800b360:	4691      	mov	r9, r2
 800b362:	dc37      	bgt.n	800b3d4 <_printf_float+0x364>
 800b364:	f04f 0b00 	mov.w	fp, #0
 800b368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b36c:	f104 021a 	add.w	r2, r4, #26
 800b370:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b374:	ebaa 0309 	sub.w	r3, sl, r9
 800b378:	455b      	cmp	r3, fp
 800b37a:	dc33      	bgt.n	800b3e4 <_printf_float+0x374>
 800b37c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b380:	429a      	cmp	r2, r3
 800b382:	db3b      	blt.n	800b3fc <_printf_float+0x38c>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	07da      	lsls	r2, r3, #31
 800b388:	d438      	bmi.n	800b3fc <_printf_float+0x38c>
 800b38a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b38e:	eba2 0903 	sub.w	r9, r2, r3
 800b392:	eba2 020a 	sub.w	r2, r2, sl
 800b396:	4591      	cmp	r9, r2
 800b398:	bfa8      	it	ge
 800b39a:	4691      	movge	r9, r2
 800b39c:	f1b9 0f00 	cmp.w	r9, #0
 800b3a0:	dc34      	bgt.n	800b40c <_printf_float+0x39c>
 800b3a2:	f04f 0800 	mov.w	r8, #0
 800b3a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3aa:	f104 0a1a 	add.w	sl, r4, #26
 800b3ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b3b2:	1a9b      	subs	r3, r3, r2
 800b3b4:	eba3 0309 	sub.w	r3, r3, r9
 800b3b8:	4543      	cmp	r3, r8
 800b3ba:	f77f af7a 	ble.w	800b2b2 <_printf_float+0x242>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	4652      	mov	r2, sl
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b8      	blx	r7
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	f43f aeac 	beq.w	800b126 <_printf_float+0xb6>
 800b3ce:	f108 0801 	add.w	r8, r8, #1
 800b3d2:	e7ec      	b.n	800b3ae <_printf_float+0x33e>
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	4631      	mov	r1, r6
 800b3d8:	4642      	mov	r2, r8
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d1c0      	bne.n	800b364 <_printf_float+0x2f4>
 800b3e2:	e6a0      	b.n	800b126 <_printf_float+0xb6>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	920b      	str	r2, [sp, #44]	; 0x2c
 800b3ec:	47b8      	blx	r7
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	f43f ae99 	beq.w	800b126 <_printf_float+0xb6>
 800b3f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3f6:	f10b 0b01 	add.w	fp, fp, #1
 800b3fa:	e7b9      	b.n	800b370 <_printf_float+0x300>
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b402:	4628      	mov	r0, r5
 800b404:	47b8      	blx	r7
 800b406:	3001      	adds	r0, #1
 800b408:	d1bf      	bne.n	800b38a <_printf_float+0x31a>
 800b40a:	e68c      	b.n	800b126 <_printf_float+0xb6>
 800b40c:	464b      	mov	r3, r9
 800b40e:	4631      	mov	r1, r6
 800b410:	4628      	mov	r0, r5
 800b412:	eb08 020a 	add.w	r2, r8, sl
 800b416:	47b8      	blx	r7
 800b418:	3001      	adds	r0, #1
 800b41a:	d1c2      	bne.n	800b3a2 <_printf_float+0x332>
 800b41c:	e683      	b.n	800b126 <_printf_float+0xb6>
 800b41e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b420:	2a01      	cmp	r2, #1
 800b422:	dc01      	bgt.n	800b428 <_printf_float+0x3b8>
 800b424:	07db      	lsls	r3, r3, #31
 800b426:	d539      	bpl.n	800b49c <_printf_float+0x42c>
 800b428:	2301      	movs	r3, #1
 800b42a:	4642      	mov	r2, r8
 800b42c:	4631      	mov	r1, r6
 800b42e:	4628      	mov	r0, r5
 800b430:	47b8      	blx	r7
 800b432:	3001      	adds	r0, #1
 800b434:	f43f ae77 	beq.w	800b126 <_printf_float+0xb6>
 800b438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b43c:	4631      	mov	r1, r6
 800b43e:	4628      	mov	r0, r5
 800b440:	47b8      	blx	r7
 800b442:	3001      	adds	r0, #1
 800b444:	f43f ae6f 	beq.w	800b126 <_printf_float+0xb6>
 800b448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b44c:	2200      	movs	r2, #0
 800b44e:	2300      	movs	r3, #0
 800b450:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b454:	f7f5 fb18 	bl	8000a88 <__aeabi_dcmpeq>
 800b458:	b9d8      	cbnz	r0, 800b492 <_printf_float+0x422>
 800b45a:	f109 33ff 	add.w	r3, r9, #4294967295
 800b45e:	f108 0201 	add.w	r2, r8, #1
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	47b8      	blx	r7
 800b468:	3001      	adds	r0, #1
 800b46a:	d10e      	bne.n	800b48a <_printf_float+0x41a>
 800b46c:	e65b      	b.n	800b126 <_printf_float+0xb6>
 800b46e:	2301      	movs	r3, #1
 800b470:	464a      	mov	r2, r9
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	f43f ae54 	beq.w	800b126 <_printf_float+0xb6>
 800b47e:	f108 0801 	add.w	r8, r8, #1
 800b482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b484:	3b01      	subs	r3, #1
 800b486:	4543      	cmp	r3, r8
 800b488:	dcf1      	bgt.n	800b46e <_printf_float+0x3fe>
 800b48a:	4653      	mov	r3, sl
 800b48c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b490:	e6de      	b.n	800b250 <_printf_float+0x1e0>
 800b492:	f04f 0800 	mov.w	r8, #0
 800b496:	f104 091a 	add.w	r9, r4, #26
 800b49a:	e7f2      	b.n	800b482 <_printf_float+0x412>
 800b49c:	2301      	movs	r3, #1
 800b49e:	4642      	mov	r2, r8
 800b4a0:	e7df      	b.n	800b462 <_printf_float+0x3f2>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	464a      	mov	r2, r9
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	47b8      	blx	r7
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	f43f ae3a 	beq.w	800b126 <_printf_float+0xb6>
 800b4b2:	f108 0801 	add.w	r8, r8, #1
 800b4b6:	68e3      	ldr	r3, [r4, #12]
 800b4b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4ba:	1a5b      	subs	r3, r3, r1
 800b4bc:	4543      	cmp	r3, r8
 800b4be:	dcf0      	bgt.n	800b4a2 <_printf_float+0x432>
 800b4c0:	e6fb      	b.n	800b2ba <_printf_float+0x24a>
 800b4c2:	f04f 0800 	mov.w	r8, #0
 800b4c6:	f104 0919 	add.w	r9, r4, #25
 800b4ca:	e7f4      	b.n	800b4b6 <_printf_float+0x446>

0800b4cc <_printf_common>:
 800b4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d0:	4616      	mov	r6, r2
 800b4d2:	4699      	mov	r9, r3
 800b4d4:	688a      	ldr	r2, [r1, #8]
 800b4d6:	690b      	ldr	r3, [r1, #16]
 800b4d8:	4607      	mov	r7, r0
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	bfb8      	it	lt
 800b4de:	4613      	movlt	r3, r2
 800b4e0:	6033      	str	r3, [r6, #0]
 800b4e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4ec:	b10a      	cbz	r2, 800b4f2 <_printf_common+0x26>
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	6033      	str	r3, [r6, #0]
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	0699      	lsls	r1, r3, #26
 800b4f6:	bf42      	ittt	mi
 800b4f8:	6833      	ldrmi	r3, [r6, #0]
 800b4fa:	3302      	addmi	r3, #2
 800b4fc:	6033      	strmi	r3, [r6, #0]
 800b4fe:	6825      	ldr	r5, [r4, #0]
 800b500:	f015 0506 	ands.w	r5, r5, #6
 800b504:	d106      	bne.n	800b514 <_printf_common+0x48>
 800b506:	f104 0a19 	add.w	sl, r4, #25
 800b50a:	68e3      	ldr	r3, [r4, #12]
 800b50c:	6832      	ldr	r2, [r6, #0]
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	42ab      	cmp	r3, r5
 800b512:	dc2b      	bgt.n	800b56c <_printf_common+0xa0>
 800b514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b518:	1e13      	subs	r3, r2, #0
 800b51a:	6822      	ldr	r2, [r4, #0]
 800b51c:	bf18      	it	ne
 800b51e:	2301      	movne	r3, #1
 800b520:	0692      	lsls	r2, r2, #26
 800b522:	d430      	bmi.n	800b586 <_printf_common+0xba>
 800b524:	4649      	mov	r1, r9
 800b526:	4638      	mov	r0, r7
 800b528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b52c:	47c0      	blx	r8
 800b52e:	3001      	adds	r0, #1
 800b530:	d023      	beq.n	800b57a <_printf_common+0xae>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	6922      	ldr	r2, [r4, #16]
 800b536:	f003 0306 	and.w	r3, r3, #6
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	bf14      	ite	ne
 800b53e:	2500      	movne	r5, #0
 800b540:	6833      	ldreq	r3, [r6, #0]
 800b542:	f04f 0600 	mov.w	r6, #0
 800b546:	bf08      	it	eq
 800b548:	68e5      	ldreq	r5, [r4, #12]
 800b54a:	f104 041a 	add.w	r4, r4, #26
 800b54e:	bf08      	it	eq
 800b550:	1aed      	subeq	r5, r5, r3
 800b552:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b556:	bf08      	it	eq
 800b558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b55c:	4293      	cmp	r3, r2
 800b55e:	bfc4      	itt	gt
 800b560:	1a9b      	subgt	r3, r3, r2
 800b562:	18ed      	addgt	r5, r5, r3
 800b564:	42b5      	cmp	r5, r6
 800b566:	d11a      	bne.n	800b59e <_printf_common+0xd2>
 800b568:	2000      	movs	r0, #0
 800b56a:	e008      	b.n	800b57e <_printf_common+0xb2>
 800b56c:	2301      	movs	r3, #1
 800b56e:	4652      	mov	r2, sl
 800b570:	4649      	mov	r1, r9
 800b572:	4638      	mov	r0, r7
 800b574:	47c0      	blx	r8
 800b576:	3001      	adds	r0, #1
 800b578:	d103      	bne.n	800b582 <_printf_common+0xb6>
 800b57a:	f04f 30ff 	mov.w	r0, #4294967295
 800b57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b582:	3501      	adds	r5, #1
 800b584:	e7c1      	b.n	800b50a <_printf_common+0x3e>
 800b586:	2030      	movs	r0, #48	; 0x30
 800b588:	18e1      	adds	r1, r4, r3
 800b58a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b594:	4422      	add	r2, r4
 800b596:	3302      	adds	r3, #2
 800b598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b59c:	e7c2      	b.n	800b524 <_printf_common+0x58>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	47c0      	blx	r8
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d0e6      	beq.n	800b57a <_printf_common+0xae>
 800b5ac:	3601      	adds	r6, #1
 800b5ae:	e7d9      	b.n	800b564 <_printf_common+0x98>

0800b5b0 <_printf_i>:
 800b5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b4:	7e0f      	ldrb	r7, [r1, #24]
 800b5b6:	4691      	mov	r9, r2
 800b5b8:	2f78      	cmp	r7, #120	; 0x78
 800b5ba:	4680      	mov	r8, r0
 800b5bc:	460c      	mov	r4, r1
 800b5be:	469a      	mov	sl, r3
 800b5c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5c6:	d807      	bhi.n	800b5d8 <_printf_i+0x28>
 800b5c8:	2f62      	cmp	r7, #98	; 0x62
 800b5ca:	d80a      	bhi.n	800b5e2 <_printf_i+0x32>
 800b5cc:	2f00      	cmp	r7, #0
 800b5ce:	f000 80d5 	beq.w	800b77c <_printf_i+0x1cc>
 800b5d2:	2f58      	cmp	r7, #88	; 0x58
 800b5d4:	f000 80c1 	beq.w	800b75a <_printf_i+0x1aa>
 800b5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5e0:	e03a      	b.n	800b658 <_printf_i+0xa8>
 800b5e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5e6:	2b15      	cmp	r3, #21
 800b5e8:	d8f6      	bhi.n	800b5d8 <_printf_i+0x28>
 800b5ea:	a101      	add	r1, pc, #4	; (adr r1, 800b5f0 <_printf_i+0x40>)
 800b5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5f0:	0800b649 	.word	0x0800b649
 800b5f4:	0800b65d 	.word	0x0800b65d
 800b5f8:	0800b5d9 	.word	0x0800b5d9
 800b5fc:	0800b5d9 	.word	0x0800b5d9
 800b600:	0800b5d9 	.word	0x0800b5d9
 800b604:	0800b5d9 	.word	0x0800b5d9
 800b608:	0800b65d 	.word	0x0800b65d
 800b60c:	0800b5d9 	.word	0x0800b5d9
 800b610:	0800b5d9 	.word	0x0800b5d9
 800b614:	0800b5d9 	.word	0x0800b5d9
 800b618:	0800b5d9 	.word	0x0800b5d9
 800b61c:	0800b763 	.word	0x0800b763
 800b620:	0800b689 	.word	0x0800b689
 800b624:	0800b71d 	.word	0x0800b71d
 800b628:	0800b5d9 	.word	0x0800b5d9
 800b62c:	0800b5d9 	.word	0x0800b5d9
 800b630:	0800b785 	.word	0x0800b785
 800b634:	0800b5d9 	.word	0x0800b5d9
 800b638:	0800b689 	.word	0x0800b689
 800b63c:	0800b5d9 	.word	0x0800b5d9
 800b640:	0800b5d9 	.word	0x0800b5d9
 800b644:	0800b725 	.word	0x0800b725
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	1d1a      	adds	r2, r3, #4
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	602a      	str	r2, [r5, #0]
 800b650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b658:	2301      	movs	r3, #1
 800b65a:	e0a0      	b.n	800b79e <_printf_i+0x1ee>
 800b65c:	6820      	ldr	r0, [r4, #0]
 800b65e:	682b      	ldr	r3, [r5, #0]
 800b660:	0607      	lsls	r7, r0, #24
 800b662:	f103 0104 	add.w	r1, r3, #4
 800b666:	6029      	str	r1, [r5, #0]
 800b668:	d501      	bpl.n	800b66e <_printf_i+0xbe>
 800b66a:	681e      	ldr	r6, [r3, #0]
 800b66c:	e003      	b.n	800b676 <_printf_i+0xc6>
 800b66e:	0646      	lsls	r6, r0, #25
 800b670:	d5fb      	bpl.n	800b66a <_printf_i+0xba>
 800b672:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b676:	2e00      	cmp	r6, #0
 800b678:	da03      	bge.n	800b682 <_printf_i+0xd2>
 800b67a:	232d      	movs	r3, #45	; 0x2d
 800b67c:	4276      	negs	r6, r6
 800b67e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b682:	230a      	movs	r3, #10
 800b684:	4859      	ldr	r0, [pc, #356]	; (800b7ec <_printf_i+0x23c>)
 800b686:	e012      	b.n	800b6ae <_printf_i+0xfe>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	6820      	ldr	r0, [r4, #0]
 800b68c:	1d19      	adds	r1, r3, #4
 800b68e:	6029      	str	r1, [r5, #0]
 800b690:	0605      	lsls	r5, r0, #24
 800b692:	d501      	bpl.n	800b698 <_printf_i+0xe8>
 800b694:	681e      	ldr	r6, [r3, #0]
 800b696:	e002      	b.n	800b69e <_printf_i+0xee>
 800b698:	0641      	lsls	r1, r0, #25
 800b69a:	d5fb      	bpl.n	800b694 <_printf_i+0xe4>
 800b69c:	881e      	ldrh	r6, [r3, #0]
 800b69e:	2f6f      	cmp	r7, #111	; 0x6f
 800b6a0:	bf0c      	ite	eq
 800b6a2:	2308      	moveq	r3, #8
 800b6a4:	230a      	movne	r3, #10
 800b6a6:	4851      	ldr	r0, [pc, #324]	; (800b7ec <_printf_i+0x23c>)
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6ae:	6865      	ldr	r5, [r4, #4]
 800b6b0:	2d00      	cmp	r5, #0
 800b6b2:	bfa8      	it	ge
 800b6b4:	6821      	ldrge	r1, [r4, #0]
 800b6b6:	60a5      	str	r5, [r4, #8]
 800b6b8:	bfa4      	itt	ge
 800b6ba:	f021 0104 	bicge.w	r1, r1, #4
 800b6be:	6021      	strge	r1, [r4, #0]
 800b6c0:	b90e      	cbnz	r6, 800b6c6 <_printf_i+0x116>
 800b6c2:	2d00      	cmp	r5, #0
 800b6c4:	d04b      	beq.n	800b75e <_printf_i+0x1ae>
 800b6c6:	4615      	mov	r5, r2
 800b6c8:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6cc:	fb03 6711 	mls	r7, r3, r1, r6
 800b6d0:	5dc7      	ldrb	r7, [r0, r7]
 800b6d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6d6:	4637      	mov	r7, r6
 800b6d8:	42bb      	cmp	r3, r7
 800b6da:	460e      	mov	r6, r1
 800b6dc:	d9f4      	bls.n	800b6c8 <_printf_i+0x118>
 800b6de:	2b08      	cmp	r3, #8
 800b6e0:	d10b      	bne.n	800b6fa <_printf_i+0x14a>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	07de      	lsls	r6, r3, #31
 800b6e6:	d508      	bpl.n	800b6fa <_printf_i+0x14a>
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	6861      	ldr	r1, [r4, #4]
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	bfde      	ittt	le
 800b6f0:	2330      	movle	r3, #48	; 0x30
 800b6f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6fa:	1b52      	subs	r2, r2, r5
 800b6fc:	6122      	str	r2, [r4, #16]
 800b6fe:	464b      	mov	r3, r9
 800b700:	4621      	mov	r1, r4
 800b702:	4640      	mov	r0, r8
 800b704:	f8cd a000 	str.w	sl, [sp]
 800b708:	aa03      	add	r2, sp, #12
 800b70a:	f7ff fedf 	bl	800b4cc <_printf_common>
 800b70e:	3001      	adds	r0, #1
 800b710:	d14a      	bne.n	800b7a8 <_printf_i+0x1f8>
 800b712:	f04f 30ff 	mov.w	r0, #4294967295
 800b716:	b004      	add	sp, #16
 800b718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	f043 0320 	orr.w	r3, r3, #32
 800b722:	6023      	str	r3, [r4, #0]
 800b724:	2778      	movs	r7, #120	; 0x78
 800b726:	4832      	ldr	r0, [pc, #200]	; (800b7f0 <_printf_i+0x240>)
 800b728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	6829      	ldr	r1, [r5, #0]
 800b730:	061f      	lsls	r7, r3, #24
 800b732:	f851 6b04 	ldr.w	r6, [r1], #4
 800b736:	d402      	bmi.n	800b73e <_printf_i+0x18e>
 800b738:	065f      	lsls	r7, r3, #25
 800b73a:	bf48      	it	mi
 800b73c:	b2b6      	uxthmi	r6, r6
 800b73e:	07df      	lsls	r7, r3, #31
 800b740:	bf48      	it	mi
 800b742:	f043 0320 	orrmi.w	r3, r3, #32
 800b746:	6029      	str	r1, [r5, #0]
 800b748:	bf48      	it	mi
 800b74a:	6023      	strmi	r3, [r4, #0]
 800b74c:	b91e      	cbnz	r6, 800b756 <_printf_i+0x1a6>
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	f023 0320 	bic.w	r3, r3, #32
 800b754:	6023      	str	r3, [r4, #0]
 800b756:	2310      	movs	r3, #16
 800b758:	e7a6      	b.n	800b6a8 <_printf_i+0xf8>
 800b75a:	4824      	ldr	r0, [pc, #144]	; (800b7ec <_printf_i+0x23c>)
 800b75c:	e7e4      	b.n	800b728 <_printf_i+0x178>
 800b75e:	4615      	mov	r5, r2
 800b760:	e7bd      	b.n	800b6de <_printf_i+0x12e>
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	6826      	ldr	r6, [r4, #0]
 800b766:	1d18      	adds	r0, r3, #4
 800b768:	6961      	ldr	r1, [r4, #20]
 800b76a:	6028      	str	r0, [r5, #0]
 800b76c:	0635      	lsls	r5, r6, #24
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	d501      	bpl.n	800b776 <_printf_i+0x1c6>
 800b772:	6019      	str	r1, [r3, #0]
 800b774:	e002      	b.n	800b77c <_printf_i+0x1cc>
 800b776:	0670      	lsls	r0, r6, #25
 800b778:	d5fb      	bpl.n	800b772 <_printf_i+0x1c2>
 800b77a:	8019      	strh	r1, [r3, #0]
 800b77c:	2300      	movs	r3, #0
 800b77e:	4615      	mov	r5, r2
 800b780:	6123      	str	r3, [r4, #16]
 800b782:	e7bc      	b.n	800b6fe <_printf_i+0x14e>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	2100      	movs	r1, #0
 800b788:	1d1a      	adds	r2, r3, #4
 800b78a:	602a      	str	r2, [r5, #0]
 800b78c:	681d      	ldr	r5, [r3, #0]
 800b78e:	6862      	ldr	r2, [r4, #4]
 800b790:	4628      	mov	r0, r5
 800b792:	f000 f9e6 	bl	800bb62 <memchr>
 800b796:	b108      	cbz	r0, 800b79c <_printf_i+0x1ec>
 800b798:	1b40      	subs	r0, r0, r5
 800b79a:	6060      	str	r0, [r4, #4]
 800b79c:	6863      	ldr	r3, [r4, #4]
 800b79e:	6123      	str	r3, [r4, #16]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a6:	e7aa      	b.n	800b6fe <_printf_i+0x14e>
 800b7a8:	462a      	mov	r2, r5
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	6923      	ldr	r3, [r4, #16]
 800b7b0:	47d0      	blx	sl
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d0ad      	beq.n	800b712 <_printf_i+0x162>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	079b      	lsls	r3, r3, #30
 800b7ba:	d413      	bmi.n	800b7e4 <_printf_i+0x234>
 800b7bc:	68e0      	ldr	r0, [r4, #12]
 800b7be:	9b03      	ldr	r3, [sp, #12]
 800b7c0:	4298      	cmp	r0, r3
 800b7c2:	bfb8      	it	lt
 800b7c4:	4618      	movlt	r0, r3
 800b7c6:	e7a6      	b.n	800b716 <_printf_i+0x166>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	47d0      	blx	sl
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	d09d      	beq.n	800b712 <_printf_i+0x162>
 800b7d6:	3501      	adds	r5, #1
 800b7d8:	68e3      	ldr	r3, [r4, #12]
 800b7da:	9903      	ldr	r1, [sp, #12]
 800b7dc:	1a5b      	subs	r3, r3, r1
 800b7de:	42ab      	cmp	r3, r5
 800b7e0:	dcf2      	bgt.n	800b7c8 <_printf_i+0x218>
 800b7e2:	e7eb      	b.n	800b7bc <_printf_i+0x20c>
 800b7e4:	2500      	movs	r5, #0
 800b7e6:	f104 0619 	add.w	r6, r4, #25
 800b7ea:	e7f5      	b.n	800b7d8 <_printf_i+0x228>
 800b7ec:	0800e662 	.word	0x0800e662
 800b7f0:	0800e673 	.word	0x0800e673

0800b7f4 <std>:
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	b510      	push	{r4, lr}
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b7fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b802:	6083      	str	r3, [r0, #8]
 800b804:	8181      	strh	r1, [r0, #12]
 800b806:	6643      	str	r3, [r0, #100]	; 0x64
 800b808:	81c2      	strh	r2, [r0, #14]
 800b80a:	6183      	str	r3, [r0, #24]
 800b80c:	4619      	mov	r1, r3
 800b80e:	2208      	movs	r2, #8
 800b810:	305c      	adds	r0, #92	; 0x5c
 800b812:	f000 f914 	bl	800ba3e <memset>
 800b816:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <std+0x58>)
 800b818:	6224      	str	r4, [r4, #32]
 800b81a:	6263      	str	r3, [r4, #36]	; 0x24
 800b81c:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <std+0x5c>)
 800b81e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b820:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <std+0x60>)
 800b822:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b824:	4b0c      	ldr	r3, [pc, #48]	; (800b858 <std+0x64>)
 800b826:	6323      	str	r3, [r4, #48]	; 0x30
 800b828:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <std+0x68>)
 800b82a:	429c      	cmp	r4, r3
 800b82c:	d006      	beq.n	800b83c <std+0x48>
 800b82e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b832:	4294      	cmp	r4, r2
 800b834:	d002      	beq.n	800b83c <std+0x48>
 800b836:	33d0      	adds	r3, #208	; 0xd0
 800b838:	429c      	cmp	r4, r3
 800b83a:	d105      	bne.n	800b848 <std+0x54>
 800b83c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b844:	f000 b98a 	b.w	800bb5c <__retarget_lock_init_recursive>
 800b848:	bd10      	pop	{r4, pc}
 800b84a:	bf00      	nop
 800b84c:	0800b9b9 	.word	0x0800b9b9
 800b850:	0800b9db 	.word	0x0800b9db
 800b854:	0800ba13 	.word	0x0800ba13
 800b858:	0800ba37 	.word	0x0800ba37
 800b85c:	20002430 	.word	0x20002430

0800b860 <stdio_exit_handler>:
 800b860:	4a02      	ldr	r2, [pc, #8]	; (800b86c <stdio_exit_handler+0xc>)
 800b862:	4903      	ldr	r1, [pc, #12]	; (800b870 <stdio_exit_handler+0x10>)
 800b864:	4803      	ldr	r0, [pc, #12]	; (800b874 <stdio_exit_handler+0x14>)
 800b866:	f000 b869 	b.w	800b93c <_fwalk_sglue>
 800b86a:	bf00      	nop
 800b86c:	200000b0 	.word	0x200000b0
 800b870:	0800de61 	.word	0x0800de61
 800b874:	20000228 	.word	0x20000228

0800b878 <cleanup_stdio>:
 800b878:	6841      	ldr	r1, [r0, #4]
 800b87a:	4b0c      	ldr	r3, [pc, #48]	; (800b8ac <cleanup_stdio+0x34>)
 800b87c:	b510      	push	{r4, lr}
 800b87e:	4299      	cmp	r1, r3
 800b880:	4604      	mov	r4, r0
 800b882:	d001      	beq.n	800b888 <cleanup_stdio+0x10>
 800b884:	f002 faec 	bl	800de60 <_fflush_r>
 800b888:	68a1      	ldr	r1, [r4, #8]
 800b88a:	4b09      	ldr	r3, [pc, #36]	; (800b8b0 <cleanup_stdio+0x38>)
 800b88c:	4299      	cmp	r1, r3
 800b88e:	d002      	beq.n	800b896 <cleanup_stdio+0x1e>
 800b890:	4620      	mov	r0, r4
 800b892:	f002 fae5 	bl	800de60 <_fflush_r>
 800b896:	68e1      	ldr	r1, [r4, #12]
 800b898:	4b06      	ldr	r3, [pc, #24]	; (800b8b4 <cleanup_stdio+0x3c>)
 800b89a:	4299      	cmp	r1, r3
 800b89c:	d004      	beq.n	800b8a8 <cleanup_stdio+0x30>
 800b89e:	4620      	mov	r0, r4
 800b8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8a4:	f002 badc 	b.w	800de60 <_fflush_r>
 800b8a8:	bd10      	pop	{r4, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20002430 	.word	0x20002430
 800b8b0:	20002498 	.word	0x20002498
 800b8b4:	20002500 	.word	0x20002500

0800b8b8 <global_stdio_init.part.0>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <global_stdio_init.part.0+0x30>)
 800b8bc:	4c0b      	ldr	r4, [pc, #44]	; (800b8ec <global_stdio_init.part.0+0x34>)
 800b8be:	4a0c      	ldr	r2, [pc, #48]	; (800b8f0 <global_stdio_init.part.0+0x38>)
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	2104      	movs	r1, #4
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f7ff ff94 	bl	800b7f4 <std>
 800b8cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	2109      	movs	r1, #9
 800b8d4:	f7ff ff8e 	bl	800b7f4 <std>
 800b8d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8dc:	2202      	movs	r2, #2
 800b8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e2:	2112      	movs	r1, #18
 800b8e4:	f7ff bf86 	b.w	800b7f4 <std>
 800b8e8:	20002568 	.word	0x20002568
 800b8ec:	20002430 	.word	0x20002430
 800b8f0:	0800b861 	.word	0x0800b861

0800b8f4 <__sfp_lock_acquire>:
 800b8f4:	4801      	ldr	r0, [pc, #4]	; (800b8fc <__sfp_lock_acquire+0x8>)
 800b8f6:	f000 b932 	b.w	800bb5e <__retarget_lock_acquire_recursive>
 800b8fa:	bf00      	nop
 800b8fc:	20002571 	.word	0x20002571

0800b900 <__sfp_lock_release>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__sfp_lock_release+0x8>)
 800b902:	f000 b92d 	b.w	800bb60 <__retarget_lock_release_recursive>
 800b906:	bf00      	nop
 800b908:	20002571 	.word	0x20002571

0800b90c <__sinit>:
 800b90c:	b510      	push	{r4, lr}
 800b90e:	4604      	mov	r4, r0
 800b910:	f7ff fff0 	bl	800b8f4 <__sfp_lock_acquire>
 800b914:	6a23      	ldr	r3, [r4, #32]
 800b916:	b11b      	cbz	r3, 800b920 <__sinit+0x14>
 800b918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b91c:	f7ff bff0 	b.w	800b900 <__sfp_lock_release>
 800b920:	4b04      	ldr	r3, [pc, #16]	; (800b934 <__sinit+0x28>)
 800b922:	6223      	str	r3, [r4, #32]
 800b924:	4b04      	ldr	r3, [pc, #16]	; (800b938 <__sinit+0x2c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1f5      	bne.n	800b918 <__sinit+0xc>
 800b92c:	f7ff ffc4 	bl	800b8b8 <global_stdio_init.part.0>
 800b930:	e7f2      	b.n	800b918 <__sinit+0xc>
 800b932:	bf00      	nop
 800b934:	0800b879 	.word	0x0800b879
 800b938:	20002568 	.word	0x20002568

0800b93c <_fwalk_sglue>:
 800b93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b940:	4607      	mov	r7, r0
 800b942:	4688      	mov	r8, r1
 800b944:	4614      	mov	r4, r2
 800b946:	2600      	movs	r6, #0
 800b948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b94c:	f1b9 0901 	subs.w	r9, r9, #1
 800b950:	d505      	bpl.n	800b95e <_fwalk_sglue+0x22>
 800b952:	6824      	ldr	r4, [r4, #0]
 800b954:	2c00      	cmp	r4, #0
 800b956:	d1f7      	bne.n	800b948 <_fwalk_sglue+0xc>
 800b958:	4630      	mov	r0, r6
 800b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d907      	bls.n	800b974 <_fwalk_sglue+0x38>
 800b964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b968:	3301      	adds	r3, #1
 800b96a:	d003      	beq.n	800b974 <_fwalk_sglue+0x38>
 800b96c:	4629      	mov	r1, r5
 800b96e:	4638      	mov	r0, r7
 800b970:	47c0      	blx	r8
 800b972:	4306      	orrs	r6, r0
 800b974:	3568      	adds	r5, #104	; 0x68
 800b976:	e7e9      	b.n	800b94c <_fwalk_sglue+0x10>

0800b978 <siprintf>:
 800b978:	b40e      	push	{r1, r2, r3}
 800b97a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b97e:	b500      	push	{lr}
 800b980:	b09c      	sub	sp, #112	; 0x70
 800b982:	ab1d      	add	r3, sp, #116	; 0x74
 800b984:	9002      	str	r0, [sp, #8]
 800b986:	9006      	str	r0, [sp, #24]
 800b988:	9107      	str	r1, [sp, #28]
 800b98a:	9104      	str	r1, [sp, #16]
 800b98c:	4808      	ldr	r0, [pc, #32]	; (800b9b0 <siprintf+0x38>)
 800b98e:	4909      	ldr	r1, [pc, #36]	; (800b9b4 <siprintf+0x3c>)
 800b990:	f853 2b04 	ldr.w	r2, [r3], #4
 800b994:	9105      	str	r1, [sp, #20]
 800b996:	6800      	ldr	r0, [r0, #0]
 800b998:	a902      	add	r1, sp, #8
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	f002 f8e0 	bl	800db60 <_svfiprintf_r>
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	9b02      	ldr	r3, [sp, #8]
 800b9a4:	701a      	strb	r2, [r3, #0]
 800b9a6:	b01c      	add	sp, #112	; 0x70
 800b9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9ac:	b003      	add	sp, #12
 800b9ae:	4770      	bx	lr
 800b9b0:	20000274 	.word	0x20000274
 800b9b4:	ffff0208 	.word	0xffff0208

0800b9b8 <__sread>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c0:	f000 f87e 	bl	800bac0 <_read_r>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	bfab      	itete	ge
 800b9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b9cc:	181b      	addge	r3, r3, r0
 800b9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9d2:	bfac      	ite	ge
 800b9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9d6:	81a3      	strhlt	r3, [r4, #12]
 800b9d8:	bd10      	pop	{r4, pc}

0800b9da <__swrite>:
 800b9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9de:	461f      	mov	r7, r3
 800b9e0:	898b      	ldrh	r3, [r1, #12]
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	05db      	lsls	r3, r3, #23
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	4616      	mov	r6, r2
 800b9ea:	d505      	bpl.n	800b9f8 <__swrite+0x1e>
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f4:	f000 f852 	bl	800ba9c <_lseek_r>
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba00:	81a3      	strh	r3, [r4, #12]
 800ba02:	4628      	mov	r0, r5
 800ba04:	463b      	mov	r3, r7
 800ba06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0e:	f000 b869 	b.w	800bae4 <_write_r>

0800ba12 <__sseek>:
 800ba12:	b510      	push	{r4, lr}
 800ba14:	460c      	mov	r4, r1
 800ba16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1a:	f000 f83f 	bl	800ba9c <_lseek_r>
 800ba1e:	1c43      	adds	r3, r0, #1
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	bf15      	itete	ne
 800ba24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba2e:	81a3      	strheq	r3, [r4, #12]
 800ba30:	bf18      	it	ne
 800ba32:	81a3      	strhne	r3, [r4, #12]
 800ba34:	bd10      	pop	{r4, pc}

0800ba36 <__sclose>:
 800ba36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3a:	f000 b81f 	b.w	800ba7c <_close_r>

0800ba3e <memset>:
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4402      	add	r2, r0
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d100      	bne.n	800ba48 <memset+0xa>
 800ba46:	4770      	bx	lr
 800ba48:	f803 1b01 	strb.w	r1, [r3], #1
 800ba4c:	e7f9      	b.n	800ba42 <memset+0x4>

0800ba4e <strncmp>:
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	b16a      	cbz	r2, 800ba6e <strncmp+0x20>
 800ba52:	3901      	subs	r1, #1
 800ba54:	1884      	adds	r4, r0, r2
 800ba56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba5a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d103      	bne.n	800ba6a <strncmp+0x1c>
 800ba62:	42a0      	cmp	r0, r4
 800ba64:	d001      	beq.n	800ba6a <strncmp+0x1c>
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	d1f5      	bne.n	800ba56 <strncmp+0x8>
 800ba6a:	1ad0      	subs	r0, r2, r3
 800ba6c:	bd10      	pop	{r4, pc}
 800ba6e:	4610      	mov	r0, r2
 800ba70:	e7fc      	b.n	800ba6c <strncmp+0x1e>
	...

0800ba74 <_localeconv_r>:
 800ba74:	4800      	ldr	r0, [pc, #0]	; (800ba78 <_localeconv_r+0x4>)
 800ba76:	4770      	bx	lr
 800ba78:	200001ac 	.word	0x200001ac

0800ba7c <_close_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	2300      	movs	r3, #0
 800ba80:	4d05      	ldr	r5, [pc, #20]	; (800ba98 <_close_r+0x1c>)
 800ba82:	4604      	mov	r4, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	602b      	str	r3, [r5, #0]
 800ba88:	f7f7 fa84 	bl	8002f94 <_close>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_close_r+0x1a>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_close_r+0x1a>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	2000256c 	.word	0x2000256c

0800ba9c <_lseek_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	2200      	movs	r2, #0
 800baa6:	4d05      	ldr	r5, [pc, #20]	; (800babc <_lseek_r+0x20>)
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7f7 fa96 	bl	8002fdc <_lseek>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_lseek_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_lseek_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	2000256c 	.word	0x2000256c

0800bac0 <_read_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	4611      	mov	r1, r2
 800bac8:	2200      	movs	r2, #0
 800baca:	4d05      	ldr	r5, [pc, #20]	; (800bae0 <_read_r+0x20>)
 800bacc:	602a      	str	r2, [r5, #0]
 800bace:	461a      	mov	r2, r3
 800bad0:	f7f7 fa27 	bl	8002f22 <_read>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_read_r+0x1e>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_read_r+0x1e>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	2000256c 	.word	0x2000256c

0800bae4 <_write_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4604      	mov	r4, r0
 800bae8:	4608      	mov	r0, r1
 800baea:	4611      	mov	r1, r2
 800baec:	2200      	movs	r2, #0
 800baee:	4d05      	ldr	r5, [pc, #20]	; (800bb04 <_write_r+0x20>)
 800baf0:	602a      	str	r2, [r5, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	f7f7 fa32 	bl	8002f5c <_write>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_write_r+0x1e>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_write_r+0x1e>
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	2000256c 	.word	0x2000256c

0800bb08 <__errno>:
 800bb08:	4b01      	ldr	r3, [pc, #4]	; (800bb10 <__errno+0x8>)
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20000274 	.word	0x20000274

0800bb14 <__libc_init_array>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	2600      	movs	r6, #0
 800bb18:	4d0c      	ldr	r5, [pc, #48]	; (800bb4c <__libc_init_array+0x38>)
 800bb1a:	4c0d      	ldr	r4, [pc, #52]	; (800bb50 <__libc_init_array+0x3c>)
 800bb1c:	1b64      	subs	r4, r4, r5
 800bb1e:	10a4      	asrs	r4, r4, #2
 800bb20:	42a6      	cmp	r6, r4
 800bb22:	d109      	bne.n	800bb38 <__libc_init_array+0x24>
 800bb24:	f002 fd10 	bl	800e548 <_init>
 800bb28:	2600      	movs	r6, #0
 800bb2a:	4d0a      	ldr	r5, [pc, #40]	; (800bb54 <__libc_init_array+0x40>)
 800bb2c:	4c0a      	ldr	r4, [pc, #40]	; (800bb58 <__libc_init_array+0x44>)
 800bb2e:	1b64      	subs	r4, r4, r5
 800bb30:	10a4      	asrs	r4, r4, #2
 800bb32:	42a6      	cmp	r6, r4
 800bb34:	d105      	bne.n	800bb42 <__libc_init_array+0x2e>
 800bb36:	bd70      	pop	{r4, r5, r6, pc}
 800bb38:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb3c:	4798      	blx	r3
 800bb3e:	3601      	adds	r6, #1
 800bb40:	e7ee      	b.n	800bb20 <__libc_init_array+0xc>
 800bb42:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb46:	4798      	blx	r3
 800bb48:	3601      	adds	r6, #1
 800bb4a:	e7f2      	b.n	800bb32 <__libc_init_array+0x1e>
 800bb4c:	0800ea2c 	.word	0x0800ea2c
 800bb50:	0800ea2c 	.word	0x0800ea2c
 800bb54:	0800ea2c 	.word	0x0800ea2c
 800bb58:	0800ea30 	.word	0x0800ea30

0800bb5c <__retarget_lock_init_recursive>:
 800bb5c:	4770      	bx	lr

0800bb5e <__retarget_lock_acquire_recursive>:
 800bb5e:	4770      	bx	lr

0800bb60 <__retarget_lock_release_recursive>:
 800bb60:	4770      	bx	lr

0800bb62 <memchr>:
 800bb62:	4603      	mov	r3, r0
 800bb64:	b510      	push	{r4, lr}
 800bb66:	b2c9      	uxtb	r1, r1
 800bb68:	4402      	add	r2, r0
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	d101      	bne.n	800bb74 <memchr+0x12>
 800bb70:	2000      	movs	r0, #0
 800bb72:	e003      	b.n	800bb7c <memchr+0x1a>
 800bb74:	7804      	ldrb	r4, [r0, #0]
 800bb76:	3301      	adds	r3, #1
 800bb78:	428c      	cmp	r4, r1
 800bb7a:	d1f6      	bne.n	800bb6a <memchr+0x8>
 800bb7c:	bd10      	pop	{r4, pc}

0800bb7e <memcpy>:
 800bb7e:	440a      	add	r2, r1
 800bb80:	4291      	cmp	r1, r2
 800bb82:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb86:	d100      	bne.n	800bb8a <memcpy+0xc>
 800bb88:	4770      	bx	lr
 800bb8a:	b510      	push	{r4, lr}
 800bb8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb90:	4291      	cmp	r1, r2
 800bb92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb96:	d1f9      	bne.n	800bb8c <memcpy+0xe>
 800bb98:	bd10      	pop	{r4, pc}
	...

0800bb9c <nan>:
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	4901      	ldr	r1, [pc, #4]	; (800bba4 <nan+0x8>)
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	7ff80000 	.word	0x7ff80000

0800bba8 <quorem>:
 800bba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	6903      	ldr	r3, [r0, #16]
 800bbae:	690c      	ldr	r4, [r1, #16]
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	42a3      	cmp	r3, r4
 800bbb4:	db7f      	blt.n	800bcb6 <quorem+0x10e>
 800bbb6:	3c01      	subs	r4, #1
 800bbb8:	f100 0514 	add.w	r5, r0, #20
 800bbbc:	f101 0814 	add.w	r8, r1, #20
 800bbc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbc4:	9301      	str	r3, [sp, #4]
 800bbc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bbda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbde:	d331      	bcc.n	800bc44 <quorem+0x9c>
 800bbe0:	f04f 0e00 	mov.w	lr, #0
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	46ac      	mov	ip, r5
 800bbe8:	46f2      	mov	sl, lr
 800bbea:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbee:	b293      	uxth	r3, r2
 800bbf0:	fb06 e303 	mla	r3, r6, r3, lr
 800bbf4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbf8:	0c1a      	lsrs	r2, r3, #16
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	fb06 220e 	mla	r2, r6, lr, r2
 800bc00:	ebaa 0303 	sub.w	r3, sl, r3
 800bc04:	f8dc a000 	ldr.w	sl, [ip]
 800bc08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc0c:	fa1f fa8a 	uxth.w	sl, sl
 800bc10:	4453      	add	r3, sl
 800bc12:	f8dc a000 	ldr.w	sl, [ip]
 800bc16:	b292      	uxth	r2, r2
 800bc18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc26:	4581      	cmp	r9, r0
 800bc28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc2c:	f84c 3b04 	str.w	r3, [ip], #4
 800bc30:	d2db      	bcs.n	800bbea <quorem+0x42>
 800bc32:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc36:	b92b      	cbnz	r3, 800bc44 <quorem+0x9c>
 800bc38:	9b01      	ldr	r3, [sp, #4]
 800bc3a:	3b04      	subs	r3, #4
 800bc3c:	429d      	cmp	r5, r3
 800bc3e:	461a      	mov	r2, r3
 800bc40:	d32d      	bcc.n	800bc9e <quorem+0xf6>
 800bc42:	613c      	str	r4, [r7, #16]
 800bc44:	4638      	mov	r0, r7
 800bc46:	f001 fd4b 	bl	800d6e0 <__mcmp>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	db23      	blt.n	800bc96 <quorem+0xee>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	2000      	movs	r0, #0
 800bc52:	3601      	adds	r6, #1
 800bc54:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc58:	f8d1 c000 	ldr.w	ip, [r1]
 800bc5c:	b293      	uxth	r3, r2
 800bc5e:	1ac3      	subs	r3, r0, r3
 800bc60:	0c12      	lsrs	r2, r2, #16
 800bc62:	fa1f f08c 	uxth.w	r0, ip
 800bc66:	4403      	add	r3, r0
 800bc68:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc76:	45c1      	cmp	r9, r8
 800bc78:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc7c:	f841 3b04 	str.w	r3, [r1], #4
 800bc80:	d2e8      	bcs.n	800bc54 <quorem+0xac>
 800bc82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc8a:	b922      	cbnz	r2, 800bc96 <quorem+0xee>
 800bc8c:	3b04      	subs	r3, #4
 800bc8e:	429d      	cmp	r5, r3
 800bc90:	461a      	mov	r2, r3
 800bc92:	d30a      	bcc.n	800bcaa <quorem+0x102>
 800bc94:	613c      	str	r4, [r7, #16]
 800bc96:	4630      	mov	r0, r6
 800bc98:	b003      	add	sp, #12
 800bc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	6812      	ldr	r2, [r2, #0]
 800bca0:	3b04      	subs	r3, #4
 800bca2:	2a00      	cmp	r2, #0
 800bca4:	d1cd      	bne.n	800bc42 <quorem+0x9a>
 800bca6:	3c01      	subs	r4, #1
 800bca8:	e7c8      	b.n	800bc3c <quorem+0x94>
 800bcaa:	6812      	ldr	r2, [r2, #0]
 800bcac:	3b04      	subs	r3, #4
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	d1f0      	bne.n	800bc94 <quorem+0xec>
 800bcb2:	3c01      	subs	r4, #1
 800bcb4:	e7eb      	b.n	800bc8e <quorem+0xe6>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e7ee      	b.n	800bc98 <quorem+0xf0>
 800bcba:	0000      	movs	r0, r0
 800bcbc:	0000      	movs	r0, r0
	...

0800bcc0 <_dtoa_r>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	4616      	mov	r6, r2
 800bcc6:	461f      	mov	r7, r3
 800bcc8:	69c4      	ldr	r4, [r0, #28]
 800bcca:	b099      	sub	sp, #100	; 0x64
 800bccc:	4605      	mov	r5, r0
 800bcce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bcd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bcd6:	b974      	cbnz	r4, 800bcf6 <_dtoa_r+0x36>
 800bcd8:	2010      	movs	r0, #16
 800bcda:	f001 f977 	bl	800cfcc <malloc>
 800bcde:	4602      	mov	r2, r0
 800bce0:	61e8      	str	r0, [r5, #28]
 800bce2:	b920      	cbnz	r0, 800bcee <_dtoa_r+0x2e>
 800bce4:	21ef      	movs	r1, #239	; 0xef
 800bce6:	4bac      	ldr	r3, [pc, #688]	; (800bf98 <_dtoa_r+0x2d8>)
 800bce8:	48ac      	ldr	r0, [pc, #688]	; (800bf9c <_dtoa_r+0x2dc>)
 800bcea:	f002 f90b 	bl	800df04 <__assert_func>
 800bcee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcf2:	6004      	str	r4, [r0, #0]
 800bcf4:	60c4      	str	r4, [r0, #12]
 800bcf6:	69eb      	ldr	r3, [r5, #28]
 800bcf8:	6819      	ldr	r1, [r3, #0]
 800bcfa:	b151      	cbz	r1, 800bd12 <_dtoa_r+0x52>
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4093      	lsls	r3, r2
 800bd02:	604a      	str	r2, [r1, #4]
 800bd04:	608b      	str	r3, [r1, #8]
 800bd06:	4628      	mov	r0, r5
 800bd08:	f001 fa66 	bl	800d1d8 <_Bfree>
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	69eb      	ldr	r3, [r5, #28]
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	1e3b      	subs	r3, r7, #0
 800bd14:	bfaf      	iteee	ge
 800bd16:	2300      	movge	r3, #0
 800bd18:	2201      	movlt	r2, #1
 800bd1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd1e:	9305      	strlt	r3, [sp, #20]
 800bd20:	bfa8      	it	ge
 800bd22:	f8c8 3000 	strge.w	r3, [r8]
 800bd26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bd2a:	4b9d      	ldr	r3, [pc, #628]	; (800bfa0 <_dtoa_r+0x2e0>)
 800bd2c:	bfb8      	it	lt
 800bd2e:	f8c8 2000 	strlt.w	r2, [r8]
 800bd32:	ea33 0309 	bics.w	r3, r3, r9
 800bd36:	d119      	bne.n	800bd6c <_dtoa_r+0xac>
 800bd38:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd3e:	6013      	str	r3, [r2, #0]
 800bd40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd44:	4333      	orrs	r3, r6
 800bd46:	f000 8589 	beq.w	800c85c <_dtoa_r+0xb9c>
 800bd4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd4c:	b953      	cbnz	r3, 800bd64 <_dtoa_r+0xa4>
 800bd4e:	4b95      	ldr	r3, [pc, #596]	; (800bfa4 <_dtoa_r+0x2e4>)
 800bd50:	e023      	b.n	800bd9a <_dtoa_r+0xda>
 800bd52:	4b95      	ldr	r3, [pc, #596]	; (800bfa8 <_dtoa_r+0x2e8>)
 800bd54:	9303      	str	r3, [sp, #12]
 800bd56:	3308      	adds	r3, #8
 800bd58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	9803      	ldr	r0, [sp, #12]
 800bd5e:	b019      	add	sp, #100	; 0x64
 800bd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd64:	4b8f      	ldr	r3, [pc, #572]	; (800bfa4 <_dtoa_r+0x2e4>)
 800bd66:	9303      	str	r3, [sp, #12]
 800bd68:	3303      	adds	r3, #3
 800bd6a:	e7f5      	b.n	800bd58 <_dtoa_r+0x98>
 800bd6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bd70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bd74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f7f4 fe84 	bl	8000a88 <__aeabi_dcmpeq>
 800bd80:	4680      	mov	r8, r0
 800bd82:	b160      	cbz	r0, 800bd9e <_dtoa_r+0xde>
 800bd84:	2301      	movs	r3, #1
 800bd86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 8562 	beq.w	800c856 <_dtoa_r+0xb96>
 800bd92:	4b86      	ldr	r3, [pc, #536]	; (800bfac <_dtoa_r+0x2ec>)
 800bd94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	9303      	str	r3, [sp, #12]
 800bd9c:	e7de      	b.n	800bd5c <_dtoa_r+0x9c>
 800bd9e:	ab16      	add	r3, sp, #88	; 0x58
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	ab17      	add	r3, sp, #92	; 0x5c
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	4628      	mov	r0, r5
 800bda8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bdac:	f001 fda8 	bl	800d900 <__d2b>
 800bdb0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bdb4:	4682      	mov	sl, r0
 800bdb6:	2c00      	cmp	r4, #0
 800bdb8:	d07e      	beq.n	800beb8 <_dtoa_r+0x1f8>
 800bdba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdc0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bdc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdc8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bdcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdd0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4b75      	ldr	r3, [pc, #468]	; (800bfb0 <_dtoa_r+0x2f0>)
 800bdda:	f7f4 fa35 	bl	8000248 <__aeabi_dsub>
 800bdde:	a368      	add	r3, pc, #416	; (adr r3, 800bf80 <_dtoa_r+0x2c0>)
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	f7f4 fbe8 	bl	80005b8 <__aeabi_dmul>
 800bde8:	a367      	add	r3, pc, #412	; (adr r3, 800bf88 <_dtoa_r+0x2c8>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fa2d 	bl	800024c <__adddf3>
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	460f      	mov	r7, r1
 800bdf8:	f7f4 fb74 	bl	80004e4 <__aeabi_i2d>
 800bdfc:	a364      	add	r3, pc, #400	; (adr r3, 800bf90 <_dtoa_r+0x2d0>)
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f7f4 fbd9 	bl	80005b8 <__aeabi_dmul>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4630      	mov	r0, r6
 800be0c:	4639      	mov	r1, r7
 800be0e:	f7f4 fa1d 	bl	800024c <__adddf3>
 800be12:	4606      	mov	r6, r0
 800be14:	460f      	mov	r7, r1
 800be16:	f7f4 fe7f 	bl	8000b18 <__aeabi_d2iz>
 800be1a:	2200      	movs	r2, #0
 800be1c:	4683      	mov	fp, r0
 800be1e:	2300      	movs	r3, #0
 800be20:	4630      	mov	r0, r6
 800be22:	4639      	mov	r1, r7
 800be24:	f7f4 fe3a 	bl	8000a9c <__aeabi_dcmplt>
 800be28:	b148      	cbz	r0, 800be3e <_dtoa_r+0x17e>
 800be2a:	4658      	mov	r0, fp
 800be2c:	f7f4 fb5a 	bl	80004e4 <__aeabi_i2d>
 800be30:	4632      	mov	r2, r6
 800be32:	463b      	mov	r3, r7
 800be34:	f7f4 fe28 	bl	8000a88 <__aeabi_dcmpeq>
 800be38:	b908      	cbnz	r0, 800be3e <_dtoa_r+0x17e>
 800be3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be3e:	f1bb 0f16 	cmp.w	fp, #22
 800be42:	d857      	bhi.n	800bef4 <_dtoa_r+0x234>
 800be44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be48:	4b5a      	ldr	r3, [pc, #360]	; (800bfb4 <_dtoa_r+0x2f4>)
 800be4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f7f4 fe23 	bl	8000a9c <__aeabi_dcmplt>
 800be56:	2800      	cmp	r0, #0
 800be58:	d04e      	beq.n	800bef8 <_dtoa_r+0x238>
 800be5a:	2300      	movs	r3, #0
 800be5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be60:	930f      	str	r3, [sp, #60]	; 0x3c
 800be62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be64:	1b1b      	subs	r3, r3, r4
 800be66:	1e5a      	subs	r2, r3, #1
 800be68:	bf46      	itte	mi
 800be6a:	f1c3 0901 	rsbmi	r9, r3, #1
 800be6e:	2300      	movmi	r3, #0
 800be70:	f04f 0900 	movpl.w	r9, #0
 800be74:	9209      	str	r2, [sp, #36]	; 0x24
 800be76:	bf48      	it	mi
 800be78:	9309      	strmi	r3, [sp, #36]	; 0x24
 800be7a:	f1bb 0f00 	cmp.w	fp, #0
 800be7e:	db3d      	blt.n	800befc <_dtoa_r+0x23c>
 800be80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be82:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800be86:	445b      	add	r3, fp
 800be88:	9309      	str	r3, [sp, #36]	; 0x24
 800be8a:	2300      	movs	r3, #0
 800be8c:	930a      	str	r3, [sp, #40]	; 0x28
 800be8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be90:	2b09      	cmp	r3, #9
 800be92:	d867      	bhi.n	800bf64 <_dtoa_r+0x2a4>
 800be94:	2b05      	cmp	r3, #5
 800be96:	bfc4      	itt	gt
 800be98:	3b04      	subgt	r3, #4
 800be9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800be9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be9e:	bfc8      	it	gt
 800bea0:	2400      	movgt	r4, #0
 800bea2:	f1a3 0302 	sub.w	r3, r3, #2
 800bea6:	bfd8      	it	le
 800bea8:	2401      	movle	r4, #1
 800beaa:	2b03      	cmp	r3, #3
 800beac:	f200 8086 	bhi.w	800bfbc <_dtoa_r+0x2fc>
 800beb0:	e8df f003 	tbb	[pc, r3]
 800beb4:	5637392c 	.word	0x5637392c
 800beb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bebc:	441c      	add	r4, r3
 800bebe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bec2:	2b20      	cmp	r3, #32
 800bec4:	bfc1      	itttt	gt
 800bec6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800beca:	fa09 f903 	lslgt.w	r9, r9, r3
 800bece:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800bed2:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bed6:	bfd6      	itet	le
 800bed8:	f1c3 0320 	rsble	r3, r3, #32
 800bedc:	ea49 0003 	orrgt.w	r0, r9, r3
 800bee0:	fa06 f003 	lslle.w	r0, r6, r3
 800bee4:	f7f4 faee 	bl	80004c4 <__aeabi_ui2d>
 800bee8:	2201      	movs	r2, #1
 800beea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800beee:	3c01      	subs	r4, #1
 800bef0:	9213      	str	r2, [sp, #76]	; 0x4c
 800bef2:	e76f      	b.n	800bdd4 <_dtoa_r+0x114>
 800bef4:	2301      	movs	r3, #1
 800bef6:	e7b3      	b.n	800be60 <_dtoa_r+0x1a0>
 800bef8:	900f      	str	r0, [sp, #60]	; 0x3c
 800befa:	e7b2      	b.n	800be62 <_dtoa_r+0x1a2>
 800befc:	f1cb 0300 	rsb	r3, fp, #0
 800bf00:	930a      	str	r3, [sp, #40]	; 0x28
 800bf02:	2300      	movs	r3, #0
 800bf04:	eba9 090b 	sub.w	r9, r9, fp
 800bf08:	930e      	str	r3, [sp, #56]	; 0x38
 800bf0a:	e7c0      	b.n	800be8e <_dtoa_r+0x1ce>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dc55      	bgt.n	800bfc2 <_dtoa_r+0x302>
 800bf16:	2301      	movs	r3, #1
 800bf18:	461a      	mov	r2, r3
 800bf1a:	9306      	str	r3, [sp, #24]
 800bf1c:	9308      	str	r3, [sp, #32]
 800bf1e:	9223      	str	r2, [sp, #140]	; 0x8c
 800bf20:	e00b      	b.n	800bf3a <_dtoa_r+0x27a>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e7f3      	b.n	800bf0e <_dtoa_r+0x24e>
 800bf26:	2300      	movs	r3, #0
 800bf28:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf2c:	445b      	add	r3, fp
 800bf2e:	9306      	str	r3, [sp, #24]
 800bf30:	3301      	adds	r3, #1
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	9308      	str	r3, [sp, #32]
 800bf36:	bfb8      	it	lt
 800bf38:	2301      	movlt	r3, #1
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	2204      	movs	r2, #4
 800bf3e:	69e8      	ldr	r0, [r5, #28]
 800bf40:	f102 0614 	add.w	r6, r2, #20
 800bf44:	429e      	cmp	r6, r3
 800bf46:	d940      	bls.n	800bfca <_dtoa_r+0x30a>
 800bf48:	6041      	str	r1, [r0, #4]
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f001 f904 	bl	800d158 <_Balloc>
 800bf50:	9003      	str	r0, [sp, #12]
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d13c      	bne.n	800bfd0 <_dtoa_r+0x310>
 800bf56:	4602      	mov	r2, r0
 800bf58:	f240 11af 	movw	r1, #431	; 0x1af
 800bf5c:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <_dtoa_r+0x2f8>)
 800bf5e:	e6c3      	b.n	800bce8 <_dtoa_r+0x28>
 800bf60:	2301      	movs	r3, #1
 800bf62:	e7e1      	b.n	800bf28 <_dtoa_r+0x268>
 800bf64:	2401      	movs	r4, #1
 800bf66:	2300      	movs	r3, #0
 800bf68:	940b      	str	r4, [sp, #44]	; 0x2c
 800bf6a:	9322      	str	r3, [sp, #136]	; 0x88
 800bf6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf70:	2200      	movs	r2, #0
 800bf72:	9306      	str	r3, [sp, #24]
 800bf74:	9308      	str	r3, [sp, #32]
 800bf76:	2312      	movs	r3, #18
 800bf78:	e7d1      	b.n	800bf1e <_dtoa_r+0x25e>
 800bf7a:	bf00      	nop
 800bf7c:	f3af 8000 	nop.w
 800bf80:	636f4361 	.word	0x636f4361
 800bf84:	3fd287a7 	.word	0x3fd287a7
 800bf88:	8b60c8b3 	.word	0x8b60c8b3
 800bf8c:	3fc68a28 	.word	0x3fc68a28
 800bf90:	509f79fb 	.word	0x509f79fb
 800bf94:	3fd34413 	.word	0x3fd34413
 800bf98:	0800e699 	.word	0x0800e699
 800bf9c:	0800e6b0 	.word	0x0800e6b0
 800bfa0:	7ff00000 	.word	0x7ff00000
 800bfa4:	0800e695 	.word	0x0800e695
 800bfa8:	0800e68c 	.word	0x0800e68c
 800bfac:	0800e661 	.word	0x0800e661
 800bfb0:	3ff80000 	.word	0x3ff80000
 800bfb4:	0800e800 	.word	0x0800e800
 800bfb8:	0800e708 	.word	0x0800e708
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfc0:	e7d4      	b.n	800bf6c <_dtoa_r+0x2ac>
 800bfc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfc4:	9306      	str	r3, [sp, #24]
 800bfc6:	9308      	str	r3, [sp, #32]
 800bfc8:	e7b7      	b.n	800bf3a <_dtoa_r+0x27a>
 800bfca:	3101      	adds	r1, #1
 800bfcc:	0052      	lsls	r2, r2, #1
 800bfce:	e7b7      	b.n	800bf40 <_dtoa_r+0x280>
 800bfd0:	69eb      	ldr	r3, [r5, #28]
 800bfd2:	9a03      	ldr	r2, [sp, #12]
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	9b08      	ldr	r3, [sp, #32]
 800bfd8:	2b0e      	cmp	r3, #14
 800bfda:	f200 80a8 	bhi.w	800c12e <_dtoa_r+0x46e>
 800bfde:	2c00      	cmp	r4, #0
 800bfe0:	f000 80a5 	beq.w	800c12e <_dtoa_r+0x46e>
 800bfe4:	f1bb 0f00 	cmp.w	fp, #0
 800bfe8:	dd34      	ble.n	800c054 <_dtoa_r+0x394>
 800bfea:	4b9a      	ldr	r3, [pc, #616]	; (800c254 <_dtoa_r+0x594>)
 800bfec:	f00b 020f 	and.w	r2, fp, #15
 800bff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bff4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bff8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bffc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c000:	ea4f 142b 	mov.w	r4, fp, asr #4
 800c004:	d016      	beq.n	800c034 <_dtoa_r+0x374>
 800c006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c00a:	4b93      	ldr	r3, [pc, #588]	; (800c258 <_dtoa_r+0x598>)
 800c00c:	2703      	movs	r7, #3
 800c00e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c012:	f7f4 fbfb 	bl	800080c <__aeabi_ddiv>
 800c016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c01a:	f004 040f 	and.w	r4, r4, #15
 800c01e:	4e8e      	ldr	r6, [pc, #568]	; (800c258 <_dtoa_r+0x598>)
 800c020:	b954      	cbnz	r4, 800c038 <_dtoa_r+0x378>
 800c022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c02a:	f7f4 fbef 	bl	800080c <__aeabi_ddiv>
 800c02e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c032:	e029      	b.n	800c088 <_dtoa_r+0x3c8>
 800c034:	2702      	movs	r7, #2
 800c036:	e7f2      	b.n	800c01e <_dtoa_r+0x35e>
 800c038:	07e1      	lsls	r1, r4, #31
 800c03a:	d508      	bpl.n	800c04e <_dtoa_r+0x38e>
 800c03c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c040:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c044:	f7f4 fab8 	bl	80005b8 <__aeabi_dmul>
 800c048:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c04c:	3701      	adds	r7, #1
 800c04e:	1064      	asrs	r4, r4, #1
 800c050:	3608      	adds	r6, #8
 800c052:	e7e5      	b.n	800c020 <_dtoa_r+0x360>
 800c054:	f000 80a5 	beq.w	800c1a2 <_dtoa_r+0x4e2>
 800c058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c05c:	f1cb 0400 	rsb	r4, fp, #0
 800c060:	4b7c      	ldr	r3, [pc, #496]	; (800c254 <_dtoa_r+0x594>)
 800c062:	f004 020f 	and.w	r2, r4, #15
 800c066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	f7f4 faa3 	bl	80005b8 <__aeabi_dmul>
 800c072:	2702      	movs	r7, #2
 800c074:	2300      	movs	r3, #0
 800c076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c07a:	4e77      	ldr	r6, [pc, #476]	; (800c258 <_dtoa_r+0x598>)
 800c07c:	1124      	asrs	r4, r4, #4
 800c07e:	2c00      	cmp	r4, #0
 800c080:	f040 8084 	bne.w	800c18c <_dtoa_r+0x4cc>
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1d2      	bne.n	800c02e <_dtoa_r+0x36e>
 800c088:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c08c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 8087 	beq.w	800c1a6 <_dtoa_r+0x4e6>
 800c098:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c09c:	2200      	movs	r2, #0
 800c09e:	4b6f      	ldr	r3, [pc, #444]	; (800c25c <_dtoa_r+0x59c>)
 800c0a0:	f7f4 fcfc 	bl	8000a9c <__aeabi_dcmplt>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d07e      	beq.n	800c1a6 <_dtoa_r+0x4e6>
 800c0a8:	9b08      	ldr	r3, [sp, #32]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d07b      	beq.n	800c1a6 <_dtoa_r+0x4e6>
 800c0ae:	9b06      	ldr	r3, [sp, #24]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	dd38      	ble.n	800c126 <_dtoa_r+0x466>
 800c0b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	4b69      	ldr	r3, [pc, #420]	; (800c260 <_dtoa_r+0x5a0>)
 800c0bc:	f7f4 fa7c 	bl	80005b8 <__aeabi_dmul>
 800c0c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0c4:	9c06      	ldr	r4, [sp, #24]
 800c0c6:	f10b 38ff 	add.w	r8, fp, #4294967295
 800c0ca:	3701      	adds	r7, #1
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	f7f4 fa09 	bl	80004e4 <__aeabi_i2d>
 800c0d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0d6:	f7f4 fa6f 	bl	80005b8 <__aeabi_dmul>
 800c0da:	2200      	movs	r2, #0
 800c0dc:	4b61      	ldr	r3, [pc, #388]	; (800c264 <_dtoa_r+0x5a4>)
 800c0de:	f7f4 f8b5 	bl	800024c <__adddf3>
 800c0e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c0e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0ea:	9611      	str	r6, [sp, #68]	; 0x44
 800c0ec:	2c00      	cmp	r4, #0
 800c0ee:	d15d      	bne.n	800c1ac <_dtoa_r+0x4ec>
 800c0f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	4b5c      	ldr	r3, [pc, #368]	; (800c268 <_dtoa_r+0x5a8>)
 800c0f8:	f7f4 f8a6 	bl	8000248 <__aeabi_dsub>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c104:	4633      	mov	r3, r6
 800c106:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c108:	f7f4 fce6 	bl	8000ad8 <__aeabi_dcmpgt>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	f040 8295 	bne.w	800c63c <_dtoa_r+0x97c>
 800c112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c116:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c118:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c11c:	f7f4 fcbe 	bl	8000a9c <__aeabi_dcmplt>
 800c120:	2800      	cmp	r0, #0
 800c122:	f040 8289 	bne.w	800c638 <_dtoa_r+0x978>
 800c126:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c12a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c12e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c130:	2b00      	cmp	r3, #0
 800c132:	f2c0 8151 	blt.w	800c3d8 <_dtoa_r+0x718>
 800c136:	f1bb 0f0e 	cmp.w	fp, #14
 800c13a:	f300 814d 	bgt.w	800c3d8 <_dtoa_r+0x718>
 800c13e:	4b45      	ldr	r3, [pc, #276]	; (800c254 <_dtoa_r+0x594>)
 800c140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c144:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c148:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c14c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f280 80da 	bge.w	800c308 <_dtoa_r+0x648>
 800c154:	9b08      	ldr	r3, [sp, #32]
 800c156:	2b00      	cmp	r3, #0
 800c158:	f300 80d6 	bgt.w	800c308 <_dtoa_r+0x648>
 800c15c:	f040 826b 	bne.w	800c636 <_dtoa_r+0x976>
 800c160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c164:	2200      	movs	r2, #0
 800c166:	4b40      	ldr	r3, [pc, #256]	; (800c268 <_dtoa_r+0x5a8>)
 800c168:	f7f4 fa26 	bl	80005b8 <__aeabi_dmul>
 800c16c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c170:	f7f4 fca8 	bl	8000ac4 <__aeabi_dcmpge>
 800c174:	9c08      	ldr	r4, [sp, #32]
 800c176:	4626      	mov	r6, r4
 800c178:	2800      	cmp	r0, #0
 800c17a:	f040 8241 	bne.w	800c600 <_dtoa_r+0x940>
 800c17e:	2331      	movs	r3, #49	; 0x31
 800c180:	9f03      	ldr	r7, [sp, #12]
 800c182:	f10b 0b01 	add.w	fp, fp, #1
 800c186:	f807 3b01 	strb.w	r3, [r7], #1
 800c18a:	e23d      	b.n	800c608 <_dtoa_r+0x948>
 800c18c:	07e2      	lsls	r2, r4, #31
 800c18e:	d505      	bpl.n	800c19c <_dtoa_r+0x4dc>
 800c190:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c194:	f7f4 fa10 	bl	80005b8 <__aeabi_dmul>
 800c198:	2301      	movs	r3, #1
 800c19a:	3701      	adds	r7, #1
 800c19c:	1064      	asrs	r4, r4, #1
 800c19e:	3608      	adds	r6, #8
 800c1a0:	e76d      	b.n	800c07e <_dtoa_r+0x3be>
 800c1a2:	2702      	movs	r7, #2
 800c1a4:	e770      	b.n	800c088 <_dtoa_r+0x3c8>
 800c1a6:	46d8      	mov	r8, fp
 800c1a8:	9c08      	ldr	r4, [sp, #32]
 800c1aa:	e78f      	b.n	800c0cc <_dtoa_r+0x40c>
 800c1ac:	9903      	ldr	r1, [sp, #12]
 800c1ae:	4b29      	ldr	r3, [pc, #164]	; (800c254 <_dtoa_r+0x594>)
 800c1b0:	4421      	add	r1, r4
 800c1b2:	9112      	str	r1, [sp, #72]	; 0x48
 800c1b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c1be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1c2:	2900      	cmp	r1, #0
 800c1c4:	d054      	beq.n	800c270 <_dtoa_r+0x5b0>
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	4928      	ldr	r1, [pc, #160]	; (800c26c <_dtoa_r+0x5ac>)
 800c1ca:	f7f4 fb1f 	bl	800080c <__aeabi_ddiv>
 800c1ce:	463b      	mov	r3, r7
 800c1d0:	4632      	mov	r2, r6
 800c1d2:	f7f4 f839 	bl	8000248 <__aeabi_dsub>
 800c1d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c1da:	9f03      	ldr	r7, [sp, #12]
 800c1dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e0:	f7f4 fc9a 	bl	8000b18 <__aeabi_d2iz>
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	f7f4 f97d 	bl	80004e4 <__aeabi_i2d>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1f2:	f7f4 f829 	bl	8000248 <__aeabi_dsub>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	3430      	adds	r4, #48	; 0x30
 800c1fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c200:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c204:	f807 4b01 	strb.w	r4, [r7], #1
 800c208:	f7f4 fc48 	bl	8000a9c <__aeabi_dcmplt>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d173      	bne.n	800c2f8 <_dtoa_r+0x638>
 800c210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c214:	2000      	movs	r0, #0
 800c216:	4911      	ldr	r1, [pc, #68]	; (800c25c <_dtoa_r+0x59c>)
 800c218:	f7f4 f816 	bl	8000248 <__aeabi_dsub>
 800c21c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c220:	f7f4 fc3c 	bl	8000a9c <__aeabi_dcmplt>
 800c224:	2800      	cmp	r0, #0
 800c226:	f040 80b6 	bne.w	800c396 <_dtoa_r+0x6d6>
 800c22a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c22c:	429f      	cmp	r7, r3
 800c22e:	f43f af7a 	beq.w	800c126 <_dtoa_r+0x466>
 800c232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c236:	2200      	movs	r2, #0
 800c238:	4b09      	ldr	r3, [pc, #36]	; (800c260 <_dtoa_r+0x5a0>)
 800c23a:	f7f4 f9bd 	bl	80005b8 <__aeabi_dmul>
 800c23e:	2200      	movs	r2, #0
 800c240:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <_dtoa_r+0x5a0>)
 800c24a:	f7f4 f9b5 	bl	80005b8 <__aeabi_dmul>
 800c24e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c252:	e7c3      	b.n	800c1dc <_dtoa_r+0x51c>
 800c254:	0800e800 	.word	0x0800e800
 800c258:	0800e7d8 	.word	0x0800e7d8
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	40240000 	.word	0x40240000
 800c264:	401c0000 	.word	0x401c0000
 800c268:	40140000 	.word	0x40140000
 800c26c:	3fe00000 	.word	0x3fe00000
 800c270:	4630      	mov	r0, r6
 800c272:	4639      	mov	r1, r7
 800c274:	f7f4 f9a0 	bl	80005b8 <__aeabi_dmul>
 800c278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c27a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c27e:	9c03      	ldr	r4, [sp, #12]
 800c280:	9314      	str	r3, [sp, #80]	; 0x50
 800c282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c286:	f7f4 fc47 	bl	8000b18 <__aeabi_d2iz>
 800c28a:	9015      	str	r0, [sp, #84]	; 0x54
 800c28c:	f7f4 f92a 	bl	80004e4 <__aeabi_i2d>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c298:	f7f3 ffd6 	bl	8000248 <__aeabi_dsub>
 800c29c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c29e:	4606      	mov	r6, r0
 800c2a0:	3330      	adds	r3, #48	; 0x30
 800c2a2:	f804 3b01 	strb.w	r3, [r4], #1
 800c2a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2a8:	460f      	mov	r7, r1
 800c2aa:	429c      	cmp	r4, r3
 800c2ac:	f04f 0200 	mov.w	r2, #0
 800c2b0:	d124      	bne.n	800c2fc <_dtoa_r+0x63c>
 800c2b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c2b6:	4baf      	ldr	r3, [pc, #700]	; (800c574 <_dtoa_r+0x8b4>)
 800c2b8:	f7f3 ffc8 	bl	800024c <__adddf3>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	f7f4 fc08 	bl	8000ad8 <__aeabi_dcmpgt>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d163      	bne.n	800c394 <_dtoa_r+0x6d4>
 800c2cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	49a8      	ldr	r1, [pc, #672]	; (800c574 <_dtoa_r+0x8b4>)
 800c2d4:	f7f3 ffb8 	bl	8000248 <__aeabi_dsub>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4630      	mov	r0, r6
 800c2de:	4639      	mov	r1, r7
 800c2e0:	f7f4 fbdc 	bl	8000a9c <__aeabi_dcmplt>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f43f af1e 	beq.w	800c126 <_dtoa_r+0x466>
 800c2ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c2ec:	1e7b      	subs	r3, r7, #1
 800c2ee:	9314      	str	r3, [sp, #80]	; 0x50
 800c2f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c2f4:	2b30      	cmp	r3, #48	; 0x30
 800c2f6:	d0f8      	beq.n	800c2ea <_dtoa_r+0x62a>
 800c2f8:	46c3      	mov	fp, r8
 800c2fa:	e03b      	b.n	800c374 <_dtoa_r+0x6b4>
 800c2fc:	4b9e      	ldr	r3, [pc, #632]	; (800c578 <_dtoa_r+0x8b8>)
 800c2fe:	f7f4 f95b 	bl	80005b8 <__aeabi_dmul>
 800c302:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c306:	e7bc      	b.n	800c282 <_dtoa_r+0x5c2>
 800c308:	9f03      	ldr	r7, [sp, #12]
 800c30a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c30e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c312:	4640      	mov	r0, r8
 800c314:	4649      	mov	r1, r9
 800c316:	f7f4 fa79 	bl	800080c <__aeabi_ddiv>
 800c31a:	f7f4 fbfd 	bl	8000b18 <__aeabi_d2iz>
 800c31e:	4604      	mov	r4, r0
 800c320:	f7f4 f8e0 	bl	80004e4 <__aeabi_i2d>
 800c324:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c328:	f7f4 f946 	bl	80005b8 <__aeabi_dmul>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4640      	mov	r0, r8
 800c332:	4649      	mov	r1, r9
 800c334:	f7f3 ff88 	bl	8000248 <__aeabi_dsub>
 800c338:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c33c:	f807 6b01 	strb.w	r6, [r7], #1
 800c340:	9e03      	ldr	r6, [sp, #12]
 800c342:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c346:	1bbe      	subs	r6, r7, r6
 800c348:	45b4      	cmp	ip, r6
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	d136      	bne.n	800c3be <_dtoa_r+0x6fe>
 800c350:	f7f3 ff7c 	bl	800024c <__adddf3>
 800c354:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c358:	4680      	mov	r8, r0
 800c35a:	4689      	mov	r9, r1
 800c35c:	f7f4 fbbc 	bl	8000ad8 <__aeabi_dcmpgt>
 800c360:	bb58      	cbnz	r0, 800c3ba <_dtoa_r+0x6fa>
 800c362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c366:	4640      	mov	r0, r8
 800c368:	4649      	mov	r1, r9
 800c36a:	f7f4 fb8d 	bl	8000a88 <__aeabi_dcmpeq>
 800c36e:	b108      	cbz	r0, 800c374 <_dtoa_r+0x6b4>
 800c370:	07e3      	lsls	r3, r4, #31
 800c372:	d422      	bmi.n	800c3ba <_dtoa_r+0x6fa>
 800c374:	4651      	mov	r1, sl
 800c376:	4628      	mov	r0, r5
 800c378:	f000 ff2e 	bl	800d1d8 <_Bfree>
 800c37c:	2300      	movs	r3, #0
 800c37e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c380:	703b      	strb	r3, [r7, #0]
 800c382:	f10b 0301 	add.w	r3, fp, #1
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f43f ace6 	beq.w	800bd5c <_dtoa_r+0x9c>
 800c390:	601f      	str	r7, [r3, #0]
 800c392:	e4e3      	b.n	800bd5c <_dtoa_r+0x9c>
 800c394:	4627      	mov	r7, r4
 800c396:	463b      	mov	r3, r7
 800c398:	461f      	mov	r7, r3
 800c39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c39e:	2a39      	cmp	r2, #57	; 0x39
 800c3a0:	d107      	bne.n	800c3b2 <_dtoa_r+0x6f2>
 800c3a2:	9a03      	ldr	r2, [sp, #12]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d1f7      	bne.n	800c398 <_dtoa_r+0x6d8>
 800c3a8:	2230      	movs	r2, #48	; 0x30
 800c3aa:	9903      	ldr	r1, [sp, #12]
 800c3ac:	f108 0801 	add.w	r8, r8, #1
 800c3b0:	700a      	strb	r2, [r1, #0]
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	3201      	adds	r2, #1
 800c3b6:	701a      	strb	r2, [r3, #0]
 800c3b8:	e79e      	b.n	800c2f8 <_dtoa_r+0x638>
 800c3ba:	46d8      	mov	r8, fp
 800c3bc:	e7eb      	b.n	800c396 <_dtoa_r+0x6d6>
 800c3be:	2200      	movs	r2, #0
 800c3c0:	4b6d      	ldr	r3, [pc, #436]	; (800c578 <_dtoa_r+0x8b8>)
 800c3c2:	f7f4 f8f9 	bl	80005b8 <__aeabi_dmul>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4680      	mov	r8, r0
 800c3cc:	4689      	mov	r9, r1
 800c3ce:	f7f4 fb5b 	bl	8000a88 <__aeabi_dcmpeq>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	d09b      	beq.n	800c30e <_dtoa_r+0x64e>
 800c3d6:	e7cd      	b.n	800c374 <_dtoa_r+0x6b4>
 800c3d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3da:	2a00      	cmp	r2, #0
 800c3dc:	f000 80c4 	beq.w	800c568 <_dtoa_r+0x8a8>
 800c3e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c3e2:	2a01      	cmp	r2, #1
 800c3e4:	f300 80a8 	bgt.w	800c538 <_dtoa_r+0x878>
 800c3e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3ea:	2a00      	cmp	r2, #0
 800c3ec:	f000 80a0 	beq.w	800c530 <_dtoa_r+0x870>
 800c3f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3f4:	464f      	mov	r7, r9
 800c3f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	441a      	add	r2, r3
 800c3fe:	4628      	mov	r0, r5
 800c400:	4499      	add	r9, r3
 800c402:	9209      	str	r2, [sp, #36]	; 0x24
 800c404:	f000 ffe8 	bl	800d3d8 <__i2b>
 800c408:	4606      	mov	r6, r0
 800c40a:	b15f      	cbz	r7, 800c424 <_dtoa_r+0x764>
 800c40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c40e:	2b00      	cmp	r3, #0
 800c410:	dd08      	ble.n	800c424 <_dtoa_r+0x764>
 800c412:	42bb      	cmp	r3, r7
 800c414:	bfa8      	it	ge
 800c416:	463b      	movge	r3, r7
 800c418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c41a:	eba9 0903 	sub.w	r9, r9, r3
 800c41e:	1aff      	subs	r7, r7, r3
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	9309      	str	r3, [sp, #36]	; 0x24
 800c424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c426:	b1f3      	cbz	r3, 800c466 <_dtoa_r+0x7a6>
 800c428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 80a0 	beq.w	800c570 <_dtoa_r+0x8b0>
 800c430:	2c00      	cmp	r4, #0
 800c432:	dd10      	ble.n	800c456 <_dtoa_r+0x796>
 800c434:	4631      	mov	r1, r6
 800c436:	4622      	mov	r2, r4
 800c438:	4628      	mov	r0, r5
 800c43a:	f001 f88b 	bl	800d554 <__pow5mult>
 800c43e:	4652      	mov	r2, sl
 800c440:	4601      	mov	r1, r0
 800c442:	4606      	mov	r6, r0
 800c444:	4628      	mov	r0, r5
 800c446:	f000 ffdd 	bl	800d404 <__multiply>
 800c44a:	4680      	mov	r8, r0
 800c44c:	4651      	mov	r1, sl
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 fec2 	bl	800d1d8 <_Bfree>
 800c454:	46c2      	mov	sl, r8
 800c456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c458:	1b1a      	subs	r2, r3, r4
 800c45a:	d004      	beq.n	800c466 <_dtoa_r+0x7a6>
 800c45c:	4651      	mov	r1, sl
 800c45e:	4628      	mov	r0, r5
 800c460:	f001 f878 	bl	800d554 <__pow5mult>
 800c464:	4682      	mov	sl, r0
 800c466:	2101      	movs	r1, #1
 800c468:	4628      	mov	r0, r5
 800c46a:	f000 ffb5 	bl	800d3d8 <__i2b>
 800c46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c470:	4604      	mov	r4, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	f340 8082 	ble.w	800c57c <_dtoa_r+0x8bc>
 800c478:	461a      	mov	r2, r3
 800c47a:	4601      	mov	r1, r0
 800c47c:	4628      	mov	r0, r5
 800c47e:	f001 f869 	bl	800d554 <__pow5mult>
 800c482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c484:	4604      	mov	r4, r0
 800c486:	2b01      	cmp	r3, #1
 800c488:	dd7b      	ble.n	800c582 <_dtoa_r+0x8c2>
 800c48a:	f04f 0800 	mov.w	r8, #0
 800c48e:	6923      	ldr	r3, [r4, #16]
 800c490:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c494:	6918      	ldr	r0, [r3, #16]
 800c496:	f000 ff51 	bl	800d33c <__hi0bits>
 800c49a:	f1c0 0020 	rsb	r0, r0, #32
 800c49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a0:	4418      	add	r0, r3
 800c4a2:	f010 001f 	ands.w	r0, r0, #31
 800c4a6:	f000 8092 	beq.w	800c5ce <_dtoa_r+0x90e>
 800c4aa:	f1c0 0320 	rsb	r3, r0, #32
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	f340 8085 	ble.w	800c5be <_dtoa_r+0x8fe>
 800c4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b6:	f1c0 001c 	rsb	r0, r0, #28
 800c4ba:	4403      	add	r3, r0
 800c4bc:	4481      	add	r9, r0
 800c4be:	4407      	add	r7, r0
 800c4c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c4c2:	f1b9 0f00 	cmp.w	r9, #0
 800c4c6:	dd05      	ble.n	800c4d4 <_dtoa_r+0x814>
 800c4c8:	4651      	mov	r1, sl
 800c4ca:	464a      	mov	r2, r9
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f001 f89b 	bl	800d608 <__lshift>
 800c4d2:	4682      	mov	sl, r0
 800c4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	dd05      	ble.n	800c4e6 <_dtoa_r+0x826>
 800c4da:	4621      	mov	r1, r4
 800c4dc:	461a      	mov	r2, r3
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f001 f892 	bl	800d608 <__lshift>
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d072      	beq.n	800c5d2 <_dtoa_r+0x912>
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4650      	mov	r0, sl
 800c4f0:	f001 f8f6 	bl	800d6e0 <__mcmp>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	da6c      	bge.n	800c5d2 <_dtoa_r+0x912>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4651      	mov	r1, sl
 800c4fc:	220a      	movs	r2, #10
 800c4fe:	4628      	mov	r0, r5
 800c500:	f000 fe8c 	bl	800d21c <__multadd>
 800c504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c506:	4682      	mov	sl, r0
 800c508:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 81ac 	beq.w	800c86a <_dtoa_r+0xbaa>
 800c512:	2300      	movs	r3, #0
 800c514:	4631      	mov	r1, r6
 800c516:	220a      	movs	r2, #10
 800c518:	4628      	mov	r0, r5
 800c51a:	f000 fe7f 	bl	800d21c <__multadd>
 800c51e:	9b06      	ldr	r3, [sp, #24]
 800c520:	4606      	mov	r6, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	f300 8093 	bgt.w	800c64e <_dtoa_r+0x98e>
 800c528:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	dc59      	bgt.n	800c5e2 <_dtoa_r+0x922>
 800c52e:	e08e      	b.n	800c64e <_dtoa_r+0x98e>
 800c530:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c532:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c536:	e75d      	b.n	800c3f4 <_dtoa_r+0x734>
 800c538:	9b08      	ldr	r3, [sp, #32]
 800c53a:	1e5c      	subs	r4, r3, #1
 800c53c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c53e:	42a3      	cmp	r3, r4
 800c540:	bfbf      	itttt	lt
 800c542:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c544:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c546:	1ae3      	sublt	r3, r4, r3
 800c548:	18d2      	addlt	r2, r2, r3
 800c54a:	bfa8      	it	ge
 800c54c:	1b1c      	subge	r4, r3, r4
 800c54e:	9b08      	ldr	r3, [sp, #32]
 800c550:	bfbe      	ittt	lt
 800c552:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c554:	920e      	strlt	r2, [sp, #56]	; 0x38
 800c556:	2400      	movlt	r4, #0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	bfb5      	itete	lt
 800c55c:	eba9 0703 	sublt.w	r7, r9, r3
 800c560:	464f      	movge	r7, r9
 800c562:	2300      	movlt	r3, #0
 800c564:	9b08      	ldrge	r3, [sp, #32]
 800c566:	e747      	b.n	800c3f8 <_dtoa_r+0x738>
 800c568:	464f      	mov	r7, r9
 800c56a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c56c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c56e:	e74c      	b.n	800c40a <_dtoa_r+0x74a>
 800c570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c572:	e773      	b.n	800c45c <_dtoa_r+0x79c>
 800c574:	3fe00000 	.word	0x3fe00000
 800c578:	40240000 	.word	0x40240000
 800c57c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c57e:	2b01      	cmp	r3, #1
 800c580:	dc18      	bgt.n	800c5b4 <_dtoa_r+0x8f4>
 800c582:	9b04      	ldr	r3, [sp, #16]
 800c584:	b9b3      	cbnz	r3, 800c5b4 <_dtoa_r+0x8f4>
 800c586:	9b05      	ldr	r3, [sp, #20]
 800c588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c58c:	b993      	cbnz	r3, 800c5b4 <_dtoa_r+0x8f4>
 800c58e:	9b05      	ldr	r3, [sp, #20]
 800c590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c594:	0d1b      	lsrs	r3, r3, #20
 800c596:	051b      	lsls	r3, r3, #20
 800c598:	b17b      	cbz	r3, 800c5ba <_dtoa_r+0x8fa>
 800c59a:	f04f 0801 	mov.w	r8, #1
 800c59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a0:	f109 0901 	add.w	r9, r9, #1
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f47f af6f 	bne.w	800c48e <_dtoa_r+0x7ce>
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	e774      	b.n	800c49e <_dtoa_r+0x7de>
 800c5b4:	f04f 0800 	mov.w	r8, #0
 800c5b8:	e7f6      	b.n	800c5a8 <_dtoa_r+0x8e8>
 800c5ba:	4698      	mov	r8, r3
 800c5bc:	e7f4      	b.n	800c5a8 <_dtoa_r+0x8e8>
 800c5be:	d080      	beq.n	800c4c2 <_dtoa_r+0x802>
 800c5c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5c2:	331c      	adds	r3, #28
 800c5c4:	441a      	add	r2, r3
 800c5c6:	4499      	add	r9, r3
 800c5c8:	441f      	add	r7, r3
 800c5ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c5cc:	e779      	b.n	800c4c2 <_dtoa_r+0x802>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	e7f6      	b.n	800c5c0 <_dtoa_r+0x900>
 800c5d2:	9b08      	ldr	r3, [sp, #32]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	dc34      	bgt.n	800c642 <_dtoa_r+0x982>
 800c5d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	dd31      	ble.n	800c642 <_dtoa_r+0x982>
 800c5de:	9b08      	ldr	r3, [sp, #32]
 800c5e0:	9306      	str	r3, [sp, #24]
 800c5e2:	9b06      	ldr	r3, [sp, #24]
 800c5e4:	b963      	cbnz	r3, 800c600 <_dtoa_r+0x940>
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	2205      	movs	r2, #5
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f000 fe16 	bl	800d21c <__multadd>
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4650      	mov	r0, sl
 800c5f6:	f001 f873 	bl	800d6e0 <__mcmp>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	f73f adbf 	bgt.w	800c17e <_dtoa_r+0x4be>
 800c600:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c602:	9f03      	ldr	r7, [sp, #12]
 800c604:	ea6f 0b03 	mvn.w	fp, r3
 800c608:	f04f 0800 	mov.w	r8, #0
 800c60c:	4621      	mov	r1, r4
 800c60e:	4628      	mov	r0, r5
 800c610:	f000 fde2 	bl	800d1d8 <_Bfree>
 800c614:	2e00      	cmp	r6, #0
 800c616:	f43f aead 	beq.w	800c374 <_dtoa_r+0x6b4>
 800c61a:	f1b8 0f00 	cmp.w	r8, #0
 800c61e:	d005      	beq.n	800c62c <_dtoa_r+0x96c>
 800c620:	45b0      	cmp	r8, r6
 800c622:	d003      	beq.n	800c62c <_dtoa_r+0x96c>
 800c624:	4641      	mov	r1, r8
 800c626:	4628      	mov	r0, r5
 800c628:	f000 fdd6 	bl	800d1d8 <_Bfree>
 800c62c:	4631      	mov	r1, r6
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 fdd2 	bl	800d1d8 <_Bfree>
 800c634:	e69e      	b.n	800c374 <_dtoa_r+0x6b4>
 800c636:	2400      	movs	r4, #0
 800c638:	4626      	mov	r6, r4
 800c63a:	e7e1      	b.n	800c600 <_dtoa_r+0x940>
 800c63c:	46c3      	mov	fp, r8
 800c63e:	4626      	mov	r6, r4
 800c640:	e59d      	b.n	800c17e <_dtoa_r+0x4be>
 800c642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 80c8 	beq.w	800c7da <_dtoa_r+0xb1a>
 800c64a:	9b08      	ldr	r3, [sp, #32]
 800c64c:	9306      	str	r3, [sp, #24]
 800c64e:	2f00      	cmp	r7, #0
 800c650:	dd05      	ble.n	800c65e <_dtoa_r+0x99e>
 800c652:	4631      	mov	r1, r6
 800c654:	463a      	mov	r2, r7
 800c656:	4628      	mov	r0, r5
 800c658:	f000 ffd6 	bl	800d608 <__lshift>
 800c65c:	4606      	mov	r6, r0
 800c65e:	f1b8 0f00 	cmp.w	r8, #0
 800c662:	d05b      	beq.n	800c71c <_dtoa_r+0xa5c>
 800c664:	4628      	mov	r0, r5
 800c666:	6871      	ldr	r1, [r6, #4]
 800c668:	f000 fd76 	bl	800d158 <_Balloc>
 800c66c:	4607      	mov	r7, r0
 800c66e:	b928      	cbnz	r0, 800c67c <_dtoa_r+0x9bc>
 800c670:	4602      	mov	r2, r0
 800c672:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c676:	4b81      	ldr	r3, [pc, #516]	; (800c87c <_dtoa_r+0xbbc>)
 800c678:	f7ff bb36 	b.w	800bce8 <_dtoa_r+0x28>
 800c67c:	6932      	ldr	r2, [r6, #16]
 800c67e:	f106 010c 	add.w	r1, r6, #12
 800c682:	3202      	adds	r2, #2
 800c684:	0092      	lsls	r2, r2, #2
 800c686:	300c      	adds	r0, #12
 800c688:	f7ff fa79 	bl	800bb7e <memcpy>
 800c68c:	2201      	movs	r2, #1
 800c68e:	4639      	mov	r1, r7
 800c690:	4628      	mov	r0, r5
 800c692:	f000 ffb9 	bl	800d608 <__lshift>
 800c696:	46b0      	mov	r8, r6
 800c698:	4606      	mov	r6, r0
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	9a03      	ldr	r2, [sp, #12]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	9308      	str	r3, [sp, #32]
 800c6a2:	9b06      	ldr	r3, [sp, #24]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6a8:	9b04      	ldr	r3, [sp, #16]
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c6b0:	9b08      	ldr	r3, [sp, #32]
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	4650      	mov	r0, sl
 800c6b8:	9304      	str	r3, [sp, #16]
 800c6ba:	f7ff fa75 	bl	800bba8 <quorem>
 800c6be:	4641      	mov	r1, r8
 800c6c0:	9006      	str	r0, [sp, #24]
 800c6c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c6c6:	4650      	mov	r0, sl
 800c6c8:	f001 f80a 	bl	800d6e0 <__mcmp>
 800c6cc:	4632      	mov	r2, r6
 800c6ce:	9009      	str	r0, [sp, #36]	; 0x24
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f001 f820 	bl	800d718 <__mdiff>
 800c6d8:	68c2      	ldr	r2, [r0, #12]
 800c6da:	4607      	mov	r7, r0
 800c6dc:	bb02      	cbnz	r2, 800c720 <_dtoa_r+0xa60>
 800c6de:	4601      	mov	r1, r0
 800c6e0:	4650      	mov	r0, sl
 800c6e2:	f000 fffd 	bl	800d6e0 <__mcmp>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	920c      	str	r2, [sp, #48]	; 0x30
 800c6ee:	f000 fd73 	bl	800d1d8 <_Bfree>
 800c6f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6f6:	9f08      	ldr	r7, [sp, #32]
 800c6f8:	ea43 0102 	orr.w	r1, r3, r2
 800c6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fe:	4319      	orrs	r1, r3
 800c700:	d110      	bne.n	800c724 <_dtoa_r+0xa64>
 800c702:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c706:	d029      	beq.n	800c75c <_dtoa_r+0xa9c>
 800c708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	dd02      	ble.n	800c714 <_dtoa_r+0xa54>
 800c70e:	9b06      	ldr	r3, [sp, #24]
 800c710:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c714:	9b04      	ldr	r3, [sp, #16]
 800c716:	f883 9000 	strb.w	r9, [r3]
 800c71a:	e777      	b.n	800c60c <_dtoa_r+0x94c>
 800c71c:	4630      	mov	r0, r6
 800c71e:	e7ba      	b.n	800c696 <_dtoa_r+0x9d6>
 800c720:	2201      	movs	r2, #1
 800c722:	e7e1      	b.n	800c6e8 <_dtoa_r+0xa28>
 800c724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c726:	2b00      	cmp	r3, #0
 800c728:	db04      	blt.n	800c734 <_dtoa_r+0xa74>
 800c72a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c72c:	430b      	orrs	r3, r1
 800c72e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c730:	430b      	orrs	r3, r1
 800c732:	d120      	bne.n	800c776 <_dtoa_r+0xab6>
 800c734:	2a00      	cmp	r2, #0
 800c736:	dded      	ble.n	800c714 <_dtoa_r+0xa54>
 800c738:	4651      	mov	r1, sl
 800c73a:	2201      	movs	r2, #1
 800c73c:	4628      	mov	r0, r5
 800c73e:	f000 ff63 	bl	800d608 <__lshift>
 800c742:	4621      	mov	r1, r4
 800c744:	4682      	mov	sl, r0
 800c746:	f000 ffcb 	bl	800d6e0 <__mcmp>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	dc03      	bgt.n	800c756 <_dtoa_r+0xa96>
 800c74e:	d1e1      	bne.n	800c714 <_dtoa_r+0xa54>
 800c750:	f019 0f01 	tst.w	r9, #1
 800c754:	d0de      	beq.n	800c714 <_dtoa_r+0xa54>
 800c756:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c75a:	d1d8      	bne.n	800c70e <_dtoa_r+0xa4e>
 800c75c:	2339      	movs	r3, #57	; 0x39
 800c75e:	9a04      	ldr	r2, [sp, #16]
 800c760:	7013      	strb	r3, [r2, #0]
 800c762:	463b      	mov	r3, r7
 800c764:	461f      	mov	r7, r3
 800c766:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	2a39      	cmp	r2, #57	; 0x39
 800c76e:	d06b      	beq.n	800c848 <_dtoa_r+0xb88>
 800c770:	3201      	adds	r2, #1
 800c772:	701a      	strb	r2, [r3, #0]
 800c774:	e74a      	b.n	800c60c <_dtoa_r+0x94c>
 800c776:	2a00      	cmp	r2, #0
 800c778:	dd07      	ble.n	800c78a <_dtoa_r+0xaca>
 800c77a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c77e:	d0ed      	beq.n	800c75c <_dtoa_r+0xa9c>
 800c780:	9a04      	ldr	r2, [sp, #16]
 800c782:	f109 0301 	add.w	r3, r9, #1
 800c786:	7013      	strb	r3, [r2, #0]
 800c788:	e740      	b.n	800c60c <_dtoa_r+0x94c>
 800c78a:	9b08      	ldr	r3, [sp, #32]
 800c78c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c78e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c792:	4293      	cmp	r3, r2
 800c794:	d042      	beq.n	800c81c <_dtoa_r+0xb5c>
 800c796:	4651      	mov	r1, sl
 800c798:	2300      	movs	r3, #0
 800c79a:	220a      	movs	r2, #10
 800c79c:	4628      	mov	r0, r5
 800c79e:	f000 fd3d 	bl	800d21c <__multadd>
 800c7a2:	45b0      	cmp	r8, r6
 800c7a4:	4682      	mov	sl, r0
 800c7a6:	f04f 0300 	mov.w	r3, #0
 800c7aa:	f04f 020a 	mov.w	r2, #10
 800c7ae:	4641      	mov	r1, r8
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	d107      	bne.n	800c7c4 <_dtoa_r+0xb04>
 800c7b4:	f000 fd32 	bl	800d21c <__multadd>
 800c7b8:	4680      	mov	r8, r0
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	9b08      	ldr	r3, [sp, #32]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	9308      	str	r3, [sp, #32]
 800c7c2:	e775      	b.n	800c6b0 <_dtoa_r+0x9f0>
 800c7c4:	f000 fd2a 	bl	800d21c <__multadd>
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4680      	mov	r8, r0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	220a      	movs	r2, #10
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	f000 fd23 	bl	800d21c <__multadd>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	e7f0      	b.n	800c7bc <_dtoa_r+0xafc>
 800c7da:	9b08      	ldr	r3, [sp, #32]
 800c7dc:	9306      	str	r3, [sp, #24]
 800c7de:	9f03      	ldr	r7, [sp, #12]
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4650      	mov	r0, sl
 800c7e4:	f7ff f9e0 	bl	800bba8 <quorem>
 800c7e8:	9b03      	ldr	r3, [sp, #12]
 800c7ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7ee:	f807 9b01 	strb.w	r9, [r7], #1
 800c7f2:	1afa      	subs	r2, r7, r3
 800c7f4:	9b06      	ldr	r3, [sp, #24]
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	dd07      	ble.n	800c80a <_dtoa_r+0xb4a>
 800c7fa:	4651      	mov	r1, sl
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	220a      	movs	r2, #10
 800c800:	4628      	mov	r0, r5
 800c802:	f000 fd0b 	bl	800d21c <__multadd>
 800c806:	4682      	mov	sl, r0
 800c808:	e7ea      	b.n	800c7e0 <_dtoa_r+0xb20>
 800c80a:	9b06      	ldr	r3, [sp, #24]
 800c80c:	f04f 0800 	mov.w	r8, #0
 800c810:	2b00      	cmp	r3, #0
 800c812:	bfcc      	ite	gt
 800c814:	461f      	movgt	r7, r3
 800c816:	2701      	movle	r7, #1
 800c818:	9b03      	ldr	r3, [sp, #12]
 800c81a:	441f      	add	r7, r3
 800c81c:	4651      	mov	r1, sl
 800c81e:	2201      	movs	r2, #1
 800c820:	4628      	mov	r0, r5
 800c822:	f000 fef1 	bl	800d608 <__lshift>
 800c826:	4621      	mov	r1, r4
 800c828:	4682      	mov	sl, r0
 800c82a:	f000 ff59 	bl	800d6e0 <__mcmp>
 800c82e:	2800      	cmp	r0, #0
 800c830:	dc97      	bgt.n	800c762 <_dtoa_r+0xaa2>
 800c832:	d102      	bne.n	800c83a <_dtoa_r+0xb7a>
 800c834:	f019 0f01 	tst.w	r9, #1
 800c838:	d193      	bne.n	800c762 <_dtoa_r+0xaa2>
 800c83a:	463b      	mov	r3, r7
 800c83c:	461f      	mov	r7, r3
 800c83e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c842:	2a30      	cmp	r2, #48	; 0x30
 800c844:	d0fa      	beq.n	800c83c <_dtoa_r+0xb7c>
 800c846:	e6e1      	b.n	800c60c <_dtoa_r+0x94c>
 800c848:	9a03      	ldr	r2, [sp, #12]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d18a      	bne.n	800c764 <_dtoa_r+0xaa4>
 800c84e:	2331      	movs	r3, #49	; 0x31
 800c850:	f10b 0b01 	add.w	fp, fp, #1
 800c854:	e797      	b.n	800c786 <_dtoa_r+0xac6>
 800c856:	4b0a      	ldr	r3, [pc, #40]	; (800c880 <_dtoa_r+0xbc0>)
 800c858:	f7ff ba9f 	b.w	800bd9a <_dtoa_r+0xda>
 800c85c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f47f aa77 	bne.w	800bd52 <_dtoa_r+0x92>
 800c864:	4b07      	ldr	r3, [pc, #28]	; (800c884 <_dtoa_r+0xbc4>)
 800c866:	f7ff ba98 	b.w	800bd9a <_dtoa_r+0xda>
 800c86a:	9b06      	ldr	r3, [sp, #24]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	dcb6      	bgt.n	800c7de <_dtoa_r+0xb1e>
 800c870:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c872:	2b02      	cmp	r3, #2
 800c874:	f73f aeb5 	bgt.w	800c5e2 <_dtoa_r+0x922>
 800c878:	e7b1      	b.n	800c7de <_dtoa_r+0xb1e>
 800c87a:	bf00      	nop
 800c87c:	0800e708 	.word	0x0800e708
 800c880:	0800e660 	.word	0x0800e660
 800c884:	0800e68c 	.word	0x0800e68c

0800c888 <_free_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	4605      	mov	r5, r0
 800c88c:	2900      	cmp	r1, #0
 800c88e:	d040      	beq.n	800c912 <_free_r+0x8a>
 800c890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c894:	1f0c      	subs	r4, r1, #4
 800c896:	2b00      	cmp	r3, #0
 800c898:	bfb8      	it	lt
 800c89a:	18e4      	addlt	r4, r4, r3
 800c89c:	f000 fc50 	bl	800d140 <__malloc_lock>
 800c8a0:	4a1c      	ldr	r2, [pc, #112]	; (800c914 <_free_r+0x8c>)
 800c8a2:	6813      	ldr	r3, [r2, #0]
 800c8a4:	b933      	cbnz	r3, 800c8b4 <_free_r+0x2c>
 800c8a6:	6063      	str	r3, [r4, #4]
 800c8a8:	6014      	str	r4, [r2, #0]
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8b0:	f000 bc4c 	b.w	800d14c <__malloc_unlock>
 800c8b4:	42a3      	cmp	r3, r4
 800c8b6:	d908      	bls.n	800c8ca <_free_r+0x42>
 800c8b8:	6820      	ldr	r0, [r4, #0]
 800c8ba:	1821      	adds	r1, r4, r0
 800c8bc:	428b      	cmp	r3, r1
 800c8be:	bf01      	itttt	eq
 800c8c0:	6819      	ldreq	r1, [r3, #0]
 800c8c2:	685b      	ldreq	r3, [r3, #4]
 800c8c4:	1809      	addeq	r1, r1, r0
 800c8c6:	6021      	streq	r1, [r4, #0]
 800c8c8:	e7ed      	b.n	800c8a6 <_free_r+0x1e>
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	b10b      	cbz	r3, 800c8d4 <_free_r+0x4c>
 800c8d0:	42a3      	cmp	r3, r4
 800c8d2:	d9fa      	bls.n	800c8ca <_free_r+0x42>
 800c8d4:	6811      	ldr	r1, [r2, #0]
 800c8d6:	1850      	adds	r0, r2, r1
 800c8d8:	42a0      	cmp	r0, r4
 800c8da:	d10b      	bne.n	800c8f4 <_free_r+0x6c>
 800c8dc:	6820      	ldr	r0, [r4, #0]
 800c8de:	4401      	add	r1, r0
 800c8e0:	1850      	adds	r0, r2, r1
 800c8e2:	4283      	cmp	r3, r0
 800c8e4:	6011      	str	r1, [r2, #0]
 800c8e6:	d1e0      	bne.n	800c8aa <_free_r+0x22>
 800c8e8:	6818      	ldr	r0, [r3, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	4408      	add	r0, r1
 800c8ee:	6010      	str	r0, [r2, #0]
 800c8f0:	6053      	str	r3, [r2, #4]
 800c8f2:	e7da      	b.n	800c8aa <_free_r+0x22>
 800c8f4:	d902      	bls.n	800c8fc <_free_r+0x74>
 800c8f6:	230c      	movs	r3, #12
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	e7d6      	b.n	800c8aa <_free_r+0x22>
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	1821      	adds	r1, r4, r0
 800c900:	428b      	cmp	r3, r1
 800c902:	bf01      	itttt	eq
 800c904:	6819      	ldreq	r1, [r3, #0]
 800c906:	685b      	ldreq	r3, [r3, #4]
 800c908:	1809      	addeq	r1, r1, r0
 800c90a:	6021      	streq	r1, [r4, #0]
 800c90c:	6063      	str	r3, [r4, #4]
 800c90e:	6054      	str	r4, [r2, #4]
 800c910:	e7cb      	b.n	800c8aa <_free_r+0x22>
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	20002574 	.word	0x20002574

0800c918 <rshift>:
 800c918:	6903      	ldr	r3, [r0, #16]
 800c91a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c91e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c922:	f100 0414 	add.w	r4, r0, #20
 800c926:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c92a:	dd46      	ble.n	800c9ba <rshift+0xa2>
 800c92c:	f011 011f 	ands.w	r1, r1, #31
 800c930:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c934:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c938:	d10c      	bne.n	800c954 <rshift+0x3c>
 800c93a:	4629      	mov	r1, r5
 800c93c:	f100 0710 	add.w	r7, r0, #16
 800c940:	42b1      	cmp	r1, r6
 800c942:	d335      	bcc.n	800c9b0 <rshift+0x98>
 800c944:	1a9b      	subs	r3, r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	1eea      	subs	r2, r5, #3
 800c94a:	4296      	cmp	r6, r2
 800c94c:	bf38      	it	cc
 800c94e:	2300      	movcc	r3, #0
 800c950:	4423      	add	r3, r4
 800c952:	e015      	b.n	800c980 <rshift+0x68>
 800c954:	46a1      	mov	r9, r4
 800c956:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c95a:	f1c1 0820 	rsb	r8, r1, #32
 800c95e:	40cf      	lsrs	r7, r1
 800c960:	f105 0e04 	add.w	lr, r5, #4
 800c964:	4576      	cmp	r6, lr
 800c966:	46f4      	mov	ip, lr
 800c968:	d816      	bhi.n	800c998 <rshift+0x80>
 800c96a:	1a9a      	subs	r2, r3, r2
 800c96c:	0092      	lsls	r2, r2, #2
 800c96e:	3a04      	subs	r2, #4
 800c970:	3501      	adds	r5, #1
 800c972:	42ae      	cmp	r6, r5
 800c974:	bf38      	it	cc
 800c976:	2200      	movcc	r2, #0
 800c978:	18a3      	adds	r3, r4, r2
 800c97a:	50a7      	str	r7, [r4, r2]
 800c97c:	b107      	cbz	r7, 800c980 <rshift+0x68>
 800c97e:	3304      	adds	r3, #4
 800c980:	42a3      	cmp	r3, r4
 800c982:	eba3 0204 	sub.w	r2, r3, r4
 800c986:	bf08      	it	eq
 800c988:	2300      	moveq	r3, #0
 800c98a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c98e:	6102      	str	r2, [r0, #16]
 800c990:	bf08      	it	eq
 800c992:	6143      	streq	r3, [r0, #20]
 800c994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c998:	f8dc c000 	ldr.w	ip, [ip]
 800c99c:	fa0c fc08 	lsl.w	ip, ip, r8
 800c9a0:	ea4c 0707 	orr.w	r7, ip, r7
 800c9a4:	f849 7b04 	str.w	r7, [r9], #4
 800c9a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9ac:	40cf      	lsrs	r7, r1
 800c9ae:	e7d9      	b.n	800c964 <rshift+0x4c>
 800c9b0:	f851 cb04 	ldr.w	ip, [r1], #4
 800c9b4:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9b8:	e7c2      	b.n	800c940 <rshift+0x28>
 800c9ba:	4623      	mov	r3, r4
 800c9bc:	e7e0      	b.n	800c980 <rshift+0x68>

0800c9be <__hexdig_fun>:
 800c9be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c9c2:	2b09      	cmp	r3, #9
 800c9c4:	d802      	bhi.n	800c9cc <__hexdig_fun+0xe>
 800c9c6:	3820      	subs	r0, #32
 800c9c8:	b2c0      	uxtb	r0, r0
 800c9ca:	4770      	bx	lr
 800c9cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c9d0:	2b05      	cmp	r3, #5
 800c9d2:	d801      	bhi.n	800c9d8 <__hexdig_fun+0x1a>
 800c9d4:	3847      	subs	r0, #71	; 0x47
 800c9d6:	e7f7      	b.n	800c9c8 <__hexdig_fun+0xa>
 800c9d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9dc:	2b05      	cmp	r3, #5
 800c9de:	d801      	bhi.n	800c9e4 <__hexdig_fun+0x26>
 800c9e0:	3827      	subs	r0, #39	; 0x27
 800c9e2:	e7f1      	b.n	800c9c8 <__hexdig_fun+0xa>
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	4770      	bx	lr

0800c9e8 <__gethex>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	4681      	mov	r9, r0
 800c9ee:	468a      	mov	sl, r1
 800c9f0:	4617      	mov	r7, r2
 800c9f2:	680a      	ldr	r2, [r1, #0]
 800c9f4:	b085      	sub	sp, #20
 800c9f6:	f102 0b02 	add.w	fp, r2, #2
 800c9fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c9fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca02:	9302      	str	r3, [sp, #8]
 800ca04:	32fe      	adds	r2, #254	; 0xfe
 800ca06:	eb02 030b 	add.w	r3, r2, fp
 800ca0a:	46d8      	mov	r8, fp
 800ca0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	2830      	cmp	r0, #48	; 0x30
 800ca14:	d0f7      	beq.n	800ca06 <__gethex+0x1e>
 800ca16:	f7ff ffd2 	bl	800c9be <__hexdig_fun>
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d138      	bne.n	800ca92 <__gethex+0xaa>
 800ca20:	2201      	movs	r2, #1
 800ca22:	4640      	mov	r0, r8
 800ca24:	49a7      	ldr	r1, [pc, #668]	; (800ccc4 <__gethex+0x2dc>)
 800ca26:	f7ff f812 	bl	800ba4e <strncmp>
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d169      	bne.n	800cb04 <__gethex+0x11c>
 800ca30:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ca34:	465d      	mov	r5, fp
 800ca36:	f7ff ffc2 	bl	800c9be <__hexdig_fun>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d064      	beq.n	800cb08 <__gethex+0x120>
 800ca3e:	465a      	mov	r2, fp
 800ca40:	7810      	ldrb	r0, [r2, #0]
 800ca42:	4690      	mov	r8, r2
 800ca44:	2830      	cmp	r0, #48	; 0x30
 800ca46:	f102 0201 	add.w	r2, r2, #1
 800ca4a:	d0f9      	beq.n	800ca40 <__gethex+0x58>
 800ca4c:	f7ff ffb7 	bl	800c9be <__hexdig_fun>
 800ca50:	2301      	movs	r3, #1
 800ca52:	fab0 f480 	clz	r4, r0
 800ca56:	465e      	mov	r6, fp
 800ca58:	0964      	lsrs	r4, r4, #5
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	4642      	mov	r2, r8
 800ca5e:	4615      	mov	r5, r2
 800ca60:	7828      	ldrb	r0, [r5, #0]
 800ca62:	3201      	adds	r2, #1
 800ca64:	f7ff ffab 	bl	800c9be <__hexdig_fun>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d1f8      	bne.n	800ca5e <__gethex+0x76>
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	4628      	mov	r0, r5
 800ca70:	4994      	ldr	r1, [pc, #592]	; (800ccc4 <__gethex+0x2dc>)
 800ca72:	f7fe ffec 	bl	800ba4e <strncmp>
 800ca76:	b978      	cbnz	r0, 800ca98 <__gethex+0xb0>
 800ca78:	b946      	cbnz	r6, 800ca8c <__gethex+0xa4>
 800ca7a:	1c6e      	adds	r6, r5, #1
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	4615      	mov	r5, r2
 800ca80:	7828      	ldrb	r0, [r5, #0]
 800ca82:	3201      	adds	r2, #1
 800ca84:	f7ff ff9b 	bl	800c9be <__hexdig_fun>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d1f8      	bne.n	800ca7e <__gethex+0x96>
 800ca8c:	1b73      	subs	r3, r6, r5
 800ca8e:	009e      	lsls	r6, r3, #2
 800ca90:	e004      	b.n	800ca9c <__gethex+0xb4>
 800ca92:	2400      	movs	r4, #0
 800ca94:	4626      	mov	r6, r4
 800ca96:	e7e1      	b.n	800ca5c <__gethex+0x74>
 800ca98:	2e00      	cmp	r6, #0
 800ca9a:	d1f7      	bne.n	800ca8c <__gethex+0xa4>
 800ca9c:	782b      	ldrb	r3, [r5, #0]
 800ca9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800caa2:	2b50      	cmp	r3, #80	; 0x50
 800caa4:	d13d      	bne.n	800cb22 <__gethex+0x13a>
 800caa6:	786b      	ldrb	r3, [r5, #1]
 800caa8:	2b2b      	cmp	r3, #43	; 0x2b
 800caaa:	d02f      	beq.n	800cb0c <__gethex+0x124>
 800caac:	2b2d      	cmp	r3, #45	; 0x2d
 800caae:	d031      	beq.n	800cb14 <__gethex+0x12c>
 800cab0:	f04f 0b00 	mov.w	fp, #0
 800cab4:	1c69      	adds	r1, r5, #1
 800cab6:	7808      	ldrb	r0, [r1, #0]
 800cab8:	f7ff ff81 	bl	800c9be <__hexdig_fun>
 800cabc:	1e42      	subs	r2, r0, #1
 800cabe:	b2d2      	uxtb	r2, r2
 800cac0:	2a18      	cmp	r2, #24
 800cac2:	d82e      	bhi.n	800cb22 <__gethex+0x13a>
 800cac4:	f1a0 0210 	sub.w	r2, r0, #16
 800cac8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cacc:	f7ff ff77 	bl	800c9be <__hexdig_fun>
 800cad0:	f100 3cff 	add.w	ip, r0, #4294967295
 800cad4:	fa5f fc8c 	uxtb.w	ip, ip
 800cad8:	f1bc 0f18 	cmp.w	ip, #24
 800cadc:	d91d      	bls.n	800cb1a <__gethex+0x132>
 800cade:	f1bb 0f00 	cmp.w	fp, #0
 800cae2:	d000      	beq.n	800cae6 <__gethex+0xfe>
 800cae4:	4252      	negs	r2, r2
 800cae6:	4416      	add	r6, r2
 800cae8:	f8ca 1000 	str.w	r1, [sl]
 800caec:	b1dc      	cbz	r4, 800cb26 <__gethex+0x13e>
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	bf14      	ite	ne
 800caf4:	f04f 0800 	movne.w	r8, #0
 800caf8:	f04f 0806 	moveq.w	r8, #6
 800cafc:	4640      	mov	r0, r8
 800cafe:	b005      	add	sp, #20
 800cb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb04:	4645      	mov	r5, r8
 800cb06:	4626      	mov	r6, r4
 800cb08:	2401      	movs	r4, #1
 800cb0a:	e7c7      	b.n	800ca9c <__gethex+0xb4>
 800cb0c:	f04f 0b00 	mov.w	fp, #0
 800cb10:	1ca9      	adds	r1, r5, #2
 800cb12:	e7d0      	b.n	800cab6 <__gethex+0xce>
 800cb14:	f04f 0b01 	mov.w	fp, #1
 800cb18:	e7fa      	b.n	800cb10 <__gethex+0x128>
 800cb1a:	230a      	movs	r3, #10
 800cb1c:	fb03 0002 	mla	r0, r3, r2, r0
 800cb20:	e7d0      	b.n	800cac4 <__gethex+0xdc>
 800cb22:	4629      	mov	r1, r5
 800cb24:	e7e0      	b.n	800cae8 <__gethex+0x100>
 800cb26:	4621      	mov	r1, r4
 800cb28:	eba5 0308 	sub.w	r3, r5, r8
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	2b07      	cmp	r3, #7
 800cb30:	dc0a      	bgt.n	800cb48 <__gethex+0x160>
 800cb32:	4648      	mov	r0, r9
 800cb34:	f000 fb10 	bl	800d158 <_Balloc>
 800cb38:	4604      	mov	r4, r0
 800cb3a:	b940      	cbnz	r0, 800cb4e <__gethex+0x166>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	21e4      	movs	r1, #228	; 0xe4
 800cb40:	4b61      	ldr	r3, [pc, #388]	; (800ccc8 <__gethex+0x2e0>)
 800cb42:	4862      	ldr	r0, [pc, #392]	; (800cccc <__gethex+0x2e4>)
 800cb44:	f001 f9de 	bl	800df04 <__assert_func>
 800cb48:	3101      	adds	r1, #1
 800cb4a:	105b      	asrs	r3, r3, #1
 800cb4c:	e7ef      	b.n	800cb2e <__gethex+0x146>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	469b      	mov	fp, r3
 800cb52:	f100 0a14 	add.w	sl, r0, #20
 800cb56:	f8cd a004 	str.w	sl, [sp, #4]
 800cb5a:	45a8      	cmp	r8, r5
 800cb5c:	d344      	bcc.n	800cbe8 <__gethex+0x200>
 800cb5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb62:	4658      	mov	r0, fp
 800cb64:	f848 bb04 	str.w	fp, [r8], #4
 800cb68:	eba8 080a 	sub.w	r8, r8, sl
 800cb6c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800cb70:	6122      	str	r2, [r4, #16]
 800cb72:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800cb76:	f000 fbe1 	bl	800d33c <__hi0bits>
 800cb7a:	683d      	ldr	r5, [r7, #0]
 800cb7c:	eba8 0800 	sub.w	r8, r8, r0
 800cb80:	45a8      	cmp	r8, r5
 800cb82:	dd59      	ble.n	800cc38 <__gethex+0x250>
 800cb84:	eba8 0805 	sub.w	r8, r8, r5
 800cb88:	4641      	mov	r1, r8
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 ff5f 	bl	800da4e <__any_on>
 800cb90:	4683      	mov	fp, r0
 800cb92:	b1b8      	cbz	r0, 800cbc4 <__gethex+0x1dc>
 800cb94:	f04f 0b01 	mov.w	fp, #1
 800cb98:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb9c:	1159      	asrs	r1, r3, #5
 800cb9e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cba2:	f003 021f 	and.w	r2, r3, #31
 800cba6:	fa0b f202 	lsl.w	r2, fp, r2
 800cbaa:	420a      	tst	r2, r1
 800cbac:	d00a      	beq.n	800cbc4 <__gethex+0x1dc>
 800cbae:	455b      	cmp	r3, fp
 800cbb0:	dd06      	ble.n	800cbc0 <__gethex+0x1d8>
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f1a8 0102 	sub.w	r1, r8, #2
 800cbb8:	f000 ff49 	bl	800da4e <__any_on>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d138      	bne.n	800cc32 <__gethex+0x24a>
 800cbc0:	f04f 0b02 	mov.w	fp, #2
 800cbc4:	4641      	mov	r1, r8
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7ff fea6 	bl	800c918 <rshift>
 800cbcc:	4446      	add	r6, r8
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	42b3      	cmp	r3, r6
 800cbd2:	da41      	bge.n	800cc58 <__gethex+0x270>
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	4648      	mov	r0, r9
 800cbd8:	f000 fafe 	bl	800d1d8 <_Bfree>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbe0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	e789      	b.n	800cafc <__gethex+0x114>
 800cbe8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cbec:	2a2e      	cmp	r2, #46	; 0x2e
 800cbee:	d014      	beq.n	800cc1a <__gethex+0x232>
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	d106      	bne.n	800cc02 <__gethex+0x21a>
 800cbf4:	9b01      	ldr	r3, [sp, #4]
 800cbf6:	f843 bb04 	str.w	fp, [r3], #4
 800cbfa:	f04f 0b00 	mov.w	fp, #0
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	465b      	mov	r3, fp
 800cc02:	7828      	ldrb	r0, [r5, #0]
 800cc04:	9303      	str	r3, [sp, #12]
 800cc06:	f7ff feda 	bl	800c9be <__hexdig_fun>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	f000 000f 	and.w	r0, r0, #15
 800cc10:	4098      	lsls	r0, r3
 800cc12:	ea4b 0b00 	orr.w	fp, fp, r0
 800cc16:	3304      	adds	r3, #4
 800cc18:	e79f      	b.n	800cb5a <__gethex+0x172>
 800cc1a:	45a8      	cmp	r8, r5
 800cc1c:	d8e8      	bhi.n	800cbf0 <__gethex+0x208>
 800cc1e:	2201      	movs	r2, #1
 800cc20:	4628      	mov	r0, r5
 800cc22:	4928      	ldr	r1, [pc, #160]	; (800ccc4 <__gethex+0x2dc>)
 800cc24:	9303      	str	r3, [sp, #12]
 800cc26:	f7fe ff12 	bl	800ba4e <strncmp>
 800cc2a:	9b03      	ldr	r3, [sp, #12]
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d1df      	bne.n	800cbf0 <__gethex+0x208>
 800cc30:	e793      	b.n	800cb5a <__gethex+0x172>
 800cc32:	f04f 0b03 	mov.w	fp, #3
 800cc36:	e7c5      	b.n	800cbc4 <__gethex+0x1dc>
 800cc38:	da0b      	bge.n	800cc52 <__gethex+0x26a>
 800cc3a:	eba5 0808 	sub.w	r8, r5, r8
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4642      	mov	r2, r8
 800cc42:	4648      	mov	r0, r9
 800cc44:	f000 fce0 	bl	800d608 <__lshift>
 800cc48:	4604      	mov	r4, r0
 800cc4a:	eba6 0608 	sub.w	r6, r6, r8
 800cc4e:	f100 0a14 	add.w	sl, r0, #20
 800cc52:	f04f 0b00 	mov.w	fp, #0
 800cc56:	e7ba      	b.n	800cbce <__gethex+0x1e6>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	42b3      	cmp	r3, r6
 800cc5c:	dd74      	ble.n	800cd48 <__gethex+0x360>
 800cc5e:	1b9e      	subs	r6, r3, r6
 800cc60:	42b5      	cmp	r5, r6
 800cc62:	dc35      	bgt.n	800ccd0 <__gethex+0x2e8>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d023      	beq.n	800ccb2 <__gethex+0x2ca>
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d025      	beq.n	800ccba <__gethex+0x2d2>
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d115      	bne.n	800cc9e <__gethex+0x2b6>
 800cc72:	42b5      	cmp	r5, r6
 800cc74:	d113      	bne.n	800cc9e <__gethex+0x2b6>
 800cc76:	2d01      	cmp	r5, #1
 800cc78:	d10b      	bne.n	800cc92 <__gethex+0x2aa>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	9a02      	ldr	r2, [sp, #8]
 800cc7e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	2301      	movs	r3, #1
 800cc86:	6123      	str	r3, [r4, #16]
 800cc88:	f8ca 3000 	str.w	r3, [sl]
 800cc8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc8e:	601c      	str	r4, [r3, #0]
 800cc90:	e734      	b.n	800cafc <__gethex+0x114>
 800cc92:	4620      	mov	r0, r4
 800cc94:	1e69      	subs	r1, r5, #1
 800cc96:	f000 feda 	bl	800da4e <__any_on>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d1ed      	bne.n	800cc7a <__gethex+0x292>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4648      	mov	r0, r9
 800cca2:	f000 fa99 	bl	800d1d8 <_Bfree>
 800cca6:	2300      	movs	r3, #0
 800cca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	e724      	b.n	800cafc <__gethex+0x114>
 800ccb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1f2      	bne.n	800cc9e <__gethex+0x2b6>
 800ccb8:	e7df      	b.n	800cc7a <__gethex+0x292>
 800ccba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1dc      	bne.n	800cc7a <__gethex+0x292>
 800ccc0:	e7ed      	b.n	800cc9e <__gethex+0x2b6>
 800ccc2:	bf00      	nop
 800ccc4:	0800e5fc 	.word	0x0800e5fc
 800ccc8:	0800e708 	.word	0x0800e708
 800cccc:	0800e719 	.word	0x0800e719
 800ccd0:	f106 38ff 	add.w	r8, r6, #4294967295
 800ccd4:	f1bb 0f00 	cmp.w	fp, #0
 800ccd8:	d133      	bne.n	800cd42 <__gethex+0x35a>
 800ccda:	f1b8 0f00 	cmp.w	r8, #0
 800ccde:	d004      	beq.n	800ccea <__gethex+0x302>
 800cce0:	4641      	mov	r1, r8
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 feb3 	bl	800da4e <__any_on>
 800cce8:	4683      	mov	fp, r0
 800ccea:	2301      	movs	r3, #1
 800ccec:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ccf0:	f008 081f 	and.w	r8, r8, #31
 800ccf4:	fa03 f308 	lsl.w	r3, r3, r8
 800ccf8:	f04f 0802 	mov.w	r8, #2
 800ccfc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cd00:	4631      	mov	r1, r6
 800cd02:	4213      	tst	r3, r2
 800cd04:	4620      	mov	r0, r4
 800cd06:	bf18      	it	ne
 800cd08:	f04b 0b02 	orrne.w	fp, fp, #2
 800cd0c:	1bad      	subs	r5, r5, r6
 800cd0e:	f7ff fe03 	bl	800c918 <rshift>
 800cd12:	687e      	ldr	r6, [r7, #4]
 800cd14:	f1bb 0f00 	cmp.w	fp, #0
 800cd18:	d04a      	beq.n	800cdb0 <__gethex+0x3c8>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	d016      	beq.n	800cd4e <__gethex+0x366>
 800cd20:	2b03      	cmp	r3, #3
 800cd22:	d018      	beq.n	800cd56 <__gethex+0x36e>
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d109      	bne.n	800cd3c <__gethex+0x354>
 800cd28:	f01b 0f02 	tst.w	fp, #2
 800cd2c:	d006      	beq.n	800cd3c <__gethex+0x354>
 800cd2e:	f8da 3000 	ldr.w	r3, [sl]
 800cd32:	ea4b 0b03 	orr.w	fp, fp, r3
 800cd36:	f01b 0f01 	tst.w	fp, #1
 800cd3a:	d10f      	bne.n	800cd5c <__gethex+0x374>
 800cd3c:	f048 0810 	orr.w	r8, r8, #16
 800cd40:	e036      	b.n	800cdb0 <__gethex+0x3c8>
 800cd42:	f04f 0b01 	mov.w	fp, #1
 800cd46:	e7d0      	b.n	800ccea <__gethex+0x302>
 800cd48:	f04f 0801 	mov.w	r8, #1
 800cd4c:	e7e2      	b.n	800cd14 <__gethex+0x32c>
 800cd4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd50:	f1c3 0301 	rsb	r3, r3, #1
 800cd54:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0ef      	beq.n	800cd3c <__gethex+0x354>
 800cd5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd60:	f104 0214 	add.w	r2, r4, #20
 800cd64:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cd70:	4694      	mov	ip, r2
 800cd72:	f852 1b04 	ldr.w	r1, [r2], #4
 800cd76:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cd7a:	d01e      	beq.n	800cdba <__gethex+0x3d2>
 800cd7c:	3101      	adds	r1, #1
 800cd7e:	f8cc 1000 	str.w	r1, [ip]
 800cd82:	f1b8 0f02 	cmp.w	r8, #2
 800cd86:	f104 0214 	add.w	r2, r4, #20
 800cd8a:	d13d      	bne.n	800ce08 <__gethex+0x420>
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	42ab      	cmp	r3, r5
 800cd92:	d10b      	bne.n	800cdac <__gethex+0x3c4>
 800cd94:	2301      	movs	r3, #1
 800cd96:	1169      	asrs	r1, r5, #5
 800cd98:	f005 051f 	and.w	r5, r5, #31
 800cd9c:	fa03 f505 	lsl.w	r5, r3, r5
 800cda0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cda4:	421d      	tst	r5, r3
 800cda6:	bf18      	it	ne
 800cda8:	f04f 0801 	movne.w	r8, #1
 800cdac:	f048 0820 	orr.w	r8, r8, #32
 800cdb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdb2:	601c      	str	r4, [r3, #0]
 800cdb4:	9b02      	ldr	r3, [sp, #8]
 800cdb6:	601e      	str	r6, [r3, #0]
 800cdb8:	e6a0      	b.n	800cafc <__gethex+0x114>
 800cdba:	4290      	cmp	r0, r2
 800cdbc:	f842 3c04 	str.w	r3, [r2, #-4]
 800cdc0:	d8d6      	bhi.n	800cd70 <__gethex+0x388>
 800cdc2:	68a2      	ldr	r2, [r4, #8]
 800cdc4:	4593      	cmp	fp, r2
 800cdc6:	db17      	blt.n	800cdf8 <__gethex+0x410>
 800cdc8:	6861      	ldr	r1, [r4, #4]
 800cdca:	4648      	mov	r0, r9
 800cdcc:	3101      	adds	r1, #1
 800cdce:	f000 f9c3 	bl	800d158 <_Balloc>
 800cdd2:	4682      	mov	sl, r0
 800cdd4:	b918      	cbnz	r0, 800cdde <__gethex+0x3f6>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	2184      	movs	r1, #132	; 0x84
 800cdda:	4b1a      	ldr	r3, [pc, #104]	; (800ce44 <__gethex+0x45c>)
 800cddc:	e6b1      	b.n	800cb42 <__gethex+0x15a>
 800cdde:	6922      	ldr	r2, [r4, #16]
 800cde0:	f104 010c 	add.w	r1, r4, #12
 800cde4:	3202      	adds	r2, #2
 800cde6:	0092      	lsls	r2, r2, #2
 800cde8:	300c      	adds	r0, #12
 800cdea:	f7fe fec8 	bl	800bb7e <memcpy>
 800cdee:	4621      	mov	r1, r4
 800cdf0:	4648      	mov	r0, r9
 800cdf2:	f000 f9f1 	bl	800d1d8 <_Bfree>
 800cdf6:	4654      	mov	r4, sl
 800cdf8:	6922      	ldr	r2, [r4, #16]
 800cdfa:	1c51      	adds	r1, r2, #1
 800cdfc:	6121      	str	r1, [r4, #16]
 800cdfe:	2101      	movs	r1, #1
 800ce00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ce04:	6151      	str	r1, [r2, #20]
 800ce06:	e7bc      	b.n	800cd82 <__gethex+0x39a>
 800ce08:	6921      	ldr	r1, [r4, #16]
 800ce0a:	4559      	cmp	r1, fp
 800ce0c:	dd0b      	ble.n	800ce26 <__gethex+0x43e>
 800ce0e:	2101      	movs	r1, #1
 800ce10:	4620      	mov	r0, r4
 800ce12:	f7ff fd81 	bl	800c918 <rshift>
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	3601      	adds	r6, #1
 800ce1a:	42b3      	cmp	r3, r6
 800ce1c:	f6ff aeda 	blt.w	800cbd4 <__gethex+0x1ec>
 800ce20:	f04f 0801 	mov.w	r8, #1
 800ce24:	e7c2      	b.n	800cdac <__gethex+0x3c4>
 800ce26:	f015 051f 	ands.w	r5, r5, #31
 800ce2a:	d0f9      	beq.n	800ce20 <__gethex+0x438>
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	f1c5 0520 	rsb	r5, r5, #32
 800ce32:	441a      	add	r2, r3
 800ce34:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ce38:	f000 fa80 	bl	800d33c <__hi0bits>
 800ce3c:	42a8      	cmp	r0, r5
 800ce3e:	dbe6      	blt.n	800ce0e <__gethex+0x426>
 800ce40:	e7ee      	b.n	800ce20 <__gethex+0x438>
 800ce42:	bf00      	nop
 800ce44:	0800e708 	.word	0x0800e708

0800ce48 <L_shift>:
 800ce48:	f1c2 0208 	rsb	r2, r2, #8
 800ce4c:	0092      	lsls	r2, r2, #2
 800ce4e:	b570      	push	{r4, r5, r6, lr}
 800ce50:	f1c2 0620 	rsb	r6, r2, #32
 800ce54:	6843      	ldr	r3, [r0, #4]
 800ce56:	6804      	ldr	r4, [r0, #0]
 800ce58:	fa03 f506 	lsl.w	r5, r3, r6
 800ce5c:	432c      	orrs	r4, r5
 800ce5e:	40d3      	lsrs	r3, r2
 800ce60:	6004      	str	r4, [r0, #0]
 800ce62:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce66:	4288      	cmp	r0, r1
 800ce68:	d3f4      	bcc.n	800ce54 <L_shift+0xc>
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}

0800ce6c <__match>:
 800ce6c:	b530      	push	{r4, r5, lr}
 800ce6e:	6803      	ldr	r3, [r0, #0]
 800ce70:	3301      	adds	r3, #1
 800ce72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce76:	b914      	cbnz	r4, 800ce7e <__match+0x12>
 800ce78:	6003      	str	r3, [r0, #0]
 800ce7a:	2001      	movs	r0, #1
 800ce7c:	bd30      	pop	{r4, r5, pc}
 800ce7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce86:	2d19      	cmp	r5, #25
 800ce88:	bf98      	it	ls
 800ce8a:	3220      	addls	r2, #32
 800ce8c:	42a2      	cmp	r2, r4
 800ce8e:	d0f0      	beq.n	800ce72 <__match+0x6>
 800ce90:	2000      	movs	r0, #0
 800ce92:	e7f3      	b.n	800ce7c <__match+0x10>

0800ce94 <__hexnan>:
 800ce94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce98:	2500      	movs	r5, #0
 800ce9a:	680b      	ldr	r3, [r1, #0]
 800ce9c:	4682      	mov	sl, r0
 800ce9e:	115e      	asrs	r6, r3, #5
 800cea0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cea4:	f013 031f 	ands.w	r3, r3, #31
 800cea8:	bf18      	it	ne
 800ceaa:	3604      	addne	r6, #4
 800ceac:	1f37      	subs	r7, r6, #4
 800ceae:	4690      	mov	r8, r2
 800ceb0:	46b9      	mov	r9, r7
 800ceb2:	463c      	mov	r4, r7
 800ceb4:	46ab      	mov	fp, r5
 800ceb6:	b087      	sub	sp, #28
 800ceb8:	6801      	ldr	r1, [r0, #0]
 800ceba:	9301      	str	r3, [sp, #4]
 800cebc:	f846 5c04 	str.w	r5, [r6, #-4]
 800cec0:	9502      	str	r5, [sp, #8]
 800cec2:	784a      	ldrb	r2, [r1, #1]
 800cec4:	1c4b      	adds	r3, r1, #1
 800cec6:	9303      	str	r3, [sp, #12]
 800cec8:	b342      	cbz	r2, 800cf1c <__hexnan+0x88>
 800ceca:	4610      	mov	r0, r2
 800cecc:	9105      	str	r1, [sp, #20]
 800cece:	9204      	str	r2, [sp, #16]
 800ced0:	f7ff fd75 	bl	800c9be <__hexdig_fun>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d14f      	bne.n	800cf78 <__hexnan+0xe4>
 800ced8:	9a04      	ldr	r2, [sp, #16]
 800ceda:	9905      	ldr	r1, [sp, #20]
 800cedc:	2a20      	cmp	r2, #32
 800cede:	d818      	bhi.n	800cf12 <__hexnan+0x7e>
 800cee0:	9b02      	ldr	r3, [sp, #8]
 800cee2:	459b      	cmp	fp, r3
 800cee4:	dd13      	ble.n	800cf0e <__hexnan+0x7a>
 800cee6:	454c      	cmp	r4, r9
 800cee8:	d206      	bcs.n	800cef8 <__hexnan+0x64>
 800ceea:	2d07      	cmp	r5, #7
 800ceec:	dc04      	bgt.n	800cef8 <__hexnan+0x64>
 800ceee:	462a      	mov	r2, r5
 800cef0:	4649      	mov	r1, r9
 800cef2:	4620      	mov	r0, r4
 800cef4:	f7ff ffa8 	bl	800ce48 <L_shift>
 800cef8:	4544      	cmp	r4, r8
 800cefa:	d950      	bls.n	800cf9e <__hexnan+0x10a>
 800cefc:	2300      	movs	r3, #0
 800cefe:	f1a4 0904 	sub.w	r9, r4, #4
 800cf02:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf06:	461d      	mov	r5, r3
 800cf08:	464c      	mov	r4, r9
 800cf0a:	f8cd b008 	str.w	fp, [sp, #8]
 800cf0e:	9903      	ldr	r1, [sp, #12]
 800cf10:	e7d7      	b.n	800cec2 <__hexnan+0x2e>
 800cf12:	2a29      	cmp	r2, #41	; 0x29
 800cf14:	d155      	bne.n	800cfc2 <__hexnan+0x12e>
 800cf16:	3102      	adds	r1, #2
 800cf18:	f8ca 1000 	str.w	r1, [sl]
 800cf1c:	f1bb 0f00 	cmp.w	fp, #0
 800cf20:	d04f      	beq.n	800cfc2 <__hexnan+0x12e>
 800cf22:	454c      	cmp	r4, r9
 800cf24:	d206      	bcs.n	800cf34 <__hexnan+0xa0>
 800cf26:	2d07      	cmp	r5, #7
 800cf28:	dc04      	bgt.n	800cf34 <__hexnan+0xa0>
 800cf2a:	462a      	mov	r2, r5
 800cf2c:	4649      	mov	r1, r9
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7ff ff8a 	bl	800ce48 <L_shift>
 800cf34:	4544      	cmp	r4, r8
 800cf36:	d934      	bls.n	800cfa2 <__hexnan+0x10e>
 800cf38:	4623      	mov	r3, r4
 800cf3a:	f1a8 0204 	sub.w	r2, r8, #4
 800cf3e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf42:	429f      	cmp	r7, r3
 800cf44:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf48:	d2f9      	bcs.n	800cf3e <__hexnan+0xaa>
 800cf4a:	1b3b      	subs	r3, r7, r4
 800cf4c:	f023 0303 	bic.w	r3, r3, #3
 800cf50:	3304      	adds	r3, #4
 800cf52:	3e03      	subs	r6, #3
 800cf54:	3401      	adds	r4, #1
 800cf56:	42a6      	cmp	r6, r4
 800cf58:	bf38      	it	cc
 800cf5a:	2304      	movcc	r3, #4
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	4443      	add	r3, r8
 800cf60:	f843 2b04 	str.w	r2, [r3], #4
 800cf64:	429f      	cmp	r7, r3
 800cf66:	d2fb      	bcs.n	800cf60 <__hexnan+0xcc>
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	b91b      	cbnz	r3, 800cf74 <__hexnan+0xe0>
 800cf6c:	4547      	cmp	r7, r8
 800cf6e:	d126      	bne.n	800cfbe <__hexnan+0x12a>
 800cf70:	2301      	movs	r3, #1
 800cf72:	603b      	str	r3, [r7, #0]
 800cf74:	2005      	movs	r0, #5
 800cf76:	e025      	b.n	800cfc4 <__hexnan+0x130>
 800cf78:	3501      	adds	r5, #1
 800cf7a:	2d08      	cmp	r5, #8
 800cf7c:	f10b 0b01 	add.w	fp, fp, #1
 800cf80:	dd06      	ble.n	800cf90 <__hexnan+0xfc>
 800cf82:	4544      	cmp	r4, r8
 800cf84:	d9c3      	bls.n	800cf0e <__hexnan+0x7a>
 800cf86:	2300      	movs	r3, #0
 800cf88:	2501      	movs	r5, #1
 800cf8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf8e:	3c04      	subs	r4, #4
 800cf90:	6822      	ldr	r2, [r4, #0]
 800cf92:	f000 000f 	and.w	r0, r0, #15
 800cf96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf9a:	6020      	str	r0, [r4, #0]
 800cf9c:	e7b7      	b.n	800cf0e <__hexnan+0x7a>
 800cf9e:	2508      	movs	r5, #8
 800cfa0:	e7b5      	b.n	800cf0e <__hexnan+0x7a>
 800cfa2:	9b01      	ldr	r3, [sp, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d0df      	beq.n	800cf68 <__hexnan+0xd4>
 800cfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800cfac:	f1c3 0320 	rsb	r3, r3, #32
 800cfb0:	40da      	lsrs	r2, r3
 800cfb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cfbc:	e7d4      	b.n	800cf68 <__hexnan+0xd4>
 800cfbe:	3f04      	subs	r7, #4
 800cfc0:	e7d2      	b.n	800cf68 <__hexnan+0xd4>
 800cfc2:	2004      	movs	r0, #4
 800cfc4:	b007      	add	sp, #28
 800cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800cfcc <malloc>:
 800cfcc:	4b02      	ldr	r3, [pc, #8]	; (800cfd8 <malloc+0xc>)
 800cfce:	4601      	mov	r1, r0
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	f000 b823 	b.w	800d01c <_malloc_r>
 800cfd6:	bf00      	nop
 800cfd8:	20000274 	.word	0x20000274

0800cfdc <sbrk_aligned>:
 800cfdc:	b570      	push	{r4, r5, r6, lr}
 800cfde:	4e0e      	ldr	r6, [pc, #56]	; (800d018 <sbrk_aligned+0x3c>)
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	6831      	ldr	r1, [r6, #0]
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	b911      	cbnz	r1, 800cfee <sbrk_aligned+0x12>
 800cfe8:	f000 ff7c 	bl	800dee4 <_sbrk_r>
 800cfec:	6030      	str	r0, [r6, #0]
 800cfee:	4621      	mov	r1, r4
 800cff0:	4628      	mov	r0, r5
 800cff2:	f000 ff77 	bl	800dee4 <_sbrk_r>
 800cff6:	1c43      	adds	r3, r0, #1
 800cff8:	d00a      	beq.n	800d010 <sbrk_aligned+0x34>
 800cffa:	1cc4      	adds	r4, r0, #3
 800cffc:	f024 0403 	bic.w	r4, r4, #3
 800d000:	42a0      	cmp	r0, r4
 800d002:	d007      	beq.n	800d014 <sbrk_aligned+0x38>
 800d004:	1a21      	subs	r1, r4, r0
 800d006:	4628      	mov	r0, r5
 800d008:	f000 ff6c 	bl	800dee4 <_sbrk_r>
 800d00c:	3001      	adds	r0, #1
 800d00e:	d101      	bne.n	800d014 <sbrk_aligned+0x38>
 800d010:	f04f 34ff 	mov.w	r4, #4294967295
 800d014:	4620      	mov	r0, r4
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	20002578 	.word	0x20002578

0800d01c <_malloc_r>:
 800d01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d020:	1ccd      	adds	r5, r1, #3
 800d022:	f025 0503 	bic.w	r5, r5, #3
 800d026:	3508      	adds	r5, #8
 800d028:	2d0c      	cmp	r5, #12
 800d02a:	bf38      	it	cc
 800d02c:	250c      	movcc	r5, #12
 800d02e:	2d00      	cmp	r5, #0
 800d030:	4607      	mov	r7, r0
 800d032:	db01      	blt.n	800d038 <_malloc_r+0x1c>
 800d034:	42a9      	cmp	r1, r5
 800d036:	d905      	bls.n	800d044 <_malloc_r+0x28>
 800d038:	230c      	movs	r3, #12
 800d03a:	2600      	movs	r6, #0
 800d03c:	603b      	str	r3, [r7, #0]
 800d03e:	4630      	mov	r0, r6
 800d040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d044:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d118 <_malloc_r+0xfc>
 800d048:	f000 f87a 	bl	800d140 <__malloc_lock>
 800d04c:	f8d8 3000 	ldr.w	r3, [r8]
 800d050:	461c      	mov	r4, r3
 800d052:	bb5c      	cbnz	r4, 800d0ac <_malloc_r+0x90>
 800d054:	4629      	mov	r1, r5
 800d056:	4638      	mov	r0, r7
 800d058:	f7ff ffc0 	bl	800cfdc <sbrk_aligned>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	4604      	mov	r4, r0
 800d060:	d155      	bne.n	800d10e <_malloc_r+0xf2>
 800d062:	f8d8 4000 	ldr.w	r4, [r8]
 800d066:	4626      	mov	r6, r4
 800d068:	2e00      	cmp	r6, #0
 800d06a:	d145      	bne.n	800d0f8 <_malloc_r+0xdc>
 800d06c:	2c00      	cmp	r4, #0
 800d06e:	d048      	beq.n	800d102 <_malloc_r+0xe6>
 800d070:	6823      	ldr	r3, [r4, #0]
 800d072:	4631      	mov	r1, r6
 800d074:	4638      	mov	r0, r7
 800d076:	eb04 0903 	add.w	r9, r4, r3
 800d07a:	f000 ff33 	bl	800dee4 <_sbrk_r>
 800d07e:	4581      	cmp	r9, r0
 800d080:	d13f      	bne.n	800d102 <_malloc_r+0xe6>
 800d082:	6821      	ldr	r1, [r4, #0]
 800d084:	4638      	mov	r0, r7
 800d086:	1a6d      	subs	r5, r5, r1
 800d088:	4629      	mov	r1, r5
 800d08a:	f7ff ffa7 	bl	800cfdc <sbrk_aligned>
 800d08e:	3001      	adds	r0, #1
 800d090:	d037      	beq.n	800d102 <_malloc_r+0xe6>
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	442b      	add	r3, r5
 800d096:	6023      	str	r3, [r4, #0]
 800d098:	f8d8 3000 	ldr.w	r3, [r8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d038      	beq.n	800d112 <_malloc_r+0xf6>
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	42a2      	cmp	r2, r4
 800d0a4:	d12b      	bne.n	800d0fe <_malloc_r+0xe2>
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	605a      	str	r2, [r3, #4]
 800d0aa:	e00f      	b.n	800d0cc <_malloc_r+0xb0>
 800d0ac:	6822      	ldr	r2, [r4, #0]
 800d0ae:	1b52      	subs	r2, r2, r5
 800d0b0:	d41f      	bmi.n	800d0f2 <_malloc_r+0xd6>
 800d0b2:	2a0b      	cmp	r2, #11
 800d0b4:	d917      	bls.n	800d0e6 <_malloc_r+0xca>
 800d0b6:	1961      	adds	r1, r4, r5
 800d0b8:	42a3      	cmp	r3, r4
 800d0ba:	6025      	str	r5, [r4, #0]
 800d0bc:	bf18      	it	ne
 800d0be:	6059      	strne	r1, [r3, #4]
 800d0c0:	6863      	ldr	r3, [r4, #4]
 800d0c2:	bf08      	it	eq
 800d0c4:	f8c8 1000 	streq.w	r1, [r8]
 800d0c8:	5162      	str	r2, [r4, r5]
 800d0ca:	604b      	str	r3, [r1, #4]
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	f104 060b 	add.w	r6, r4, #11
 800d0d2:	f000 f83b 	bl	800d14c <__malloc_unlock>
 800d0d6:	f026 0607 	bic.w	r6, r6, #7
 800d0da:	1d23      	adds	r3, r4, #4
 800d0dc:	1af2      	subs	r2, r6, r3
 800d0de:	d0ae      	beq.n	800d03e <_malloc_r+0x22>
 800d0e0:	1b9b      	subs	r3, r3, r6
 800d0e2:	50a3      	str	r3, [r4, r2]
 800d0e4:	e7ab      	b.n	800d03e <_malloc_r+0x22>
 800d0e6:	42a3      	cmp	r3, r4
 800d0e8:	6862      	ldr	r2, [r4, #4]
 800d0ea:	d1dd      	bne.n	800d0a8 <_malloc_r+0x8c>
 800d0ec:	f8c8 2000 	str.w	r2, [r8]
 800d0f0:	e7ec      	b.n	800d0cc <_malloc_r+0xb0>
 800d0f2:	4623      	mov	r3, r4
 800d0f4:	6864      	ldr	r4, [r4, #4]
 800d0f6:	e7ac      	b.n	800d052 <_malloc_r+0x36>
 800d0f8:	4634      	mov	r4, r6
 800d0fa:	6876      	ldr	r6, [r6, #4]
 800d0fc:	e7b4      	b.n	800d068 <_malloc_r+0x4c>
 800d0fe:	4613      	mov	r3, r2
 800d100:	e7cc      	b.n	800d09c <_malloc_r+0x80>
 800d102:	230c      	movs	r3, #12
 800d104:	4638      	mov	r0, r7
 800d106:	603b      	str	r3, [r7, #0]
 800d108:	f000 f820 	bl	800d14c <__malloc_unlock>
 800d10c:	e797      	b.n	800d03e <_malloc_r+0x22>
 800d10e:	6025      	str	r5, [r4, #0]
 800d110:	e7dc      	b.n	800d0cc <_malloc_r+0xb0>
 800d112:	605b      	str	r3, [r3, #4]
 800d114:	deff      	udf	#255	; 0xff
 800d116:	bf00      	nop
 800d118:	20002574 	.word	0x20002574

0800d11c <__ascii_mbtowc>:
 800d11c:	b082      	sub	sp, #8
 800d11e:	b901      	cbnz	r1, 800d122 <__ascii_mbtowc+0x6>
 800d120:	a901      	add	r1, sp, #4
 800d122:	b142      	cbz	r2, 800d136 <__ascii_mbtowc+0x1a>
 800d124:	b14b      	cbz	r3, 800d13a <__ascii_mbtowc+0x1e>
 800d126:	7813      	ldrb	r3, [r2, #0]
 800d128:	600b      	str	r3, [r1, #0]
 800d12a:	7812      	ldrb	r2, [r2, #0]
 800d12c:	1e10      	subs	r0, r2, #0
 800d12e:	bf18      	it	ne
 800d130:	2001      	movne	r0, #1
 800d132:	b002      	add	sp, #8
 800d134:	4770      	bx	lr
 800d136:	4610      	mov	r0, r2
 800d138:	e7fb      	b.n	800d132 <__ascii_mbtowc+0x16>
 800d13a:	f06f 0001 	mvn.w	r0, #1
 800d13e:	e7f8      	b.n	800d132 <__ascii_mbtowc+0x16>

0800d140 <__malloc_lock>:
 800d140:	4801      	ldr	r0, [pc, #4]	; (800d148 <__malloc_lock+0x8>)
 800d142:	f7fe bd0c 	b.w	800bb5e <__retarget_lock_acquire_recursive>
 800d146:	bf00      	nop
 800d148:	20002570 	.word	0x20002570

0800d14c <__malloc_unlock>:
 800d14c:	4801      	ldr	r0, [pc, #4]	; (800d154 <__malloc_unlock+0x8>)
 800d14e:	f7fe bd07 	b.w	800bb60 <__retarget_lock_release_recursive>
 800d152:	bf00      	nop
 800d154:	20002570 	.word	0x20002570

0800d158 <_Balloc>:
 800d158:	b570      	push	{r4, r5, r6, lr}
 800d15a:	69c6      	ldr	r6, [r0, #28]
 800d15c:	4604      	mov	r4, r0
 800d15e:	460d      	mov	r5, r1
 800d160:	b976      	cbnz	r6, 800d180 <_Balloc+0x28>
 800d162:	2010      	movs	r0, #16
 800d164:	f7ff ff32 	bl	800cfcc <malloc>
 800d168:	4602      	mov	r2, r0
 800d16a:	61e0      	str	r0, [r4, #28]
 800d16c:	b920      	cbnz	r0, 800d178 <_Balloc+0x20>
 800d16e:	216b      	movs	r1, #107	; 0x6b
 800d170:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <_Balloc+0x78>)
 800d172:	4818      	ldr	r0, [pc, #96]	; (800d1d4 <_Balloc+0x7c>)
 800d174:	f000 fec6 	bl	800df04 <__assert_func>
 800d178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d17c:	6006      	str	r6, [r0, #0]
 800d17e:	60c6      	str	r6, [r0, #12]
 800d180:	69e6      	ldr	r6, [r4, #28]
 800d182:	68f3      	ldr	r3, [r6, #12]
 800d184:	b183      	cbz	r3, 800d1a8 <_Balloc+0x50>
 800d186:	69e3      	ldr	r3, [r4, #28]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d18e:	b9b8      	cbnz	r0, 800d1c0 <_Balloc+0x68>
 800d190:	2101      	movs	r1, #1
 800d192:	fa01 f605 	lsl.w	r6, r1, r5
 800d196:	1d72      	adds	r2, r6, #5
 800d198:	4620      	mov	r0, r4
 800d19a:	0092      	lsls	r2, r2, #2
 800d19c:	f000 fed0 	bl	800df40 <_calloc_r>
 800d1a0:	b160      	cbz	r0, 800d1bc <_Balloc+0x64>
 800d1a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1a6:	e00e      	b.n	800d1c6 <_Balloc+0x6e>
 800d1a8:	2221      	movs	r2, #33	; 0x21
 800d1aa:	2104      	movs	r1, #4
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f000 fec7 	bl	800df40 <_calloc_r>
 800d1b2:	69e3      	ldr	r3, [r4, #28]
 800d1b4:	60f0      	str	r0, [r6, #12]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1e4      	bne.n	800d186 <_Balloc+0x2e>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	6802      	ldr	r2, [r0, #0]
 800d1c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1cc:	e7f7      	b.n	800d1be <_Balloc+0x66>
 800d1ce:	bf00      	nop
 800d1d0:	0800e699 	.word	0x0800e699
 800d1d4:	0800e779 	.word	0x0800e779

0800d1d8 <_Bfree>:
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	69c6      	ldr	r6, [r0, #28]
 800d1dc:	4605      	mov	r5, r0
 800d1de:	460c      	mov	r4, r1
 800d1e0:	b976      	cbnz	r6, 800d200 <_Bfree+0x28>
 800d1e2:	2010      	movs	r0, #16
 800d1e4:	f7ff fef2 	bl	800cfcc <malloc>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	61e8      	str	r0, [r5, #28]
 800d1ec:	b920      	cbnz	r0, 800d1f8 <_Bfree+0x20>
 800d1ee:	218f      	movs	r1, #143	; 0x8f
 800d1f0:	4b08      	ldr	r3, [pc, #32]	; (800d214 <_Bfree+0x3c>)
 800d1f2:	4809      	ldr	r0, [pc, #36]	; (800d218 <_Bfree+0x40>)
 800d1f4:	f000 fe86 	bl	800df04 <__assert_func>
 800d1f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1fc:	6006      	str	r6, [r0, #0]
 800d1fe:	60c6      	str	r6, [r0, #12]
 800d200:	b13c      	cbz	r4, 800d212 <_Bfree+0x3a>
 800d202:	69eb      	ldr	r3, [r5, #28]
 800d204:	6862      	ldr	r2, [r4, #4]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d20c:	6021      	str	r1, [r4, #0]
 800d20e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d212:	bd70      	pop	{r4, r5, r6, pc}
 800d214:	0800e699 	.word	0x0800e699
 800d218:	0800e779 	.word	0x0800e779

0800d21c <__multadd>:
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	4607      	mov	r7, r0
 800d222:	460c      	mov	r4, r1
 800d224:	461e      	mov	r6, r3
 800d226:	2000      	movs	r0, #0
 800d228:	690d      	ldr	r5, [r1, #16]
 800d22a:	f101 0c14 	add.w	ip, r1, #20
 800d22e:	f8dc 3000 	ldr.w	r3, [ip]
 800d232:	3001      	adds	r0, #1
 800d234:	b299      	uxth	r1, r3
 800d236:	fb02 6101 	mla	r1, r2, r1, r6
 800d23a:	0c1e      	lsrs	r6, r3, #16
 800d23c:	0c0b      	lsrs	r3, r1, #16
 800d23e:	fb02 3306 	mla	r3, r2, r6, r3
 800d242:	b289      	uxth	r1, r1
 800d244:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d248:	4285      	cmp	r5, r0
 800d24a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d24e:	f84c 1b04 	str.w	r1, [ip], #4
 800d252:	dcec      	bgt.n	800d22e <__multadd+0x12>
 800d254:	b30e      	cbz	r6, 800d29a <__multadd+0x7e>
 800d256:	68a3      	ldr	r3, [r4, #8]
 800d258:	42ab      	cmp	r3, r5
 800d25a:	dc19      	bgt.n	800d290 <__multadd+0x74>
 800d25c:	6861      	ldr	r1, [r4, #4]
 800d25e:	4638      	mov	r0, r7
 800d260:	3101      	adds	r1, #1
 800d262:	f7ff ff79 	bl	800d158 <_Balloc>
 800d266:	4680      	mov	r8, r0
 800d268:	b928      	cbnz	r0, 800d276 <__multadd+0x5a>
 800d26a:	4602      	mov	r2, r0
 800d26c:	21ba      	movs	r1, #186	; 0xba
 800d26e:	4b0c      	ldr	r3, [pc, #48]	; (800d2a0 <__multadd+0x84>)
 800d270:	480c      	ldr	r0, [pc, #48]	; (800d2a4 <__multadd+0x88>)
 800d272:	f000 fe47 	bl	800df04 <__assert_func>
 800d276:	6922      	ldr	r2, [r4, #16]
 800d278:	f104 010c 	add.w	r1, r4, #12
 800d27c:	3202      	adds	r2, #2
 800d27e:	0092      	lsls	r2, r2, #2
 800d280:	300c      	adds	r0, #12
 800d282:	f7fe fc7c 	bl	800bb7e <memcpy>
 800d286:	4621      	mov	r1, r4
 800d288:	4638      	mov	r0, r7
 800d28a:	f7ff ffa5 	bl	800d1d8 <_Bfree>
 800d28e:	4644      	mov	r4, r8
 800d290:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d294:	3501      	adds	r5, #1
 800d296:	615e      	str	r6, [r3, #20]
 800d298:	6125      	str	r5, [r4, #16]
 800d29a:	4620      	mov	r0, r4
 800d29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a0:	0800e708 	.word	0x0800e708
 800d2a4:	0800e779 	.word	0x0800e779

0800d2a8 <__s2b>:
 800d2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	2209      	movs	r2, #9
 800d2b0:	461f      	mov	r7, r3
 800d2b2:	3308      	adds	r3, #8
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2ba:	4606      	mov	r6, r0
 800d2bc:	2201      	movs	r2, #1
 800d2be:	2100      	movs	r1, #0
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	db09      	blt.n	800d2d8 <__s2b+0x30>
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7ff ff47 	bl	800d158 <_Balloc>
 800d2ca:	b940      	cbnz	r0, 800d2de <__s2b+0x36>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	21d3      	movs	r1, #211	; 0xd3
 800d2d0:	4b18      	ldr	r3, [pc, #96]	; (800d334 <__s2b+0x8c>)
 800d2d2:	4819      	ldr	r0, [pc, #100]	; (800d338 <__s2b+0x90>)
 800d2d4:	f000 fe16 	bl	800df04 <__assert_func>
 800d2d8:	0052      	lsls	r2, r2, #1
 800d2da:	3101      	adds	r1, #1
 800d2dc:	e7f0      	b.n	800d2c0 <__s2b+0x18>
 800d2de:	9b08      	ldr	r3, [sp, #32]
 800d2e0:	2d09      	cmp	r5, #9
 800d2e2:	6143      	str	r3, [r0, #20]
 800d2e4:	f04f 0301 	mov.w	r3, #1
 800d2e8:	6103      	str	r3, [r0, #16]
 800d2ea:	dd16      	ble.n	800d31a <__s2b+0x72>
 800d2ec:	f104 0909 	add.w	r9, r4, #9
 800d2f0:	46c8      	mov	r8, r9
 800d2f2:	442c      	add	r4, r5
 800d2f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d2f8:	4601      	mov	r1, r0
 800d2fa:	220a      	movs	r2, #10
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	3b30      	subs	r3, #48	; 0x30
 800d300:	f7ff ff8c 	bl	800d21c <__multadd>
 800d304:	45a0      	cmp	r8, r4
 800d306:	d1f5      	bne.n	800d2f4 <__s2b+0x4c>
 800d308:	f1a5 0408 	sub.w	r4, r5, #8
 800d30c:	444c      	add	r4, r9
 800d30e:	1b2d      	subs	r5, r5, r4
 800d310:	1963      	adds	r3, r4, r5
 800d312:	42bb      	cmp	r3, r7
 800d314:	db04      	blt.n	800d320 <__s2b+0x78>
 800d316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31a:	2509      	movs	r5, #9
 800d31c:	340a      	adds	r4, #10
 800d31e:	e7f6      	b.n	800d30e <__s2b+0x66>
 800d320:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d324:	4601      	mov	r1, r0
 800d326:	220a      	movs	r2, #10
 800d328:	4630      	mov	r0, r6
 800d32a:	3b30      	subs	r3, #48	; 0x30
 800d32c:	f7ff ff76 	bl	800d21c <__multadd>
 800d330:	e7ee      	b.n	800d310 <__s2b+0x68>
 800d332:	bf00      	nop
 800d334:	0800e708 	.word	0x0800e708
 800d338:	0800e779 	.word	0x0800e779

0800d33c <__hi0bits>:
 800d33c:	0c02      	lsrs	r2, r0, #16
 800d33e:	0412      	lsls	r2, r2, #16
 800d340:	4603      	mov	r3, r0
 800d342:	b9ca      	cbnz	r2, 800d378 <__hi0bits+0x3c>
 800d344:	0403      	lsls	r3, r0, #16
 800d346:	2010      	movs	r0, #16
 800d348:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d34c:	bf04      	itt	eq
 800d34e:	021b      	lsleq	r3, r3, #8
 800d350:	3008      	addeq	r0, #8
 800d352:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d356:	bf04      	itt	eq
 800d358:	011b      	lsleq	r3, r3, #4
 800d35a:	3004      	addeq	r0, #4
 800d35c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d360:	bf04      	itt	eq
 800d362:	009b      	lsleq	r3, r3, #2
 800d364:	3002      	addeq	r0, #2
 800d366:	2b00      	cmp	r3, #0
 800d368:	db05      	blt.n	800d376 <__hi0bits+0x3a>
 800d36a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d36e:	f100 0001 	add.w	r0, r0, #1
 800d372:	bf08      	it	eq
 800d374:	2020      	moveq	r0, #32
 800d376:	4770      	bx	lr
 800d378:	2000      	movs	r0, #0
 800d37a:	e7e5      	b.n	800d348 <__hi0bits+0xc>

0800d37c <__lo0bits>:
 800d37c:	6803      	ldr	r3, [r0, #0]
 800d37e:	4602      	mov	r2, r0
 800d380:	f013 0007 	ands.w	r0, r3, #7
 800d384:	d00b      	beq.n	800d39e <__lo0bits+0x22>
 800d386:	07d9      	lsls	r1, r3, #31
 800d388:	d421      	bmi.n	800d3ce <__lo0bits+0x52>
 800d38a:	0798      	lsls	r0, r3, #30
 800d38c:	bf49      	itett	mi
 800d38e:	085b      	lsrmi	r3, r3, #1
 800d390:	089b      	lsrpl	r3, r3, #2
 800d392:	2001      	movmi	r0, #1
 800d394:	6013      	strmi	r3, [r2, #0]
 800d396:	bf5c      	itt	pl
 800d398:	2002      	movpl	r0, #2
 800d39a:	6013      	strpl	r3, [r2, #0]
 800d39c:	4770      	bx	lr
 800d39e:	b299      	uxth	r1, r3
 800d3a0:	b909      	cbnz	r1, 800d3a6 <__lo0bits+0x2a>
 800d3a2:	2010      	movs	r0, #16
 800d3a4:	0c1b      	lsrs	r3, r3, #16
 800d3a6:	b2d9      	uxtb	r1, r3
 800d3a8:	b909      	cbnz	r1, 800d3ae <__lo0bits+0x32>
 800d3aa:	3008      	adds	r0, #8
 800d3ac:	0a1b      	lsrs	r3, r3, #8
 800d3ae:	0719      	lsls	r1, r3, #28
 800d3b0:	bf04      	itt	eq
 800d3b2:	091b      	lsreq	r3, r3, #4
 800d3b4:	3004      	addeq	r0, #4
 800d3b6:	0799      	lsls	r1, r3, #30
 800d3b8:	bf04      	itt	eq
 800d3ba:	089b      	lsreq	r3, r3, #2
 800d3bc:	3002      	addeq	r0, #2
 800d3be:	07d9      	lsls	r1, r3, #31
 800d3c0:	d403      	bmi.n	800d3ca <__lo0bits+0x4e>
 800d3c2:	085b      	lsrs	r3, r3, #1
 800d3c4:	f100 0001 	add.w	r0, r0, #1
 800d3c8:	d003      	beq.n	800d3d2 <__lo0bits+0x56>
 800d3ca:	6013      	str	r3, [r2, #0]
 800d3cc:	4770      	bx	lr
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	4770      	bx	lr
 800d3d2:	2020      	movs	r0, #32
 800d3d4:	4770      	bx	lr
	...

0800d3d8 <__i2b>:
 800d3d8:	b510      	push	{r4, lr}
 800d3da:	460c      	mov	r4, r1
 800d3dc:	2101      	movs	r1, #1
 800d3de:	f7ff febb 	bl	800d158 <_Balloc>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	b928      	cbnz	r0, 800d3f2 <__i2b+0x1a>
 800d3e6:	f240 1145 	movw	r1, #325	; 0x145
 800d3ea:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <__i2b+0x24>)
 800d3ec:	4804      	ldr	r0, [pc, #16]	; (800d400 <__i2b+0x28>)
 800d3ee:	f000 fd89 	bl	800df04 <__assert_func>
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	6144      	str	r4, [r0, #20]
 800d3f6:	6103      	str	r3, [r0, #16]
 800d3f8:	bd10      	pop	{r4, pc}
 800d3fa:	bf00      	nop
 800d3fc:	0800e708 	.word	0x0800e708
 800d400:	0800e779 	.word	0x0800e779

0800d404 <__multiply>:
 800d404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d408:	4691      	mov	r9, r2
 800d40a:	690a      	ldr	r2, [r1, #16]
 800d40c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d410:	460c      	mov	r4, r1
 800d412:	429a      	cmp	r2, r3
 800d414:	bfbe      	ittt	lt
 800d416:	460b      	movlt	r3, r1
 800d418:	464c      	movlt	r4, r9
 800d41a:	4699      	movlt	r9, r3
 800d41c:	6927      	ldr	r7, [r4, #16]
 800d41e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d422:	68a3      	ldr	r3, [r4, #8]
 800d424:	6861      	ldr	r1, [r4, #4]
 800d426:	eb07 060a 	add.w	r6, r7, sl
 800d42a:	42b3      	cmp	r3, r6
 800d42c:	b085      	sub	sp, #20
 800d42e:	bfb8      	it	lt
 800d430:	3101      	addlt	r1, #1
 800d432:	f7ff fe91 	bl	800d158 <_Balloc>
 800d436:	b930      	cbnz	r0, 800d446 <__multiply+0x42>
 800d438:	4602      	mov	r2, r0
 800d43a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d43e:	4b43      	ldr	r3, [pc, #268]	; (800d54c <__multiply+0x148>)
 800d440:	4843      	ldr	r0, [pc, #268]	; (800d550 <__multiply+0x14c>)
 800d442:	f000 fd5f 	bl	800df04 <__assert_func>
 800d446:	f100 0514 	add.w	r5, r0, #20
 800d44a:	462b      	mov	r3, r5
 800d44c:	2200      	movs	r2, #0
 800d44e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d452:	4543      	cmp	r3, r8
 800d454:	d321      	bcc.n	800d49a <__multiply+0x96>
 800d456:	f104 0314 	add.w	r3, r4, #20
 800d45a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d45e:	f109 0314 	add.w	r3, r9, #20
 800d462:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d466:	9202      	str	r2, [sp, #8]
 800d468:	1b3a      	subs	r2, r7, r4
 800d46a:	3a15      	subs	r2, #21
 800d46c:	f022 0203 	bic.w	r2, r2, #3
 800d470:	3204      	adds	r2, #4
 800d472:	f104 0115 	add.w	r1, r4, #21
 800d476:	428f      	cmp	r7, r1
 800d478:	bf38      	it	cc
 800d47a:	2204      	movcc	r2, #4
 800d47c:	9201      	str	r2, [sp, #4]
 800d47e:	9a02      	ldr	r2, [sp, #8]
 800d480:	9303      	str	r3, [sp, #12]
 800d482:	429a      	cmp	r2, r3
 800d484:	d80c      	bhi.n	800d4a0 <__multiply+0x9c>
 800d486:	2e00      	cmp	r6, #0
 800d488:	dd03      	ble.n	800d492 <__multiply+0x8e>
 800d48a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d05a      	beq.n	800d548 <__multiply+0x144>
 800d492:	6106      	str	r6, [r0, #16]
 800d494:	b005      	add	sp, #20
 800d496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49a:	f843 2b04 	str.w	r2, [r3], #4
 800d49e:	e7d8      	b.n	800d452 <__multiply+0x4e>
 800d4a0:	f8b3 a000 	ldrh.w	sl, [r3]
 800d4a4:	f1ba 0f00 	cmp.w	sl, #0
 800d4a8:	d023      	beq.n	800d4f2 <__multiply+0xee>
 800d4aa:	46a9      	mov	r9, r5
 800d4ac:	f04f 0c00 	mov.w	ip, #0
 800d4b0:	f104 0e14 	add.w	lr, r4, #20
 800d4b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d4b8:	f8d9 1000 	ldr.w	r1, [r9]
 800d4bc:	fa1f fb82 	uxth.w	fp, r2
 800d4c0:	b289      	uxth	r1, r1
 800d4c2:	fb0a 110b 	mla	r1, sl, fp, r1
 800d4c6:	4461      	add	r1, ip
 800d4c8:	f8d9 c000 	ldr.w	ip, [r9]
 800d4cc:	0c12      	lsrs	r2, r2, #16
 800d4ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d4d2:	fb0a c202 	mla	r2, sl, r2, ip
 800d4d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4da:	b289      	uxth	r1, r1
 800d4dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4e0:	4577      	cmp	r7, lr
 800d4e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4e6:	f849 1b04 	str.w	r1, [r9], #4
 800d4ea:	d8e3      	bhi.n	800d4b4 <__multiply+0xb0>
 800d4ec:	9a01      	ldr	r2, [sp, #4]
 800d4ee:	f845 c002 	str.w	ip, [r5, r2]
 800d4f2:	9a03      	ldr	r2, [sp, #12]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4fa:	f1b9 0f00 	cmp.w	r9, #0
 800d4fe:	d021      	beq.n	800d544 <__multiply+0x140>
 800d500:	46ae      	mov	lr, r5
 800d502:	f04f 0a00 	mov.w	sl, #0
 800d506:	6829      	ldr	r1, [r5, #0]
 800d508:	f104 0c14 	add.w	ip, r4, #20
 800d50c:	f8bc b000 	ldrh.w	fp, [ip]
 800d510:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d514:	b289      	uxth	r1, r1
 800d516:	fb09 220b 	mla	r2, r9, fp, r2
 800d51a:	4452      	add	r2, sl
 800d51c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d520:	f84e 1b04 	str.w	r1, [lr], #4
 800d524:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d528:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d52c:	f8be 1000 	ldrh.w	r1, [lr]
 800d530:	4567      	cmp	r7, ip
 800d532:	fb09 110a 	mla	r1, r9, sl, r1
 800d536:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d53a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d53e:	d8e5      	bhi.n	800d50c <__multiply+0x108>
 800d540:	9a01      	ldr	r2, [sp, #4]
 800d542:	50a9      	str	r1, [r5, r2]
 800d544:	3504      	adds	r5, #4
 800d546:	e79a      	b.n	800d47e <__multiply+0x7a>
 800d548:	3e01      	subs	r6, #1
 800d54a:	e79c      	b.n	800d486 <__multiply+0x82>
 800d54c:	0800e708 	.word	0x0800e708
 800d550:	0800e779 	.word	0x0800e779

0800d554 <__pow5mult>:
 800d554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d558:	4615      	mov	r5, r2
 800d55a:	f012 0203 	ands.w	r2, r2, #3
 800d55e:	4606      	mov	r6, r0
 800d560:	460f      	mov	r7, r1
 800d562:	d007      	beq.n	800d574 <__pow5mult+0x20>
 800d564:	4c25      	ldr	r4, [pc, #148]	; (800d5fc <__pow5mult+0xa8>)
 800d566:	3a01      	subs	r2, #1
 800d568:	2300      	movs	r3, #0
 800d56a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d56e:	f7ff fe55 	bl	800d21c <__multadd>
 800d572:	4607      	mov	r7, r0
 800d574:	10ad      	asrs	r5, r5, #2
 800d576:	d03d      	beq.n	800d5f4 <__pow5mult+0xa0>
 800d578:	69f4      	ldr	r4, [r6, #28]
 800d57a:	b97c      	cbnz	r4, 800d59c <__pow5mult+0x48>
 800d57c:	2010      	movs	r0, #16
 800d57e:	f7ff fd25 	bl	800cfcc <malloc>
 800d582:	4602      	mov	r2, r0
 800d584:	61f0      	str	r0, [r6, #28]
 800d586:	b928      	cbnz	r0, 800d594 <__pow5mult+0x40>
 800d588:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d58c:	4b1c      	ldr	r3, [pc, #112]	; (800d600 <__pow5mult+0xac>)
 800d58e:	481d      	ldr	r0, [pc, #116]	; (800d604 <__pow5mult+0xb0>)
 800d590:	f000 fcb8 	bl	800df04 <__assert_func>
 800d594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d598:	6004      	str	r4, [r0, #0]
 800d59a:	60c4      	str	r4, [r0, #12]
 800d59c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d5a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5a4:	b94c      	cbnz	r4, 800d5ba <__pow5mult+0x66>
 800d5a6:	f240 2171 	movw	r1, #625	; 0x271
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7ff ff14 	bl	800d3d8 <__i2b>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5b8:	6003      	str	r3, [r0, #0]
 800d5ba:	f04f 0900 	mov.w	r9, #0
 800d5be:	07eb      	lsls	r3, r5, #31
 800d5c0:	d50a      	bpl.n	800d5d8 <__pow5mult+0x84>
 800d5c2:	4639      	mov	r1, r7
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	4630      	mov	r0, r6
 800d5c8:	f7ff ff1c 	bl	800d404 <__multiply>
 800d5cc:	4680      	mov	r8, r0
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f7ff fe01 	bl	800d1d8 <_Bfree>
 800d5d6:	4647      	mov	r7, r8
 800d5d8:	106d      	asrs	r5, r5, #1
 800d5da:	d00b      	beq.n	800d5f4 <__pow5mult+0xa0>
 800d5dc:	6820      	ldr	r0, [r4, #0]
 800d5de:	b938      	cbnz	r0, 800d5f0 <__pow5mult+0x9c>
 800d5e0:	4622      	mov	r2, r4
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	f7ff ff0d 	bl	800d404 <__multiply>
 800d5ea:	6020      	str	r0, [r4, #0]
 800d5ec:	f8c0 9000 	str.w	r9, [r0]
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	e7e4      	b.n	800d5be <__pow5mult+0x6a>
 800d5f4:	4638      	mov	r0, r7
 800d5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5fa:	bf00      	nop
 800d5fc:	0800e8c8 	.word	0x0800e8c8
 800d600:	0800e699 	.word	0x0800e699
 800d604:	0800e779 	.word	0x0800e779

0800d608 <__lshift>:
 800d608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d60c:	460c      	mov	r4, r1
 800d60e:	4607      	mov	r7, r0
 800d610:	4691      	mov	r9, r2
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	6849      	ldr	r1, [r1, #4]
 800d616:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d61a:	68a3      	ldr	r3, [r4, #8]
 800d61c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d620:	f108 0601 	add.w	r6, r8, #1
 800d624:	42b3      	cmp	r3, r6
 800d626:	db0b      	blt.n	800d640 <__lshift+0x38>
 800d628:	4638      	mov	r0, r7
 800d62a:	f7ff fd95 	bl	800d158 <_Balloc>
 800d62e:	4605      	mov	r5, r0
 800d630:	b948      	cbnz	r0, 800d646 <__lshift+0x3e>
 800d632:	4602      	mov	r2, r0
 800d634:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d638:	4b27      	ldr	r3, [pc, #156]	; (800d6d8 <__lshift+0xd0>)
 800d63a:	4828      	ldr	r0, [pc, #160]	; (800d6dc <__lshift+0xd4>)
 800d63c:	f000 fc62 	bl	800df04 <__assert_func>
 800d640:	3101      	adds	r1, #1
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	e7ee      	b.n	800d624 <__lshift+0x1c>
 800d646:	2300      	movs	r3, #0
 800d648:	f100 0114 	add.w	r1, r0, #20
 800d64c:	f100 0210 	add.w	r2, r0, #16
 800d650:	4618      	mov	r0, r3
 800d652:	4553      	cmp	r3, sl
 800d654:	db33      	blt.n	800d6be <__lshift+0xb6>
 800d656:	6920      	ldr	r0, [r4, #16]
 800d658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d65c:	f104 0314 	add.w	r3, r4, #20
 800d660:	f019 091f 	ands.w	r9, r9, #31
 800d664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d66c:	d02b      	beq.n	800d6c6 <__lshift+0xbe>
 800d66e:	468a      	mov	sl, r1
 800d670:	2200      	movs	r2, #0
 800d672:	f1c9 0e20 	rsb	lr, r9, #32
 800d676:	6818      	ldr	r0, [r3, #0]
 800d678:	fa00 f009 	lsl.w	r0, r0, r9
 800d67c:	4310      	orrs	r0, r2
 800d67e:	f84a 0b04 	str.w	r0, [sl], #4
 800d682:	f853 2b04 	ldr.w	r2, [r3], #4
 800d686:	459c      	cmp	ip, r3
 800d688:	fa22 f20e 	lsr.w	r2, r2, lr
 800d68c:	d8f3      	bhi.n	800d676 <__lshift+0x6e>
 800d68e:	ebac 0304 	sub.w	r3, ip, r4
 800d692:	3b15      	subs	r3, #21
 800d694:	f023 0303 	bic.w	r3, r3, #3
 800d698:	3304      	adds	r3, #4
 800d69a:	f104 0015 	add.w	r0, r4, #21
 800d69e:	4584      	cmp	ip, r0
 800d6a0:	bf38      	it	cc
 800d6a2:	2304      	movcc	r3, #4
 800d6a4:	50ca      	str	r2, [r1, r3]
 800d6a6:	b10a      	cbz	r2, 800d6ac <__lshift+0xa4>
 800d6a8:	f108 0602 	add.w	r6, r8, #2
 800d6ac:	3e01      	subs	r6, #1
 800d6ae:	4638      	mov	r0, r7
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	612e      	str	r6, [r5, #16]
 800d6b4:	f7ff fd90 	bl	800d1d8 <_Bfree>
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	e7c5      	b.n	800d652 <__lshift+0x4a>
 800d6c6:	3904      	subs	r1, #4
 800d6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6cc:	459c      	cmp	ip, r3
 800d6ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6d2:	d8f9      	bhi.n	800d6c8 <__lshift+0xc0>
 800d6d4:	e7ea      	b.n	800d6ac <__lshift+0xa4>
 800d6d6:	bf00      	nop
 800d6d8:	0800e708 	.word	0x0800e708
 800d6dc:	0800e779 	.word	0x0800e779

0800d6e0 <__mcmp>:
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	690a      	ldr	r2, [r1, #16]
 800d6e4:	6900      	ldr	r0, [r0, #16]
 800d6e6:	b530      	push	{r4, r5, lr}
 800d6e8:	1a80      	subs	r0, r0, r2
 800d6ea:	d10d      	bne.n	800d708 <__mcmp+0x28>
 800d6ec:	3314      	adds	r3, #20
 800d6ee:	3114      	adds	r1, #20
 800d6f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d6f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d6fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d700:	4295      	cmp	r5, r2
 800d702:	d002      	beq.n	800d70a <__mcmp+0x2a>
 800d704:	d304      	bcc.n	800d710 <__mcmp+0x30>
 800d706:	2001      	movs	r0, #1
 800d708:	bd30      	pop	{r4, r5, pc}
 800d70a:	42a3      	cmp	r3, r4
 800d70c:	d3f4      	bcc.n	800d6f8 <__mcmp+0x18>
 800d70e:	e7fb      	b.n	800d708 <__mcmp+0x28>
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	e7f8      	b.n	800d708 <__mcmp+0x28>
	...

0800d718 <__mdiff>:
 800d718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	460d      	mov	r5, r1
 800d71e:	4607      	mov	r7, r0
 800d720:	4611      	mov	r1, r2
 800d722:	4628      	mov	r0, r5
 800d724:	4614      	mov	r4, r2
 800d726:	f7ff ffdb 	bl	800d6e0 <__mcmp>
 800d72a:	1e06      	subs	r6, r0, #0
 800d72c:	d111      	bne.n	800d752 <__mdiff+0x3a>
 800d72e:	4631      	mov	r1, r6
 800d730:	4638      	mov	r0, r7
 800d732:	f7ff fd11 	bl	800d158 <_Balloc>
 800d736:	4602      	mov	r2, r0
 800d738:	b928      	cbnz	r0, 800d746 <__mdiff+0x2e>
 800d73a:	f240 2137 	movw	r1, #567	; 0x237
 800d73e:	4b3a      	ldr	r3, [pc, #232]	; (800d828 <__mdiff+0x110>)
 800d740:	483a      	ldr	r0, [pc, #232]	; (800d82c <__mdiff+0x114>)
 800d742:	f000 fbdf 	bl	800df04 <__assert_func>
 800d746:	2301      	movs	r3, #1
 800d748:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d74c:	4610      	mov	r0, r2
 800d74e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d752:	bfa4      	itt	ge
 800d754:	4623      	movge	r3, r4
 800d756:	462c      	movge	r4, r5
 800d758:	4638      	mov	r0, r7
 800d75a:	6861      	ldr	r1, [r4, #4]
 800d75c:	bfa6      	itte	ge
 800d75e:	461d      	movge	r5, r3
 800d760:	2600      	movge	r6, #0
 800d762:	2601      	movlt	r6, #1
 800d764:	f7ff fcf8 	bl	800d158 <_Balloc>
 800d768:	4602      	mov	r2, r0
 800d76a:	b918      	cbnz	r0, 800d774 <__mdiff+0x5c>
 800d76c:	f240 2145 	movw	r1, #581	; 0x245
 800d770:	4b2d      	ldr	r3, [pc, #180]	; (800d828 <__mdiff+0x110>)
 800d772:	e7e5      	b.n	800d740 <__mdiff+0x28>
 800d774:	f102 0814 	add.w	r8, r2, #20
 800d778:	46c2      	mov	sl, r8
 800d77a:	f04f 0c00 	mov.w	ip, #0
 800d77e:	6927      	ldr	r7, [r4, #16]
 800d780:	60c6      	str	r6, [r0, #12]
 800d782:	692e      	ldr	r6, [r5, #16]
 800d784:	f104 0014 	add.w	r0, r4, #20
 800d788:	f105 0914 	add.w	r9, r5, #20
 800d78c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d790:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d794:	3410      	adds	r4, #16
 800d796:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d79a:	f859 3b04 	ldr.w	r3, [r9], #4
 800d79e:	fa1f f18b 	uxth.w	r1, fp
 800d7a2:	4461      	add	r1, ip
 800d7a4:	fa1f fc83 	uxth.w	ip, r3
 800d7a8:	0c1b      	lsrs	r3, r3, #16
 800d7aa:	eba1 010c 	sub.w	r1, r1, ip
 800d7ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d7b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d7b6:	b289      	uxth	r1, r1
 800d7b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d7bc:	454e      	cmp	r6, r9
 800d7be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d7c2:	f84a 1b04 	str.w	r1, [sl], #4
 800d7c6:	d8e6      	bhi.n	800d796 <__mdiff+0x7e>
 800d7c8:	1b73      	subs	r3, r6, r5
 800d7ca:	3b15      	subs	r3, #21
 800d7cc:	f023 0303 	bic.w	r3, r3, #3
 800d7d0:	3515      	adds	r5, #21
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	42ae      	cmp	r6, r5
 800d7d6:	bf38      	it	cc
 800d7d8:	2304      	movcc	r3, #4
 800d7da:	4418      	add	r0, r3
 800d7dc:	4443      	add	r3, r8
 800d7de:	461e      	mov	r6, r3
 800d7e0:	4605      	mov	r5, r0
 800d7e2:	4575      	cmp	r5, lr
 800d7e4:	d30e      	bcc.n	800d804 <__mdiff+0xec>
 800d7e6:	f10e 0103 	add.w	r1, lr, #3
 800d7ea:	1a09      	subs	r1, r1, r0
 800d7ec:	f021 0103 	bic.w	r1, r1, #3
 800d7f0:	3803      	subs	r0, #3
 800d7f2:	4586      	cmp	lr, r0
 800d7f4:	bf38      	it	cc
 800d7f6:	2100      	movcc	r1, #0
 800d7f8:	440b      	add	r3, r1
 800d7fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7fe:	b189      	cbz	r1, 800d824 <__mdiff+0x10c>
 800d800:	6117      	str	r7, [r2, #16]
 800d802:	e7a3      	b.n	800d74c <__mdiff+0x34>
 800d804:	f855 8b04 	ldr.w	r8, [r5], #4
 800d808:	fa1f f188 	uxth.w	r1, r8
 800d80c:	4461      	add	r1, ip
 800d80e:	140c      	asrs	r4, r1, #16
 800d810:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d814:	b289      	uxth	r1, r1
 800d816:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d81a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d81e:	f846 1b04 	str.w	r1, [r6], #4
 800d822:	e7de      	b.n	800d7e2 <__mdiff+0xca>
 800d824:	3f01      	subs	r7, #1
 800d826:	e7e8      	b.n	800d7fa <__mdiff+0xe2>
 800d828:	0800e708 	.word	0x0800e708
 800d82c:	0800e779 	.word	0x0800e779

0800d830 <__ulp>:
 800d830:	4b0e      	ldr	r3, [pc, #56]	; (800d86c <__ulp+0x3c>)
 800d832:	400b      	ands	r3, r1
 800d834:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	dc08      	bgt.n	800d84e <__ulp+0x1e>
 800d83c:	425b      	negs	r3, r3
 800d83e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d842:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d846:	da04      	bge.n	800d852 <__ulp+0x22>
 800d848:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d84c:	4113      	asrs	r3, r2
 800d84e:	2200      	movs	r2, #0
 800d850:	e008      	b.n	800d864 <__ulp+0x34>
 800d852:	f1a2 0314 	sub.w	r3, r2, #20
 800d856:	2b1e      	cmp	r3, #30
 800d858:	bfd6      	itet	le
 800d85a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d85e:	2201      	movgt	r2, #1
 800d860:	40da      	lsrle	r2, r3
 800d862:	2300      	movs	r3, #0
 800d864:	4619      	mov	r1, r3
 800d866:	4610      	mov	r0, r2
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	7ff00000 	.word	0x7ff00000

0800d870 <__b2d>:
 800d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d872:	6905      	ldr	r5, [r0, #16]
 800d874:	f100 0714 	add.w	r7, r0, #20
 800d878:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d87c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d880:	1f2e      	subs	r6, r5, #4
 800d882:	4620      	mov	r0, r4
 800d884:	f7ff fd5a 	bl	800d33c <__hi0bits>
 800d888:	f1c0 0220 	rsb	r2, r0, #32
 800d88c:	280a      	cmp	r0, #10
 800d88e:	4603      	mov	r3, r0
 800d890:	f8df c068 	ldr.w	ip, [pc, #104]	; 800d8fc <__b2d+0x8c>
 800d894:	600a      	str	r2, [r1, #0]
 800d896:	dc12      	bgt.n	800d8be <__b2d+0x4e>
 800d898:	f1c0 0e0b 	rsb	lr, r0, #11
 800d89c:	fa24 f20e 	lsr.w	r2, r4, lr
 800d8a0:	42b7      	cmp	r7, r6
 800d8a2:	ea42 010c 	orr.w	r1, r2, ip
 800d8a6:	bf2c      	ite	cs
 800d8a8:	2200      	movcs	r2, #0
 800d8aa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d8ae:	3315      	adds	r3, #21
 800d8b0:	fa04 f303 	lsl.w	r3, r4, r3
 800d8b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	4610      	mov	r0, r2
 800d8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8be:	42b7      	cmp	r7, r6
 800d8c0:	bf2e      	itee	cs
 800d8c2:	2200      	movcs	r2, #0
 800d8c4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d8c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800d8cc:	3b0b      	subs	r3, #11
 800d8ce:	d012      	beq.n	800d8f6 <__b2d+0x86>
 800d8d0:	f1c3 0520 	rsb	r5, r3, #32
 800d8d4:	fa22 f105 	lsr.w	r1, r2, r5
 800d8d8:	409c      	lsls	r4, r3
 800d8da:	430c      	orrs	r4, r1
 800d8dc:	42be      	cmp	r6, r7
 800d8de:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800d8e2:	bf94      	ite	ls
 800d8e4:	2400      	movls	r4, #0
 800d8e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d8ea:	409a      	lsls	r2, r3
 800d8ec:	40ec      	lsrs	r4, r5
 800d8ee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d8f2:	4322      	orrs	r2, r4
 800d8f4:	e7e1      	b.n	800d8ba <__b2d+0x4a>
 800d8f6:	ea44 010c 	orr.w	r1, r4, ip
 800d8fa:	e7de      	b.n	800d8ba <__b2d+0x4a>
 800d8fc:	3ff00000 	.word	0x3ff00000

0800d900 <__d2b>:
 800d900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d902:	2101      	movs	r1, #1
 800d904:	4617      	mov	r7, r2
 800d906:	461c      	mov	r4, r3
 800d908:	9e08      	ldr	r6, [sp, #32]
 800d90a:	f7ff fc25 	bl	800d158 <_Balloc>
 800d90e:	4605      	mov	r5, r0
 800d910:	b930      	cbnz	r0, 800d920 <__d2b+0x20>
 800d912:	4602      	mov	r2, r0
 800d914:	f240 310f 	movw	r1, #783	; 0x30f
 800d918:	4b22      	ldr	r3, [pc, #136]	; (800d9a4 <__d2b+0xa4>)
 800d91a:	4823      	ldr	r0, [pc, #140]	; (800d9a8 <__d2b+0xa8>)
 800d91c:	f000 faf2 	bl	800df04 <__assert_func>
 800d920:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d924:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d928:	bb24      	cbnz	r4, 800d974 <__d2b+0x74>
 800d92a:	2f00      	cmp	r7, #0
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	d026      	beq.n	800d97e <__d2b+0x7e>
 800d930:	4668      	mov	r0, sp
 800d932:	9700      	str	r7, [sp, #0]
 800d934:	f7ff fd22 	bl	800d37c <__lo0bits>
 800d938:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d93c:	b1e8      	cbz	r0, 800d97a <__d2b+0x7a>
 800d93e:	f1c0 0320 	rsb	r3, r0, #32
 800d942:	fa02 f303 	lsl.w	r3, r2, r3
 800d946:	430b      	orrs	r3, r1
 800d948:	40c2      	lsrs	r2, r0
 800d94a:	616b      	str	r3, [r5, #20]
 800d94c:	9201      	str	r2, [sp, #4]
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	bf14      	ite	ne
 800d954:	2102      	movne	r1, #2
 800d956:	2101      	moveq	r1, #1
 800d958:	61ab      	str	r3, [r5, #24]
 800d95a:	6129      	str	r1, [r5, #16]
 800d95c:	b1bc      	cbz	r4, 800d98e <__d2b+0x8e>
 800d95e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d962:	4404      	add	r4, r0
 800d964:	6034      	str	r4, [r6, #0]
 800d966:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d96c:	6018      	str	r0, [r3, #0]
 800d96e:	4628      	mov	r0, r5
 800d970:	b003      	add	sp, #12
 800d972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d978:	e7d7      	b.n	800d92a <__d2b+0x2a>
 800d97a:	6169      	str	r1, [r5, #20]
 800d97c:	e7e7      	b.n	800d94e <__d2b+0x4e>
 800d97e:	a801      	add	r0, sp, #4
 800d980:	f7ff fcfc 	bl	800d37c <__lo0bits>
 800d984:	9b01      	ldr	r3, [sp, #4]
 800d986:	2101      	movs	r1, #1
 800d988:	616b      	str	r3, [r5, #20]
 800d98a:	3020      	adds	r0, #32
 800d98c:	e7e5      	b.n	800d95a <__d2b+0x5a>
 800d98e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d992:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800d996:	6030      	str	r0, [r6, #0]
 800d998:	6918      	ldr	r0, [r3, #16]
 800d99a:	f7ff fccf 	bl	800d33c <__hi0bits>
 800d99e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d9a2:	e7e2      	b.n	800d96a <__d2b+0x6a>
 800d9a4:	0800e708 	.word	0x0800e708
 800d9a8:	0800e779 	.word	0x0800e779

0800d9ac <__ratio>:
 800d9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b0:	4688      	mov	r8, r1
 800d9b2:	4669      	mov	r1, sp
 800d9b4:	4681      	mov	r9, r0
 800d9b6:	f7ff ff5b 	bl	800d870 <__b2d>
 800d9ba:	460f      	mov	r7, r1
 800d9bc:	4604      	mov	r4, r0
 800d9be:	460d      	mov	r5, r1
 800d9c0:	4640      	mov	r0, r8
 800d9c2:	a901      	add	r1, sp, #4
 800d9c4:	f7ff ff54 	bl	800d870 <__b2d>
 800d9c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d9d0:	468b      	mov	fp, r1
 800d9d2:	eba3 0c02 	sub.w	ip, r3, r2
 800d9d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d9da:	1a9b      	subs	r3, r3, r2
 800d9dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	bfd5      	itete	le
 800d9e4:	460a      	movle	r2, r1
 800d9e6:	462a      	movgt	r2, r5
 800d9e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9ec:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d9f0:	bfd8      	it	le
 800d9f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d9f6:	465b      	mov	r3, fp
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	4639      	mov	r1, r7
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f7f2 ff05 	bl	800080c <__aeabi_ddiv>
 800da02:	b003      	add	sp, #12
 800da04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da08 <__copybits>:
 800da08:	3901      	subs	r1, #1
 800da0a:	b570      	push	{r4, r5, r6, lr}
 800da0c:	1149      	asrs	r1, r1, #5
 800da0e:	6914      	ldr	r4, [r2, #16]
 800da10:	3101      	adds	r1, #1
 800da12:	f102 0314 	add.w	r3, r2, #20
 800da16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da1e:	1f05      	subs	r5, r0, #4
 800da20:	42a3      	cmp	r3, r4
 800da22:	d30c      	bcc.n	800da3e <__copybits+0x36>
 800da24:	1aa3      	subs	r3, r4, r2
 800da26:	3b11      	subs	r3, #17
 800da28:	f023 0303 	bic.w	r3, r3, #3
 800da2c:	3211      	adds	r2, #17
 800da2e:	42a2      	cmp	r2, r4
 800da30:	bf88      	it	hi
 800da32:	2300      	movhi	r3, #0
 800da34:	4418      	add	r0, r3
 800da36:	2300      	movs	r3, #0
 800da38:	4288      	cmp	r0, r1
 800da3a:	d305      	bcc.n	800da48 <__copybits+0x40>
 800da3c:	bd70      	pop	{r4, r5, r6, pc}
 800da3e:	f853 6b04 	ldr.w	r6, [r3], #4
 800da42:	f845 6f04 	str.w	r6, [r5, #4]!
 800da46:	e7eb      	b.n	800da20 <__copybits+0x18>
 800da48:	f840 3b04 	str.w	r3, [r0], #4
 800da4c:	e7f4      	b.n	800da38 <__copybits+0x30>

0800da4e <__any_on>:
 800da4e:	f100 0214 	add.w	r2, r0, #20
 800da52:	6900      	ldr	r0, [r0, #16]
 800da54:	114b      	asrs	r3, r1, #5
 800da56:	4298      	cmp	r0, r3
 800da58:	b510      	push	{r4, lr}
 800da5a:	db11      	blt.n	800da80 <__any_on+0x32>
 800da5c:	dd0a      	ble.n	800da74 <__any_on+0x26>
 800da5e:	f011 011f 	ands.w	r1, r1, #31
 800da62:	d007      	beq.n	800da74 <__any_on+0x26>
 800da64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da68:	fa24 f001 	lsr.w	r0, r4, r1
 800da6c:	fa00 f101 	lsl.w	r1, r0, r1
 800da70:	428c      	cmp	r4, r1
 800da72:	d10b      	bne.n	800da8c <__any_on+0x3e>
 800da74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da78:	4293      	cmp	r3, r2
 800da7a:	d803      	bhi.n	800da84 <__any_on+0x36>
 800da7c:	2000      	movs	r0, #0
 800da7e:	bd10      	pop	{r4, pc}
 800da80:	4603      	mov	r3, r0
 800da82:	e7f7      	b.n	800da74 <__any_on+0x26>
 800da84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da88:	2900      	cmp	r1, #0
 800da8a:	d0f5      	beq.n	800da78 <__any_on+0x2a>
 800da8c:	2001      	movs	r0, #1
 800da8e:	e7f6      	b.n	800da7e <__any_on+0x30>

0800da90 <__ascii_wctomb>:
 800da90:	4603      	mov	r3, r0
 800da92:	4608      	mov	r0, r1
 800da94:	b141      	cbz	r1, 800daa8 <__ascii_wctomb+0x18>
 800da96:	2aff      	cmp	r2, #255	; 0xff
 800da98:	d904      	bls.n	800daa4 <__ascii_wctomb+0x14>
 800da9a:	228a      	movs	r2, #138	; 0x8a
 800da9c:	f04f 30ff 	mov.w	r0, #4294967295
 800daa0:	601a      	str	r2, [r3, #0]
 800daa2:	4770      	bx	lr
 800daa4:	2001      	movs	r0, #1
 800daa6:	700a      	strb	r2, [r1, #0]
 800daa8:	4770      	bx	lr

0800daaa <__ssputs_r>:
 800daaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daae:	461f      	mov	r7, r3
 800dab0:	688e      	ldr	r6, [r1, #8]
 800dab2:	4682      	mov	sl, r0
 800dab4:	42be      	cmp	r6, r7
 800dab6:	460c      	mov	r4, r1
 800dab8:	4690      	mov	r8, r2
 800daba:	680b      	ldr	r3, [r1, #0]
 800dabc:	d82c      	bhi.n	800db18 <__ssputs_r+0x6e>
 800dabe:	898a      	ldrh	r2, [r1, #12]
 800dac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dac4:	d026      	beq.n	800db14 <__ssputs_r+0x6a>
 800dac6:	6965      	ldr	r5, [r4, #20]
 800dac8:	6909      	ldr	r1, [r1, #16]
 800daca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dace:	eba3 0901 	sub.w	r9, r3, r1
 800dad2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dad6:	1c7b      	adds	r3, r7, #1
 800dad8:	444b      	add	r3, r9
 800dada:	106d      	asrs	r5, r5, #1
 800dadc:	429d      	cmp	r5, r3
 800dade:	bf38      	it	cc
 800dae0:	461d      	movcc	r5, r3
 800dae2:	0553      	lsls	r3, r2, #21
 800dae4:	d527      	bpl.n	800db36 <__ssputs_r+0x8c>
 800dae6:	4629      	mov	r1, r5
 800dae8:	f7ff fa98 	bl	800d01c <_malloc_r>
 800daec:	4606      	mov	r6, r0
 800daee:	b360      	cbz	r0, 800db4a <__ssputs_r+0xa0>
 800daf0:	464a      	mov	r2, r9
 800daf2:	6921      	ldr	r1, [r4, #16]
 800daf4:	f7fe f843 	bl	800bb7e <memcpy>
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db02:	81a3      	strh	r3, [r4, #12]
 800db04:	6126      	str	r6, [r4, #16]
 800db06:	444e      	add	r6, r9
 800db08:	6026      	str	r6, [r4, #0]
 800db0a:	463e      	mov	r6, r7
 800db0c:	6165      	str	r5, [r4, #20]
 800db0e:	eba5 0509 	sub.w	r5, r5, r9
 800db12:	60a5      	str	r5, [r4, #8]
 800db14:	42be      	cmp	r6, r7
 800db16:	d900      	bls.n	800db1a <__ssputs_r+0x70>
 800db18:	463e      	mov	r6, r7
 800db1a:	4632      	mov	r2, r6
 800db1c:	4641      	mov	r1, r8
 800db1e:	6820      	ldr	r0, [r4, #0]
 800db20:	f000 f9c6 	bl	800deb0 <memmove>
 800db24:	2000      	movs	r0, #0
 800db26:	68a3      	ldr	r3, [r4, #8]
 800db28:	1b9b      	subs	r3, r3, r6
 800db2a:	60a3      	str	r3, [r4, #8]
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	4433      	add	r3, r6
 800db30:	6023      	str	r3, [r4, #0]
 800db32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db36:	462a      	mov	r2, r5
 800db38:	f000 fa16 	bl	800df68 <_realloc_r>
 800db3c:	4606      	mov	r6, r0
 800db3e:	2800      	cmp	r0, #0
 800db40:	d1e0      	bne.n	800db04 <__ssputs_r+0x5a>
 800db42:	4650      	mov	r0, sl
 800db44:	6921      	ldr	r1, [r4, #16]
 800db46:	f7fe fe9f 	bl	800c888 <_free_r>
 800db4a:	230c      	movs	r3, #12
 800db4c:	f8ca 3000 	str.w	r3, [sl]
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	f04f 30ff 	mov.w	r0, #4294967295
 800db56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db5a:	81a3      	strh	r3, [r4, #12]
 800db5c:	e7e9      	b.n	800db32 <__ssputs_r+0x88>
	...

0800db60 <_svfiprintf_r>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	4698      	mov	r8, r3
 800db66:	898b      	ldrh	r3, [r1, #12]
 800db68:	4607      	mov	r7, r0
 800db6a:	061b      	lsls	r3, r3, #24
 800db6c:	460d      	mov	r5, r1
 800db6e:	4614      	mov	r4, r2
 800db70:	b09d      	sub	sp, #116	; 0x74
 800db72:	d50e      	bpl.n	800db92 <_svfiprintf_r+0x32>
 800db74:	690b      	ldr	r3, [r1, #16]
 800db76:	b963      	cbnz	r3, 800db92 <_svfiprintf_r+0x32>
 800db78:	2140      	movs	r1, #64	; 0x40
 800db7a:	f7ff fa4f 	bl	800d01c <_malloc_r>
 800db7e:	6028      	str	r0, [r5, #0]
 800db80:	6128      	str	r0, [r5, #16]
 800db82:	b920      	cbnz	r0, 800db8e <_svfiprintf_r+0x2e>
 800db84:	230c      	movs	r3, #12
 800db86:	603b      	str	r3, [r7, #0]
 800db88:	f04f 30ff 	mov.w	r0, #4294967295
 800db8c:	e0d0      	b.n	800dd30 <_svfiprintf_r+0x1d0>
 800db8e:	2340      	movs	r3, #64	; 0x40
 800db90:	616b      	str	r3, [r5, #20]
 800db92:	2300      	movs	r3, #0
 800db94:	9309      	str	r3, [sp, #36]	; 0x24
 800db96:	2320      	movs	r3, #32
 800db98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db9c:	2330      	movs	r3, #48	; 0x30
 800db9e:	f04f 0901 	mov.w	r9, #1
 800dba2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dba6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800dd48 <_svfiprintf_r+0x1e8>
 800dbaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbae:	4623      	mov	r3, r4
 800dbb0:	469a      	mov	sl, r3
 800dbb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbb6:	b10a      	cbz	r2, 800dbbc <_svfiprintf_r+0x5c>
 800dbb8:	2a25      	cmp	r2, #37	; 0x25
 800dbba:	d1f9      	bne.n	800dbb0 <_svfiprintf_r+0x50>
 800dbbc:	ebba 0b04 	subs.w	fp, sl, r4
 800dbc0:	d00b      	beq.n	800dbda <_svfiprintf_r+0x7a>
 800dbc2:	465b      	mov	r3, fp
 800dbc4:	4622      	mov	r2, r4
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f7ff ff6e 	bl	800daaa <__ssputs_r>
 800dbce:	3001      	adds	r0, #1
 800dbd0:	f000 80a9 	beq.w	800dd26 <_svfiprintf_r+0x1c6>
 800dbd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbd6:	445a      	add	r2, fp
 800dbd8:	9209      	str	r2, [sp, #36]	; 0x24
 800dbda:	f89a 3000 	ldrb.w	r3, [sl]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 80a1 	beq.w	800dd26 <_svfiprintf_r+0x1c6>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbee:	f10a 0a01 	add.w	sl, sl, #1
 800dbf2:	9304      	str	r3, [sp, #16]
 800dbf4:	9307      	str	r3, [sp, #28]
 800dbf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbfa:	931a      	str	r3, [sp, #104]	; 0x68
 800dbfc:	4654      	mov	r4, sl
 800dbfe:	2205      	movs	r2, #5
 800dc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc04:	4850      	ldr	r0, [pc, #320]	; (800dd48 <_svfiprintf_r+0x1e8>)
 800dc06:	f7fd ffac 	bl	800bb62 <memchr>
 800dc0a:	9a04      	ldr	r2, [sp, #16]
 800dc0c:	b9d8      	cbnz	r0, 800dc46 <_svfiprintf_r+0xe6>
 800dc0e:	06d0      	lsls	r0, r2, #27
 800dc10:	bf44      	itt	mi
 800dc12:	2320      	movmi	r3, #32
 800dc14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc18:	0711      	lsls	r1, r2, #28
 800dc1a:	bf44      	itt	mi
 800dc1c:	232b      	movmi	r3, #43	; 0x2b
 800dc1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc22:	f89a 3000 	ldrb.w	r3, [sl]
 800dc26:	2b2a      	cmp	r3, #42	; 0x2a
 800dc28:	d015      	beq.n	800dc56 <_svfiprintf_r+0xf6>
 800dc2a:	4654      	mov	r4, sl
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	f04f 0c0a 	mov.w	ip, #10
 800dc32:	9a07      	ldr	r2, [sp, #28]
 800dc34:	4621      	mov	r1, r4
 800dc36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc3a:	3b30      	subs	r3, #48	; 0x30
 800dc3c:	2b09      	cmp	r3, #9
 800dc3e:	d94d      	bls.n	800dcdc <_svfiprintf_r+0x17c>
 800dc40:	b1b0      	cbz	r0, 800dc70 <_svfiprintf_r+0x110>
 800dc42:	9207      	str	r2, [sp, #28]
 800dc44:	e014      	b.n	800dc70 <_svfiprintf_r+0x110>
 800dc46:	eba0 0308 	sub.w	r3, r0, r8
 800dc4a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	46a2      	mov	sl, r4
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	e7d2      	b.n	800dbfc <_svfiprintf_r+0x9c>
 800dc56:	9b03      	ldr	r3, [sp, #12]
 800dc58:	1d19      	adds	r1, r3, #4
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	9103      	str	r1, [sp, #12]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	bfbb      	ittet	lt
 800dc62:	425b      	neglt	r3, r3
 800dc64:	f042 0202 	orrlt.w	r2, r2, #2
 800dc68:	9307      	strge	r3, [sp, #28]
 800dc6a:	9307      	strlt	r3, [sp, #28]
 800dc6c:	bfb8      	it	lt
 800dc6e:	9204      	strlt	r2, [sp, #16]
 800dc70:	7823      	ldrb	r3, [r4, #0]
 800dc72:	2b2e      	cmp	r3, #46	; 0x2e
 800dc74:	d10c      	bne.n	800dc90 <_svfiprintf_r+0x130>
 800dc76:	7863      	ldrb	r3, [r4, #1]
 800dc78:	2b2a      	cmp	r3, #42	; 0x2a
 800dc7a:	d134      	bne.n	800dce6 <_svfiprintf_r+0x186>
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	3402      	adds	r4, #2
 800dc80:	1d1a      	adds	r2, r3, #4
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	9203      	str	r2, [sp, #12]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	bfb8      	it	lt
 800dc8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc8e:	9305      	str	r3, [sp, #20]
 800dc90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800dd4c <_svfiprintf_r+0x1ec>
 800dc94:	2203      	movs	r2, #3
 800dc96:	4650      	mov	r0, sl
 800dc98:	7821      	ldrb	r1, [r4, #0]
 800dc9a:	f7fd ff62 	bl	800bb62 <memchr>
 800dc9e:	b138      	cbz	r0, 800dcb0 <_svfiprintf_r+0x150>
 800dca0:	2240      	movs	r2, #64	; 0x40
 800dca2:	9b04      	ldr	r3, [sp, #16]
 800dca4:	eba0 000a 	sub.w	r0, r0, sl
 800dca8:	4082      	lsls	r2, r0
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	3401      	adds	r4, #1
 800dcae:	9304      	str	r3, [sp, #16]
 800dcb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb4:	2206      	movs	r2, #6
 800dcb6:	4826      	ldr	r0, [pc, #152]	; (800dd50 <_svfiprintf_r+0x1f0>)
 800dcb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcbc:	f7fd ff51 	bl	800bb62 <memchr>
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d038      	beq.n	800dd36 <_svfiprintf_r+0x1d6>
 800dcc4:	4b23      	ldr	r3, [pc, #140]	; (800dd54 <_svfiprintf_r+0x1f4>)
 800dcc6:	bb1b      	cbnz	r3, 800dd10 <_svfiprintf_r+0x1b0>
 800dcc8:	9b03      	ldr	r3, [sp, #12]
 800dcca:	3307      	adds	r3, #7
 800dccc:	f023 0307 	bic.w	r3, r3, #7
 800dcd0:	3308      	adds	r3, #8
 800dcd2:	9303      	str	r3, [sp, #12]
 800dcd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd6:	4433      	add	r3, r6
 800dcd8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcda:	e768      	b.n	800dbae <_svfiprintf_r+0x4e>
 800dcdc:	460c      	mov	r4, r1
 800dcde:	2001      	movs	r0, #1
 800dce0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dce4:	e7a6      	b.n	800dc34 <_svfiprintf_r+0xd4>
 800dce6:	2300      	movs	r3, #0
 800dce8:	f04f 0c0a 	mov.w	ip, #10
 800dcec:	4619      	mov	r1, r3
 800dcee:	3401      	adds	r4, #1
 800dcf0:	9305      	str	r3, [sp, #20]
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcf8:	3a30      	subs	r2, #48	; 0x30
 800dcfa:	2a09      	cmp	r2, #9
 800dcfc:	d903      	bls.n	800dd06 <_svfiprintf_r+0x1a6>
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d0c6      	beq.n	800dc90 <_svfiprintf_r+0x130>
 800dd02:	9105      	str	r1, [sp, #20]
 800dd04:	e7c4      	b.n	800dc90 <_svfiprintf_r+0x130>
 800dd06:	4604      	mov	r4, r0
 800dd08:	2301      	movs	r3, #1
 800dd0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd0e:	e7f0      	b.n	800dcf2 <_svfiprintf_r+0x192>
 800dd10:	ab03      	add	r3, sp, #12
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	462a      	mov	r2, r5
 800dd16:	4638      	mov	r0, r7
 800dd18:	4b0f      	ldr	r3, [pc, #60]	; (800dd58 <_svfiprintf_r+0x1f8>)
 800dd1a:	a904      	add	r1, sp, #16
 800dd1c:	f7fd f9a8 	bl	800b070 <_printf_float>
 800dd20:	1c42      	adds	r2, r0, #1
 800dd22:	4606      	mov	r6, r0
 800dd24:	d1d6      	bne.n	800dcd4 <_svfiprintf_r+0x174>
 800dd26:	89ab      	ldrh	r3, [r5, #12]
 800dd28:	065b      	lsls	r3, r3, #25
 800dd2a:	f53f af2d 	bmi.w	800db88 <_svfiprintf_r+0x28>
 800dd2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd30:	b01d      	add	sp, #116	; 0x74
 800dd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd36:	ab03      	add	r3, sp, #12
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	462a      	mov	r2, r5
 800dd3c:	4638      	mov	r0, r7
 800dd3e:	4b06      	ldr	r3, [pc, #24]	; (800dd58 <_svfiprintf_r+0x1f8>)
 800dd40:	a904      	add	r1, sp, #16
 800dd42:	f7fd fc35 	bl	800b5b0 <_printf_i>
 800dd46:	e7eb      	b.n	800dd20 <_svfiprintf_r+0x1c0>
 800dd48:	0800e9d5 	.word	0x0800e9d5
 800dd4c:	0800e9db 	.word	0x0800e9db
 800dd50:	0800e9df 	.word	0x0800e9df
 800dd54:	0800b071 	.word	0x0800b071
 800dd58:	0800daab 	.word	0x0800daab

0800dd5c <__sflush_r>:
 800dd5c:	898a      	ldrh	r2, [r1, #12]
 800dd5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd60:	4605      	mov	r5, r0
 800dd62:	0710      	lsls	r0, r2, #28
 800dd64:	460c      	mov	r4, r1
 800dd66:	d457      	bmi.n	800de18 <__sflush_r+0xbc>
 800dd68:	684b      	ldr	r3, [r1, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dc04      	bgt.n	800dd78 <__sflush_r+0x1c>
 800dd6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	dc01      	bgt.n	800dd78 <__sflush_r+0x1c>
 800dd74:	2000      	movs	r0, #0
 800dd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd7a:	2e00      	cmp	r6, #0
 800dd7c:	d0fa      	beq.n	800dd74 <__sflush_r+0x18>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd84:	682f      	ldr	r7, [r5, #0]
 800dd86:	6a21      	ldr	r1, [r4, #32]
 800dd88:	602b      	str	r3, [r5, #0]
 800dd8a:	d032      	beq.n	800ddf2 <__sflush_r+0x96>
 800dd8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd8e:	89a3      	ldrh	r3, [r4, #12]
 800dd90:	075a      	lsls	r2, r3, #29
 800dd92:	d505      	bpl.n	800dda0 <__sflush_r+0x44>
 800dd94:	6863      	ldr	r3, [r4, #4]
 800dd96:	1ac0      	subs	r0, r0, r3
 800dd98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd9a:	b10b      	cbz	r3, 800dda0 <__sflush_r+0x44>
 800dd9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd9e:	1ac0      	subs	r0, r0, r3
 800dda0:	2300      	movs	r3, #0
 800dda2:	4602      	mov	r2, r0
 800dda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dda6:	4628      	mov	r0, r5
 800dda8:	6a21      	ldr	r1, [r4, #32]
 800ddaa:	47b0      	blx	r6
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	89a3      	ldrh	r3, [r4, #12]
 800ddb0:	d106      	bne.n	800ddc0 <__sflush_r+0x64>
 800ddb2:	6829      	ldr	r1, [r5, #0]
 800ddb4:	291d      	cmp	r1, #29
 800ddb6:	d82b      	bhi.n	800de10 <__sflush_r+0xb4>
 800ddb8:	4a28      	ldr	r2, [pc, #160]	; (800de5c <__sflush_r+0x100>)
 800ddba:	410a      	asrs	r2, r1
 800ddbc:	07d6      	lsls	r6, r2, #31
 800ddbe:	d427      	bmi.n	800de10 <__sflush_r+0xb4>
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	6062      	str	r2, [r4, #4]
 800ddc4:	6922      	ldr	r2, [r4, #16]
 800ddc6:	04d9      	lsls	r1, r3, #19
 800ddc8:	6022      	str	r2, [r4, #0]
 800ddca:	d504      	bpl.n	800ddd6 <__sflush_r+0x7a>
 800ddcc:	1c42      	adds	r2, r0, #1
 800ddce:	d101      	bne.n	800ddd4 <__sflush_r+0x78>
 800ddd0:	682b      	ldr	r3, [r5, #0]
 800ddd2:	b903      	cbnz	r3, 800ddd6 <__sflush_r+0x7a>
 800ddd4:	6560      	str	r0, [r4, #84]	; 0x54
 800ddd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddd8:	602f      	str	r7, [r5, #0]
 800ddda:	2900      	cmp	r1, #0
 800dddc:	d0ca      	beq.n	800dd74 <__sflush_r+0x18>
 800ddde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dde2:	4299      	cmp	r1, r3
 800dde4:	d002      	beq.n	800ddec <__sflush_r+0x90>
 800dde6:	4628      	mov	r0, r5
 800dde8:	f7fe fd4e 	bl	800c888 <_free_r>
 800ddec:	2000      	movs	r0, #0
 800ddee:	6360      	str	r0, [r4, #52]	; 0x34
 800ddf0:	e7c1      	b.n	800dd76 <__sflush_r+0x1a>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	47b0      	blx	r6
 800ddf8:	1c41      	adds	r1, r0, #1
 800ddfa:	d1c8      	bne.n	800dd8e <__sflush_r+0x32>
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d0c5      	beq.n	800dd8e <__sflush_r+0x32>
 800de02:	2b1d      	cmp	r3, #29
 800de04:	d001      	beq.n	800de0a <__sflush_r+0xae>
 800de06:	2b16      	cmp	r3, #22
 800de08:	d101      	bne.n	800de0e <__sflush_r+0xb2>
 800de0a:	602f      	str	r7, [r5, #0]
 800de0c:	e7b2      	b.n	800dd74 <__sflush_r+0x18>
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de14:	81a3      	strh	r3, [r4, #12]
 800de16:	e7ae      	b.n	800dd76 <__sflush_r+0x1a>
 800de18:	690f      	ldr	r7, [r1, #16]
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	d0aa      	beq.n	800dd74 <__sflush_r+0x18>
 800de1e:	0793      	lsls	r3, r2, #30
 800de20:	bf18      	it	ne
 800de22:	2300      	movne	r3, #0
 800de24:	680e      	ldr	r6, [r1, #0]
 800de26:	bf08      	it	eq
 800de28:	694b      	ldreq	r3, [r1, #20]
 800de2a:	1bf6      	subs	r6, r6, r7
 800de2c:	600f      	str	r7, [r1, #0]
 800de2e:	608b      	str	r3, [r1, #8]
 800de30:	2e00      	cmp	r6, #0
 800de32:	dd9f      	ble.n	800dd74 <__sflush_r+0x18>
 800de34:	4633      	mov	r3, r6
 800de36:	463a      	mov	r2, r7
 800de38:	4628      	mov	r0, r5
 800de3a:	6a21      	ldr	r1, [r4, #32]
 800de3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800de40:	47e0      	blx	ip
 800de42:	2800      	cmp	r0, #0
 800de44:	dc06      	bgt.n	800de54 <__sflush_r+0xf8>
 800de46:	89a3      	ldrh	r3, [r4, #12]
 800de48:	f04f 30ff 	mov.w	r0, #4294967295
 800de4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de50:	81a3      	strh	r3, [r4, #12]
 800de52:	e790      	b.n	800dd76 <__sflush_r+0x1a>
 800de54:	4407      	add	r7, r0
 800de56:	1a36      	subs	r6, r6, r0
 800de58:	e7ea      	b.n	800de30 <__sflush_r+0xd4>
 800de5a:	bf00      	nop
 800de5c:	dfbffffe 	.word	0xdfbffffe

0800de60 <_fflush_r>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	690b      	ldr	r3, [r1, #16]
 800de64:	4605      	mov	r5, r0
 800de66:	460c      	mov	r4, r1
 800de68:	b913      	cbnz	r3, 800de70 <_fflush_r+0x10>
 800de6a:	2500      	movs	r5, #0
 800de6c:	4628      	mov	r0, r5
 800de6e:	bd38      	pop	{r3, r4, r5, pc}
 800de70:	b118      	cbz	r0, 800de7a <_fflush_r+0x1a>
 800de72:	6a03      	ldr	r3, [r0, #32]
 800de74:	b90b      	cbnz	r3, 800de7a <_fflush_r+0x1a>
 800de76:	f7fd fd49 	bl	800b90c <__sinit>
 800de7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d0f3      	beq.n	800de6a <_fflush_r+0xa>
 800de82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de84:	07d0      	lsls	r0, r2, #31
 800de86:	d404      	bmi.n	800de92 <_fflush_r+0x32>
 800de88:	0599      	lsls	r1, r3, #22
 800de8a:	d402      	bmi.n	800de92 <_fflush_r+0x32>
 800de8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de8e:	f7fd fe66 	bl	800bb5e <__retarget_lock_acquire_recursive>
 800de92:	4628      	mov	r0, r5
 800de94:	4621      	mov	r1, r4
 800de96:	f7ff ff61 	bl	800dd5c <__sflush_r>
 800de9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de9c:	4605      	mov	r5, r0
 800de9e:	07da      	lsls	r2, r3, #31
 800dea0:	d4e4      	bmi.n	800de6c <_fflush_r+0xc>
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	059b      	lsls	r3, r3, #22
 800dea6:	d4e1      	bmi.n	800de6c <_fflush_r+0xc>
 800dea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deaa:	f7fd fe59 	bl	800bb60 <__retarget_lock_release_recursive>
 800deae:	e7dd      	b.n	800de6c <_fflush_r+0xc>

0800deb0 <memmove>:
 800deb0:	4288      	cmp	r0, r1
 800deb2:	b510      	push	{r4, lr}
 800deb4:	eb01 0402 	add.w	r4, r1, r2
 800deb8:	d902      	bls.n	800dec0 <memmove+0x10>
 800deba:	4284      	cmp	r4, r0
 800debc:	4623      	mov	r3, r4
 800debe:	d807      	bhi.n	800ded0 <memmove+0x20>
 800dec0:	1e43      	subs	r3, r0, #1
 800dec2:	42a1      	cmp	r1, r4
 800dec4:	d008      	beq.n	800ded8 <memmove+0x28>
 800dec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800deca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dece:	e7f8      	b.n	800dec2 <memmove+0x12>
 800ded0:	4601      	mov	r1, r0
 800ded2:	4402      	add	r2, r0
 800ded4:	428a      	cmp	r2, r1
 800ded6:	d100      	bne.n	800deda <memmove+0x2a>
 800ded8:	bd10      	pop	{r4, pc}
 800deda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dee2:	e7f7      	b.n	800ded4 <memmove+0x24>

0800dee4 <_sbrk_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	2300      	movs	r3, #0
 800dee8:	4d05      	ldr	r5, [pc, #20]	; (800df00 <_sbrk_r+0x1c>)
 800deea:	4604      	mov	r4, r0
 800deec:	4608      	mov	r0, r1
 800deee:	602b      	str	r3, [r5, #0]
 800def0:	f7f5 f880 	bl	8002ff4 <_sbrk>
 800def4:	1c43      	adds	r3, r0, #1
 800def6:	d102      	bne.n	800defe <_sbrk_r+0x1a>
 800def8:	682b      	ldr	r3, [r5, #0]
 800defa:	b103      	cbz	r3, 800defe <_sbrk_r+0x1a>
 800defc:	6023      	str	r3, [r4, #0]
 800defe:	bd38      	pop	{r3, r4, r5, pc}
 800df00:	2000256c 	.word	0x2000256c

0800df04 <__assert_func>:
 800df04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df06:	4614      	mov	r4, r2
 800df08:	461a      	mov	r2, r3
 800df0a:	4b09      	ldr	r3, [pc, #36]	; (800df30 <__assert_func+0x2c>)
 800df0c:	4605      	mov	r5, r0
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68d8      	ldr	r0, [r3, #12]
 800df12:	b14c      	cbz	r4, 800df28 <__assert_func+0x24>
 800df14:	4b07      	ldr	r3, [pc, #28]	; (800df34 <__assert_func+0x30>)
 800df16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df1a:	9100      	str	r1, [sp, #0]
 800df1c:	462b      	mov	r3, r5
 800df1e:	4906      	ldr	r1, [pc, #24]	; (800df38 <__assert_func+0x34>)
 800df20:	f000 f852 	bl	800dfc8 <fiprintf>
 800df24:	f000 f862 	bl	800dfec <abort>
 800df28:	4b04      	ldr	r3, [pc, #16]	; (800df3c <__assert_func+0x38>)
 800df2a:	461c      	mov	r4, r3
 800df2c:	e7f3      	b.n	800df16 <__assert_func+0x12>
 800df2e:	bf00      	nop
 800df30:	20000274 	.word	0x20000274
 800df34:	0800e9e6 	.word	0x0800e9e6
 800df38:	0800e9f3 	.word	0x0800e9f3
 800df3c:	0800ea21 	.word	0x0800ea21

0800df40 <_calloc_r>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	fba1 5402 	umull	r5, r4, r1, r2
 800df46:	b934      	cbnz	r4, 800df56 <_calloc_r+0x16>
 800df48:	4629      	mov	r1, r5
 800df4a:	f7ff f867 	bl	800d01c <_malloc_r>
 800df4e:	4606      	mov	r6, r0
 800df50:	b928      	cbnz	r0, 800df5e <_calloc_r+0x1e>
 800df52:	4630      	mov	r0, r6
 800df54:	bd70      	pop	{r4, r5, r6, pc}
 800df56:	220c      	movs	r2, #12
 800df58:	2600      	movs	r6, #0
 800df5a:	6002      	str	r2, [r0, #0]
 800df5c:	e7f9      	b.n	800df52 <_calloc_r+0x12>
 800df5e:	462a      	mov	r2, r5
 800df60:	4621      	mov	r1, r4
 800df62:	f7fd fd6c 	bl	800ba3e <memset>
 800df66:	e7f4      	b.n	800df52 <_calloc_r+0x12>

0800df68 <_realloc_r>:
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6c:	4680      	mov	r8, r0
 800df6e:	4614      	mov	r4, r2
 800df70:	460e      	mov	r6, r1
 800df72:	b921      	cbnz	r1, 800df7e <_realloc_r+0x16>
 800df74:	4611      	mov	r1, r2
 800df76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df7a:	f7ff b84f 	b.w	800d01c <_malloc_r>
 800df7e:	b92a      	cbnz	r2, 800df8c <_realloc_r+0x24>
 800df80:	f7fe fc82 	bl	800c888 <_free_r>
 800df84:	4625      	mov	r5, r4
 800df86:	4628      	mov	r0, r5
 800df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df8c:	f000 f835 	bl	800dffa <_malloc_usable_size_r>
 800df90:	4284      	cmp	r4, r0
 800df92:	4607      	mov	r7, r0
 800df94:	d802      	bhi.n	800df9c <_realloc_r+0x34>
 800df96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df9a:	d812      	bhi.n	800dfc2 <_realloc_r+0x5a>
 800df9c:	4621      	mov	r1, r4
 800df9e:	4640      	mov	r0, r8
 800dfa0:	f7ff f83c 	bl	800d01c <_malloc_r>
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d0ed      	beq.n	800df86 <_realloc_r+0x1e>
 800dfaa:	42bc      	cmp	r4, r7
 800dfac:	4622      	mov	r2, r4
 800dfae:	4631      	mov	r1, r6
 800dfb0:	bf28      	it	cs
 800dfb2:	463a      	movcs	r2, r7
 800dfb4:	f7fd fde3 	bl	800bb7e <memcpy>
 800dfb8:	4631      	mov	r1, r6
 800dfba:	4640      	mov	r0, r8
 800dfbc:	f7fe fc64 	bl	800c888 <_free_r>
 800dfc0:	e7e1      	b.n	800df86 <_realloc_r+0x1e>
 800dfc2:	4635      	mov	r5, r6
 800dfc4:	e7df      	b.n	800df86 <_realloc_r+0x1e>
	...

0800dfc8 <fiprintf>:
 800dfc8:	b40e      	push	{r1, r2, r3}
 800dfca:	b503      	push	{r0, r1, lr}
 800dfcc:	4601      	mov	r1, r0
 800dfce:	ab03      	add	r3, sp, #12
 800dfd0:	4805      	ldr	r0, [pc, #20]	; (800dfe8 <fiprintf+0x20>)
 800dfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfd6:	6800      	ldr	r0, [r0, #0]
 800dfd8:	9301      	str	r3, [sp, #4]
 800dfda:	f000 f83d 	bl	800e058 <_vfiprintf_r>
 800dfde:	b002      	add	sp, #8
 800dfe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfe4:	b003      	add	sp, #12
 800dfe6:	4770      	bx	lr
 800dfe8:	20000274 	.word	0x20000274

0800dfec <abort>:
 800dfec:	2006      	movs	r0, #6
 800dfee:	b508      	push	{r3, lr}
 800dff0:	f000 fa0a 	bl	800e408 <raise>
 800dff4:	2001      	movs	r0, #1
 800dff6:	f7f4 ff8a 	bl	8002f0e <_exit>

0800dffa <_malloc_usable_size_r>:
 800dffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dffe:	1f18      	subs	r0, r3, #4
 800e000:	2b00      	cmp	r3, #0
 800e002:	bfbc      	itt	lt
 800e004:	580b      	ldrlt	r3, [r1, r0]
 800e006:	18c0      	addlt	r0, r0, r3
 800e008:	4770      	bx	lr

0800e00a <__sfputc_r>:
 800e00a:	6893      	ldr	r3, [r2, #8]
 800e00c:	b410      	push	{r4}
 800e00e:	3b01      	subs	r3, #1
 800e010:	2b00      	cmp	r3, #0
 800e012:	6093      	str	r3, [r2, #8]
 800e014:	da07      	bge.n	800e026 <__sfputc_r+0x1c>
 800e016:	6994      	ldr	r4, [r2, #24]
 800e018:	42a3      	cmp	r3, r4
 800e01a:	db01      	blt.n	800e020 <__sfputc_r+0x16>
 800e01c:	290a      	cmp	r1, #10
 800e01e:	d102      	bne.n	800e026 <__sfputc_r+0x1c>
 800e020:	bc10      	pop	{r4}
 800e022:	f000 b933 	b.w	800e28c <__swbuf_r>
 800e026:	6813      	ldr	r3, [r2, #0]
 800e028:	1c58      	adds	r0, r3, #1
 800e02a:	6010      	str	r0, [r2, #0]
 800e02c:	7019      	strb	r1, [r3, #0]
 800e02e:	4608      	mov	r0, r1
 800e030:	bc10      	pop	{r4}
 800e032:	4770      	bx	lr

0800e034 <__sfputs_r>:
 800e034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e036:	4606      	mov	r6, r0
 800e038:	460f      	mov	r7, r1
 800e03a:	4614      	mov	r4, r2
 800e03c:	18d5      	adds	r5, r2, r3
 800e03e:	42ac      	cmp	r4, r5
 800e040:	d101      	bne.n	800e046 <__sfputs_r+0x12>
 800e042:	2000      	movs	r0, #0
 800e044:	e007      	b.n	800e056 <__sfputs_r+0x22>
 800e046:	463a      	mov	r2, r7
 800e048:	4630      	mov	r0, r6
 800e04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e04e:	f7ff ffdc 	bl	800e00a <__sfputc_r>
 800e052:	1c43      	adds	r3, r0, #1
 800e054:	d1f3      	bne.n	800e03e <__sfputs_r+0xa>
 800e056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e058 <_vfiprintf_r>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	460d      	mov	r5, r1
 800e05e:	4614      	mov	r4, r2
 800e060:	4698      	mov	r8, r3
 800e062:	4606      	mov	r6, r0
 800e064:	b09d      	sub	sp, #116	; 0x74
 800e066:	b118      	cbz	r0, 800e070 <_vfiprintf_r+0x18>
 800e068:	6a03      	ldr	r3, [r0, #32]
 800e06a:	b90b      	cbnz	r3, 800e070 <_vfiprintf_r+0x18>
 800e06c:	f7fd fc4e 	bl	800b90c <__sinit>
 800e070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e072:	07d9      	lsls	r1, r3, #31
 800e074:	d405      	bmi.n	800e082 <_vfiprintf_r+0x2a>
 800e076:	89ab      	ldrh	r3, [r5, #12]
 800e078:	059a      	lsls	r2, r3, #22
 800e07a:	d402      	bmi.n	800e082 <_vfiprintf_r+0x2a>
 800e07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e07e:	f7fd fd6e 	bl	800bb5e <__retarget_lock_acquire_recursive>
 800e082:	89ab      	ldrh	r3, [r5, #12]
 800e084:	071b      	lsls	r3, r3, #28
 800e086:	d501      	bpl.n	800e08c <_vfiprintf_r+0x34>
 800e088:	692b      	ldr	r3, [r5, #16]
 800e08a:	b99b      	cbnz	r3, 800e0b4 <_vfiprintf_r+0x5c>
 800e08c:	4629      	mov	r1, r5
 800e08e:	4630      	mov	r0, r6
 800e090:	f000 f93a 	bl	800e308 <__swsetup_r>
 800e094:	b170      	cbz	r0, 800e0b4 <_vfiprintf_r+0x5c>
 800e096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e098:	07dc      	lsls	r4, r3, #31
 800e09a:	d504      	bpl.n	800e0a6 <_vfiprintf_r+0x4e>
 800e09c:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a0:	b01d      	add	sp, #116	; 0x74
 800e0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a6:	89ab      	ldrh	r3, [r5, #12]
 800e0a8:	0598      	lsls	r0, r3, #22
 800e0aa:	d4f7      	bmi.n	800e09c <_vfiprintf_r+0x44>
 800e0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0ae:	f7fd fd57 	bl	800bb60 <__retarget_lock_release_recursive>
 800e0b2:	e7f3      	b.n	800e09c <_vfiprintf_r+0x44>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b8:	2320      	movs	r3, #32
 800e0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0be:	2330      	movs	r3, #48	; 0x30
 800e0c0:	f04f 0901 	mov.w	r9, #1
 800e0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e278 <_vfiprintf_r+0x220>
 800e0cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0d0:	4623      	mov	r3, r4
 800e0d2:	469a      	mov	sl, r3
 800e0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0d8:	b10a      	cbz	r2, 800e0de <_vfiprintf_r+0x86>
 800e0da:	2a25      	cmp	r2, #37	; 0x25
 800e0dc:	d1f9      	bne.n	800e0d2 <_vfiprintf_r+0x7a>
 800e0de:	ebba 0b04 	subs.w	fp, sl, r4
 800e0e2:	d00b      	beq.n	800e0fc <_vfiprintf_r+0xa4>
 800e0e4:	465b      	mov	r3, fp
 800e0e6:	4622      	mov	r2, r4
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	f7ff ffa2 	bl	800e034 <__sfputs_r>
 800e0f0:	3001      	adds	r0, #1
 800e0f2:	f000 80a9 	beq.w	800e248 <_vfiprintf_r+0x1f0>
 800e0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0f8:	445a      	add	r2, fp
 800e0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e100:	2b00      	cmp	r3, #0
 800e102:	f000 80a1 	beq.w	800e248 <_vfiprintf_r+0x1f0>
 800e106:	2300      	movs	r3, #0
 800e108:	f04f 32ff 	mov.w	r2, #4294967295
 800e10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e110:	f10a 0a01 	add.w	sl, sl, #1
 800e114:	9304      	str	r3, [sp, #16]
 800e116:	9307      	str	r3, [sp, #28]
 800e118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e11c:	931a      	str	r3, [sp, #104]	; 0x68
 800e11e:	4654      	mov	r4, sl
 800e120:	2205      	movs	r2, #5
 800e122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e126:	4854      	ldr	r0, [pc, #336]	; (800e278 <_vfiprintf_r+0x220>)
 800e128:	f7fd fd1b 	bl	800bb62 <memchr>
 800e12c:	9a04      	ldr	r2, [sp, #16]
 800e12e:	b9d8      	cbnz	r0, 800e168 <_vfiprintf_r+0x110>
 800e130:	06d1      	lsls	r1, r2, #27
 800e132:	bf44      	itt	mi
 800e134:	2320      	movmi	r3, #32
 800e136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e13a:	0713      	lsls	r3, r2, #28
 800e13c:	bf44      	itt	mi
 800e13e:	232b      	movmi	r3, #43	; 0x2b
 800e140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e144:	f89a 3000 	ldrb.w	r3, [sl]
 800e148:	2b2a      	cmp	r3, #42	; 0x2a
 800e14a:	d015      	beq.n	800e178 <_vfiprintf_r+0x120>
 800e14c:	4654      	mov	r4, sl
 800e14e:	2000      	movs	r0, #0
 800e150:	f04f 0c0a 	mov.w	ip, #10
 800e154:	9a07      	ldr	r2, [sp, #28]
 800e156:	4621      	mov	r1, r4
 800e158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e15c:	3b30      	subs	r3, #48	; 0x30
 800e15e:	2b09      	cmp	r3, #9
 800e160:	d94d      	bls.n	800e1fe <_vfiprintf_r+0x1a6>
 800e162:	b1b0      	cbz	r0, 800e192 <_vfiprintf_r+0x13a>
 800e164:	9207      	str	r2, [sp, #28]
 800e166:	e014      	b.n	800e192 <_vfiprintf_r+0x13a>
 800e168:	eba0 0308 	sub.w	r3, r0, r8
 800e16c:	fa09 f303 	lsl.w	r3, r9, r3
 800e170:	4313      	orrs	r3, r2
 800e172:	46a2      	mov	sl, r4
 800e174:	9304      	str	r3, [sp, #16]
 800e176:	e7d2      	b.n	800e11e <_vfiprintf_r+0xc6>
 800e178:	9b03      	ldr	r3, [sp, #12]
 800e17a:	1d19      	adds	r1, r3, #4
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	9103      	str	r1, [sp, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	bfbb      	ittet	lt
 800e184:	425b      	neglt	r3, r3
 800e186:	f042 0202 	orrlt.w	r2, r2, #2
 800e18a:	9307      	strge	r3, [sp, #28]
 800e18c:	9307      	strlt	r3, [sp, #28]
 800e18e:	bfb8      	it	lt
 800e190:	9204      	strlt	r2, [sp, #16]
 800e192:	7823      	ldrb	r3, [r4, #0]
 800e194:	2b2e      	cmp	r3, #46	; 0x2e
 800e196:	d10c      	bne.n	800e1b2 <_vfiprintf_r+0x15a>
 800e198:	7863      	ldrb	r3, [r4, #1]
 800e19a:	2b2a      	cmp	r3, #42	; 0x2a
 800e19c:	d134      	bne.n	800e208 <_vfiprintf_r+0x1b0>
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	3402      	adds	r4, #2
 800e1a2:	1d1a      	adds	r2, r3, #4
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	9203      	str	r2, [sp, #12]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	bfb8      	it	lt
 800e1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1b0:	9305      	str	r3, [sp, #20]
 800e1b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e27c <_vfiprintf_r+0x224>
 800e1b6:	2203      	movs	r2, #3
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	7821      	ldrb	r1, [r4, #0]
 800e1bc:	f7fd fcd1 	bl	800bb62 <memchr>
 800e1c0:	b138      	cbz	r0, 800e1d2 <_vfiprintf_r+0x17a>
 800e1c2:	2240      	movs	r2, #64	; 0x40
 800e1c4:	9b04      	ldr	r3, [sp, #16]
 800e1c6:	eba0 000a 	sub.w	r0, r0, sl
 800e1ca:	4082      	lsls	r2, r0
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	3401      	adds	r4, #1
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d6:	2206      	movs	r2, #6
 800e1d8:	4829      	ldr	r0, [pc, #164]	; (800e280 <_vfiprintf_r+0x228>)
 800e1da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1de:	f7fd fcc0 	bl	800bb62 <memchr>
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d03f      	beq.n	800e266 <_vfiprintf_r+0x20e>
 800e1e6:	4b27      	ldr	r3, [pc, #156]	; (800e284 <_vfiprintf_r+0x22c>)
 800e1e8:	bb1b      	cbnz	r3, 800e232 <_vfiprintf_r+0x1da>
 800e1ea:	9b03      	ldr	r3, [sp, #12]
 800e1ec:	3307      	adds	r3, #7
 800e1ee:	f023 0307 	bic.w	r3, r3, #7
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	9303      	str	r3, [sp, #12]
 800e1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f8:	443b      	add	r3, r7
 800e1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e1fc:	e768      	b.n	800e0d0 <_vfiprintf_r+0x78>
 800e1fe:	460c      	mov	r4, r1
 800e200:	2001      	movs	r0, #1
 800e202:	fb0c 3202 	mla	r2, ip, r2, r3
 800e206:	e7a6      	b.n	800e156 <_vfiprintf_r+0xfe>
 800e208:	2300      	movs	r3, #0
 800e20a:	f04f 0c0a 	mov.w	ip, #10
 800e20e:	4619      	mov	r1, r3
 800e210:	3401      	adds	r4, #1
 800e212:	9305      	str	r3, [sp, #20]
 800e214:	4620      	mov	r0, r4
 800e216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e21a:	3a30      	subs	r2, #48	; 0x30
 800e21c:	2a09      	cmp	r2, #9
 800e21e:	d903      	bls.n	800e228 <_vfiprintf_r+0x1d0>
 800e220:	2b00      	cmp	r3, #0
 800e222:	d0c6      	beq.n	800e1b2 <_vfiprintf_r+0x15a>
 800e224:	9105      	str	r1, [sp, #20]
 800e226:	e7c4      	b.n	800e1b2 <_vfiprintf_r+0x15a>
 800e228:	4604      	mov	r4, r0
 800e22a:	2301      	movs	r3, #1
 800e22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e230:	e7f0      	b.n	800e214 <_vfiprintf_r+0x1bc>
 800e232:	ab03      	add	r3, sp, #12
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	462a      	mov	r2, r5
 800e238:	4630      	mov	r0, r6
 800e23a:	4b13      	ldr	r3, [pc, #76]	; (800e288 <_vfiprintf_r+0x230>)
 800e23c:	a904      	add	r1, sp, #16
 800e23e:	f7fc ff17 	bl	800b070 <_printf_float>
 800e242:	4607      	mov	r7, r0
 800e244:	1c78      	adds	r0, r7, #1
 800e246:	d1d6      	bne.n	800e1f6 <_vfiprintf_r+0x19e>
 800e248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e24a:	07d9      	lsls	r1, r3, #31
 800e24c:	d405      	bmi.n	800e25a <_vfiprintf_r+0x202>
 800e24e:	89ab      	ldrh	r3, [r5, #12]
 800e250:	059a      	lsls	r2, r3, #22
 800e252:	d402      	bmi.n	800e25a <_vfiprintf_r+0x202>
 800e254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e256:	f7fd fc83 	bl	800bb60 <__retarget_lock_release_recursive>
 800e25a:	89ab      	ldrh	r3, [r5, #12]
 800e25c:	065b      	lsls	r3, r3, #25
 800e25e:	f53f af1d 	bmi.w	800e09c <_vfiprintf_r+0x44>
 800e262:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e264:	e71c      	b.n	800e0a0 <_vfiprintf_r+0x48>
 800e266:	ab03      	add	r3, sp, #12
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	462a      	mov	r2, r5
 800e26c:	4630      	mov	r0, r6
 800e26e:	4b06      	ldr	r3, [pc, #24]	; (800e288 <_vfiprintf_r+0x230>)
 800e270:	a904      	add	r1, sp, #16
 800e272:	f7fd f99d 	bl	800b5b0 <_printf_i>
 800e276:	e7e4      	b.n	800e242 <_vfiprintf_r+0x1ea>
 800e278:	0800e9d5 	.word	0x0800e9d5
 800e27c:	0800e9db 	.word	0x0800e9db
 800e280:	0800e9df 	.word	0x0800e9df
 800e284:	0800b071 	.word	0x0800b071
 800e288:	0800e035 	.word	0x0800e035

0800e28c <__swbuf_r>:
 800e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28e:	460e      	mov	r6, r1
 800e290:	4614      	mov	r4, r2
 800e292:	4605      	mov	r5, r0
 800e294:	b118      	cbz	r0, 800e29e <__swbuf_r+0x12>
 800e296:	6a03      	ldr	r3, [r0, #32]
 800e298:	b90b      	cbnz	r3, 800e29e <__swbuf_r+0x12>
 800e29a:	f7fd fb37 	bl	800b90c <__sinit>
 800e29e:	69a3      	ldr	r3, [r4, #24]
 800e2a0:	60a3      	str	r3, [r4, #8]
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	071a      	lsls	r2, r3, #28
 800e2a6:	d525      	bpl.n	800e2f4 <__swbuf_r+0x68>
 800e2a8:	6923      	ldr	r3, [r4, #16]
 800e2aa:	b31b      	cbz	r3, 800e2f4 <__swbuf_r+0x68>
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	6922      	ldr	r2, [r4, #16]
 800e2b0:	b2f6      	uxtb	r6, r6
 800e2b2:	1a98      	subs	r0, r3, r2
 800e2b4:	6963      	ldr	r3, [r4, #20]
 800e2b6:	4637      	mov	r7, r6
 800e2b8:	4283      	cmp	r3, r0
 800e2ba:	dc04      	bgt.n	800e2c6 <__swbuf_r+0x3a>
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f7ff fdce 	bl	800de60 <_fflush_r>
 800e2c4:	b9e0      	cbnz	r0, 800e300 <__swbuf_r+0x74>
 800e2c6:	68a3      	ldr	r3, [r4, #8]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	60a3      	str	r3, [r4, #8]
 800e2cc:	6823      	ldr	r3, [r4, #0]
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	6022      	str	r2, [r4, #0]
 800e2d2:	701e      	strb	r6, [r3, #0]
 800e2d4:	6962      	ldr	r2, [r4, #20]
 800e2d6:	1c43      	adds	r3, r0, #1
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d004      	beq.n	800e2e6 <__swbuf_r+0x5a>
 800e2dc:	89a3      	ldrh	r3, [r4, #12]
 800e2de:	07db      	lsls	r3, r3, #31
 800e2e0:	d506      	bpl.n	800e2f0 <__swbuf_r+0x64>
 800e2e2:	2e0a      	cmp	r6, #10
 800e2e4:	d104      	bne.n	800e2f0 <__swbuf_r+0x64>
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	f7ff fdb9 	bl	800de60 <_fflush_r>
 800e2ee:	b938      	cbnz	r0, 800e300 <__swbuf_r+0x74>
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2f4:	4621      	mov	r1, r4
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	f000 f806 	bl	800e308 <__swsetup_r>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d0d5      	beq.n	800e2ac <__swbuf_r+0x20>
 800e300:	f04f 37ff 	mov.w	r7, #4294967295
 800e304:	e7f4      	b.n	800e2f0 <__swbuf_r+0x64>
	...

0800e308 <__swsetup_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4b2a      	ldr	r3, [pc, #168]	; (800e3b4 <__swsetup_r+0xac>)
 800e30c:	4605      	mov	r5, r0
 800e30e:	6818      	ldr	r0, [r3, #0]
 800e310:	460c      	mov	r4, r1
 800e312:	b118      	cbz	r0, 800e31c <__swsetup_r+0x14>
 800e314:	6a03      	ldr	r3, [r0, #32]
 800e316:	b90b      	cbnz	r3, 800e31c <__swsetup_r+0x14>
 800e318:	f7fd faf8 	bl	800b90c <__sinit>
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e322:	0718      	lsls	r0, r3, #28
 800e324:	d422      	bmi.n	800e36c <__swsetup_r+0x64>
 800e326:	06d9      	lsls	r1, r3, #27
 800e328:	d407      	bmi.n	800e33a <__swsetup_r+0x32>
 800e32a:	2309      	movs	r3, #9
 800e32c:	602b      	str	r3, [r5, #0]
 800e32e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e332:	f04f 30ff 	mov.w	r0, #4294967295
 800e336:	81a3      	strh	r3, [r4, #12]
 800e338:	e034      	b.n	800e3a4 <__swsetup_r+0x9c>
 800e33a:	0758      	lsls	r0, r3, #29
 800e33c:	d512      	bpl.n	800e364 <__swsetup_r+0x5c>
 800e33e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e340:	b141      	cbz	r1, 800e354 <__swsetup_r+0x4c>
 800e342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e346:	4299      	cmp	r1, r3
 800e348:	d002      	beq.n	800e350 <__swsetup_r+0x48>
 800e34a:	4628      	mov	r0, r5
 800e34c:	f7fe fa9c 	bl	800c888 <_free_r>
 800e350:	2300      	movs	r3, #0
 800e352:	6363      	str	r3, [r4, #52]	; 0x34
 800e354:	89a3      	ldrh	r3, [r4, #12]
 800e356:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e35a:	81a3      	strh	r3, [r4, #12]
 800e35c:	2300      	movs	r3, #0
 800e35e:	6063      	str	r3, [r4, #4]
 800e360:	6923      	ldr	r3, [r4, #16]
 800e362:	6023      	str	r3, [r4, #0]
 800e364:	89a3      	ldrh	r3, [r4, #12]
 800e366:	f043 0308 	orr.w	r3, r3, #8
 800e36a:	81a3      	strh	r3, [r4, #12]
 800e36c:	6923      	ldr	r3, [r4, #16]
 800e36e:	b94b      	cbnz	r3, 800e384 <__swsetup_r+0x7c>
 800e370:	89a3      	ldrh	r3, [r4, #12]
 800e372:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e37a:	d003      	beq.n	800e384 <__swsetup_r+0x7c>
 800e37c:	4621      	mov	r1, r4
 800e37e:	4628      	mov	r0, r5
 800e380:	f000 f883 	bl	800e48a <__smakebuf_r>
 800e384:	89a0      	ldrh	r0, [r4, #12]
 800e386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e38a:	f010 0301 	ands.w	r3, r0, #1
 800e38e:	d00a      	beq.n	800e3a6 <__swsetup_r+0x9e>
 800e390:	2300      	movs	r3, #0
 800e392:	60a3      	str	r3, [r4, #8]
 800e394:	6963      	ldr	r3, [r4, #20]
 800e396:	425b      	negs	r3, r3
 800e398:	61a3      	str	r3, [r4, #24]
 800e39a:	6923      	ldr	r3, [r4, #16]
 800e39c:	b943      	cbnz	r3, 800e3b0 <__swsetup_r+0xa8>
 800e39e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3a2:	d1c4      	bne.n	800e32e <__swsetup_r+0x26>
 800e3a4:	bd38      	pop	{r3, r4, r5, pc}
 800e3a6:	0781      	lsls	r1, r0, #30
 800e3a8:	bf58      	it	pl
 800e3aa:	6963      	ldrpl	r3, [r4, #20]
 800e3ac:	60a3      	str	r3, [r4, #8]
 800e3ae:	e7f4      	b.n	800e39a <__swsetup_r+0x92>
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e7f7      	b.n	800e3a4 <__swsetup_r+0x9c>
 800e3b4:	20000274 	.word	0x20000274

0800e3b8 <_raise_r>:
 800e3b8:	291f      	cmp	r1, #31
 800e3ba:	b538      	push	{r3, r4, r5, lr}
 800e3bc:	4604      	mov	r4, r0
 800e3be:	460d      	mov	r5, r1
 800e3c0:	d904      	bls.n	800e3cc <_raise_r+0x14>
 800e3c2:	2316      	movs	r3, #22
 800e3c4:	6003      	str	r3, [r0, #0]
 800e3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ca:	bd38      	pop	{r3, r4, r5, pc}
 800e3cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e3ce:	b112      	cbz	r2, 800e3d6 <_raise_r+0x1e>
 800e3d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3d4:	b94b      	cbnz	r3, 800e3ea <_raise_r+0x32>
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 f830 	bl	800e43c <_getpid_r>
 800e3dc:	462a      	mov	r2, r5
 800e3de:	4601      	mov	r1, r0
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3e6:	f000 b817 	b.w	800e418 <_kill_r>
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d00a      	beq.n	800e404 <_raise_r+0x4c>
 800e3ee:	1c59      	adds	r1, r3, #1
 800e3f0:	d103      	bne.n	800e3fa <_raise_r+0x42>
 800e3f2:	2316      	movs	r3, #22
 800e3f4:	6003      	str	r3, [r0, #0]
 800e3f6:	2001      	movs	r0, #1
 800e3f8:	e7e7      	b.n	800e3ca <_raise_r+0x12>
 800e3fa:	2400      	movs	r4, #0
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e402:	4798      	blx	r3
 800e404:	2000      	movs	r0, #0
 800e406:	e7e0      	b.n	800e3ca <_raise_r+0x12>

0800e408 <raise>:
 800e408:	4b02      	ldr	r3, [pc, #8]	; (800e414 <raise+0xc>)
 800e40a:	4601      	mov	r1, r0
 800e40c:	6818      	ldr	r0, [r3, #0]
 800e40e:	f7ff bfd3 	b.w	800e3b8 <_raise_r>
 800e412:	bf00      	nop
 800e414:	20000274 	.word	0x20000274

0800e418 <_kill_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	2300      	movs	r3, #0
 800e41c:	4d06      	ldr	r5, [pc, #24]	; (800e438 <_kill_r+0x20>)
 800e41e:	4604      	mov	r4, r0
 800e420:	4608      	mov	r0, r1
 800e422:	4611      	mov	r1, r2
 800e424:	602b      	str	r3, [r5, #0]
 800e426:	f7f4 fd62 	bl	8002eee <_kill>
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	d102      	bne.n	800e434 <_kill_r+0x1c>
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	b103      	cbz	r3, 800e434 <_kill_r+0x1c>
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	bd38      	pop	{r3, r4, r5, pc}
 800e436:	bf00      	nop
 800e438:	2000256c 	.word	0x2000256c

0800e43c <_getpid_r>:
 800e43c:	f7f4 bd50 	b.w	8002ee0 <_getpid>

0800e440 <__swhatbuf_r>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	460c      	mov	r4, r1
 800e444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e448:	4615      	mov	r5, r2
 800e44a:	2900      	cmp	r1, #0
 800e44c:	461e      	mov	r6, r3
 800e44e:	b096      	sub	sp, #88	; 0x58
 800e450:	da0c      	bge.n	800e46c <__swhatbuf_r+0x2c>
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	2100      	movs	r1, #0
 800e456:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e45a:	bf0c      	ite	eq
 800e45c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e460:	2340      	movne	r3, #64	; 0x40
 800e462:	2000      	movs	r0, #0
 800e464:	6031      	str	r1, [r6, #0]
 800e466:	602b      	str	r3, [r5, #0]
 800e468:	b016      	add	sp, #88	; 0x58
 800e46a:	bd70      	pop	{r4, r5, r6, pc}
 800e46c:	466a      	mov	r2, sp
 800e46e:	f000 f849 	bl	800e504 <_fstat_r>
 800e472:	2800      	cmp	r0, #0
 800e474:	dbed      	blt.n	800e452 <__swhatbuf_r+0x12>
 800e476:	9901      	ldr	r1, [sp, #4]
 800e478:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e47c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e480:	4259      	negs	r1, r3
 800e482:	4159      	adcs	r1, r3
 800e484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e488:	e7eb      	b.n	800e462 <__swhatbuf_r+0x22>

0800e48a <__smakebuf_r>:
 800e48a:	898b      	ldrh	r3, [r1, #12]
 800e48c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e48e:	079d      	lsls	r5, r3, #30
 800e490:	4606      	mov	r6, r0
 800e492:	460c      	mov	r4, r1
 800e494:	d507      	bpl.n	800e4a6 <__smakebuf_r+0x1c>
 800e496:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e49a:	6023      	str	r3, [r4, #0]
 800e49c:	6123      	str	r3, [r4, #16]
 800e49e:	2301      	movs	r3, #1
 800e4a0:	6163      	str	r3, [r4, #20]
 800e4a2:	b002      	add	sp, #8
 800e4a4:	bd70      	pop	{r4, r5, r6, pc}
 800e4a6:	466a      	mov	r2, sp
 800e4a8:	ab01      	add	r3, sp, #4
 800e4aa:	f7ff ffc9 	bl	800e440 <__swhatbuf_r>
 800e4ae:	9900      	ldr	r1, [sp, #0]
 800e4b0:	4605      	mov	r5, r0
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f7fe fdb2 	bl	800d01c <_malloc_r>
 800e4b8:	b948      	cbnz	r0, 800e4ce <__smakebuf_r+0x44>
 800e4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4be:	059a      	lsls	r2, r3, #22
 800e4c0:	d4ef      	bmi.n	800e4a2 <__smakebuf_r+0x18>
 800e4c2:	f023 0303 	bic.w	r3, r3, #3
 800e4c6:	f043 0302 	orr.w	r3, r3, #2
 800e4ca:	81a3      	strh	r3, [r4, #12]
 800e4cc:	e7e3      	b.n	800e496 <__smakebuf_r+0xc>
 800e4ce:	89a3      	ldrh	r3, [r4, #12]
 800e4d0:	6020      	str	r0, [r4, #0]
 800e4d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4d6:	81a3      	strh	r3, [r4, #12]
 800e4d8:	9b00      	ldr	r3, [sp, #0]
 800e4da:	6120      	str	r0, [r4, #16]
 800e4dc:	6163      	str	r3, [r4, #20]
 800e4de:	9b01      	ldr	r3, [sp, #4]
 800e4e0:	b15b      	cbz	r3, 800e4fa <__smakebuf_r+0x70>
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4e8:	f000 f81e 	bl	800e528 <_isatty_r>
 800e4ec:	b128      	cbz	r0, 800e4fa <__smakebuf_r+0x70>
 800e4ee:	89a3      	ldrh	r3, [r4, #12]
 800e4f0:	f023 0303 	bic.w	r3, r3, #3
 800e4f4:	f043 0301 	orr.w	r3, r3, #1
 800e4f8:	81a3      	strh	r3, [r4, #12]
 800e4fa:	89a3      	ldrh	r3, [r4, #12]
 800e4fc:	431d      	orrs	r5, r3
 800e4fe:	81a5      	strh	r5, [r4, #12]
 800e500:	e7cf      	b.n	800e4a2 <__smakebuf_r+0x18>
	...

0800e504 <_fstat_r>:
 800e504:	b538      	push	{r3, r4, r5, lr}
 800e506:	2300      	movs	r3, #0
 800e508:	4d06      	ldr	r5, [pc, #24]	; (800e524 <_fstat_r+0x20>)
 800e50a:	4604      	mov	r4, r0
 800e50c:	4608      	mov	r0, r1
 800e50e:	4611      	mov	r1, r2
 800e510:	602b      	str	r3, [r5, #0]
 800e512:	f7f4 fd4a 	bl	8002faa <_fstat>
 800e516:	1c43      	adds	r3, r0, #1
 800e518:	d102      	bne.n	800e520 <_fstat_r+0x1c>
 800e51a:	682b      	ldr	r3, [r5, #0]
 800e51c:	b103      	cbz	r3, 800e520 <_fstat_r+0x1c>
 800e51e:	6023      	str	r3, [r4, #0]
 800e520:	bd38      	pop	{r3, r4, r5, pc}
 800e522:	bf00      	nop
 800e524:	2000256c 	.word	0x2000256c

0800e528 <_isatty_r>:
 800e528:	b538      	push	{r3, r4, r5, lr}
 800e52a:	2300      	movs	r3, #0
 800e52c:	4d05      	ldr	r5, [pc, #20]	; (800e544 <_isatty_r+0x1c>)
 800e52e:	4604      	mov	r4, r0
 800e530:	4608      	mov	r0, r1
 800e532:	602b      	str	r3, [r5, #0]
 800e534:	f7f4 fd48 	bl	8002fc8 <_isatty>
 800e538:	1c43      	adds	r3, r0, #1
 800e53a:	d102      	bne.n	800e542 <_isatty_r+0x1a>
 800e53c:	682b      	ldr	r3, [r5, #0]
 800e53e:	b103      	cbz	r3, 800e542 <_isatty_r+0x1a>
 800e540:	6023      	str	r3, [r4, #0]
 800e542:	bd38      	pop	{r3, r4, r5, pc}
 800e544:	2000256c 	.word	0x2000256c

0800e548 <_init>:
 800e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54a:	bf00      	nop
 800e54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e54e:	bc08      	pop	{r3}
 800e550:	469e      	mov	lr, r3
 800e552:	4770      	bx	lr

0800e554 <_fini>:
 800e554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e556:	bf00      	nop
 800e558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e55a:	bc08      	pop	{r3}
 800e55c:	469e      	mov	lr, r3
 800e55e:	4770      	bx	lr
