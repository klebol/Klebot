
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080093d0  080093d0  000193d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800978c  0800978c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001fc  08009990  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20000638  08009990  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ca9  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d2e  00000000  00000000  00035f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  00039c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cf  00000000  00000000  0003b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fa3  00000000  00000000  0003c2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba7b  00000000  00000000  0005f28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c21f7  00000000  00000000  0007ad05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006908  00000000  00000000  0013cefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00143804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001fc 	.word	0x200001fc
 8000204:	00000000 	.word	0x00000000
 8000208:	080093b4 	.word	0x080093b4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000200 	.word	0x20000200
 8000224:	080093b4 	.word	0x080093b4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_uldivmod>:
 8000ee4:	b953      	cbnz	r3, 8000efc <__aeabi_uldivmod+0x18>
 8000ee6:	b94a      	cbnz	r2, 8000efc <__aeabi_uldivmod+0x18>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bf08      	it	eq
 8000eec:	2800      	cmpeq	r0, #0
 8000eee:	bf1c      	itt	ne
 8000ef0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ef4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef8:	f000 b972 	b.w	80011e0 <__aeabi_idiv0>
 8000efc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f04:	f000 f806 	bl	8000f14 <__udivmoddi4>
 8000f08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f10:	b004      	add	sp, #16
 8000f12:	4770      	bx	lr

08000f14 <__udivmoddi4>:
 8000f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f18:	9e08      	ldr	r6, [sp, #32]
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	468e      	mov	lr, r1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d14c      	bne.n	8000fbe <__udivmoddi4+0xaa>
 8000f24:	428a      	cmp	r2, r1
 8000f26:	4694      	mov	ip, r2
 8000f28:	d967      	bls.n	8000ffa <__udivmoddi4+0xe6>
 8000f2a:	fab2 f382 	clz	r3, r2
 8000f2e:	b153      	cbz	r3, 8000f46 <__udivmoddi4+0x32>
 8000f30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f34:	f1c3 0220 	rsb	r2, r3, #32
 8000f38:	fa01 fe03 	lsl.w	lr, r1, r3
 8000f3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f40:	ea42 0e0e 	orr.w	lr, r2, lr
 8000f44:	409c      	lsls	r4, r3
 8000f46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4a:	fbbe f1f7 	udiv	r1, lr, r7
 8000f4e:	fa1f f58c 	uxth.w	r5, ip
 8000f52:	fb07 ee11 	mls	lr, r7, r1, lr
 8000f56:	fb01 f005 	mul.w	r0, r1, r5
 8000f5a:	0c22      	lsrs	r2, r4, #16
 8000f5c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000f60:	4290      	cmp	r0, r2
 8000f62:	d90a      	bls.n	8000f7a <__udivmoddi4+0x66>
 8000f64:	eb1c 0202 	adds.w	r2, ip, r2
 8000f68:	f101 3eff 	add.w	lr, r1, #4294967295
 8000f6c:	f080 8119 	bcs.w	80011a2 <__udivmoddi4+0x28e>
 8000f70:	4290      	cmp	r0, r2
 8000f72:	f240 8116 	bls.w	80011a2 <__udivmoddi4+0x28e>
 8000f76:	3902      	subs	r1, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a12      	subs	r2, r2, r0
 8000f7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f80:	fb07 2210 	mls	r2, r7, r0, r2
 8000f84:	fb00 f505 	mul.w	r5, r0, r5
 8000f88:	b2a4      	uxth	r4, r4
 8000f8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f8e:	42a5      	cmp	r5, r4
 8000f90:	d90a      	bls.n	8000fa8 <__udivmoddi4+0x94>
 8000f92:	eb1c 0404 	adds.w	r4, ip, r4
 8000f96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f9a:	f080 8104 	bcs.w	80011a6 <__udivmoddi4+0x292>
 8000f9e:	42a5      	cmp	r5, r4
 8000fa0:	f240 8101 	bls.w	80011a6 <__udivmoddi4+0x292>
 8000fa4:	4464      	add	r4, ip
 8000fa6:	3802      	subs	r0, #2
 8000fa8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fac:	2100      	movs	r1, #0
 8000fae:	1b64      	subs	r4, r4, r5
 8000fb0:	b11e      	cbz	r6, 8000fba <__udivmoddi4+0xa6>
 8000fb2:	40dc      	lsrs	r4, r3
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0xc0>
 8000fc2:	2e00      	cmp	r6, #0
 8000fc4:	f000 80ea 	beq.w	800119c <__udivmoddi4+0x288>
 8000fc8:	2100      	movs	r1, #0
 8000fca:	e9c6 0500 	strd	r0, r5, [r6]
 8000fce:	4608      	mov	r0, r1
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	fab3 f183 	clz	r1, r3
 8000fd8:	2900      	cmp	r1, #0
 8000fda:	d148      	bne.n	800106e <__udivmoddi4+0x15a>
 8000fdc:	42ab      	cmp	r3, r5
 8000fde:	d302      	bcc.n	8000fe6 <__udivmoddi4+0xd2>
 8000fe0:	4282      	cmp	r2, r0
 8000fe2:	f200 80f8 	bhi.w	80011d6 <__udivmoddi4+0x2c2>
 8000fe6:	1a84      	subs	r4, r0, r2
 8000fe8:	eb65 0203 	sbc.w	r2, r5, r3
 8000fec:	2001      	movs	r0, #1
 8000fee:	4696      	mov	lr, r2
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d0e2      	beq.n	8000fba <__udivmoddi4+0xa6>
 8000ff4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000ff8:	e7df      	b.n	8000fba <__udivmoddi4+0xa6>
 8000ffa:	b902      	cbnz	r2, 8000ffe <__udivmoddi4+0xea>
 8000ffc:	deff      	udf	#255	; 0xff
 8000ffe:	fab2 f382 	clz	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 808e 	bne.w	8001124 <__udivmoddi4+0x210>
 8001008:	1a88      	subs	r0, r1, r2
 800100a:	2101      	movs	r1, #1
 800100c:	0c17      	lsrs	r7, r2, #16
 800100e:	fa1f fe82 	uxth.w	lr, r2
 8001012:	fbb0 f5f7 	udiv	r5, r0, r7
 8001016:	fb07 0015 	mls	r0, r7, r5, r0
 800101a:	0c22      	lsrs	r2, r4, #16
 800101c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001020:	fb0e f005 	mul.w	r0, lr, r5
 8001024:	4290      	cmp	r0, r2
 8001026:	d908      	bls.n	800103a <__udivmoddi4+0x126>
 8001028:	eb1c 0202 	adds.w	r2, ip, r2
 800102c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001030:	d202      	bcs.n	8001038 <__udivmoddi4+0x124>
 8001032:	4290      	cmp	r0, r2
 8001034:	f200 80cc 	bhi.w	80011d0 <__udivmoddi4+0x2bc>
 8001038:	4645      	mov	r5, r8
 800103a:	1a12      	subs	r2, r2, r0
 800103c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001040:	fb07 2210 	mls	r2, r7, r0, r2
 8001044:	fb0e fe00 	mul.w	lr, lr, r0
 8001048:	b2a4      	uxth	r4, r4
 800104a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800104e:	45a6      	cmp	lr, r4
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x150>
 8001052:	eb1c 0404 	adds.w	r4, ip, r4
 8001056:	f100 32ff 	add.w	r2, r0, #4294967295
 800105a:	d202      	bcs.n	8001062 <__udivmoddi4+0x14e>
 800105c:	45a6      	cmp	lr, r4
 800105e:	f200 80b4 	bhi.w	80011ca <__udivmoddi4+0x2b6>
 8001062:	4610      	mov	r0, r2
 8001064:	eba4 040e 	sub.w	r4, r4, lr
 8001068:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800106c:	e7a0      	b.n	8000fb0 <__udivmoddi4+0x9c>
 800106e:	f1c1 0720 	rsb	r7, r1, #32
 8001072:	408b      	lsls	r3, r1
 8001074:	fa22 fc07 	lsr.w	ip, r2, r7
 8001078:	ea4c 0c03 	orr.w	ip, ip, r3
 800107c:	fa25 fa07 	lsr.w	sl, r5, r7
 8001080:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001084:	fbba f8f9 	udiv	r8, sl, r9
 8001088:	408d      	lsls	r5, r1
 800108a:	fa20 f307 	lsr.w	r3, r0, r7
 800108e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001092:	fa1f fe8c 	uxth.w	lr, ip
 8001096:	432b      	orrs	r3, r5
 8001098:	fa00 f501 	lsl.w	r5, r0, r1
 800109c:	fb08 f00e 	mul.w	r0, r8, lr
 80010a0:	0c1c      	lsrs	r4, r3, #16
 80010a2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010a6:	42a0      	cmp	r0, r4
 80010a8:	fa02 f201 	lsl.w	r2, r2, r1
 80010ac:	d90b      	bls.n	80010c6 <__udivmoddi4+0x1b2>
 80010ae:	eb1c 0404 	adds.w	r4, ip, r4
 80010b2:	f108 3aff 	add.w	sl, r8, #4294967295
 80010b6:	f080 8086 	bcs.w	80011c6 <__udivmoddi4+0x2b2>
 80010ba:	42a0      	cmp	r0, r4
 80010bc:	f240 8083 	bls.w	80011c6 <__udivmoddi4+0x2b2>
 80010c0:	f1a8 0802 	sub.w	r8, r8, #2
 80010c4:	4464      	add	r4, ip
 80010c6:	1a24      	subs	r4, r4, r0
 80010c8:	b298      	uxth	r0, r3
 80010ca:	fbb4 f3f9 	udiv	r3, r4, r9
 80010ce:	fb09 4413 	mls	r4, r9, r3, r4
 80010d2:	fb03 fe0e 	mul.w	lr, r3, lr
 80010d6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80010da:	45a6      	cmp	lr, r4
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x1dc>
 80010de:	eb1c 0404 	adds.w	r4, ip, r4
 80010e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80010e6:	d26a      	bcs.n	80011be <__udivmoddi4+0x2aa>
 80010e8:	45a6      	cmp	lr, r4
 80010ea:	d968      	bls.n	80011be <__udivmoddi4+0x2aa>
 80010ec:	3b02      	subs	r3, #2
 80010ee:	4464      	add	r4, ip
 80010f0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80010f4:	fba0 9302 	umull	r9, r3, r0, r2
 80010f8:	eba4 040e 	sub.w	r4, r4, lr
 80010fc:	429c      	cmp	r4, r3
 80010fe:	46c8      	mov	r8, r9
 8001100:	469e      	mov	lr, r3
 8001102:	d354      	bcc.n	80011ae <__udivmoddi4+0x29a>
 8001104:	d051      	beq.n	80011aa <__udivmoddi4+0x296>
 8001106:	2e00      	cmp	r6, #0
 8001108:	d067      	beq.n	80011da <__udivmoddi4+0x2c6>
 800110a:	ebb5 0308 	subs.w	r3, r5, r8
 800110e:	eb64 040e 	sbc.w	r4, r4, lr
 8001112:	40cb      	lsrs	r3, r1
 8001114:	fa04 f707 	lsl.w	r7, r4, r7
 8001118:	431f      	orrs	r7, r3
 800111a:	40cc      	lsrs	r4, r1
 800111c:	e9c6 7400 	strd	r7, r4, [r6]
 8001120:	2100      	movs	r1, #0
 8001122:	e74a      	b.n	8000fba <__udivmoddi4+0xa6>
 8001124:	fa02 fc03 	lsl.w	ip, r2, r3
 8001128:	f1c3 0020 	rsb	r0, r3, #32
 800112c:	40c1      	lsrs	r1, r0
 800112e:	409d      	lsls	r5, r3
 8001130:	fa24 f000 	lsr.w	r0, r4, r0
 8001134:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001138:	4328      	orrs	r0, r5
 800113a:	fbb1 f5f7 	udiv	r5, r1, r7
 800113e:	fb07 1115 	mls	r1, r7, r5, r1
 8001142:	fa1f fe8c 	uxth.w	lr, ip
 8001146:	0c02      	lsrs	r2, r0, #16
 8001148:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800114c:	fb05 f10e 	mul.w	r1, r5, lr
 8001150:	4291      	cmp	r1, r2
 8001152:	fa04 f403 	lsl.w	r4, r4, r3
 8001156:	d908      	bls.n	800116a <__udivmoddi4+0x256>
 8001158:	eb1c 0202 	adds.w	r2, ip, r2
 800115c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001160:	d22f      	bcs.n	80011c2 <__udivmoddi4+0x2ae>
 8001162:	4291      	cmp	r1, r2
 8001164:	d92d      	bls.n	80011c2 <__udivmoddi4+0x2ae>
 8001166:	3d02      	subs	r5, #2
 8001168:	4462      	add	r2, ip
 800116a:	1a52      	subs	r2, r2, r1
 800116c:	fbb2 f1f7 	udiv	r1, r2, r7
 8001170:	fb07 2211 	mls	r2, r7, r1, r2
 8001174:	b280      	uxth	r0, r0
 8001176:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800117a:	fb01 f20e 	mul.w	r2, r1, lr
 800117e:	4282      	cmp	r2, r0
 8001180:	d908      	bls.n	8001194 <__udivmoddi4+0x280>
 8001182:	eb1c 0000 	adds.w	r0, ip, r0
 8001186:	f101 38ff 	add.w	r8, r1, #4294967295
 800118a:	d216      	bcs.n	80011ba <__udivmoddi4+0x2a6>
 800118c:	4282      	cmp	r2, r0
 800118e:	d914      	bls.n	80011ba <__udivmoddi4+0x2a6>
 8001190:	3902      	subs	r1, #2
 8001192:	4460      	add	r0, ip
 8001194:	1a80      	subs	r0, r0, r2
 8001196:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800119a:	e73a      	b.n	8001012 <__udivmoddi4+0xfe>
 800119c:	4631      	mov	r1, r6
 800119e:	4630      	mov	r0, r6
 80011a0:	e70b      	b.n	8000fba <__udivmoddi4+0xa6>
 80011a2:	4671      	mov	r1, lr
 80011a4:	e6e9      	b.n	8000f7a <__udivmoddi4+0x66>
 80011a6:	4610      	mov	r0, r2
 80011a8:	e6fe      	b.n	8000fa8 <__udivmoddi4+0x94>
 80011aa:	454d      	cmp	r5, r9
 80011ac:	d2ab      	bcs.n	8001106 <__udivmoddi4+0x1f2>
 80011ae:	ebb9 0802 	subs.w	r8, r9, r2
 80011b2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80011b6:	3801      	subs	r0, #1
 80011b8:	e7a5      	b.n	8001106 <__udivmoddi4+0x1f2>
 80011ba:	4641      	mov	r1, r8
 80011bc:	e7ea      	b.n	8001194 <__udivmoddi4+0x280>
 80011be:	4603      	mov	r3, r0
 80011c0:	e796      	b.n	80010f0 <__udivmoddi4+0x1dc>
 80011c2:	4645      	mov	r5, r8
 80011c4:	e7d1      	b.n	800116a <__udivmoddi4+0x256>
 80011c6:	46d0      	mov	r8, sl
 80011c8:	e77d      	b.n	80010c6 <__udivmoddi4+0x1b2>
 80011ca:	4464      	add	r4, ip
 80011cc:	3802      	subs	r0, #2
 80011ce:	e749      	b.n	8001064 <__udivmoddi4+0x150>
 80011d0:	3d02      	subs	r5, #2
 80011d2:	4462      	add	r2, ip
 80011d4:	e731      	b.n	800103a <__udivmoddi4+0x126>
 80011d6:	4608      	mov	r0, r1
 80011d8:	e70a      	b.n	8000ff0 <__udivmoddi4+0xdc>
 80011da:	4631      	mov	r1, r6
 80011dc:	e6ed      	b.n	8000fba <__udivmoddi4+0xa6>
 80011de:	bf00      	nop

080011e0 <__aeabi_idiv0>:
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <MotorEnc_Init>:
int32_t FilterSum;
uint16_t OldestMember;


void MotorEnc_Init(MotorEncoder_t *encoder, TIM_HandleTypeDef *htim)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	encoder->htimEnc = htim;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80011f4:	213c      	movs	r1, #60	; 0x3c
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f004 fcf0 	bl	8005bdc <HAL_TIM_Encoder_Start>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <MotorEnc_Uptade>:

void MotorEnc_Uptade(MotorEncoder_t *encoder)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint32_t NewCounter = encoder->htimEnc->Instance->CNT;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	60fb      	str	r3, [r7, #12]
	int16_t TempPosition = encoder->Position;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	899b      	ldrh	r3, [r3, #12]
 800121a:	817b      	strh	r3, [r7, #10]

	if(NewCounter == encoder->LastCounter)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	429a      	cmp	r2, r3
 8001224:	d103      	bne.n	800122e <MotorEnc_Uptade+0x2a>
	{
		encoder->Velocity = 0;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	809a      	strh	r2, [r3, #4]
 800122c:	e052      	b.n	80012d4 <MotorEnc_Uptade+0xd0>
	}
	else if(NewCounter > encoder->LastCounter)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d924      	bls.n	8001282 <MotorEnc_Uptade+0x7e>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))	//overflow happened
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	2b10      	cmp	r3, #16
 8001246:	d111      	bne.n	800126c <MotorEnc_Uptade+0x68>
		{
			encoder->Velocity = - ( encoder->LastCounter + (encoder->htimEnc->Instance->ARR - NewCounter) );
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	b29b      	uxth	r3, r3
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	b29b      	uxth	r3, r3
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	b29b      	uxth	r3, r3
 8001264:	b21a      	sxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	809a      	strh	r2, [r3, #4]
 800126a:	e033      	b.n	80012d4 <MotorEnc_Uptade+0xd0>
		}
		else
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	b29b      	uxth	r3, r3
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	809a      	strh	r2, [r3, #4]
 8001280:	e028      	b.n	80012d4 <MotorEnc_Uptade+0xd0>
		}
	}
	else if(NewCounter < encoder->LastCounter)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d223      	bcs.n	80012d4 <MotorEnc_Uptade+0xd0>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b10      	cmp	r3, #16
 800129a:	d10a      	bne.n	80012b2 <MotorEnc_Uptade+0xae>
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	809a      	strh	r2, [r3, #4]
 80012b0:	e010      	b.n	80012d4 <MotorEnc_Uptade+0xd0>
		}
		else																//overflow happened
		{
			encoder->Velocity = NewCounter + (encoder->htimEnc->Instance->ARR + encoder->LastCounter);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	809a      	strh	r2, [r3, #4]
		}
	}


	TempPosition = encoder->Position + encoder->Velocity;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	817b      	strh	r3, [r7, #10]

	if(encoder->Velocity != 0)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d024      	beq.n	800133e <MotorEnc_Uptade+0x13a>
	{
		if(TempPosition >= 0)
 80012f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db16      	blt.n	800132a <MotorEnc_Uptade+0x126>
		{
			encoder->Position = (encoder->Position + encoder->Velocity) % PULSES_PER_ROTATION;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001302:	461a      	mov	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800130a:	4413      	add	r3, r2
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <MotorEnc_Uptade+0x170>)
 800130e:	fb82 1203 	smull	r1, r2, r2, r3
 8001312:	1251      	asrs	r1, r2, #9
 8001314:	17da      	asrs	r2, r3, #31
 8001316:	1a8a      	subs	r2, r1, r2
 8001318:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800131c:	fb01 f202 	mul.w	r2, r1, r2
 8001320:	1a9a      	subs	r2, r3, r2
 8001322:	b212      	sxth	r2, r2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	819a      	strh	r2, [r3, #12]
 8001328:	e009      	b.n	800133e <MotorEnc_Uptade+0x13a>
		}
		else
		{
			encoder->Position = PULSES_PER_ROTATION + encoder->Velocity;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001330:	b29b      	uxth	r3, r3
 8001332:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	819a      	strh	r2, [r3, #12]
		}
	}

	encoder->RPM = (encoder->Velocity * (1000 / ENCODER_SAMPLING_TIME_MS) * 60 ) / PULSES_PER_ROTATION; //define constants
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001344:	461a      	mov	r2, r3
 8001346:	f241 7370 	movw	r3, #6000	; 0x1770
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <MotorEnc_Uptade+0x170>)
 8001350:	fb82 1203 	smull	r1, r2, r2, r3
 8001354:	1252      	asrs	r2, r2, #9
 8001356:	17db      	asrs	r3, r3, #31
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fd6e 	bl	8000e3c <__aeabi_i2f>
 8001360:	4602      	mov	r2, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	615a      	str	r2, [r3, #20]
	encoder->LastCounter = NewCounter;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	611a      	str	r2, [r3, #16]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	5d9f7391 	.word	0x5d9f7391

08001378 <MotorEnc_FilterVelocity>:

void MotorEnc_FilterVelocity(MotorEncoder_t *encoder)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]


	//static float VelocityIIR;


	float alpha = 0.1;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MotorEnc_FilterVelocity+0x5c>)
 8001382:	60fb      	str	r3, [r7, #12]
	encoder->VelocityFiltered = alpha * (float) encoder->Velocity + (1.0f - alpha) * encoder->VelocityFiltered;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fd56 	bl	8000e3c <__aeabi_i2f>
 8001390:	4603      	mov	r3, r0
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff4f 	bl	8000238 <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	461c      	mov	r4, r3
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80013a4:	f7ff fc94 	bl	8000cd0 <__aeabi_fsub>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f7fe ff40 	bl	8000238 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff fc89 	bl	8000cd4 <__addsf3>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]
//	VelocityFilterBuffer[OldestMember] = VelocityIIR;
//	OldestMember = (OldestMember + 1) % 100;



}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	3dcccccd 	.word	0x3dcccccd

080013d8 <Motors_Init>:
MotorEncoder_t MotorEncoderA;
MotorEncoder_t MotorEncoderB;


void Motors_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af02      	add	r7, sp, #8
	DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80013de:	230c      	movs	r3, #12
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2308      	movs	r3, #8
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2304      	movs	r3, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	4907      	ldr	r1, [pc, #28]	; (8001408 <Motors_Init+0x30>)
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <Motors_Init+0x34>)
 80013ee:	f000 fa4a 	bl	8001886 <DRV8836_Init>
	MotorEnc_Init(&MotorEncoderA, &htim1);
 80013f2:	4907      	ldr	r1, [pc, #28]	; (8001410 <Motors_Init+0x38>)
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <Motors_Init+0x3c>)
 80013f6:	f7ff fef5 	bl	80011e4 <MotorEnc_Init>
	MotorEnc_Init(&MotorEncoderB, &htim4);
 80013fa:	4907      	ldr	r1, [pc, #28]	; (8001418 <Motors_Init+0x40>)
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <Motors_Init+0x44>)
 80013fe:	f7ff fef1 	bl	80011e4 <MotorEnc_Init>
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200003c8 	.word	0x200003c8
 800140c:	20000218 	.word	0x20000218
 8001410:	20000380 	.word	0x20000380
 8001414:	20000230 	.word	0x20000230
 8001418:	20000410 	.word	0x20000410
 800141c:	20000248 	.word	0x20000248

08001420 <Motors_SetMotorSpeed>:
{
	DRV8836_SetMotor(&MotorDriver, motorAB, direction, speed);
}

Motors_Error_t Motors_SetMotorSpeed(DRV8836_Output_t motorAB, uint16_t speed)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	80bb      	strh	r3, [r7, #4]
	switch(motorAB)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <Motors_SetMotorSpeed+0x1c>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d009      	beq.n	800144e <Motors_SetMotorSpeed+0x2e>
 800143a:	e011      	b.n	8001460 <Motors_SetMotorSpeed+0x40>
	{
	case Output_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.a_direction, speed);
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <Motors_SetMotorSpeed+0x4c>)
 800143e:	7d1a      	ldrb	r2, [r3, #20]
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	79f9      	ldrb	r1, [r7, #7]
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <Motors_SetMotorSpeed+0x4c>)
 8001446:	f000 fadd 	bl	8001a04 <DRV8836_SetMotor>
 800144a:	4603      	mov	r3, r0
 800144c:	e009      	b.n	8001462 <Motors_SetMotorSpeed+0x42>
		break;

	case Output_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, MotorDriver.b_direction, speed);
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <Motors_SetMotorSpeed+0x4c>)
 8001450:	7d5a      	ldrb	r2, [r3, #21]
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	79f9      	ldrb	r1, [r7, #7]
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <Motors_SetMotorSpeed+0x4c>)
 8001458:	f000 fad4 	bl	8001a04 <DRV8836_SetMotor>
 800145c:	4603      	mov	r3, r0
 800145e:	e000      	b.n	8001462 <Motors_SetMotorSpeed+0x42>
		break;

	default:
		return MOTORS_ERROR;
 8001460:	2301      	movs	r3, #1
		break;
	}
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000218 	.word	0x20000218

08001470 <Motors_SetMotorDirection>:

Motors_Error_t Motors_SetMotorDirection(DRV8836_Output_t motorAB, DRV8836_Direction_t direction)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
	switch(motorAB)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <Motors_SetMotorDirection+0x1c>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d009      	beq.n	800149e <Motors_SetMotorDirection+0x2e>
 800148a:	e011      	b.n	80014b0 <Motors_SetMotorDirection+0x40>
	{
	case Output_A:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.a_speed);
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <Motors_SetMotorDirection+0x4c>)
 800148e:	8a1b      	ldrh	r3, [r3, #16]
 8001490:	79ba      	ldrb	r2, [r7, #6]
 8001492:	79f9      	ldrb	r1, [r7, #7]
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <Motors_SetMotorDirection+0x4c>)
 8001496:	f000 fab5 	bl	8001a04 <DRV8836_SetMotor>
 800149a:	4603      	mov	r3, r0
 800149c:	e009      	b.n	80014b2 <Motors_SetMotorDirection+0x42>
		break;

	case Output_B:
		return DRV8836_SetMotor(&MotorDriver, motorAB, direction, MotorDriver.b_speed);
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <Motors_SetMotorDirection+0x4c>)
 80014a0:	8a5b      	ldrh	r3, [r3, #18]
 80014a2:	79ba      	ldrb	r2, [r7, #6]
 80014a4:	79f9      	ldrb	r1, [r7, #7]
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <Motors_SetMotorDirection+0x4c>)
 80014a8:	f000 faac 	bl	8001a04 <DRV8836_SetMotor>
 80014ac:	4603      	mov	r3, r0
 80014ae:	e000      	b.n	80014b2 <Motors_SetMotorDirection+0x42>
		break;

	default:
		return MOTORS_ERROR;
 80014b0:	2301      	movs	r3, #1
		break;
	}
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000218 	.word	0x20000218

080014c0 <Motors_SetMotorsOff>:

Motors_Error_t Motors_SetMotorsOff(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	Motors_Error_t status = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, Output_A, Coast, 0);
 80014ca:	2300      	movs	r3, #0
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <Motors_SetMotorsOff+0x40>)
 80014d2:	f000 fa97 	bl	8001a04 <DRV8836_SetMotor>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4313      	orrs	r3, r2
 80014de:	71fb      	strb	r3, [r7, #7]
	status |= DRV8836_SetMotor(&MotorDriver, Output_B, Coast, 0);
 80014e0:	2300      	movs	r3, #0
 80014e2:	2200      	movs	r2, #0
 80014e4:	2101      	movs	r1, #1
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <Motors_SetMotorsOff+0x40>)
 80014e8:	f000 fa8c 	bl	8001a04 <DRV8836_SetMotor>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	71fb      	strb	r3, [r7, #7]
	return status;
 80014f6:	79fb      	ldrb	r3, [r7, #7]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000218 	.word	0x20000218

08001504 <Motors_EncoderSample>:


void Motors_EncoderSample(void)						//call this function with encoder sampling frequency
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	MotorEnc_Uptade(&MotorEncoderA);
 8001508:	4806      	ldr	r0, [pc, #24]	; (8001524 <Motors_EncoderSample+0x20>)
 800150a:	f7ff fe7b 	bl	8001204 <MotorEnc_Uptade>
	MotorEnc_Uptade(&MotorEncoderB);
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <Motors_EncoderSample+0x24>)
 8001510:	f7ff fe78 	bl	8001204 <MotorEnc_Uptade>
	MotorEnc_FilterVelocity(&MotorEncoderA);
 8001514:	4803      	ldr	r0, [pc, #12]	; (8001524 <Motors_EncoderSample+0x20>)
 8001516:	f7ff ff2f 	bl	8001378 <MotorEnc_FilterVelocity>
	MotorEnc_FilterVelocity(&MotorEncoderB);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <Motors_EncoderSample+0x24>)
 800151c:	f7ff ff2c 	bl	8001378 <MotorEnc_FilterVelocity>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000230 	.word	0x20000230
 8001528:	20000248 	.word	0x20000248

0800152c <Prog_DiodeTest_Init>:
//
// -- Init & Deinit functions for Diode Test Program --
//

Programs_error_t Prog_DiodeTest_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2101      	movs	r1, #1
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <Prog_DiodeTest_Init+0x14>)
 8001536:	f002 fca7 	bl	8003e88 <HAL_GPIO_WritePin>
	return PROGRAMS_OK;
 800153a:	2300      	movs	r3, #0

}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40011000 	.word	0x40011000

08001544 <Prog_DiodeTest_Deinit>:

Programs_error_t Prog_DiodeTest_Deinit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	return PROGRAMS_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <Prog_DiodeTest_Program>:
//
// -- Main Diode Test Program for Robot --
//

Programs_error_t Prog_DiodeTest_Program(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
	/* Main program "loop" */
	return PROGRAMS_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <Prog_DiodeTest_Launch>:
//
// -- Set / Launch function --
//

Programs_error_t Prog_DiodeTest_Launch(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	return Programs_SetProgram(&DiodeTestProgram);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <Prog_DiodeTest_Launch+0x10>)
 8001566:	f000 f897 	bl	8001698 <Programs_SetProgram>
 800156a:	4603      	mov	r3, r0
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000

08001574 <Prog_DiodeTest_Parser>:
//
// -- Diode Test Program Parser --
//

void Prog_DiodeTest_Parser(uint8_t *command, uint8_t length)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60fb      	str	r3, [r7, #12]
	uint8_t Buffer[3];

	switch(*CurrentByte)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b20      	cmp	r3, #32
 800158a:	d002      	beq.n	8001592 <Prog_DiodeTest_Parser+0x1e>
 800158c:	2b21      	cmp	r3, #33	; 0x21
 800158e:	d012      	beq.n	80015b6 <Prog_DiodeTest_Parser+0x42>
		Buffer[2] = 0;
		Radio_TxBufferPut(Buffer, 3);
		break;

	default:
		break;
 8001590:	e023      	b.n	80015da <Prog_DiodeTest_Parser+0x66>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2101      	movs	r1, #1
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <Prog_DiodeTest_Parser+0x70>)
 8001598:	f002 fc76 	bl	8003e88 <HAL_GPIO_WritePin>
		Buffer[0] = DIODE_TEST;
 800159c:	23d0      	movs	r3, #208	; 0xd0
 800159e:	723b      	strb	r3, [r7, #8]
		Buffer[1] = DIODE_REAL_STATE;
 80015a0:	2322      	movs	r3, #34	; 0x22
 80015a2:	727b      	strb	r3, [r7, #9]
		Buffer[2] = 1;				//TODO: USE READPIN HERE
 80015a4:	2301      	movs	r3, #1
 80015a6:	72bb      	strb	r3, [r7, #10]
		Radio_TxBufferPut(Buffer, 3);
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	2103      	movs	r1, #3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fda2 	bl	80020f8 <Radio_TxBufferPut>
		break;
 80015b4:	e011      	b.n	80015da <Prog_DiodeTest_Parser+0x66>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2101      	movs	r1, #1
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <Prog_DiodeTest_Parser+0x70>)
 80015bc:	f002 fc64 	bl	8003e88 <HAL_GPIO_WritePin>
		Buffer[0] = DIODE_TEST;
 80015c0:	23d0      	movs	r3, #208	; 0xd0
 80015c2:	723b      	strb	r3, [r7, #8]
		Buffer[1] = DIODE_REAL_STATE;
 80015c4:	2322      	movs	r3, #34	; 0x22
 80015c6:	727b      	strb	r3, [r7, #9]
		Buffer[2] = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	72bb      	strb	r3, [r7, #10]
		Radio_TxBufferPut(Buffer, 3);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	2103      	movs	r1, #3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fd90 	bl	80020f8 <Radio_TxBufferPut>
		break;
 80015d8:	bf00      	nop
	}

}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40011000 	.word	0x40011000

080015e8 <Prog_MotorsDebug_Init>:
//
// -- Init & Deinit functions for Diode Test Program --
//

Programs_error_t Prog_MotorsDebug_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2101      	movs	r1, #1
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <Prog_MotorsDebug_Init+0x18>)
 80015f2:	f002 fc49 	bl	8003e88 <HAL_GPIO_WritePin>
	Motors_SetMotorsOff();
 80015f6:	f7ff ff63 	bl	80014c0 <Motors_SetMotorsOff>
	return PROGRAMS_OK;
 80015fa:	2300      	movs	r3, #0

}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40011000 	.word	0x40011000

08001604 <Prog_MotorsDebug_Deinit>:

Programs_error_t Prog_MotorsDebug_Deinit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	Motors_SetMotorsOff();
 8001608:	f7ff ff5a 	bl	80014c0 <Motors_SetMotorsOff>
	return PROGRAMS_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}

08001612 <Prog_MotorsDebug_Program>:
//
// -- Main Diode Test Program for Robot --
//

Programs_error_t Prog_MotorsDebug_Program(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
	/* Main program "loop" */
	return PROGRAMS_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <Prog_MotorsDebug_Launch>:
//
// -- Set / Launch function --
//

Programs_error_t Prog_MotorsDebug_Launch(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	return Programs_SetProgram(&MotorsDebugProgram);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <Prog_MotorsDebug_Launch+0x10>)
 8001626:	f000 f837 	bl	8001698 <Programs_SetProgram>
 800162a:	4603      	mov	r3, r0
}
 800162c:	4618      	mov	r0, r3
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000014 	.word	0x20000014

08001634 <Prog_MotorsDebug_Parser>:
//
// -- Diode Test Program Parser --
//

void Prog_MotorsDebug_Parser(uint8_t *command, uint8_t length)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60fb      	str	r3, [r7, #12]

	DRV8836_Output_t Motor;
	DRV8836_Direction_t ReceivedDir;
	uint8_t ReceivedPWM;

	switch(*CurrentByte)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b20      	cmp	r3, #32
 800164a:	d002      	beq.n	8001652 <Prog_MotorsDebug_Parser+0x1e>
 800164c:	2b21      	cmp	r3, #33	; 0x21
 800164e:	d00f      	beq.n	8001670 <Prog_MotorsDebug_Parser+0x3c>
		break;
		break;

	default:
		/* Unknown command! */
		break;
 8001650:	e01d      	b.n	800168e <Prog_MotorsDebug_Parser+0x5a>
		Motor = *(CurrentByte + 1);									//TODO: The same value writing safety
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3301      	adds	r3, #1
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	72fb      	strb	r3, [r7, #11]
		ReceivedPWM = *(CurrentByte + 2);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	789b      	ldrb	r3, [r3, #2]
 800165e:	727b      	strb	r3, [r7, #9]
		Motors_SetMotorSpeed(Motor, ReceivedPWM);
 8001660:	7a7b      	ldrb	r3, [r7, #9]
 8001662:	b29a      	uxth	r2, r3
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fed9 	bl	8001420 <Motors_SetMotorSpeed>
		break;
 800166e:	e00e      	b.n	800168e <Prog_MotorsDebug_Parser+0x5a>
		Motor = *(CurrentByte + 1);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	72fb      	strb	r3, [r7, #11]
		ReceivedDir = *(CurrentByte + 2);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3302      	adds	r3, #2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	72bb      	strb	r3, [r7, #10]
		Motors_SetMotorDirection(Motor, ReceivedDir);
 8001680:	7aba      	ldrb	r2, [r7, #10]
 8001682:	7afb      	ldrb	r3, [r7, #11]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fef2 	bl	8001470 <Motors_SetMotorDirection>
		break;
 800168c:	bf00      	nop
	}

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <Programs_SetProgram>:
//

/* Function starting a launch of specific program by setting current pointer
 * to program and calling it's init function				*/
Programs_error_t Programs_SetProgram(Programs_Program_t *ProgramToSet)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	if(NULL == ProgramToSet)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <Programs_SetProgram+0x12>
	{
		return PROGRAMS_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e010      	b.n	80016cc <Programs_SetProgram+0x34>
	}

	if(NULL == CurrentlyRunningProg)
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <Programs_SetProgram+0x3c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10b      	bne.n	80016ca <Programs_SetProgram+0x32>
	{
		/* Set current program pointer */
		CurrentlyRunningProg = ProgramToSet;
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <Programs_SetProgram+0x3c>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6013      	str	r3, [r2, #0]
		/* Call it's init function */
		CurrentlyRunningProg->ProgramInitFunction();
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <Programs_SetProgram+0x3c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4798      	blx	r3
		/* Change state to program in progrss, it will allow it to run in perfom fun */
		ProgramState = PROGRAM_IN_PROGRESS;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <Programs_SetProgram+0x40>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
		return PROGRAMS_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <Programs_SetProgram+0x34>
	}
	else
	{
		return PROGRAMS_ERROR;
 80016ca:	2301      	movs	r3, #1
	}
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000260 	.word	0x20000260
 80016d8:	20000264 	.word	0x20000264

080016dc <Programs_ExitProgram>:

/* Function starting a exit program process */
void Programs_ExitProgram(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	/* Call program DeInit function */
	CurrentlyRunningProg->ProgramExitFunction();
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <Programs_ExitProgram+0x18>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4798      	blx	r3
	/* Change state to program completed */
	ProgramState = PROGRAM_COMPLETED;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <Programs_ExitProgram+0x1c>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000260 	.word	0x20000260
 80016f8:	20000264 	.word	0x20000264

080016fc <Programs_GetProgram>:

/* Function which returns current pointer to program */
Programs_Program_t* Programs_GetProgram(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	return CurrentlyRunningProg;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <Programs_GetProgram+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000260 	.word	0x20000260

08001710 <Programs_ClearProgram>:

/* Clearing the program pointer and status variable */
void Programs_ClearProgram(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	CurrentlyRunningProg = NULL;
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <Programs_ClearProgram+0x18>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	ProgramState = NO_PROGRAM_SET;
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <Programs_ClearProgram+0x1c>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000260 	.word	0x20000260
 800172c:	20000264 	.word	0x20000264

08001730 <Programs_PerformProgram>:

/* Program performing function, made for being put in while loop */
Programs_status_t Programs_PerformProgram(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	switch(ProgramState)
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <Programs_PerformProgram+0x44>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d010      	beq.n	800175e <Programs_PerformProgram+0x2e>
 800173c:	2b02      	cmp	r3, #2
 800173e:	dc10      	bgt.n	8001762 <Programs_PerformProgram+0x32>
 8001740:	2b00      	cmp	r3, #0
 8001742:	d010      	beq.n	8001766 <Programs_PerformProgram+0x36>
 8001744:	2b01      	cmp	r3, #1
 8001746:	d000      	beq.n	800174a <Programs_PerformProgram+0x1a>
		/* Clear the program after completing*/
		//Programs_ClearProgram();
		break;

	default:
		break;
 8001748:	e00b      	b.n	8001762 <Programs_PerformProgram+0x32>
		if(NULL != CurrentlyRunningProg->ProgramRoutine)
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <Programs_PerformProgram+0x48>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <Programs_PerformProgram+0x3a>
			CurrentlyRunningProg->ProgramRoutine();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <Programs_PerformProgram+0x48>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4798      	blx	r3
		break;
 800175c:	e005      	b.n	800176a <Programs_PerformProgram+0x3a>
		break;
 800175e:	bf00      	nop
 8001760:	e004      	b.n	800176c <Programs_PerformProgram+0x3c>
		break;
 8001762:	bf00      	nop
 8001764:	e002      	b.n	800176c <Programs_PerformProgram+0x3c>
		break;
 8001766:	bf00      	nop
 8001768:	e000      	b.n	800176c <Programs_PerformProgram+0x3c>
		break;
 800176a:	bf00      	nop
	}

	return ProgramState;
 800176c:	4b01      	ldr	r3, [pc, #4]	; (8001774 <Programs_PerformProgram+0x44>)
 800176e:	781b      	ldrb	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000264 	.word	0x20000264
 8001778:	20000260 	.word	0x20000260

0800177c <Programs_SendProgramStartedACK>:
//

/* This functions are called after program launch / exit. Sending it is needed for controller to proper functionality and sync with robot */

Programs_error_t Programs_SendProgramStartedACK(uint8_t ProgramID, uint8_t ACKorNACK)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	460a      	mov	r2, r1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[3];
	Buffer[0] = START_PROGRAM;
 800178c:	2310      	movs	r3, #16
 800178e:	733b      	strb	r3, [r7, #12]
	Buffer[1] = ProgramID;
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	737b      	strb	r3, [r7, #13]
	Buffer[2] = ACKorNACK;
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	73bb      	strb	r3, [r7, #14]
	return Radio_TxBufferPut(Buffer, 3);
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2103      	movs	r1, #3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fcaa 	bl	80020f8 <Radio_TxBufferPut>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <Programs_SendProgramExitACK>:

Programs_error_t Programs_SendProgramExitACK(uint8_t ACKorNACK)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[2];
	Buffer[0] = EXIT_PROGRAM;
 80017b8:	2311      	movs	r3, #17
 80017ba:	733b      	strb	r3, [r7, #12]
	Buffer[1] = ACKorNACK;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	737b      	strb	r3, [r7, #13]
	return Radio_TxBufferPut(Buffer, 2);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fc96 	bl	80020f8 <Radio_TxBufferPut>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <RBuffer_Write>:
 *      Author: Michal Klebokowski
 */
#include "RingBuffer.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e8:	3301      	adds	r3, #1
 80017ea:	425a      	negs	r2, r3
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	bf58      	it	pl
 80017f6:	4253      	negpl	r3, r2
 80017f8:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	429a      	cmp	r2, r3
 8001804:	d101      	bne.n	800180a <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00b      	b.n	8001822 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001810:	4619      	mov	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800183c:	3301      	adds	r3, #1
 800183e:	425a      	negs	r2, r3
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	f002 021f 	and.w	r2, r2, #31
 8001848:	bf58      	it	pl
 800184a:	4253      	negpl	r3, r2
 800184c:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185a:	429a      	cmp	r2, r3
 800185c:	d101      	bne.n	8001862 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 800185e:	2301      	movs	r3, #1
 8001860:	e00c      	b.n	800187c <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	5c9a      	ldrb	r2, [r3, r2]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <DRV8836_Init>:
 *      Author: Michal Klebokowski
 */
#include "drv8836.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	4611      	mov	r1, r2
 8001892:	461a      	mov	r2, r3
 8001894:	460b      	mov	r3, r1
 8001896:	80fb      	strh	r3, [r7, #6]
 8001898:	4613      	mov	r3, r2
 800189a:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	88fa      	ldrh	r2, [r7, #6]
 80018a6:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	88ba      	ldrh	r2, [r7, #4]
 80018ac:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8b3a      	ldrh	r2, [r7, #24]
 80018b2:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8bba      	ldrh	r2, [r7, #28]
 80018b8:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	891b      	ldrh	r3, [r3, #8]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4610      	mov	r0, r2
 80018c6:	f004 f83d 	bl	8005944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	895b      	ldrh	r3, [r3, #10]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f004 f835 	bl	8005944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	899b      	ldrh	r3, [r3, #12]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f004 f82d 	bl	8005944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	89db      	ldrh	r3, [r3, #14]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f004 f825 	bl	8005944 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <DRV8836_Init+0x86>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	e016      	b.n	800193a <DRV8836_Init+0xb4>
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	2b04      	cmp	r3, #4
 8001910:	d105      	bne.n	800191e <DRV8836_Init+0x98>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	6393      	str	r3, [r2, #56]	; 0x38
 800191c:	e00d      	b.n	800193a <DRV8836_Init+0xb4>
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	2b08      	cmp	r3, #8
 8001922:	d105      	bne.n	8001930 <DRV8836_Init+0xaa>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800192e:	e004      	b.n	800193a <DRV8836_Init+0xb4>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2300      	movs	r3, #0
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <DRV8836_Init+0xc6>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
 800194a:	e016      	b.n	800197a <DRV8836_Init+0xf4>
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	2b04      	cmp	r3, #4
 8001950:	d105      	bne.n	800195e <DRV8836_Init+0xd8>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	6393      	str	r3, [r2, #56]	; 0x38
 800195c:	e00d      	b.n	800197a <DRV8836_Init+0xf4>
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d105      	bne.n	8001970 <DRV8836_Init+0xea>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800196e:	e004      	b.n	800197a <DRV8836_Init+0xf4>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2300      	movs	r3, #0
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 800197a:	8b3b      	ldrh	r3, [r7, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <DRV8836_Init+0x106>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2200      	movs	r2, #0
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
 800198a:	e016      	b.n	80019ba <DRV8836_Init+0x134>
 800198c:	8b3b      	ldrh	r3, [r7, #24]
 800198e:	2b04      	cmp	r3, #4
 8001990:	d105      	bne.n	800199e <DRV8836_Init+0x118>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2300      	movs	r3, #0
 800199a:	6393      	str	r3, [r2, #56]	; 0x38
 800199c:	e00d      	b.n	80019ba <DRV8836_Init+0x134>
 800199e:	8b3b      	ldrh	r3, [r7, #24]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d105      	bne.n	80019b0 <DRV8836_Init+0x12a>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	63d3      	str	r3, [r2, #60]	; 0x3c
 80019ae:	e004      	b.n	80019ba <DRV8836_Init+0x134>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 80019ba:	8bbb      	ldrh	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <DRV8836_Init+0x146>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019ca:	e016      	b.n	80019fa <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 80019cc:	8bbb      	ldrh	r3, [r7, #28]
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d105      	bne.n	80019de <DRV8836_Init+0x158>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2300      	movs	r3, #0
 80019da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80019dc:	e00d      	b.n	80019fa <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 80019de:	8bbb      	ldrh	r3, [r7, #28]
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d105      	bne.n	80019f0 <DRV8836_Init+0x16a>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80019ee:	e004      	b.n	80019fa <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <DRV8836_SetMotor>:

DRV8836_Error_t DRV8836_SetMotor(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction, uint16_t speed)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	70fb      	strb	r3, [r7, #3]
 8001a16:	460b      	mov	r3, r1
 8001a18:	70bb      	strb	r3, [r7, #2]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	803b      	strh	r3, [r7, #0]
	DRV8836_Direction_t *TargetDirection;
	uint16_t *TargetSpeed;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;

	if(speed > ic->drv_htim->Instance->ARR) //check if pwm value fit the counter period range
 8001a1e:	883a      	ldrh	r2, [r7, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d901      	bls.n	8001a30 <DRV8836_SetMotor+0x2c>
	{
		return DRV8836_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e14e      	b.n	8001cce <DRV8836_SetMotor+0x2ca>
	}

	if(Output_A == output)
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10c      	bne.n	8001a50 <DRV8836_SetMotor+0x4c>
	{
		TargetForwardChannel = ic->a_forward_channel;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	891b      	ldrh	r3, [r3, #8]
 8001a3a:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->a_reverse_channel;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	895b      	ldrh	r3, [r3, #10]
 8001a40:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->a_speed);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3310      	adds	r3, #16
 8001a46:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3314      	adds	r3, #20
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e011      	b.n	8001a74 <DRV8836_SetMotor+0x70>
	}
	else if(Output_B == output)
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10c      	bne.n	8001a70 <DRV8836_SetMotor+0x6c>
	{
		TargetForwardChannel = ic->b_forward_channel;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	899b      	ldrh	r3, [r3, #12]
 8001a5a:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->b_reverse_channel;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	89db      	ldrh	r3, [r3, #14]
 8001a60:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->b_speed);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3312      	adds	r3, #18
 8001a66:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->b_direction);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3315      	adds	r3, #21
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e001      	b.n	8001a74 <DRV8836_SetMotor+0x70>
	}
	else
	{
		return DRV8836_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e12c      	b.n	8001cce <DRV8836_SetMotor+0x2ca>
	}

	switch(direction)
 8001a74:	78bb      	ldrb	r3, [r7, #2]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	f200 8120 	bhi.w	8001cbc <DRV8836_SetMotor+0x2b8>
 8001a7c:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <DRV8836_SetMotor+0x80>)
 8001a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a82:	bf00      	nop
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001b17 	.word	0x08001b17
 8001a8c:	08001b99 	.word	0x08001b99
 8001a90:	08001c1b 	.word	0x08001c1b
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <DRV8836_SetMotor+0xa2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa4:	e016      	b.n	8001ad4 <DRV8836_SetMotor+0xd0>
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d105      	bne.n	8001ab8 <DRV8836_SetMotor+0xb4>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6393      	str	r3, [r2, #56]	; 0x38
 8001ab6:	e00d      	b.n	8001ad4 <DRV8836_SetMotor+0xd0>
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d105      	bne.n	8001aca <DRV8836_SetMotor+0xc6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ac8:	e004      	b.n	8001ad4 <DRV8836_SetMotor+0xd0>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001ad4:	89bb      	ldrh	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <DRV8836_SetMotor+0xe2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001ae4:	e0ec      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001ae6:	89bb      	ldrh	r3, [r7, #12]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d105      	bne.n	8001af8 <DRV8836_SetMotor+0xf4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001af6:	e0e3      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001af8:	89bb      	ldrh	r3, [r7, #12]
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d105      	bne.n	8001b0a <DRV8836_SetMotor+0x106>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2300      	movs	r3, #0
 8001b06:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001b08:	e0da      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2300      	movs	r3, #0
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001b14:	e0d4      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8001b16:	89fb      	ldrh	r3, [r7, #14]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <DRV8836_SetMotor+0x124>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
 8001b26:	e016      	b.n	8001b56 <DRV8836_SetMotor+0x152>
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d105      	bne.n	8001b3a <DRV8836_SetMotor+0x136>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	6393      	str	r3, [r2, #56]	; 0x38
 8001b38:	e00d      	b.n	8001b56 <DRV8836_SetMotor+0x152>
 8001b3a:	89fb      	ldrh	r3, [r7, #14]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d105      	bne.n	8001b4c <DRV8836_SetMotor+0x148>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001b4a:	e004      	b.n	8001b56 <DRV8836_SetMotor+0x152>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001b56:	89bb      	ldrh	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <DRV8836_SetMotor+0x164>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	883a      	ldrh	r2, [r7, #0]
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001b66:	e0ab      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001b68:	89bb      	ldrh	r3, [r7, #12]
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d105      	bne.n	8001b7a <DRV8836_SetMotor+0x176>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	883b      	ldrh	r3, [r7, #0]
 8001b76:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001b78:	e0a2      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001b7a:	89bb      	ldrh	r3, [r7, #12]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d105      	bne.n	8001b8c <DRV8836_SetMotor+0x188>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	883b      	ldrh	r3, [r7, #0]
 8001b88:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001b8a:	e099      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	883b      	ldrh	r3, [r7, #0]
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001b96:	e093      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, speed);
 8001b98:	89fb      	ldrh	r3, [r7, #14]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <DRV8836_SetMotor+0x1a6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	883a      	ldrh	r2, [r7, #0]
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba8:	e016      	b.n	8001bd8 <DRV8836_SetMotor+0x1d4>
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d105      	bne.n	8001bbc <DRV8836_SetMotor+0x1b8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	883b      	ldrh	r3, [r7, #0]
 8001bb8:	6393      	str	r3, [r2, #56]	; 0x38
 8001bba:	e00d      	b.n	8001bd8 <DRV8836_SetMotor+0x1d4>
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d105      	bne.n	8001bce <DRV8836_SetMotor+0x1ca>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001bcc:	e004      	b.n	8001bd8 <DRV8836_SetMotor+0x1d4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	883b      	ldrh	r3, [r7, #0]
 8001bd6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001bd8:	89bb      	ldrh	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <DRV8836_SetMotor+0x1e6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001be8:	e06a      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001bea:	89bb      	ldrh	r3, [r7, #12]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d105      	bne.n	8001bfc <DRV8836_SetMotor+0x1f8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001bfa:	e061      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001bfc:	89bb      	ldrh	r3, [r7, #12]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d105      	bne.n	8001c0e <DRV8836_SetMotor+0x20a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001c0c:	e058      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2300      	movs	r3, #0
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001c18:	e052      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 8001c1a:	89fb      	ldrh	r3, [r7, #14]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <DRV8836_SetMotor+0x22c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68d2      	ldr	r2, [r2, #12]
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2e:	e01c      	b.n	8001c6a <DRV8836_SetMotor+0x266>
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d107      	bne.n	8001c46 <DRV8836_SetMotor+0x242>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6852      	ldr	r2, [r2, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	6393      	str	r3, [r2, #56]	; 0x38
 8001c44:	e011      	b.n	8001c6a <DRV8836_SetMotor+0x266>
 8001c46:	89fb      	ldrh	r3, [r7, #14]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d107      	bne.n	8001c5c <DRV8836_SetMotor+0x258>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6852      	ldr	r2, [r2, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c5a:	e006      	b.n	8001c6a <DRV8836_SetMotor+0x266>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001c6a:	89bb      	ldrh	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <DRV8836_SetMotor+0x27c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68d2      	ldr	r2, [r2, #12]
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001c7e:	e01f      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001c80:	89bb      	ldrh	r3, [r7, #12]
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d107      	bne.n	8001c96 <DRV8836_SetMotor+0x292>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6852      	ldr	r2, [r2, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001c94:	e014      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001c96:	89bb      	ldrh	r3, [r7, #12]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d107      	bne.n	8001cac <DRV8836_SetMotor+0x2a8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001caa:	e009      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6852      	ldr	r2, [r2, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001cba:	e001      	b.n	8001cc0 <DRV8836_SetMotor+0x2bc>

	default:
		return DRV8836_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e006      	b.n	8001cce <DRV8836_SetMotor+0x2ca>
		break;
	}

	*TargetDirection = direction;	//save set direction and speed to struct
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	78ba      	ldrb	r2, [r7, #2]
 8001cc4:	701a      	strb	r2, [r3, #0]
	*TargetSpeed = speed;
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	883a      	ldrh	r2, [r7, #0]
 8001cca:	801a      	strh	r2, [r3, #0]

	return DRV8836_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a4e      	ldr	r2, [pc, #312]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001cf2:	f043 0310 	orr.w	r3, r3, #16
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d04:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d0a:	f043 0320 	orr.w	r3, r3, #32
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a42      	ldr	r2, [pc, #264]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a3c      	ldr	r2, [pc, #240]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d3a:	f043 0308 	orr.w	r3, r3, #8
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <MX_GPIO_Init+0x154>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f246 0103 	movw	r1, #24579	; 0x6003
 8001d52:	4837      	ldr	r0, [pc, #220]	; (8001e30 <MX_GPIO_Init+0x158>)
 8001d54:	f002 f898 	bl	8003e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4835      	ldr	r0, [pc, #212]	; (8001e34 <MX_GPIO_Init+0x15c>)
 8001d5e:	f002 f893 	bl	8003e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2110      	movs	r1, #16
 8001d66:	4834      	ldr	r0, [pc, #208]	; (8001e38 <MX_GPIO_Init+0x160>)
 8001d68:	f002 f88e 	bl	8003e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 8001d6c:	f246 0302 	movw	r3, #24578	; 0x6002
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4619      	mov	r1, r3
 8001d84:	482a      	ldr	r0, [pc, #168]	; (8001e30 <MX_GPIO_Init+0x158>)
 8001d86:	f001 fefb 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4823      	ldr	r0, [pc, #140]	; (8001e30 <MX_GPIO_Init+0x158>)
 8001da2:	f001 feed 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	4820      	ldr	r0, [pc, #128]	; (8001e3c <MX_GPIO_Init+0x164>)
 8001dbc:	f001 fee0 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_GPIO_Init+0x168>)
 8001dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4819      	ldr	r0, [pc, #100]	; (8001e3c <MX_GPIO_Init+0x164>)
 8001dd6:	f001 fed3 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	4810      	ldr	r0, [pc, #64]	; (8001e34 <MX_GPIO_Init+0x15c>)
 8001df2:	f001 fec5 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001df6:	2310      	movs	r3, #16
 8001df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 0310 	add.w	r3, r7, #16
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480a      	ldr	r0, [pc, #40]	; (8001e38 <MX_GPIO_Init+0x160>)
 8001e0e:	f001 feb7 	bl	8003b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2028      	movs	r0, #40	; 0x28
 8001e18:	f001 fe7b 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e1c:	2028      	movs	r0, #40	; 0x28
 8001e1e:	f001 fe94 	bl	8003b4a <HAL_NVIC_EnableIRQ>

}
 8001e22:	bf00      	nop
 8001e24:	3720      	adds	r7, #32
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40011000 	.word	0x40011000
 8001e34:	40011400 	.word	0x40011400
 8001e38:	40010c00 	.word	0x40010c00
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	10210000 	.word	0x10210000

08001e44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <MX_I2C1_Init+0x54>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <MX_I2C1_Init+0x58>)
 8001e52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e82:	f002 f84b 	bl	8003f1c <HAL_I2C_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e8c:	f000 fb6d 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000268 	.word	0x20000268
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	00061a80 	.word	0x00061a80

08001ea0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_I2C_MspInit+0x90>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d132      	bne.n	8001f26 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ed8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4812      	ldr	r0, [pc, #72]	; (8001f38 <HAL_I2C_MspInit+0x98>)
 8001eee:	f001 fe47 	bl	8003b80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_I2C_MspInit+0x9c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <HAL_I2C_MspInit+0x9c>)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40005400 	.word	0x40005400
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40010000 	.word	0x40010000

08001f40 <Parser_ParseProgramLaunchCommand>:
#include "Programs/klebot_programs.h"
#include "Programs/DiodeTest_Prog.h"
#include "Programs/MotorsDebug_Prog.h"

void Parser_ParseProgramLaunchCommand(uint8_t ProgramID)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	/* Launch proper program */
	/* When another program is currently running, launch function will return error */
	switch(ProgramID)
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2bd0      	cmp	r3, #208	; 0xd0
 8001f4e:	d002      	beq.n	8001f56 <Parser_ParseProgramLaunchCommand+0x16>
 8001f50:	2bd1      	cmp	r3, #209	; 0xd1
 8001f52:	d005      	beq.n	8001f60 <Parser_ParseProgramLaunchCommand+0x20>
 8001f54:	e009      	b.n	8001f6a <Parser_ParseProgramLaunchCommand+0x2a>
	{
	case DIODE_TEST:
		status = Prog_DiodeTest_Launch();
 8001f56:	f7ff fb03 	bl	8001560 <Prog_DiodeTest_Launch>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73fb      	strb	r3, [r7, #15]
		break;
 8001f5e:	e007      	b.n	8001f70 <Parser_ParseProgramLaunchCommand+0x30>

	case MOTORS_DEBUG:
		status = Prog_MotorsDebug_Launch();
 8001f60:	f7ff fb5e 	bl	8001620 <Prog_MotorsDebug_Launch>
 8001f64:	4603      	mov	r3, r0
 8001f66:	73fb      	strb	r3, [r7, #15]
		break;
 8001f68:	e002      	b.n	8001f70 <Parser_ParseProgramLaunchCommand+0x30>

	default:
		status = PROGRAMS_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
		break;
 8001f6e:	bf00      	nop
	}

	/* Send ACK to controller */
	if(status == PROGRAMS_OK)
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <Parser_ParseProgramLaunchCommand+0x42>
	{
		Programs_SendProgramStartedACK(ProgramID, ACK);		//TODO: Maybe ACK should be sent after each program Init function ?
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	21f0      	movs	r1, #240	; 0xf0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fbfe 	bl	800177c <Programs_SendProgramStartedACK>
	}
	else
	{
		Programs_SendProgramStartedACK(ProgramID, NACK);
	}
}
 8001f80:	e004      	b.n	8001f8c <Parser_ParseProgramLaunchCommand+0x4c>
		Programs_SendProgramStartedACK(ProgramID, NACK);
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	21f1      	movs	r1, #241	; 0xf1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fbf8 	bl	800177c <Programs_SendProgramStartedACK>
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <Parser_Klebot>:

void Parser_Klebot(uint8_t *command, uint8_t length)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
	uint8_t *CurrentByte = command;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	617b      	str	r3, [r7, #20]
	uint8_t Length = length;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	74fb      	strb	r3, [r7, #19]
	Programs_Program_t* CurrentProgram = Programs_GetProgram();
 8001fa8:	f7ff fba8 	bl	80016fc <Programs_GetProgram>
 8001fac:	60f8      	str	r0, [r7, #12]

	/* If the command header is currently running program's ID, then pass the rest fo the command to it's parser */
	if(*CurrentByte == CurrentProgram->ProgramID)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	7c1b      	ldrb	r3, [r3, #16]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d10c      	bne.n	8001fd4 <Parser_Klebot+0x40>
	{
		CurrentByte++;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
		Length--;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	74fb      	strb	r3, [r7, #19]
		/* Frame: [ProgramID, Specific program commands...] */
		CurrentProgram->ProgramParser(CurrentByte, Length);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	7cfa      	ldrb	r2, [r7, #19]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	6978      	ldr	r0, [r7, #20]
 8001fd0:	4798      	blx	r3
			/* Incorrect command! */

			break;
		}
	}
}
 8001fd2:	e014      	b.n	8001ffe <Parser_Klebot+0x6a>
		switch(*CurrentByte)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d002      	beq.n	8001fe2 <Parser_Klebot+0x4e>
 8001fdc:	2b11      	cmp	r3, #17
 8001fde:	d008      	beq.n	8001ff2 <Parser_Klebot+0x5e>
			break;
 8001fe0:	e00d      	b.n	8001ffe <Parser_Klebot+0x6a>
			uint8_t ProgramToLaunch = *(CurrentByte + 1);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	785b      	ldrb	r3, [r3, #1]
 8001fe6:	72fb      	strb	r3, [r7, #11]
			Parser_ParseProgramLaunchCommand(ProgramToLaunch);
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ffa8 	bl	8001f40 <Parser_ParseProgramLaunchCommand>
			break;
 8001ff0:	e005      	b.n	8001ffe <Parser_Klebot+0x6a>
			Programs_ExitProgram();
 8001ff2:	f7ff fb73 	bl	80016dc <Programs_ExitProgram>
			Programs_SendProgramExitACK(ACK);
 8001ff6:	20f0      	movs	r0, #240	; 0xf0
 8001ff8:	f7ff fbd9 	bl	80017ae <Programs_SendProgramExitACK>
			break;
 8001ffc:	bf00      	nop
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fed3 	bl	8002dbc <nRF24_Init>

#ifdef ROBOT
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8002016:	4906      	ldr	r1, [pc, #24]	; (8002030 <Radio_Init+0x28>)
 8002018:	2000      	movs	r0, #0
 800201a:	f000 fd3c 	bl	8002a96 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <Radio_Init+0x2c>)
 8002020:	f000 fd72 	bl	8002b08 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8002024:	f000 fb76 	bl	8002714 <nRF24_RX_Mode>
#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
	nRF24_SetTXAddress( (uint8_t*) "Bot");
	nRF24_TX_Mode();
#endif
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	080093d0 	.word	0x080093d0
 8002034:	080093d4 	.word	0x080093d4

08002038 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8002048:	2300      	movs	r3, #0
 800204a:	73bb      	strb	r3, [r7, #14]
 800204c:	e010      	b.n	8002070 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4619      	mov	r1, r3
 8002054:	480b      	ldr	r0, [pc, #44]	; (8002084 <Radio_RxBufferPut+0x4c>)
 8002056:	f7ff fbbe 	bl	80017d6 <RBuffer_Write>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	4313      	orrs	r3, r2
 8002062:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 800206a:	7bbb      	ldrb	r3, [r7, #14]
 800206c:	3301      	adds	r3, #1
 800206e:	73bb      	strb	r3, [r7, #14]
 8002070:	7bba      	ldrb	r2, [r7, #14]
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3ea      	bcc.n	800204e <Radio_RxBufferPut+0x16>
	}
	return Status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200002e4 	.word	0x200002e4

08002088 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);				//Get first byte
 800209a:	f107 030d 	add.w	r3, r7, #13
 800209e:	4619      	mov	r1, r3
 80020a0:	4814      	ldr	r0, [pc, #80]	; (80020f4 <Radio_RxBufferGet+0x6c>)
 80020a2:	f7ff fbc3 	bl	800182c <RBuffer_Read>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461a      	mov	r2, r3
 80020aa:	7bbb      	ldrb	r3, [r7, #14]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80020b0:	e012      	b.n	80020d8 <Radio_RxBufferGet+0x50>
	{
		*(CommandDestination+Length) = Data;				//write received byte to destination
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	7b7a      	ldrb	r2, [r7, #13]
 80020ba:	701a      	strb	r2, [r3, #0]
		Length++;											//increment length info
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	3301      	adds	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);			//read next byte
 80020c2:	f107 030d 	add.w	r3, r7, #13
 80020c6:	4619      	mov	r1, r3
 80020c8:	480a      	ldr	r0, [pc, #40]	; (80020f4 <Radio_RxBufferGet+0x6c>)
 80020ca:	f7ff fbaf 	bl	800182c <RBuffer_Read>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	7bbb      	ldrb	r3, [r7, #14]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )		//Check if this is end-of-command or if there is nothing in buffer(status)
 80020d8:	7b7b      	ldrb	r3, [r7, #13]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d002      	beq.n	80020e4 <Radio_RxBufferGet+0x5c>
 80020de:	7bbb      	ldrb	r3, [r7, #14]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0e6      	beq.n	80020b2 <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;							//after end of the frame write length to destination
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	701a      	strb	r2, [r3, #0]
	return Status;
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200002e4 	.word	0x200002e4

080020f8 <Radio_TxBufferPut>:

//
// -- TX --
//
Klebot_Radio_Status Radio_TxBufferPut(uint8_t *Command, uint8_t Length)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 8002108:	2300      	movs	r3, #0
 800210a:	73bb      	strb	r3, [r7, #14]
 800210c:	e010      	b.n	8002130 <Radio_TxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&TxBuffer, *Command);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	480f      	ldr	r0, [pc, #60]	; (8002154 <Radio_TxBufferPut+0x5c>)
 8002116:	f7ff fb5e 	bl	80017d6 <RBuffer_Write>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	4313      	orrs	r3, r2
 8002122:	73fb      	strb	r3, [r7, #15]
		Command++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3301      	adds	r3, #1
 8002128:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < Length; i++)						//Put Command to a buffer
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	3301      	adds	r3, #1
 800212e:	73bb      	strb	r3, [r7, #14]
 8002130:	7bba      	ldrb	r2, [r7, #14]
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3ea      	bcc.n	800210e <Radio_TxBufferPut+0x16>
	}
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
 8002138:	2104      	movs	r1, #4
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <Radio_TxBufferPut+0x5c>)
 800213c:	f7ff fb4b 	bl	80017d6 <RBuffer_Write>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	4313      	orrs	r3, r2
 8002148:	73fb      	strb	r3, [r7, #15]
	return Status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200002c0 	.word	0x200002c0

08002158 <Radio_TxBufferSend>:

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 800216a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800216e:	1d3a      	adds	r2, r7, #4
 8002170:	4413      	add	r3, r2
 8002172:	4619      	mov	r1, r3
 8002174:	4816      	ldr	r0, [pc, #88]	; (80021d0 <Radio_TxBufferSend+0x78>)
 8002176:	f7ff fb59 	bl	800182c <RBuffer_Read>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002182:	4313      	orrs	r3, r2
 8002184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8002188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8002192:	3328      	adds	r3, #40	; 0x28
 8002194:	443b      	add	r3, r7
 8002196:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d003      	beq.n	80021a6 <Radio_TxBufferSend+0x4e>
 800219e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0e1      	beq.n	800216a <Radio_TxBufferSend+0x12>
		TxStatus = RADIO_BUSY;
	}
#endif

#ifdef ROBOT
	if(Status == RADIO_OK)
 80021a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <Radio_TxBufferSend+0x6a>
	{
		nRF24_WriteAckPayload(0, DataToSend, Length);
 80021ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	2000      	movs	r0, #0
 80021b8:	f000 fe68 	bl	8002e8c <nRF24_WriteAckPayload>
		TxStatus = RADIO_BUSY;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <Radio_TxBufferSend+0x7c>)
 80021be:	2202      	movs	r2, #2
 80021c0:	701a      	strb	r2, [r3, #0]
	}
#endif

	return Status;
 80021c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002c0 	.word	0x200002c0
 80021d4:	200002bd 	.word	0x200002bd

080021d8 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process(void)			//Process to put in main loop
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
	nRF24_Event();											//check for irq's
 80021de:	f000 fdc5 	bl	8002d6c <nRF24_Event>
	}
#endif

#ifdef ROBOT

	if(TxStatus == RADIO_OK)	//If Tx is free, send response
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <Radio_Process+0x64>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <Radio_Process+0x16>
	{
		Radio_TxBufferSend();	//send ack payload
 80021ea:	f7ff ffb5 	bl	8002158 <Radio_TxBufferSend>
	}

	if((HAL_GetTick() - ConnectionTimeoutCounter) > (3 * PACKET_SEND_DELAY) )	//check when last message came to know if connection isnt dead
 80021ee:	f001 fb8b 	bl	8003908 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <Radio_Process+0x68>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b96      	cmp	r3, #150	; 0x96
 80021fc:	d904      	bls.n	8002208 <Radio_Process+0x30>
	{
		ConnectionStatus = RADIO_ERROR;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <Radio_Process+0x6c>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
		Radio_NoConnectionCallback();
 8002204:	f000 f832 	bl	800226c <Radio_NoConnectionCallback>
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <Radio_Process+0x70>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d110      	bne.n	8002232 <Radio_Process+0x5a>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];		//TODO: add check here if there is more than one new command in rbuffer
		uint8_t ReceivedLength;

		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8002210:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff35 	bl	8002088 <Radio_RxBufferGet>
		Radio_NewCommandReceivedCallback(ReceivedCommand, ReceivedLength);
 800221e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f8b2 	bl	8002390 <Radio_NewCommandReceivedCallback>

		RxStatus = RADIO_OK;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <Radio_Process+0x70>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
	}
}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200002bd 	.word	0x200002bd
 8002240:	20000308 	.word	0x20000308
 8002244:	200002bc 	.word	0x200002bc
 8002248:	200002be 	.word	0x200002be

0800224c <Radio_GetConnectionStatus>:
//
//Get connection status
//

Klebot_Radio_Status Radio_GetConnectionStatus(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	return ConnectionStatus;
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <Radio_GetConnectionStatus+0x10>)
 8002252:	781b      	ldrb	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	200002bc 	.word	0x200002bc

08002260 <Radio_HandlerIRQ>:

//
//Klebot radio callbacks to use
//
void Radio_HandlerIRQ(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	nRF24_IRQ_Handler();
 8002264:	f000 fd30 	bl	8002cc8 <nRF24_IRQ_Handler>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <Radio_NoConnectionCallback>:

__weak void Radio_NoConnectionCallback(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <nRF24_EventTxCallback>:
}
//
// -- NRF24 Callbacks --
//
void nRF24_EventTxCallback(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <nRF24_EventTxCallback+0x18>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <nRF24_EventTxCallback+0x1c>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	200002bd 	.word	0x200002bd
 8002294:	200002bc 	.word	0x200002bc

08002298 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 800229e:	1dfa      	adds	r2, r7, #7
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fcf7 	bl	8002c9a <nRF24_ReadRXPaylaod>

#ifdef ROBOT
	ConnectionStatus = RADIO_OK;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <nRF24_EventRxCallback+0x48>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
	ConnectionTimeoutCounter = HAL_GetTick();			//Connection timeout counter is a tool for robot to check if there is still a connection with controller, on controller side we have MrCallback to check this
 80022b2:	f001 fb29 	bl	8003908 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <nRF24_EventRxCallback+0x4c>)
 80022ba:	6013      	str	r3, [r2, #0]
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
 80022bc:	7a3b      	ldrb	r3, [r7, #8]
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d00a      	beq.n	80022d8 <nRF24_EventRxCallback+0x40>
#endif

	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 80022c2:	79fa      	ldrb	r2, [r7, #7]
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff feb4 	bl	8002038 <Radio_RxBufferPut>
	RxStatus = RADIO_NEW_RX;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <nRF24_EventRxCallback+0x50>)
 80022d2:	2203      	movs	r2, #3
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e000      	b.n	80022da <nRF24_EventRxCallback+0x42>
	if(CONNECTION_HOLD == ReceivedCommand[0]) return;	//just ignore if this is a connection hold
 80022d8:	bf00      	nop
}
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200002bc 	.word	0x200002bc
 80022e4:	20000308 	.word	0x20000308
 80022e8:	200002be 	.word	0x200002be

080022ec <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <nRF24_EventMrCallback+0x14>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200002bc 	.word	0x200002bc

08002304 <ConnectionBlinkLED>:

uint8_t CommandSource = RADIO_DATA_SOURCE;

/* Blink LED when controller is connected */
static void ConnectionBlinkLED(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	static uint32_t LastTick = 0;
	/* Get the connection status */
	if(RADIO_ERROR == Radio_GetConnectionStatus())
 8002308:	f7ff ffa0 	bl	800224c <Radio_GetConnectionStatus>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <ConnectionBlinkLED+0x1a>
	{
		/* If there is no connection, set the LED off and return */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002312:	2201      	movs	r2, #1
 8002314:	2101      	movs	r1, #1
 8002316:	480b      	ldr	r0, [pc, #44]	; (8002344 <ConnectionBlinkLED+0x40>)
 8002318:	f001 fdb6 	bl	8003e88 <HAL_GPIO_WritePin>
		return;
 800231c:	e011      	b.n	8002342 <ConnectionBlinkLED+0x3e>
	}
	/* Blink the diode if there is connection with controller */
	if(HAL_GetTick() - LastTick > 500)
 800231e:	f001 faf3 	bl	8003908 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <ConnectionBlinkLED+0x44>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800232e:	d908      	bls.n	8002342 <ConnectionBlinkLED+0x3e>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002330:	2101      	movs	r1, #1
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <ConnectionBlinkLED+0x40>)
 8002334:	f001 fdc0 	bl	8003eb8 <HAL_GPIO_TogglePin>
		LastTick = HAL_GetTick();
 8002338:	f001 fae6 	bl	8003908 <HAL_GetTick>
 800233c:	4603      	mov	r3, r0
 800233e:	4a02      	ldr	r2, [pc, #8]	; (8002348 <ConnectionBlinkLED+0x44>)
 8002340:	6013      	str	r3, [r2, #0]
	}
}
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40011000 	.word	0x40011000
 8002348:	20000310 	.word	0x20000310

0800234c <KlebotScheduler>:

/* Main scheduler function */
void KlebotScheduler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
	static uint8_t StartupInitFlag = 0;
	Programs_status_t SubProgramStatus;

	/* Radio process - always active in the background */
	Radio_Process();
 8002352:	f7ff ff41 	bl	80021d8 <Radio_Process>

	/* Startup sequence */
	if(0 == StartupInitFlag)
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <KlebotScheduler+0x40>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <KlebotScheduler+0x18>
	{
		StartupInitFlag = 1;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <KlebotScheduler+0x40>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
	}

	/* Perform current program, returns proper status */
	SubProgramStatus = Programs_PerformProgram();
 8002364:	f7ff f9e4 	bl	8001730 <Programs_PerformProgram>
 8002368:	4603      	mov	r3, r0
 800236a:	71fb      	strb	r3, [r7, #7]

	if(SubProgramStatus == PROGRAM_COMPLETED)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d102      	bne.n	8002378 <KlebotScheduler+0x2c>
	{
		Programs_ClearProgram();
 8002372:	f7ff f9cd 	bl	8001710 <Programs_ClearProgram>
	}
	else if(SubProgramStatus == NO_PROGRAM_SET)
	{
		ConnectionBlinkLED();
	}
}
 8002376:	e004      	b.n	8002382 <KlebotScheduler+0x36>
	else if(SubProgramStatus == NO_PROGRAM_SET)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <KlebotScheduler+0x36>
		ConnectionBlinkLED();
 800237e:	f7ff ffc1 	bl	8002304 <ConnectionBlinkLED>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000314 	.word	0x20000314

08002390 <Radio_NewCommandReceivedCallback>:


/* Callback from klebot_radio, forwards data if currently selected commands source is radio */
void Radio_NewCommandReceivedCallback(uint8_t *command, uint8_t length)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
	if(RADIO_DATA_SOURCE == CommandSource)
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <Radio_NewCommandReceivedCallback+0x28>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <Radio_NewCommandReceivedCallback+0x1e>
	{
		Parser_Klebot(command, length);
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fdf3 	bl	8001f94 <Parser_Klebot>
	}
	else
	{

	}
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000030c 	.word	0x2000030c

080023bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80023c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80023d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80023dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00b      	beq.n	80023fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80023e4:	e000      	b.n	80023e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80023e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80023e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f9      	beq.n	80023e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80023f2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80023fc:	687b      	ldr	r3, [r7, #4]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800240c:	f001 fa24 	bl	8003858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002410:	f000 f82e 	bl	8002470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002414:	f7ff fc60 	bl	8001cd8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002418:	f7ff fd14 	bl	8001e44 <MX_I2C1_Init>
  MX_SPI3_Init();
 800241c:	f000 fd56 	bl	8002ecc <MX_SPI3_Init>
  MX_TIM1_Init();
 8002420:	f000 ff18 	bl	8003254 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002424:	f000 ff6e 	bl	8003304 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002428:	f001 f802 	bl	8003430 <MX_TIM4_Init>
  MX_TIM7_Init();
 800242c:	f001 f854 	bl	80034d8 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8002430:	f001 f978 	bl	8003724 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //DRV8836_Init(&MotorDriver1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800243a:	480a      	ldr	r0, [pc, #40]	; (8002464 <main+0x5c>)
 800243c:	f001 fd24 	bl	8003e88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002446:	4807      	ldr	r0, [pc, #28]	; (8002464 <main+0x5c>)
 8002448:	f001 fd1e 	bl	8003e88 <HAL_GPIO_WritePin>

  //MotorEnc_Init(&MotorEncoderA, &htim4);
  Motors_Init();
 800244c:	f7fe ffc4 	bl	80013d8 <Motors_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <main+0x60>)
 8002452:	f003 f9c5 	bl	80057e0 <HAL_TIM_Base_Start_IT>



  Radio_Init(&hspi3);
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <main+0x64>)
 8002458:	f7ff fdd6 	bl	8002008 <Radio_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  KlebotScheduler();
 800245c:	f7ff ff76 	bl	800234c <KlebotScheduler>
 8002460:	e7fc      	b.n	800245c <main+0x54>
 8002462:	bf00      	nop
 8002464:	40011000 	.word	0x40011000
 8002468:	20000458 	.word	0x20000458
 800246c:	20000324 	.word	0x20000324

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b094      	sub	sp, #80	; 0x50
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 0318 	add.w	r3, r7, #24
 800247a:	2238      	movs	r2, #56	; 0x38
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f005 f857 	bl	8007532 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002492:	2301      	movs	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800249a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800249c:	2301      	movs	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024a0:	2301      	movs	r3, #1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a8:	2302      	movs	r3, #2
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024bc:	f107 0318 	add.w	r3, r7, #24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 fe6f 	bl	80041a4 <HAL_RCC_OscConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80024cc:	f000 f84d 	bl	800256a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d0:	230f      	movs	r3, #15
 80024d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d4:	2302      	movs	r3, #2
 80024d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	2102      	movs	r1, #2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 f970 	bl	80047d0 <HAL_RCC_ClockConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80024f6:	f000 f838 	bl	800256a <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80024fa:	4b03      	ldr	r3, [pc, #12]	; (8002508 <SystemClock_Config+0x98>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3750      	adds	r7, #80	; 0x50
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	42420070 	.word	0x42420070

0800250c <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff50 	bl	80023bc <ITM_SendChar>

	return ch;
 800251c:	687b      	ldr	r3, [r7, #4]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_TIM_PeriodElapsedCallback>:
		return 0;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Motors_EncoderSample();
 800253a:	f7fe ffe3 	bl	8001504 <Motors_EncoderSample>
//		//USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d;", MotorEncoderA.Velocity );
//		//USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d;",(int16_t) MotorEncoderA.Position );
//		HAL_UART_Transmit(&huart2, USB_Buffer, USB_Buffer_Length, 500);

	}
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40001400 	.word	0x40001400

0800254c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 800255e:	f7ff fe7f 	bl	8002260 <Radio_HandlerIRQ>

	}
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256e:	b672      	cpsid	i
}
 8002570:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002572:	e7fe      	b.n	8002572 <Error_Handler+0x8>

08002574 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f001 f9cb 	bl	800391c <HAL_Delay>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <nRF24_SendSpi+0x28>)
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	f002 fbc5 	bl	8004d38 <HAL_SPI_Transmit>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000318 	.word	0x20000318

080025bc <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <nRF24_ReadSpi+0x28>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	f002 fcf2 	bl	8004fbe <HAL_SPI_Receive>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000318 	.word	0x20000318

080025e8 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80025f6:	2200      	movs	r2, #0
 80025f8:	2104      	movs	r1, #4
 80025fa:	480c      	ldr	r0, [pc, #48]	; (800262c <nRF24_ReadRegister+0x44>)
 80025fc:	f001 fc44 	bl	8003e88 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ffc3 	bl	8002590 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800260a:	f107 030f 	add.w	r3, r7, #15
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ffd3 	bl	80025bc <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8002616:	2201      	movs	r2, #1
 8002618:	2104      	movs	r1, #4
 800261a:	4804      	ldr	r0, [pc, #16]	; (800262c <nRF24_ReadRegister+0x44>)
 800261c:	f001 fc34 	bl	8003e88 <HAL_GPIO_WritePin>

	return result;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40011400 	.word	0x40011400

08002630 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	4613      	mov	r3, r2
 800263e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002644:	2200      	movs	r2, #0
 8002646:	2104      	movs	r1, #4
 8002648:	480a      	ldr	r0, [pc, #40]	; (8002674 <nRF24_ReadRegisters+0x44>)
 800264a:	f001 fc1d 	bl	8003e88 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff9c 	bl	8002590 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8002658:	79bb      	ldrb	r3, [r7, #6]
 800265a:	4619      	mov	r1, r3
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	f7ff ffad 	bl	80025bc <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8002662:	2201      	movs	r2, #1
 8002664:	2104      	movs	r1, #4
 8002666:	4803      	ldr	r0, [pc, #12]	; (8002674 <nRF24_ReadRegisters+0x44>)
 8002668:	f001 fc0e 	bl	8003e88 <HAL_GPIO_WritePin>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40011400 	.word	0x40011400

08002678 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	460a      	mov	r2, r1
 8002682:	71fb      	strb	r3, [r7, #7]
 8002684:	4613      	mov	r3, r2
 8002686:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f043 0320 	orr.w	r3, r3, #32
 800268e:	b2db      	uxtb	r3, r3
 8002690:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8002692:	79bb      	ldrb	r3, [r7, #6]
 8002694:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8002696:	2200      	movs	r2, #0
 8002698:	2104      	movs	r1, #4
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <nRF24_WriteRegister+0x48>)
 800269c:	f001 fbf4 	bl	8003e88 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	2102      	movs	r1, #2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff72 	bl	8002590 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80026ac:	2201      	movs	r2, #1
 80026ae:	2104      	movs	r1, #4
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <nRF24_WriteRegister+0x48>)
 80026b2:	f001 fbe9 	bl	8003e88 <HAL_GPIO_WritePin>
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40011400 	.word	0x40011400

080026c4 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80026de:	2200      	movs	r2, #0
 80026e0:	2104      	movs	r1, #4
 80026e2:	480b      	ldr	r0, [pc, #44]	; (8002710 <nRF24_WriteRegisters+0x4c>)
 80026e4:	f001 fbd0 	bl	8003e88 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80026e8:	1dfb      	adds	r3, r7, #7
 80026ea:	2101      	movs	r1, #1
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff4f 	bl	8002590 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 80026f2:	79bb      	ldrb	r3, [r7, #6]
 80026f4:	4619      	mov	r1, r3
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f7ff ff4a 	bl	8002590 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80026fc:	2201      	movs	r2, #1
 80026fe:	2104      	movs	r1, #4
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <nRF24_WriteRegisters+0x4c>)
 8002702:	f001 fbc1 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40011400 	.word	0x40011400

08002714 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 800271a:	f000 f829 	bl	8002770 <nRF24_ReadConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8002722:	4911      	ldr	r1, [pc, #68]	; (8002768 <nRF24_RX_Mode+0x54>)
 8002724:	2000      	movs	r0, #0
 8002726:	f000 f9b6 	bl	8002a96 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f81f 	bl	8002780 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002742:	2070      	movs	r0, #112	; 0x70
 8002744:	f000 f877 	bl	8002836 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8002748:	f000 f884 	bl	8002854 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800274c:	f000 f89c 	bl	8002888 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8002750:	2201      	movs	r2, #1
 8002752:	2110      	movs	r1, #16
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <nRF24_RX_Mode+0x58>)
 8002756:	f001 fb97 	bl	8003e88 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 800275a:	2001      	movs	r0, #1
 800275c:	f7ff ff0a 	bl	8002574 <nRF24_Delay_ms>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	2000031c 	.word	0x2000031c
 800276c:	40010c00 	.word	0x40010c00

08002770 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002774:	2000      	movs	r0, #0
 8002776:	f7ff ff37 	bl	80025e8 <nRF24_ReadRegister>
 800277a:	4603      	mov	r3, r0
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}

08002780 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	4619      	mov	r1, r3
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff ff72 	bl	8002678 <nRF24_WriteRegister>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80027a6:	2006      	movs	r0, #6
 80027a8:	f7ff ff1e 	bl	80025e8 <nRF24_ReadRegister>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	b25a      	sxtb	r2, r3
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4619      	mov	r1, r3
 80027cc:	2006      	movs	r0, #6
 80027ce:	f7ff ff53 	bl	8002678 <nRF24_WriteRegister>
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80027e4:	2006      	movs	r0, #6
 80027e6:	f7ff feff 	bl	80025e8 <nRF24_ReadRegister>
 80027ea:	4603      	mov	r3, r0
 80027ec:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80027f4:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d104      	bne.n	8002806 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	f043 0320 	orr.w	r3, r3, #32
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e006      	b.n	8002814 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d103      	bne.n	8002814 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	4619      	mov	r1, r3
 8002818:	2006      	movs	r0, #6
 800281a:	f7ff ff2d 	bl	8002678 <nRF24_WriteRegister>
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800282a:	2007      	movs	r0, #7
 800282c:	f7ff fedc 	bl	80025e8 <nRF24_ReadRegister>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	bd80      	pop	{r7, pc}

08002836 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4619      	mov	r1, r3
 8002844:	2007      	movs	r0, #7
 8002846:	f7ff ff17 	bl	8002678 <nRF24_WriteRegister>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800285a:	23e2      	movs	r3, #226	; 0xe2
 800285c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800285e:	2200      	movs	r2, #0
 8002860:	2104      	movs	r1, #4
 8002862:	4808      	ldr	r0, [pc, #32]	; (8002884 <nRF24_FlushRX+0x30>)
 8002864:	f001 fb10 	bl	8003e88 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002868:	1dfb      	adds	r3, r7, #7
 800286a:	2101      	movs	r1, #1
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fe8f 	bl	8002590 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002872:	2201      	movs	r2, #1
 8002874:	2104      	movs	r1, #4
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <nRF24_FlushRX+0x30>)
 8002878:	f001 fb06 	bl	8003e88 <HAL_GPIO_WritePin>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40011400 	.word	0x40011400

08002888 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800288e:	23e1      	movs	r3, #225	; 0xe1
 8002890:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002892:	2200      	movs	r2, #0
 8002894:	2104      	movs	r1, #4
 8002896:	4808      	ldr	r0, [pc, #32]	; (80028b8 <nRF24_FlushTX+0x30>)
 8002898:	f001 faf6 	bl	8003e88 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800289c:	1dfb      	adds	r3, r7, #7
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fe75 	bl	8002590 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80028a6:	2201      	movs	r2, #1
 80028a8:	2104      	movs	r1, #4
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <nRF24_FlushTX+0x30>)
 80028ac:	f001 faec 	bl	8003e88 <HAL_GPIO_WritePin>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40011400 	.word	0x40011400

080028bc <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80028c6:	f7ff ff53 	bl	8002770 <nRF24_ReadConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	f043 0308 	orr.w	r3, r3, #8
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e003      	b.n	80028e6 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	f023 0308 	bic.w	r3, r3, #8
 80028e4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff49 	bl	8002780 <nRF24_WriteConfig>
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002900:	f7ff ff36 	bl	8002770 <nRF24_ReadConfig>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d104      	bne.n	8002918 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	73fb      	strb	r3, [r7, #15]
 8002916:	e003      	b.n	8002920 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	f023 0304 	bic.w	r3, r3, #4
 800291e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff2c 	bl	8002780 <nRF24_WriteConfig>
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	460a      	mov	r2, r1
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	b25a      	sxtb	r2, r3
 8002946:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	b25b      	sxtb	r3, r3
 8002950:	4313      	orrs	r3, r2
 8002952:	b25b      	sxtb	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	2004      	movs	r0, #4
 800295a:	f7ff fe8d 	bl	8002678 <nRF24_WriteRegister>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	2005      	movs	r0, #5
 800297c:	f7ff fe7c 	bl	8002678 <nRF24_WriteRegister>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	460a      	mov	r2, r1
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d901      	bls.n	80029a2 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800299e:	2305      	movs	r3, #5
 80029a0:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80029a2:	2002      	movs	r0, #2
 80029a4:	f7ff fe20 	bl	80025e8 <nRF24_ReadRegister>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80029ac:	79bb      	ldrb	r3, [r7, #6]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10a      	bne.n	80029c8 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2201      	movs	r2, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	b25a      	sxtb	r2, r3
 80029bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e00b      	b.n	80029e0 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	2201      	movs	r2, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	b25b      	sxtb	r3, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	b25a      	sxtb	r2, r3
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4013      	ands	r3, r2
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	4619      	mov	r1, r3
 80029e4:	2002      	movs	r0, #2
 80029e6:	f7ff fe47 	bl	8002678 <nRF24_WriteRegister>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	460a      	mov	r2, r1
 80029fc:	71fb      	strb	r3, [r7, #7]
 80029fe:	4613      	mov	r3, r2
 8002a00:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d901      	bls.n	8002a0c <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002a08:	2305      	movs	r3, #5
 8002a0a:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7ff fdeb 	bl	80025e8 <nRF24_ReadRegister>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002a16:	79bb      	ldrb	r3, [r7, #6]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10a      	bne.n	8002a32 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	b25a      	sxtb	r2, r3
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e00b      	b.n	8002a4a <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2201      	movs	r2, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	b25b      	sxtb	r3, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	b25a      	sxtb	r2, r3
 8002a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f7ff fe12 	bl	8002678 <nRF24_WriteRegister>
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d901      	bls.n	8002a70 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002a6c:	2305      	movs	r3, #5
 8002a6e:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d801      	bhi.n	8002a7a <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8002a76:	2303      	movs	r3, #3
 8002a78:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	3b02      	subs	r3, #2
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f7ff fdf5 	bl	8002678 <nRF24_WriteRegister>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	6039      	str	r1, [r7, #0]
 8002aa0:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <nRF24_SetRXAddress+0x18>
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d11d      	bne.n	8002aea <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	e00d      	b.n	8002ad0 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	441a      	add	r2, r3
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	f1c3 0302 	rsb	r3, r3, #2
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	443b      	add	r3, r7
 8002ac6:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	3301      	adds	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d9ee      	bls.n	8002ab4 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	330a      	adds	r3, #10
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f107 010c 	add.w	r1, r7, #12
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fdee 	bl	80026c4 <nRF24_WriteRegisters>
	{
 8002ae8:	e00a      	b.n	8002b00 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	330a      	adds	r3, #10
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3302      	adds	r3, #2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fdbd 	bl	8002678 <nRF24_WriteRegister>
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	2203      	movs	r2, #3
 8002b16:	4619      	mov	r1, r3
 8002b18:	200a      	movs	r0, #10
 8002b1a:	f7ff fd89 	bl	8002630 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e00c      	b.n	8002b3e <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	f1c3 0302 	rsb	r3, r3, #2
 8002b2c:	3210      	adds	r2, #16
 8002b2e:	443a      	add	r2, r7
 8002b30:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002b34:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <nRF24_SetTXAddress+0x88>)
 8002b36:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d9ef      	bls.n	8002b24 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	e00d      	b.n	8002b66 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	441a      	add	r2, r3
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	f1c3 0302 	rsb	r3, r3, #2
 8002b56:	7812      	ldrb	r2, [r2, #0]
 8002b58:	3310      	adds	r3, #16
 8002b5a:	443b      	add	r3, r7
 8002b5c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	3301      	adds	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d9ee      	bls.n	8002b4a <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	2203      	movs	r2, #3
 8002b72:	4619      	mov	r1, r3
 8002b74:	200a      	movs	r0, #10
 8002b76:	f7ff fda5 	bl	80026c4 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	2203      	movs	r2, #3
 8002b80:	4619      	mov	r1, r3
 8002b82:	2010      	movs	r0, #16
 8002b84:	f7ff fd9e 	bl	80026c4 <nRF24_WriteRegisters>

}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2000031c 	.word	0x2000031c

08002b94 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002b9a:	f7ff fe44 	bl	8002826 <nRF24_ReadStatus>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ba8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe42 	bl	8002836 <nRF24_WriteStatus>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8002bc4:	2060      	movs	r0, #96	; 0x60
 8002bc6:	f7ff fd0f 	bl	80025e8 <nRF24_ReadRegister>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d906      	bls.n	8002be2 <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8002bd4:	f7ff fe3e 	bl	8002854 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f7ff fccb 	bl	8002574 <nRF24_Delay_ms>
        return 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 8002be2:	79fb      	ldrb	r3, [r7, #7]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002bf6:	f7ff fdbb 	bl	8002770 <nRF24_ReadConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e003      	b.n	8002c16 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c14:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fdb1 	bl	8002780 <nRF24_WriteConfig>
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002c30:	f7ff fd9e 	bl	8002770 <nRF24_ReadConfig>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	f043 0320 	orr.w	r3, r3, #32
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	e003      	b.n	8002c50 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	f023 0320 	bic.w	r3, r3, #32
 8002c4e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fd94 	bl	8002780 <nRF24_WriteConfig>
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002c6a:	f7ff fd81 	bl	8002770 <nRF24_ReadConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	f043 0310 	orr.w	r3, r3, #16
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e003      	b.n	8002c8a <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	f023 0310 	bic.w	r3, r3, #16
 8002c88:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fd77 	bl	8002780 <nRF24_WriteConfig>
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8002ca4:	f7ff ff89 	bl	8002bba <nRF24_GetDynamicPayloadSize>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	2061      	movs	r0, #97	; 0x61
 8002cba:	f7ff fcb9 	bl	8002630 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <nRF24_IRQ_Handler+0x14>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000322 	.word	0x20000322

08002ce0 <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <nRF24_IRQ_Read+0x7c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d130      	bne.n	8002d52 <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <nRF24_IRQ_Read+0x7c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 8002cf6:	f7ff fd96 	bl	8002826 <nRF24_ReadStatus>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 8002d02:	79bb      	ldrb	r3, [r7, #6]
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d006      	beq.n	8002d1a <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <nRF24_IRQ_Read+0x80>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d18:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 8002d1a:	79bb      	ldrb	r3, [r7, #6]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <nRF24_IRQ_Read+0x84>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f043 0320 	orr.w	r3, r3, #32
 8002d30:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 8002d32:	79bb      	ldrb	r3, [r7, #6]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <nRF24_IRQ_Read+0x88>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f043 0310 	orr.w	r3, r3, #16
 8002d48:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fd72 	bl	8002836 <nRF24_WriteStatus>
	}
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000322 	.word	0x20000322
 8002d60:	2000031f 	.word	0x2000031f
 8002d64:	20000320 	.word	0x20000320
 8002d68:	20000321 	.word	0x20000321

08002d6c <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8002d70:	f7ff ffb6 	bl	8002ce0 <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <nRF24_Event+0x44>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8002d7c:	f7ff fa8c 	bl	8002298 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <nRF24_Event+0x44>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <nRF24_Event+0x48>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 8002d8e:	f7ff fa73 	bl	8002278 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <nRF24_Event+0x48>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <nRF24_Event+0x4c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 8002da0:	f7ff faa4 	bl	80022ec <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <nRF24_Event+0x4c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
	}
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2000031f 	.word	0x2000031f
 8002db4:	20000320 	.word	0x20000320
 8002db8:	20000321 	.word	0x20000321

08002dbc <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002dc4:	4a2e      	ldr	r2, [pc, #184]	; (8002e80 <nRF24_Init+0xc4>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2110      	movs	r1, #16
 8002dce:	482d      	ldr	r0, [pc, #180]	; (8002e84 <nRF24_Init+0xc8>)
 8002dd0:	f001 f85a 	bl	8003e88 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	482b      	ldr	r0, [pc, #172]	; (8002e88 <nRF24_Init+0xcc>)
 8002dda:	f001 f855 	bl	8003e88 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 8002dde:	2005      	movs	r0, #5
 8002de0:	f7ff fbc8 	bl	8002574 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002de4:	2003      	movs	r0, #3
 8002de6:	f7ff fcd9 	bl	800279c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8002dea:	2002      	movs	r0, #2
 8002dec:	f7ff fcf5 	bl	80027da <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7ff fd63 	bl	80028bc <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7ff fd7d 	bl	80028f6 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002dfc:	2107      	movs	r1, #7
 8002dfe:	2004      	movs	r0, #4
 8002e00:	f7ff fd96 	bl	8002930 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002e04:	201d      	movs	r0, #29
 8002e06:	f7ff fbef 	bl	80025e8 <nRF24_ReadRegister>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	201d      	movs	r0, #29
 8002e16:	f7ff fc2f 	bl	8002678 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002e1a:	213f      	movs	r1, #63	; 0x3f
 8002e1c:	201c      	movs	r0, #28
 8002e1e:	f7ff fc2b 	bl	8002678 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8002e22:	200a      	movs	r0, #10
 8002e24:	f7ff fd9f 	bl	8002966 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7ff fdac 	bl	8002988 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002e30:	2101      	movs	r1, #1
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff fddd 	bl	80029f2 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002e38:	2003      	movs	r0, #3
 8002e3a:	f7ff fe0f 	bl	8002a5c <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f7ff fb98 	bl	8002574 <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7ff fed1 	bl	8002bec <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f7ff feeb 	bl	8002c26 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f7ff ff05 	bl	8002c60 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7ff fb8c 	bl	8002574 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8002e5c:	f7ff fe9a 	bl	8002b94 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 8002e60:	201d      	movs	r0, #29
 8002e62:	f7ff fbc1 	bl	80025e8 <nRF24_ReadRegister>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	201d      	movs	r0, #29
 8002e72:	f7ff fc01 	bl	8002678 <nRF24_WriteRegister>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000318 	.word	0x20000318
 8002e84:	40010c00 	.word	0x40010c00
 8002e88:	40011400 	.word	0x40011400

08002e8c <nRF24_WriteAckPayload>:
//
//
//

nRF24_TX_Status nRF24_WriteAckPayload(uint8_t pipe, uint8_t * data, uint8_t size)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	71bb      	strb	r3, [r7, #6]
	if(size > 32)
 8002e9c:	79bb      	ldrb	r3, [r7, #6]
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d901      	bls.n	8002ea6 <nRF24_WriteAckPayload+0x1a>
		return NRF24_NO_TRANSMITTED_PACKET;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00d      	b.n	8002ec2 <nRF24_WriteAckPayload+0x36>

	pipe &= 0x07;
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegisters((NRF24_CMD_W_ACK_PAYLOAD | pipe), data, size);
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	f063 0357 	orn	r3, r3, #87	; 0x57
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	79ba      	ldrb	r2, [r7, #6]
 8002eb8:	6839      	ldr	r1, [r7, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fc02 	bl	80026c4 <nRF24_WriteRegisters>

	return NRF24_TRANSMITTED_PACKET;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <MX_SPI3_Init+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002edc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002f00:	2218      	movs	r2, #24
 8002f02:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002f18:	220a      	movs	r2, #10
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002f1c:	4804      	ldr	r0, [pc, #16]	; (8002f30 <MX_SPI3_Init+0x64>)
 8002f1e:	f001 fe87 	bl	8004c30 <HAL_SPI_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002f28:	f7ff fb1f 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000324 	.word	0x20000324
 8002f34:	40003c00 	.word	0x40003c00

08002f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_SPI_MspInit+0xa8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d13f      	bne.n	8002fd8 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f58:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_SPI_MspInit+0xac>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <HAL_SPI_MspInit+0xac>)
 8002f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f62:	61d3      	str	r3, [r2, #28]
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_SPI_MspInit+0xac>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f70:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <HAL_SPI_MspInit+0xac>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <HAL_SPI_MspInit+0xac>)
 8002f76:	f043 0310 	orr.w	r3, r3, #16
 8002f7a:	6193      	str	r3, [r2, #24]
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_SPI_MspInit+0xac>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 8002f88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4812      	ldr	r0, [pc, #72]	; (8002fe8 <HAL_SPI_MspInit+0xb0>)
 8002f9e:	f000 fdef 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 8002fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <HAL_SPI_MspInit+0xb0>)
 8002fb8:	f000 fde2 	bl	8003b80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_SPI_MspInit+0xb4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd2:	4a06      	ldr	r2, [pc, #24]	; (8002fec <HAL_SPI_MspInit+0xb4>)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40003c00 	.word	0x40003c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40011000 	.word	0x40011000
 8002fec:	40010000 	.word	0x40010000

08002ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_MspInit+0x5c>)
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <HAL_MspInit+0x5c>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6193      	str	r3, [r2, #24]
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_MspInit+0x5c>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_MspInit+0x5c>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4a0e      	ldr	r2, [pc, #56]	; (800304c <HAL_MspInit+0x5c>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	61d3      	str	r3, [r2, #28]
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_MspInit+0x5c>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_MspInit+0x60>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_MspInit+0x60>)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000

08003054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <NMI_Handler+0x4>

0800305a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <HardFault_Handler+0x4>

08003060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <MemManage_Handler+0x4>

08003066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <BusFault_Handler+0x4>

0800306c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003070:	e7fe      	b.n	8003070 <UsageFault_Handler+0x4>

08003072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800309a:	f000 fc23 	bl	80038e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 80030a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030aa:	f000 ff1f 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <TIM7_IRQHandler+0x10>)
 80030ba:	f002 fe1d 	bl	8005cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000458 	.word	0x20000458

080030c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return 1;
 80030cc:	2301      	movs	r3, #1
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <_kill>:

int _kill(int pid, int sig)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030e0:	f004 fa7a 	bl	80075d8 <__errno>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2216      	movs	r2, #22
 80030e8:	601a      	str	r2, [r3, #0]
  return -1;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_exit>:

void _exit (int status)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ffe7 	bl	80030d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003108:	e7fe      	b.n	8003108 <_exit+0x12>

0800310a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e00a      	b.n	8003132 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800311c:	f3af 8000 	nop.w
 8003120:	4601      	mov	r1, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	60ba      	str	r2, [r7, #8]
 8003128:	b2ca      	uxtb	r2, r1
 800312a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3301      	adds	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	dbf0      	blt.n	800311c <_read+0x12>
  }

  return len;
 800313a:	687b      	ldr	r3, [r7, #4]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e009      	b.n	800316a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f9d4 	bl	800250c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	dbf1      	blt.n	8003156 <_write+0x12>
  }
  return len;
 8003172:	687b      	ldr	r3, [r7, #4]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_close>:

int _close(int file)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a2:	605a      	str	r2, [r3, #4]
  return 0;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <_isatty>:

int _isatty(int file)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <_sbrk+0x5c>)
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <_sbrk+0x60>)
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <_sbrk+0x64>)
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <_sbrk+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	429a      	cmp	r2, r3
 800320a:	d207      	bcs.n	800321c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800320c:	f004 f9e4 	bl	80075d8 <__errno>
 8003210:	4603      	mov	r3, r0
 8003212:	220c      	movs	r2, #12
 8003214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e009      	b.n	8003230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <_sbrk+0x64>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <_sbrk+0x64>)
 800322c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20010000 	.word	0x20010000
 800323c:	00001000 	.word	0x00001000
 8003240:	2000037c 	.word	0x2000037c
 8003244:	20000638 	.word	0x20000638

08003248 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08c      	sub	sp, #48	; 0x30
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f004 f965 	bl	8007532 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <MX_TIM1_Init+0xa8>)
 8003272:	4a23      	ldr	r2, [pc, #140]	; (8003300 <MX_TIM1_Init+0xac>)
 8003274:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <MX_TIM1_Init+0xa8>)
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <MX_TIM1_Init+0xa8>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003282:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <MX_TIM1_Init+0xa8>)
 8003284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003288:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <MX_TIM1_Init+0xa8>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <MX_TIM1_Init+0xa8>)
 8003292:	2200      	movs	r2, #0
 8003294:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <MX_TIM1_Init+0xa8>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800329c:	2303      	movs	r3, #3
 800329e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032a4:	2301      	movs	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032b0:	2300      	movs	r3, #0
 80032b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032b4:	2301      	movs	r3, #1
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	4619      	mov	r1, r3
 80032c6:	480d      	ldr	r0, [pc, #52]	; (80032fc <MX_TIM1_Init+0xa8>)
 80032c8:	f002 fbe6 	bl	8005a98 <HAL_TIM_Encoder_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80032d2:	f7ff f94a 	bl	800256a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4806      	ldr	r0, [pc, #24]	; (80032fc <MX_TIM1_Init+0xa8>)
 80032e4:	f003 fa6c 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80032ee:	f7ff f93c 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032f2:	bf00      	nop
 80032f4:	3730      	adds	r7, #48	; 0x30
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000380 	.word	0x20000380
 8003300:	40012c00 	.word	0x40012c00

08003304 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08e      	sub	sp, #56	; 0x38
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800330a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003318:	f107 0320 	add.w	r3, r7, #32
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
 8003330:	615a      	str	r2, [r3, #20]
 8003332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003334:	4b3c      	ldr	r3, [pc, #240]	; (8003428 <MX_TIM3_Init+0x124>)
 8003336:	4a3d      	ldr	r2, [pc, #244]	; (800342c <MX_TIM3_Init+0x128>)
 8003338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800333a:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <MX_TIM3_Init+0x124>)
 800333c:	2201      	movs	r2, #1
 800333e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003340:	4b39      	ldr	r3, [pc, #228]	; (8003428 <MX_TIM3_Init+0x124>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8003346:	4b38      	ldr	r3, [pc, #224]	; (8003428 <MX_TIM3_Init+0x124>)
 8003348:	22ff      	movs	r2, #255	; 0xff
 800334a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800334c:	4b36      	ldr	r3, [pc, #216]	; (8003428 <MX_TIM3_Init+0x124>)
 800334e:	2200      	movs	r2, #0
 8003350:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003352:	4b35      	ldr	r3, [pc, #212]	; (8003428 <MX_TIM3_Init+0x124>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003358:	4833      	ldr	r0, [pc, #204]	; (8003428 <MX_TIM3_Init+0x124>)
 800335a:	f002 f9f1 	bl	8005740 <HAL_TIM_Base_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003364:	f7ff f901 	bl	800256a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800336e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003372:	4619      	mov	r1, r3
 8003374:	482c      	ldr	r0, [pc, #176]	; (8003428 <MX_TIM3_Init+0x124>)
 8003376:	f002 fe89 	bl	800608c <HAL_TIM_ConfigClockSource>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003380:	f7ff f8f3 	bl	800256a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003384:	4828      	ldr	r0, [pc, #160]	; (8003428 <MX_TIM3_Init+0x124>)
 8003386:	f002 fa85 	bl	8005894 <HAL_TIM_PWM_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003390:	f7ff f8eb 	bl	800256a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800339c:	f107 0320 	add.w	r3, r7, #32
 80033a0:	4619      	mov	r1, r3
 80033a2:	4821      	ldr	r0, [pc, #132]	; (8003428 <MX_TIM3_Init+0x124>)
 80033a4:	f003 fa0c 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80033ae:	f7ff f8dc 	bl	800256a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033b2:	2360      	movs	r3, #96	; 0x60
 80033b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80033be:	2304      	movs	r3, #4
 80033c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	2200      	movs	r2, #0
 80033c6:	4619      	mov	r1, r3
 80033c8:	4817      	ldr	r0, [pc, #92]	; (8003428 <MX_TIM3_Init+0x124>)
 80033ca:	f002 fd9d 	bl	8005f08 <HAL_TIM_PWM_ConfigChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80033d4:	f7ff f8c9 	bl	800256a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	2204      	movs	r2, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4812      	ldr	r0, [pc, #72]	; (8003428 <MX_TIM3_Init+0x124>)
 80033e0:	f002 fd92 	bl	8005f08 <HAL_TIM_PWM_ConfigChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80033ea:	f7ff f8be 	bl	800256a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	2208      	movs	r2, #8
 80033f2:	4619      	mov	r1, r3
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <MX_TIM3_Init+0x124>)
 80033f6:	f002 fd87 	bl	8005f08 <HAL_TIM_PWM_ConfigChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8003400:	f7ff f8b3 	bl	800256a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003404:	1d3b      	adds	r3, r7, #4
 8003406:	220c      	movs	r2, #12
 8003408:	4619      	mov	r1, r3
 800340a:	4807      	ldr	r0, [pc, #28]	; (8003428 <MX_TIM3_Init+0x124>)
 800340c:	f002 fd7c 	bl	8005f08 <HAL_TIM_PWM_ConfigChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8003416:	f7ff f8a8 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800341a:	4803      	ldr	r0, [pc, #12]	; (8003428 <MX_TIM3_Init+0x124>)
 800341c:	f000 f93a 	bl	8003694 <HAL_TIM_MspPostInit>

}
 8003420:	bf00      	nop
 8003422:	3738      	adds	r7, #56	; 0x38
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	200003c8 	.word	0x200003c8
 800342c:	40000400 	.word	0x40000400

08003430 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003436:	f107 030c 	add.w	r3, r7, #12
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f004 f877 	bl	8007532 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <MX_TIM4_Init+0xa0>)
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <MX_TIM4_Init+0xa4>)
 8003450:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003452:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <MX_TIM4_Init+0xa0>)
 8003454:	2200      	movs	r2, #0
 8003456:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <MX_TIM4_Init+0xa0>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <MX_TIM4_Init+0xa0>)
 8003460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003464:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <MX_TIM4_Init+0xa0>)
 8003468:	2200      	movs	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <MX_TIM4_Init+0xa0>)
 800346e:	2200      	movs	r2, #0
 8003470:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003472:	2303      	movs	r3, #3
 8003474:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003476:	2302      	movs	r3, #2
 8003478:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800347a:	2301      	movs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800348a:	2301      	movs	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800348e:	2300      	movs	r3, #0
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003496:	f107 030c 	add.w	r3, r7, #12
 800349a:	4619      	mov	r1, r3
 800349c:	480c      	ldr	r0, [pc, #48]	; (80034d0 <MX_TIM4_Init+0xa0>)
 800349e:	f002 fafb 	bl	8005a98 <HAL_TIM_Encoder_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80034a8:	f7ff f85f 	bl	800256a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ac:	2300      	movs	r3, #0
 80034ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4805      	ldr	r0, [pc, #20]	; (80034d0 <MX_TIM4_Init+0xa0>)
 80034ba:	f003 f981 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80034c4:	f7ff f851 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80034c8:	bf00      	nop
 80034ca:	3730      	adds	r7, #48	; 0x30
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000410 	.word	0x20000410
 80034d4:	40000800 	.word	0x40000800

080034d8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034de:	463b      	mov	r3, r7
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <MX_TIM7_Init+0x64>)
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <MX_TIM7_Init+0x68>)
 80034ea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <MX_TIM7_Init+0x64>)
 80034ee:	2247      	movs	r2, #71	; 0x47
 80034f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <MX_TIM7_Init+0x64>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <MX_TIM7_Init+0x64>)
 80034fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80034fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <MX_TIM7_Init+0x64>)
 8003502:	2200      	movs	r2, #0
 8003504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003506:	480d      	ldr	r0, [pc, #52]	; (800353c <MX_TIM7_Init+0x64>)
 8003508:	f002 f91a 	bl	8005740 <HAL_TIM_Base_Init>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003512:	f7ff f82a 	bl	800256a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800351e:	463b      	mov	r3, r7
 8003520:	4619      	mov	r1, r3
 8003522:	4806      	ldr	r0, [pc, #24]	; (800353c <MX_TIM7_Init+0x64>)
 8003524:	f003 f94c 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800352e:	f7ff f81c 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000458 	.word	0x20000458
 8003540:	40001400 	.word	0x40001400

08003544 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 0318 	add.w	r3, r7, #24
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2b      	ldr	r2, [pc, #172]	; (800360c <HAL_TIM_Encoder_MspInit+0xc8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d125      	bne.n	80035b0 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003564:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 800356a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800356e:	6193      	str	r3, [r2, #24]
 8003570:	4b27      	ldr	r3, [pc, #156]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357c:	4b24      	ldr	r3, [pc, #144]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	6193      	str	r3, [r2, #24]
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8003594:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f107 0318 	add.w	r3, r7, #24
 80035a6:	4619      	mov	r1, r3
 80035a8:	481a      	ldr	r0, [pc, #104]	; (8003614 <HAL_TIM_Encoder_MspInit+0xd0>)
 80035aa:	f000 fae9 	bl	8003b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80035ae:	e028      	b.n	8003602 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a18      	ldr	r2, [pc, #96]	; (8003618 <HAL_TIM_Encoder_MspInit+0xd4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d123      	bne.n	8003602 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a14      	ldr	r2, [pc, #80]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	61d3      	str	r3, [r2, #28]
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 80035d8:	f043 0308 	orr.w	r3, r3, #8
 80035dc:	6193      	str	r3, [r2, #24]
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <HAL_TIM_Encoder_MspInit+0xcc>)
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 80035ea:	23c0      	movs	r3, #192	; 0xc0
 80035ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f6:	f107 0318 	add.w	r3, r7, #24
 80035fa:	4619      	mov	r1, r3
 80035fc:	4807      	ldr	r0, [pc, #28]	; (800361c <HAL_TIM_Encoder_MspInit+0xd8>)
 80035fe:	f000 fabf 	bl	8003b80 <HAL_GPIO_Init>
}
 8003602:	bf00      	nop
 8003604:	3728      	adds	r7, #40	; 0x28
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40021000 	.word	0x40021000
 8003614:	40010800 	.word	0x40010800
 8003618:	40000800 	.word	0x40000800
 800361c:	40010c00 	.word	0x40010c00

08003620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_TIM_Base_MspInit+0x68>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10c      	bne.n	800364c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <HAL_TIM_Base_MspInit+0x6c>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <HAL_TIM_Base_MspInit+0x6c>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	61d3      	str	r3, [r2, #28]
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_TIM_Base_MspInit+0x6c>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800364a:	e018      	b.n	800367e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_TIM_Base_MspInit+0x70>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d113      	bne.n	800367e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_TIM_Base_MspInit+0x6c>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a0c      	ldr	r2, [pc, #48]	; (800368c <HAL_TIM_Base_MspInit+0x6c>)
 800365c:	f043 0320 	orr.w	r3, r3, #32
 8003660:	61d3      	str	r3, [r2, #28]
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_TIM_Base_MspInit+0x6c>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2100      	movs	r1, #0
 8003672:	2037      	movs	r0, #55	; 0x37
 8003674:	f000 fa4d 	bl	8003b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003678:	2037      	movs	r0, #55	; 0x37
 800367a:	f000 fa66 	bl	8003b4a <HAL_NVIC_EnableIRQ>
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40000400 	.word	0x40000400
 800368c:	40021000 	.word	0x40021000
 8003690:	40001400 	.word	0x40001400

08003694 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a19      	ldr	r2, [pc, #100]	; (8003714 <HAL_TIM_MspPostInit+0x80>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d12a      	bne.n	800370a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b4:	4b18      	ldr	r3, [pc, #96]	; (8003718 <HAL_TIM_MspPostInit+0x84>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_TIM_MspPostInit+0x84>)
 80036ba:	f043 0310 	orr.w	r3, r3, #16
 80036be:	6193      	str	r3, [r2, #24]
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_TIM_MspPostInit+0x84>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 80036cc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80036d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d6:	2303      	movs	r3, #3
 80036d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036da:	f107 030c 	add.w	r3, r7, #12
 80036de:	4619      	mov	r1, r3
 80036e0:	480e      	ldr	r0, [pc, #56]	; (800371c <HAL_TIM_MspPostInit+0x88>)
 80036e2:	f000 fa4d 	bl	8003b80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_TIM_MspPostInit+0x8c>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	4a06      	ldr	r2, [pc, #24]	; (8003720 <HAL_TIM_MspPostInit+0x8c>)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800370a:	bf00      	nop
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40000400 	.word	0x40000400
 8003718:	40021000 	.word	0x40021000
 800371c:	40011000 	.word	0x40011000
 8003720:	40010000 	.word	0x40010000

08003724 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <MX_USART2_UART_Init+0x50>)
 800372c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 800374a:	220c      	movs	r2, #12
 800374c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 8003756:	2200      	movs	r2, #0
 8003758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800375a:	4805      	ldr	r0, [pc, #20]	; (8003770 <MX_USART2_UART_Init+0x4c>)
 800375c:	f003 f8a8 	bl	80068b0 <HAL_UART_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003766:	f7fe ff00 	bl	800256a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200004a0 	.word	0x200004a0
 8003774:	40004400 	.word	0x40004400

08003778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_UART_MspInit+0x88>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d12f      	bne.n	80037f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_UART_MspInit+0x8c>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_UART_MspInit+0x8c>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	61d3      	str	r3, [r2, #28]
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <HAL_UART_MspInit+0x8c>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <HAL_UART_MspInit+0x8c>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <HAL_UART_MspInit+0x8c>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6193      	str	r3, [r2, #24]
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_UART_MspInit+0x8c>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037c8:	2304      	movs	r3, #4
 80037ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037d0:	2303      	movs	r3, #3
 80037d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d4:	f107 0310 	add.w	r3, r7, #16
 80037d8:	4619      	mov	r1, r3
 80037da:	480b      	ldr	r0, [pc, #44]	; (8003808 <HAL_UART_MspInit+0x90>)
 80037dc:	f000 f9d0 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037e0:	2308      	movs	r3, #8
 80037e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ec:	f107 0310 	add.w	r3, r7, #16
 80037f0:	4619      	mov	r1, r3
 80037f2:	4805      	ldr	r0, [pc, #20]	; (8003808 <HAL_UART_MspInit+0x90>)
 80037f4:	f000 f9c4 	bl	8003b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80037f8:	bf00      	nop
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40004400 	.word	0x40004400
 8003804:	40021000 	.word	0x40021000
 8003808:	40010800 	.word	0x40010800

0800380c <Reset_Handler>:
 800380c:	f7ff fd1c 	bl	8003248 <SystemInit>
 8003810:	480b      	ldr	r0, [pc, #44]	; (8003840 <LoopFillZerobss+0xe>)
 8003812:	490c      	ldr	r1, [pc, #48]	; (8003844 <LoopFillZerobss+0x12>)
 8003814:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <LoopFillZerobss+0x16>)
 8003816:	2300      	movs	r3, #0
 8003818:	e002      	b.n	8003820 <LoopCopyDataInit>

0800381a <CopyDataInit>:
 800381a:	58d4      	ldr	r4, [r2, r3]
 800381c:	50c4      	str	r4, [r0, r3]
 800381e:	3304      	adds	r3, #4

08003820 <LoopCopyDataInit>:
 8003820:	18c4      	adds	r4, r0, r3
 8003822:	428c      	cmp	r4, r1
 8003824:	d3f9      	bcc.n	800381a <CopyDataInit>
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <LoopFillZerobss+0x1a>)
 8003828:	4c09      	ldr	r4, [pc, #36]	; (8003850 <LoopFillZerobss+0x1e>)
 800382a:	2300      	movs	r3, #0
 800382c:	e001      	b.n	8003832 <LoopFillZerobss>

0800382e <FillZerobss>:
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	3204      	adds	r2, #4

08003832 <LoopFillZerobss>:
 8003832:	42a2      	cmp	r2, r4
 8003834:	d3fb      	bcc.n	800382e <FillZerobss>
 8003836:	f003 fed5 	bl	80075e4 <__libc_init_array>
 800383a:	f7fe fde5 	bl	8002408 <main>
 800383e:	4770      	bx	lr
 8003840:	20000000 	.word	0x20000000
 8003844:	200001fc 	.word	0x200001fc
 8003848:	08009794 	.word	0x08009794
 800384c:	200001fc 	.word	0x200001fc
 8003850:	20000638 	.word	0x20000638

08003854 <ADC1_2_IRQHandler>:
 8003854:	e7fe      	b.n	8003854 <ADC1_2_IRQHandler>
	...

08003858 <HAL_Init>:
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_Init+0x28>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a07      	ldr	r2, [pc, #28]	; (8003880 <HAL_Init+0x28>)
 8003862:	f043 0310 	orr.w	r3, r3, #16
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	2003      	movs	r0, #3
 800386a:	f000 f947 	bl	8003afc <HAL_NVIC_SetPriorityGrouping>
 800386e:	200f      	movs	r0, #15
 8003870:	f000 f808 	bl	8003884 <HAL_InitTick>
 8003874:	f7ff fbbc 	bl	8002ff0 <HAL_MspInit>
 8003878:	2300      	movs	r3, #0
 800387a:	4618      	mov	r0, r3
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40022000 	.word	0x40022000

08003884 <HAL_InitTick>:
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_InitTick+0x54>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_InitTick+0x58>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	4619      	mov	r1, r3
 8003896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800389a:	fbb3 f3f1 	udiv	r3, r3, r1
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f95f 	bl	8003b66 <HAL_SYSTICK_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_InitTick+0x2e>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00e      	b.n	80038d0 <HAL_InitTick+0x4c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b0f      	cmp	r3, #15
 80038b6:	d80a      	bhi.n	80038ce <HAL_InitTick+0x4a>
 80038b8:	2200      	movs	r2, #0
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	f000 f927 	bl	8003b12 <HAL_NVIC_SetPriority>
 80038c4:	4a06      	ldr	r2, [pc, #24]	; (80038e0 <HAL_InitTick+0x5c>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_InitTick+0x4c>
 80038ce:	2301      	movs	r3, #1
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000028 	.word	0x20000028
 80038dc:	20000030 	.word	0x20000030
 80038e0:	2000002c 	.word	0x2000002c

080038e4 <HAL_IncTick>:
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_IncTick+0x1c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_IncTick+0x20>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4413      	add	r3, r2
 80038f4:	4a03      	ldr	r2, [pc, #12]	; (8003904 <HAL_IncTick+0x20>)
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	20000030 	.word	0x20000030
 8003904:	200004e8 	.word	0x200004e8

08003908 <HAL_GetTick>:
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
 800390c:	4b02      	ldr	r3, [pc, #8]	; (8003918 <HAL_GetTick+0x10>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	200004e8 	.word	0x200004e8

0800391c <HAL_Delay>:
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	f7ff fff0 	bl	8003908 <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d005      	beq.n	8003942 <HAL_Delay+0x26>
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_Delay+0x44>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	bf00      	nop
 8003944:	f7ff ffe0 	bl	8003908 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	429a      	cmp	r2, r3
 8003952:	d8f7      	bhi.n	8003944 <HAL_Delay+0x28>
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000030 	.word	0x20000030

08003964 <__NVIC_SetPriorityGrouping>:
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	021a      	lsls	r2, r3, #8
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
 800398c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_GetPriorityGrouping>:
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4906      	ldr	r1, [pc, #24]	; (80039fc <__NVIC_EnableIRQ+0x34>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	e000e100 	.word	0xe000e100

08003a00 <__NVIC_SetPriority>:
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	71fb      	strb	r3, [r7, #7]
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	db0a      	blt.n	8003a2a <__NVIC_SetPriority+0x2a>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	490c      	ldr	r1, [pc, #48]	; (8003a4c <__NVIC_SetPriority+0x4c>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	440b      	add	r3, r1
 8003a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003a28:	e00a      	b.n	8003a40 <__NVIC_SetPriority+0x40>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4908      	ldr	r1, [pc, #32]	; (8003a50 <__NVIC_SetPriority+0x50>)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3b04      	subs	r3, #4
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	761a      	strb	r2, [r3, #24]
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000e100 	.word	0xe000e100
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <NVIC_EncodePriority>:
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f1c3 0307 	rsb	r3, r3, #7
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf28      	it	cs
 8003a72:	2304      	movcs	r3, #4
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d902      	bls.n	8003a84 <NVIC_EncodePriority+0x30>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3b03      	subs	r3, #3
 8003a82:	e000      	b.n	8003a86 <NVIC_EncodePriority+0x32>
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	401a      	ands	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	400b      	ands	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <SysTick_Config>:
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac8:	d301      	bcc.n	8003ace <SysTick_Config+0x16>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e00f      	b.n	8003aee <SysTick_Config+0x36>
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <SysTick_Config+0x40>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	6053      	str	r3, [r2, #4]
 8003ad6:	210f      	movs	r1, #15
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	f7ff ff90 	bl	8003a00 <__NVIC_SetPriority>
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <SysTick_Config+0x40>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <SysTick_Config+0x40>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	2300      	movs	r3, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	e000e010 	.word	0xe000e010

08003afc <HAL_NVIC_SetPriorityGrouping>:
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff2d 	bl	8003964 <__NVIC_SetPriorityGrouping>
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_SetPriority>:
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	f7ff ff42 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003b28:	6178      	str	r0, [r7, #20]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff90 	bl	8003a54 <NVIC_EncodePriority>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff5f 	bl	8003a00 <__NVIC_SetPriority>
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_EnableIRQ>:
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	71fb      	strb	r3, [r7, #7]
 8003b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff35 	bl	80039c8 <__NVIC_EnableIRQ>
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ffa2 	bl	8003ab8 <SysTick_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_GPIO_Init>:
 8003b80:	b480      	push	{r7}
 8003b82:	b08b      	sub	sp, #44	; 0x2c
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
 8003b92:	e169      	b.n	8003e68 <HAL_GPIO_Init+0x2e8>
 8003b94:	2201      	movs	r2, #1
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	f040 8158 	bne.w	8003e62 <HAL_GPIO_Init+0x2e2>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a9a      	ldr	r2, [pc, #616]	; (8003e20 <HAL_GPIO_Init+0x2a0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d05e      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bbc:	4a98      	ldr	r2, [pc, #608]	; (8003e20 <HAL_GPIO_Init+0x2a0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d875      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bc2:	4a98      	ldr	r2, [pc, #608]	; (8003e24 <HAL_GPIO_Init+0x2a4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d058      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bc8:	4a96      	ldr	r2, [pc, #600]	; (8003e24 <HAL_GPIO_Init+0x2a4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d86f      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bce:	4a96      	ldr	r2, [pc, #600]	; (8003e28 <HAL_GPIO_Init+0x2a8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d052      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bd4:	4a94      	ldr	r2, [pc, #592]	; (8003e28 <HAL_GPIO_Init+0x2a8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d869      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bda:	4a94      	ldr	r2, [pc, #592]	; (8003e2c <HAL_GPIO_Init+0x2ac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04c      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003be0:	4a92      	ldr	r2, [pc, #584]	; (8003e2c <HAL_GPIO_Init+0x2ac>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d863      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003be6:	4a92      	ldr	r2, [pc, #584]	; (8003e30 <HAL_GPIO_Init+0x2b0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d046      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bec:	4a90      	ldr	r2, [pc, #576]	; (8003e30 <HAL_GPIO_Init+0x2b0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d85d      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bf2:	2b12      	cmp	r3, #18
 8003bf4:	d82a      	bhi.n	8003c4c <HAL_GPIO_Init+0xcc>
 8003bf6:	2b12      	cmp	r3, #18
 8003bf8:	d859      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <HAL_GPIO_Init+0x80>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c7b 	.word	0x08003c7b
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003c67 	.word	0x08003c67
 8003c0c:	08003ca9 	.word	0x08003ca9
 8003c10:	08003caf 	.word	0x08003caf
 8003c14:	08003caf 	.word	0x08003caf
 8003c18:	08003caf 	.word	0x08003caf
 8003c1c:	08003caf 	.word	0x08003caf
 8003c20:	08003caf 	.word	0x08003caf
 8003c24:	08003caf 	.word	0x08003caf
 8003c28:	08003caf 	.word	0x08003caf
 8003c2c:	08003caf 	.word	0x08003caf
 8003c30:	08003caf 	.word	0x08003caf
 8003c34:	08003caf 	.word	0x08003caf
 8003c38:	08003caf 	.word	0x08003caf
 8003c3c:	08003caf 	.word	0x08003caf
 8003c40:	08003caf 	.word	0x08003caf
 8003c44:	08003c5d 	.word	0x08003c5d
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	4a79      	ldr	r2, [pc, #484]	; (8003e34 <HAL_GPIO_Init+0x2b4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003c52:	e02c      	b.n	8003cae <HAL_GPIO_Init+0x12e>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	e029      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	3304      	adds	r3, #4
 8003c62:	623b      	str	r3, [r7, #32]
 8003c64:	e024      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	e01f      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	330c      	adds	r3, #12
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	e01a      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <HAL_GPIO_Init+0x108>
 8003c82:	2304      	movs	r3, #4
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	e013      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_GPIO_Init+0x11c>
 8003c90:	2308      	movs	r3, #8
 8003c92:	623b      	str	r3, [r7, #32]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	611a      	str	r2, [r3, #16]
 8003c9a:	e009      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	615a      	str	r2, [r3, #20]
 8003ca6:	e003      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	e000      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
 8003cae:	bf00      	nop
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2bff      	cmp	r3, #255	; 0xff
 8003cb4:	d801      	bhi.n	8003cba <HAL_GPIO_Init+0x13a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	e001      	b.n	8003cbe <HAL_GPIO_Init+0x13e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2bff      	cmp	r3, #255	; 0xff
 8003cc4:	d802      	bhi.n	8003ccc <HAL_GPIO_Init+0x14c>
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	e002      	b.n	8003cd2 <HAL_GPIO_Init+0x152>
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	3b08      	subs	r3, #8
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	210f      	movs	r1, #15
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	431a      	orrs	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80b1 	beq.w	8003e62 <HAL_GPIO_Init+0x2e2>
 8003d00:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	4a4c      	ldr	r2, [pc, #304]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6193      	str	r3, [r2, #24]
 8003d0c:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a48      	ldr	r2, [pc, #288]	; (8003e3c <HAL_GPIO_Init+0x2bc>)
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	3302      	adds	r3, #2
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a40      	ldr	r2, [pc, #256]	; (8003e40 <HAL_GPIO_Init+0x2c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_GPIO_Init+0x1ec>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3f      	ldr	r2, [pc, #252]	; (8003e44 <HAL_GPIO_Init+0x2c4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00d      	beq.n	8003d68 <HAL_GPIO_Init+0x1e8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3e      	ldr	r2, [pc, #248]	; (8003e48 <HAL_GPIO_Init+0x2c8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0x1e4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <HAL_GPIO_Init+0x2cc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_GPIO_Init+0x1e0>
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d60:	2304      	movs	r3, #4
 8003d62:	e004      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e002      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	f002 0203 	and.w	r2, r2, #3
 8003d74:	0092      	lsls	r2, r2, #2
 8003d76:	4093      	lsls	r3, r2
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	492f      	ldr	r1, [pc, #188]	; (8003e3c <HAL_GPIO_Init+0x2bc>)
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3302      	adds	r3, #2
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d006      	beq.n	8003da6 <HAL_GPIO_Init+0x226>
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	492c      	ldr	r1, [pc, #176]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x234>
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	4928      	ldr	r1, [pc, #160]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	608b      	str	r3, [r1, #8]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <HAL_GPIO_Init+0x24e>
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	4922      	ldr	r1, [pc, #136]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60cb      	str	r3, [r1, #12]
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x25c>
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	491e      	ldr	r1, [pc, #120]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60cb      	str	r3, [r1, #12]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d006      	beq.n	8003df6 <HAL_GPIO_Init+0x276>
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	4918      	ldr	r1, [pc, #96]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
 8003df4:	e006      	b.n	8003e04 <HAL_GPIO_Init+0x284>
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	4914      	ldr	r1, [pc, #80]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d021      	beq.n	8003e54 <HAL_GPIO_Init+0x2d4>
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	490e      	ldr	r1, [pc, #56]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
 8003e1c:	e021      	b.n	8003e62 <HAL_GPIO_Init+0x2e2>
 8003e1e:	bf00      	nop
 8003e20:	10320000 	.word	0x10320000
 8003e24:	10310000 	.word	0x10310000
 8003e28:	10220000 	.word	0x10220000
 8003e2c:	10210000 	.word	0x10210000
 8003e30:	10120000 	.word	0x10120000
 8003e34:	10110000 	.word	0x10110000
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010800 	.word	0x40010800
 8003e44:	40010c00 	.word	0x40010c00
 8003e48:	40011000 	.word	0x40011000
 8003e4c:	40011400 	.word	0x40011400
 8003e50:	40010400 	.word	0x40010400
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_GPIO_Init+0x304>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	4909      	ldr	r1, [pc, #36]	; (8003e84 <HAL_GPIO_Init+0x304>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	3301      	adds	r3, #1
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f47f ae8e 	bne.w	8003b94 <HAL_GPIO_Init+0x14>
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	372c      	adds	r7, #44	; 0x2c
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	40010400 	.word	0x40010400

08003e88 <HAL_GPIO_WritePin>:
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	807b      	strh	r3, [r7, #2]
 8003e94:	4613      	mov	r3, r2
 8003e96:	707b      	strb	r3, [r7, #1]
 8003e98:	787b      	ldrb	r3, [r7, #1]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_WritePin+0x1e>
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	611a      	str	r2, [r3, #16]
 8003ea4:	e003      	b.n	8003eae <HAL_GPIO_WritePin+0x26>
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	041a      	lsls	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	611a      	str	r2, [r3, #16]
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_GPIO_TogglePin>:
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	041a      	lsls	r2, r3, #16
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	43d9      	mvns	r1, r3
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	400b      	ands	r3, r1
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	611a      	str	r2, [r3, #16]
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_GPIO_EXTI_IRQHandler>:
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	6153      	str	r3, [r2, #20]
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fb1e 	bl	800254c <HAL_GPIO_EXTI_Callback>
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_I2C_Init>:
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_I2C_Init+0x12>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e12b      	b.n	8004186 <HAL_I2C_Init+0x26a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_I2C_Init+0x2c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fd ffac 	bl	8001ea0 <HAL_I2C_MspInit>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2224      	movs	r2, #36	; 0x24
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f000 fe10 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4a81      	ldr	r2, [pc, #516]	; (8004190 <HAL_I2C_Init+0x274>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d807      	bhi.n	8003fa0 <HAL_I2C_Init+0x84>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a80      	ldr	r2, [pc, #512]	; (8004194 <HAL_I2C_Init+0x278>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	bf94      	ite	ls
 8003f98:	2301      	movls	r3, #1
 8003f9a:	2300      	movhi	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e006      	b.n	8003fae <HAL_I2C_Init+0x92>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a7d      	ldr	r2, [pc, #500]	; (8004198 <HAL_I2C_Init+0x27c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	bf94      	ite	ls
 8003fa8:	2301      	movls	r3, #1
 8003faa:	2300      	movhi	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Init+0x9a>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0e7      	b.n	8004186 <HAL_I2C_Init+0x26a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a78      	ldr	r2, [pc, #480]	; (800419c <HAL_I2C_Init+0x280>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	0c9b      	lsrs	r3, r3, #18
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a6a      	ldr	r2, [pc, #424]	; (8004190 <HAL_I2C_Init+0x274>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d802      	bhi.n	8003ff0 <HAL_I2C_Init+0xd4>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3301      	adds	r3, #1
 8003fee:	e009      	b.n	8004004 <HAL_I2C_Init+0xe8>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	4a69      	ldr	r2, [pc, #420]	; (80041a0 <HAL_I2C_Init+0x284>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	099b      	lsrs	r3, r3, #6
 8004002:	3301      	adds	r3, #1
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	430b      	orrs	r3, r1
 800400a:	6213      	str	r3, [r2, #32]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	495c      	ldr	r1, [pc, #368]	; (8004190 <HAL_I2C_Init+0x274>)
 8004020:	428b      	cmp	r3, r1
 8004022:	d819      	bhi.n	8004058 <HAL_I2C_Init+0x13c>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1e59      	subs	r1, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004032:	1c59      	adds	r1, r3, #1
 8004034:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004038:	400b      	ands	r3, r1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_I2C_Init+0x138>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1e59      	subs	r1, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fbb1 f3f3 	udiv	r3, r1, r3
 800404c:	3301      	adds	r3, #1
 800404e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004052:	e051      	b.n	80040f8 <HAL_I2C_Init+0x1dc>
 8004054:	2304      	movs	r3, #4
 8004056:	e04f      	b.n	80040f8 <HAL_I2C_Init+0x1dc>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d111      	bne.n	8004084 <HAL_I2C_Init+0x168>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1e58      	subs	r0, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	440b      	add	r3, r1
 800406e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004072:	3301      	adds	r3, #1
 8004074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e012      	b.n	80040aa <HAL_I2C_Init+0x18e>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1e58      	subs	r0, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	0099      	lsls	r1, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Init+0x196>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e022      	b.n	80040f8 <HAL_I2C_Init+0x1dc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10e      	bne.n	80040d8 <HAL_I2C_Init+0x1bc>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1e58      	subs	r0, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	440b      	add	r3, r1
 80040c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d6:	e00f      	b.n	80040f8 <HAL_I2C_Init+0x1dc>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1e58      	subs	r0, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	0099      	lsls	r1, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	6809      	ldr	r1, [r1, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61cb      	str	r3, [r1, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6911      	ldr	r1, [r2, #16]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68d2      	ldr	r2, [r2, #12]
 8004132:	4311      	orrs	r1, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	430b      	orrs	r3, r1
 800413a:	6093      	str	r3, [r2, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	60da      	str	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004184:	2300      	movs	r3, #0
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	000186a0 	.word	0x000186a0
 8004194:	001e847f 	.word	0x001e847f
 8004198:	003d08ff 	.word	0x003d08ff
 800419c:	431bde83 	.word	0x431bde83
 80041a0:	10624dd3 	.word	0x10624dd3

080041a4 <HAL_RCC_OscConfig>:
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_OscConfig+0x12>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e304      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8087 	beq.w	80042d2 <HAL_RCC_OscConfig+0x12e>
 80041c4:	4b92      	ldr	r3, [pc, #584]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d00c      	beq.n	80041ea <HAL_RCC_OscConfig+0x46>
 80041d0:	4b8f      	ldr	r3, [pc, #572]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d112      	bne.n	8004202 <HAL_RCC_OscConfig+0x5e>
 80041dc:	4b8c      	ldr	r3, [pc, #560]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d10b      	bne.n	8004202 <HAL_RCC_OscConfig+0x5e>
 80041ea:	4b89      	ldr	r3, [pc, #548]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d06c      	beq.n	80042d0 <HAL_RCC_OscConfig+0x12c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d168      	bne.n	80042d0 <HAL_RCC_OscConfig+0x12c>
 80041fe:	2301      	movs	r3, #1
 8004200:	e2de      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x76>
 800420c:	4b80      	ldr	r3, [pc, #512]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a7f      	ldr	r2, [pc, #508]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e02e      	b.n	8004278 <HAL_RCC_OscConfig+0xd4>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x98>
 8004222:	4b7b      	ldr	r3, [pc, #492]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7a      	ldr	r2, [pc, #488]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	4b78      	ldr	r3, [pc, #480]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a77      	ldr	r2, [pc, #476]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e01d      	b.n	8004278 <HAL_RCC_OscConfig+0xd4>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0xbc>
 8004246:	4b72      	ldr	r3, [pc, #456]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a71      	ldr	r2, [pc, #452]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 800424c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4b6f      	ldr	r3, [pc, #444]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a6e      	ldr	r2, [pc, #440]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e00b      	b.n	8004278 <HAL_RCC_OscConfig+0xd4>
 8004260:	4b6b      	ldr	r3, [pc, #428]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a6a      	ldr	r2, [pc, #424]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	4b68      	ldr	r3, [pc, #416]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a67      	ldr	r2, [pc, #412]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d013      	beq.n	80042a8 <HAL_RCC_OscConfig+0x104>
 8004280:	f7ff fb42 	bl	8003908 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0xf6>
 8004288:	f7ff fb3e 	bl	8003908 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xf6>
 8004296:	2303      	movs	r3, #3
 8004298:	e292      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 800429a:	4b5d      	ldr	r3, [pc, #372]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0xe4>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x12e>
 80042a8:	f7ff fb2e 	bl	8003908 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x11e>
 80042b0:	f7ff fb2a 	bl	8003908 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	; 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x11e>
 80042be:	2303      	movs	r3, #3
 80042c0:	e27e      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 80042c2:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x10c>
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x12e>
 80042d0:	bf00      	nop
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d063      	beq.n	80043a6 <HAL_RCC_OscConfig+0x202>
 80042de:	4b4c      	ldr	r3, [pc, #304]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_RCC_OscConfig+0x15e>
 80042ea:	4b49      	ldr	r3, [pc, #292]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d11c      	bne.n	8004330 <HAL_RCC_OscConfig+0x18c>
 80042f6:	4b46      	ldr	r3, [pc, #280]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d116      	bne.n	8004330 <HAL_RCC_OscConfig+0x18c>
 8004302:	4b43      	ldr	r3, [pc, #268]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_RCC_OscConfig+0x176>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d001      	beq.n	800431a <HAL_RCC_OscConfig+0x176>
 8004316:	2301      	movs	r3, #1
 8004318:	e252      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4939      	ldr	r1, [pc, #228]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]
 800432e:	e03a      	b.n	80043a6 <HAL_RCC_OscConfig+0x202>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_OscConfig+0x1d6>
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCC_OscConfig+0x270>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	f7ff fae3 	bl	8003908 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x1b4>
 8004346:	f7ff fadf 	bl	8003908 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x1b4>
 8004354:	2303      	movs	r3, #3
 8004356:	e233      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004358:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x1a2>
 8004364:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4927      	ldr	r1, [pc, #156]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]
 8004378:	e015      	b.n	80043a6 <HAL_RCC_OscConfig+0x202>
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <HAL_RCC_OscConfig+0x270>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	f7ff fac2 	bl	8003908 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x1f6>
 8004388:	f7ff fabe 	bl	8003908 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x1f6>
 8004396:	2303      	movs	r3, #3
 8004398:	e212      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x1e4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d03a      	beq.n	8004428 <HAL_RCC_OscConfig+0x284>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d019      	beq.n	80043ee <HAL_RCC_OscConfig+0x24a>
 80043ba:	4b17      	ldr	r3, [pc, #92]	; (8004418 <HAL_RCC_OscConfig+0x274>)
 80043bc:	2201      	movs	r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f7ff faa2 	bl	8003908 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x236>
 80043c8:	f7ff fa9e 	bl	8003908 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x236>
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1f2      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x224>
 80043e6:	2001      	movs	r0, #1
 80043e8:	f000 fc04 	bl	8004bf4 <RCC_Delay>
 80043ec:	e01c      	b.n	8004428 <HAL_RCC_OscConfig+0x284>
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HAL_RCC_OscConfig+0x274>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f7ff fa88 	bl	8003908 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]
 80043fa:	e00f      	b.n	800441c <HAL_RCC_OscConfig+0x278>
 80043fc:	f7ff fa84 	bl	8003908 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d908      	bls.n	800441c <HAL_RCC_OscConfig+0x278>
 800440a:	2303      	movs	r3, #3
 800440c:	e1d8      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	42420000 	.word	0x42420000
 8004418:	42420480 	.word	0x42420480
 800441c:	4b9b      	ldr	r3, [pc, #620]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e9      	bne.n	80043fc <HAL_RCC_OscConfig+0x258>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80a6 	beq.w	8004582 <HAL_RCC_OscConfig+0x3de>
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]
 800443a:	4b94      	ldr	r3, [pc, #592]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <HAL_RCC_OscConfig+0x2be>
 8004446:	4b91      	ldr	r3, [pc, #580]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4a90      	ldr	r2, [pc, #576]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	61d3      	str	r3, [r2, #28]
 8004452:	4b8e      	ldr	r3, [pc, #568]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
 8004462:	4b8b      	ldr	r3, [pc, #556]	; (8004690 <HAL_RCC_OscConfig+0x4ec>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2fc>
 800446e:	4b88      	ldr	r3, [pc, #544]	; (8004690 <HAL_RCC_OscConfig+0x4ec>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a87      	ldr	r2, [pc, #540]	; (8004690 <HAL_RCC_OscConfig+0x4ec>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	f7ff fa45 	bl	8003908 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2f0>
 8004482:	f7ff fa41 	bl	8003908 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b64      	cmp	r3, #100	; 0x64
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2f0>
 8004490:	2303      	movs	r3, #3
 8004492:	e195      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004494:	4b7e      	ldr	r3, [pc, #504]	; (8004690 <HAL_RCC_OscConfig+0x4ec>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2de>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x312>
 80044a8:	4b78      	ldr	r3, [pc, #480]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	4a77      	ldr	r2, [pc, #476]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6213      	str	r3, [r2, #32]
 80044b4:	e02d      	b.n	8004512 <HAL_RCC_OscConfig+0x36e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x334>
 80044be:	4b73      	ldr	r3, [pc, #460]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	4a72      	ldr	r2, [pc, #456]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	6213      	str	r3, [r2, #32]
 80044ca:	4b70      	ldr	r3, [pc, #448]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	4a6f      	ldr	r2, [pc, #444]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044d0:	f023 0304 	bic.w	r3, r3, #4
 80044d4:	6213      	str	r3, [r2, #32]
 80044d6:	e01c      	b.n	8004512 <HAL_RCC_OscConfig+0x36e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d10c      	bne.n	80044fa <HAL_RCC_OscConfig+0x356>
 80044e0:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4a69      	ldr	r2, [pc, #420]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	6213      	str	r3, [r2, #32]
 80044ec:	4b67      	ldr	r3, [pc, #412]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4a66      	ldr	r2, [pc, #408]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6213      	str	r3, [r2, #32]
 80044f8:	e00b      	b.n	8004512 <HAL_RCC_OscConfig+0x36e>
 80044fa:	4b64      	ldr	r3, [pc, #400]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a63      	ldr	r2, [pc, #396]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6213      	str	r3, [r2, #32]
 8004506:	4b61      	ldr	r3, [pc, #388]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4a60      	ldr	r2, [pc, #384]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	6213      	str	r3, [r2, #32]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d015      	beq.n	8004546 <HAL_RCC_OscConfig+0x3a2>
 800451a:	f7ff f9f5 	bl	8003908 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x394>
 8004522:	f7ff f9f1 	bl	8003908 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x394>
 8004534:	2303      	movs	r3, #3
 8004536:	e143      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004538:	4b54      	ldr	r3, [pc, #336]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ee      	beq.n	8004522 <HAL_RCC_OscConfig+0x37e>
 8004544:	e014      	b.n	8004570 <HAL_RCC_OscConfig+0x3cc>
 8004546:	f7ff f9df 	bl	8003908 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]
 800454c:	e00a      	b.n	8004564 <HAL_RCC_OscConfig+0x3c0>
 800454e:	f7ff f9db 	bl	8003908 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	; 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x3c0>
 8004560:	2303      	movs	r3, #3
 8004562:	e12d      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004564:	4b49      	ldr	r3, [pc, #292]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ee      	bne.n	800454e <HAL_RCC_OscConfig+0x3aa>
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d105      	bne.n	8004582 <HAL_RCC_OscConfig+0x3de>
 8004576:	4b45      	ldr	r3, [pc, #276]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	4a44      	ldr	r2, [pc, #272]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004580:	61d3      	str	r3, [r2, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 808c 	beq.w	80046a4 <HAL_RCC_OscConfig+0x500>
 800458c:	4b3f      	ldr	r3, [pc, #252]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d10e      	bne.n	80045b8 <HAL_RCC_OscConfig+0x414>
 800459a:	4b3c      	ldr	r3, [pc, #240]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d108      	bne.n	80045b8 <HAL_RCC_OscConfig+0x414>
 80045a6:	4b39      	ldr	r3, [pc, #228]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_OscConfig+0x414>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e103      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d14e      	bne.n	800465e <HAL_RCC_OscConfig+0x4ba>
 80045c0:	4b32      	ldr	r3, [pc, #200]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_RCC_OscConfig+0x43c>
 80045cc:	4b2f      	ldr	r3, [pc, #188]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_OscConfig+0x43c>
 80045dc:	2301      	movs	r3, #1
 80045de:	e0ef      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 80045e0:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <HAL_RCC_OscConfig+0x4f0>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f7ff f98f 	bl	8003908 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x45c>
 80045ee:	f7ff f98b 	bl	8003908 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	; 0x64
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x45c>
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0df      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004600:	4b22      	ldr	r3, [pc, #136]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x44a>
 800460c:	4b1f      	ldr	r3, [pc, #124]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004618:	491c      	ldr	r1, [pc, #112]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800461a:	4313      	orrs	r3, r2
 800461c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800461e:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	4918      	ldr	r1, [pc, #96]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 800462c:	4313      	orrs	r3, r2
 800462e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004630:	4b18      	ldr	r3, [pc, #96]	; (8004694 <HAL_RCC_OscConfig+0x4f0>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	f7ff f967 	bl	8003908 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x4ac>
 800463e:	f7ff f963 	bl	8003908 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b64      	cmp	r3, #100	; 0x64
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x4ac>
 800464c:	2303      	movs	r3, #3
 800464e:	e0b7      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x49a>
 800465c:	e022      	b.n	80046a4 <HAL_RCC_OscConfig+0x500>
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <HAL_RCC_OscConfig+0x4e8>)
 8004664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004668:	62d3      	str	r3, [r2, #44]	; 0x2c
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <HAL_RCC_OscConfig+0x4f0>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f7ff f94a 	bl	8003908 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]
 8004676:	e00f      	b.n	8004698 <HAL_RCC_OscConfig+0x4f4>
 8004678:	f7ff f946 	bl	8003908 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d908      	bls.n	8004698 <HAL_RCC_OscConfig+0x4f4>
 8004686:	2303      	movs	r3, #3
 8004688:	e09a      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 800468a:	bf00      	nop
 800468c:	40021000 	.word	0x40021000
 8004690:	40007000 	.word	0x40007000
 8004694:	42420068 	.word	0x42420068
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e9      	bne.n	8004678 <HAL_RCC_OscConfig+0x4d4>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8088 	beq.w	80047be <HAL_RCC_OscConfig+0x61a>
 80046ae:	4b46      	ldr	r3, [pc, #280]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d068      	beq.n	800478c <HAL_RCC_OscConfig+0x5e8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d14d      	bne.n	800475e <HAL_RCC_OscConfig+0x5ba>
 80046c2:	4b42      	ldr	r3, [pc, #264]	; (80047cc <HAL_RCC_OscConfig+0x628>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f7ff f91e 	bl	8003908 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x53e>
 80046d0:	f7ff f91a 	bl	8003908 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x53e>
 80046de:	2303      	movs	r3, #3
 80046e0:	e06e      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 80046e2:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x52c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d10f      	bne.n	8004718 <HAL_RCC_OscConfig+0x574>
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4931      	ldr	r1, [pc, #196]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 8004702:	4313      	orrs	r3, r2
 8004704:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004706:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	492d      	ldr	r1, [pc, #180]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 8004714:	4313      	orrs	r3, r2
 8004716:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004718:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	430b      	orrs	r3, r1
 800472a:	4927      	ldr	r1, [pc, #156]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_RCC_OscConfig+0x628>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f7ff f8e7 	bl	8003908 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x5ac>
 800473e:	f7ff f8e3 	bl	8003908 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x5ac>
 800474c:	2303      	movs	r3, #3
 800474e:	e037      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004750:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x59a>
 800475c:	e02f      	b.n	80047be <HAL_RCC_OscConfig+0x61a>
 800475e:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x628>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f7ff f8d0 	bl	8003908 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x5da>
 800476c:	f7ff f8cc 	bl	8003908 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x5da>
 800477a:	2303      	movs	r3, #3
 800477c:	e020      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x5c8>
 800478a:	e018      	b.n	80047be <HAL_RCC_OscConfig+0x61a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_RCC_OscConfig+0x5f4>
 8004794:	2301      	movs	r3, #1
 8004796:	e013      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_OscConfig+0x624>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d106      	bne.n	80047ba <HAL_RCC_OscConfig+0x616>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x61a>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_RCC_OscConfig+0x61c>
 80047be:	2300      	movs	r3, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	42420060 	.word	0x42420060

080047d0 <HAL_RCC_ClockConfig>:
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x14>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0d0      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
 80047e4:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d910      	bls.n	8004814 <HAL_RCC_ClockConfig+0x44>
 80047f2:	4b67      	ldr	r3, [pc, #412]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 0207 	bic.w	r2, r3, #7
 80047fa:	4965      	ldr	r1, [pc, #404]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
 8004802:	4b63      	ldr	r3, [pc, #396]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x44>
 8004810:	2301      	movs	r3, #1
 8004812:	e0b8      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d020      	beq.n	8004862 <HAL_RCC_ClockConfig+0x92>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x68>
 800482c:	4b59      	ldr	r3, [pc, #356]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a58      	ldr	r2, [pc, #352]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004836:	6053      	str	r3, [r2, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x80>
 8004844:	4b53      	ldr	r3, [pc, #332]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a52      	ldr	r2, [pc, #328]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800484e:	6053      	str	r3, [r2, #4]
 8004850:	4b50      	ldr	r3, [pc, #320]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	494d      	ldr	r1, [pc, #308]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	4313      	orrs	r3, r2
 8004860:	604b      	str	r3, [r1, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d040      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x120>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xb6>
 8004876:	4b47      	ldr	r3, [pc, #284]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d115      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
 8004882:	2301      	movs	r3, #1
 8004884:	e07f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xce>
 800488e:	4b41      	ldr	r3, [pc, #260]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
 800489a:	2301      	movs	r3, #1
 800489c:	e073      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e06b      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
 80048ae:	4b39      	ldr	r3, [pc, #228]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f023 0203 	bic.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4936      	ldr	r1, [pc, #216]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
 80048c0:	f7ff f822 	bl	8003908 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	e00a      	b.n	80048de <HAL_RCC_ClockConfig+0x10e>
 80048c8:	f7ff f81e 	bl	8003908 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x10e>
 80048da:	2303      	movs	r3, #3
 80048dc:	e053      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
 80048de:	4b2d      	ldr	r3, [pc, #180]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 020c 	and.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d1eb      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xf8>
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d210      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x150>
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 0207 	bic.w	r2, r3, #7
 8004906:	4922      	ldr	r1, [pc, #136]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
 800490e:	4b20      	ldr	r3, [pc, #128]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x150>
 800491c:	2301      	movs	r3, #1
 800491e:	e032      	b.n	8004986 <HAL_RCC_ClockConfig+0x1b6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCC_ClockConfig+0x16e>
 800492c:	4b19      	ldr	r3, [pc, #100]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4916      	ldr	r1, [pc, #88]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x18e>
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	490e      	ldr	r1, [pc, #56]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	604b      	str	r3, [r1, #4]
 800495e:	f000 f821 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004962:	4602      	mov	r2, r0
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	490a      	ldr	r1, [pc, #40]	; (8004998 <HAL_RCC_ClockConfig+0x1c8>)
 8004970:	5ccb      	ldrb	r3, [r1, r3]
 8004972:	fa22 f303 	lsr.w	r3, r2, r3
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <HAL_RCC_ClockConfig+0x1cc>)
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_ClockConfig+0x1d0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe ff80 	bl	8003884 <HAL_InitTick>
 8004984:	2300      	movs	r3, #0
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40022000 	.word	0x40022000
 8004994:	40021000 	.word	0x40021000
 8004998:	080093dc 	.word	0x080093dc
 800499c:	20000028 	.word	0x20000028
 80049a0:	2000002c 	.word	0x2000002c

080049a4 <HAL_RCC_GetSysClockFreq>:
 80049a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a8:	b092      	sub	sp, #72	; 0x48
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	2300      	movs	r3, #0
 80049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b0:	2300      	movs	r3, #0
 80049b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b4:	2300      	movs	r3, #0
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
 80049b8:	2300      	movs	r3, #0
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
 80049bc:	2300      	movs	r3, #0
 80049be:	643b      	str	r3, [r7, #64]	; 0x40
 80049c0:	2300      	movs	r3, #0
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
 80049c4:	2300      	movs	r3, #0
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c8:	4b6b      	ldr	r3, [pc, #428]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d002      	beq.n	80049de <HAL_RCC_GetSysClockFreq+0x3a>
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d003      	beq.n	80049e4 <HAL_RCC_GetSysClockFreq+0x40>
 80049dc:	e0c3      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x1c2>
 80049de:	4b67      	ldr	r3, [pc, #412]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80049e0:	643b      	str	r3, [r7, #64]	; 0x40
 80049e2:	e0c3      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1c8>
 80049e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e6:	0c9b      	lsrs	r3, r3, #18
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	4b64      	ldr	r3, [pc, #400]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80049ee:	5c9b      	ldrb	r3, [r3, r2]
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80ac 	beq.w	8004b56 <HAL_RCC_GetSysClockFreq+0x1b2>
 80049fe:	4b5e      	ldr	r3, [pc, #376]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f003 020f 	and.w	r2, r3, #15
 8004a06:	4b5f      	ldr	r3, [pc, #380]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8004a08:	5c9b      	ldrb	r3, [r3, r2]
 8004a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a0c:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 808c 	beq.w	8004b32 <HAL_RCC_GetSysClockFreq+0x18e>
 8004a1a:	4b57      	ldr	r3, [pc, #348]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	3301      	adds	r3, #1
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
 8004a28:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	3302      	adds	r3, #2
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	2200      	movs	r2, #0
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	2200      	movs	r2, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	4611      	mov	r1, r2
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	fb00 f203 	mul.w	r2, r0, r3
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	fb03 f301 	mul.w	r3, r3, r1
 8004a52:	4413      	add	r3, r2
 8004a54:	6a3a      	ldr	r2, [r7, #32]
 8004a56:	fba2 4500 	umull	r4, r5, r2, r0
 8004a5a:	442b      	add	r3, r5
 8004a5c:	461d      	mov	r5, r3
 8004a5e:	4622      	mov	r2, r4
 8004a60:	462b      	mov	r3, r5
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	0159      	lsls	r1, r3, #5
 8004a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a70:	0150      	lsls	r0, r2, #5
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	ebb2 0a04 	subs.w	sl, r2, r4
 8004a7a:	eb63 0b05 	sbc.w	fp, r3, r5
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a8a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a8e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a92:	ebb2 080a 	subs.w	r8, r2, sl
 8004a96:	eb63 090b 	sbc.w	r9, r3, fp
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aae:	4690      	mov	r8, r2
 8004ab0:	4699      	mov	r9, r3
 8004ab2:	eb18 0304 	adds.w	r3, r8, r4
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	eb49 0305 	adc.w	r3, r9, r5
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aca:	4629      	mov	r1, r5
 8004acc:	028b      	lsls	r3, r1, #10
 8004ace:	4620      	mov	r0, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004ad8:	4601      	mov	r1, r0
 8004ada:	028a      	lsls	r2, r1, #10
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	617a      	str	r2, [r7, #20]
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	2200      	movs	r2, #0
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	60fa      	str	r2, [r7, #12]
 8004af0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004af4:	4622      	mov	r2, r4
 8004af6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004afa:	4645      	mov	r5, r8
 8004afc:	fb05 f202 	mul.w	r2, r5, r2
 8004b00:	46cc      	mov	ip, r9
 8004b02:	4625      	mov	r5, r4
 8004b04:	461c      	mov	r4, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	fb03 f30c 	mul.w	r3, r3, ip
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4622      	mov	r2, r4
 8004b10:	4644      	mov	r4, r8
 8004b12:	fba2 2404 	umull	r2, r4, r2, r4
 8004b16:	61fc      	str	r4, [r7, #28]
 8004b18:	61ba      	str	r2, [r7, #24]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b24:	f7fc f9de 	bl	8000ee4 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	e007      	b.n	8004b42 <HAL_RCC_GetSysClockFreq+0x19e>
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004b36:	fb03 f202 	mul.w	r2, r3, r2
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	647b      	str	r3, [r7, #68]	; 0x44
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004b44:	7b5b      	ldrb	r3, [r3, #13]
 8004b46:	461a      	mov	r2, r3
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d108      	bne.n	8004b60 <HAL_RCC_GetSysClockFreq+0x1bc>
 8004b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
 8004b54:	e004      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x1bc>
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	4a0b      	ldr	r2, [pc, #44]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b62:	643b      	str	r3, [r7, #64]	; 0x40
 8004b64:	e002      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1c8>
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x1e8>)
 8004b68:	643b      	str	r3, [r7, #64]	; 0x40
 8004b6a:	bf00      	nop
 8004b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3748      	adds	r7, #72	; 0x48
 8004b72:	46bd      	mov	sp, r7
 8004b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	080093f4 	.word	0x080093f4
 8004b84:	08009404 	.word	0x08009404
 8004b88:	003d0900 	.word	0x003d0900
 8004b8c:	007a1200 	.word	0x007a1200

08004b90 <HAL_RCC_GetHCLKFreq>:
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4b02      	ldr	r3, [pc, #8]	; (8004ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr
 8004ba0:	20000028 	.word	0x20000028

08004ba4 <HAL_RCC_GetPCLK1Freq>:
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	f7ff fff2 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	080093ec 	.word	0x080093ec

08004bcc <HAL_RCC_GetPCLK2Freq>:
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	f7ff ffde 	bl	8004b90 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	0adb      	lsrs	r3, r3, #11
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	080093ec 	.word	0x080093ec

08004bf4 <RCC_Delay>:
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <RCC_Delay+0x34>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <RCC_Delay+0x38>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0a5b      	lsrs	r3, r3, #9
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	bf00      	nop
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1e5a      	subs	r2, r3, #1
 8004c16:	60fa      	str	r2, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f9      	bne.n	8004c10 <RCC_Delay+0x1c>
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr
 8004c28:	20000028 	.word	0x20000028
 8004c2c:	10624dd3 	.word	0x10624dd3

08004c30 <HAL_SPI_Init>:
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_Init+0x12>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e076      	b.n	8004d30 <HAL_SPI_Init+0x100>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d108      	bne.n	8004c5c <HAL_SPI_Init+0x2c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c52:	d009      	beq.n	8004c68 <HAL_SPI_Init+0x38>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	61da      	str	r2, [r3, #28]
 8004c5a:	e005      	b.n	8004c68 <HAL_SPI_Init+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	611a      	str	r2, [r3, #16]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	615a      	str	r2, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_SPI_Init+0x58>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fe f958 	bl	8002f38 <HAL_SPI_MspInit>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	ea42 0103 	orr.w	r1, r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	0c1a      	lsrs	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f002 0204 	and.w	r2, r2, #4
 8004d0e:	605a      	str	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69da      	ldr	r2, [r3, #28]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d1e:	61da      	str	r2, [r3, #28]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_SPI_Transmit>:
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	80fb      	strh	r3, [r7, #6]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_SPI_Transmit+0x22>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e12d      	b.n	8004fb6 <HAL_SPI_Transmit+0x27e>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d62:	f7fe fdd1 	bl	8003908 <HAL_GetTick>
 8004d66:	61b8      	str	r0, [r7, #24]
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	82fb      	strh	r3, [r7, #22]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d002      	beq.n	8004d7e <HAL_SPI_Transmit+0x46>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	77fb      	strb	r3, [r7, #31]
 8004d7c:	e116      	b.n	8004fac <HAL_SPI_Transmit+0x274>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_SPI_Transmit+0x52>
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d102      	bne.n	8004d90 <HAL_SPI_Transmit+0x58>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	77fb      	strb	r3, [r7, #31]
 8004d8e:	e10d      	b.n	8004fac <HAL_SPI_Transmit+0x274>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2203      	movs	r2, #3
 8004d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	869a      	strh	r2, [r3, #52]	; 0x34
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	88fa      	ldrh	r2, [r7, #6]
 8004dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	645a      	str	r2, [r3, #68]	; 0x44
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd6:	d10f      	bne.n	8004df8 <HAL_SPI_Transmit+0xc0>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d007      	beq.n	8004e16 <HAL_SPI_Transmit+0xde>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1e:	d14f      	bne.n	8004ec0 <HAL_SPI_Transmit+0x188>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_Transmit+0xf6>
 8004e28:	8afb      	ldrh	r3, [r7, #22]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d142      	bne.n	8004eb4 <HAL_SPI_Transmit+0x17c>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	881a      	ldrh	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60da      	str	r2, [r3, #12]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	1c9a      	adds	r2, r3, #2
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e52:	e02f      	b.n	8004eb4 <HAL_SPI_Transmit+0x17c>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d112      	bne.n	8004e88 <HAL_SPI_Transmit+0x150>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	881a      	ldrh	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	1c9a      	adds	r2, r3, #2
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e86:	e015      	b.n	8004eb4 <HAL_SPI_Transmit+0x17c>
 8004e88:	f7fe fd3e 	bl	8003908 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d803      	bhi.n	8004ea0 <HAL_SPI_Transmit+0x168>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d102      	bne.n	8004ea6 <HAL_SPI_Transmit+0x16e>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_SPI_Transmit+0x17c>
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004eb2:	e07b      	b.n	8004fac <HAL_SPI_Transmit+0x274>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ca      	bne.n	8004e54 <HAL_SPI_Transmit+0x11c>
 8004ebe:	e050      	b.n	8004f62 <HAL_SPI_Transmit+0x22a>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_SPI_Transmit+0x196>
 8004ec8:	8afb      	ldrh	r3, [r7, #22]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d144      	bne.n	8004f58 <HAL_SPI_Transmit+0x220>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	7812      	ldrb	r2, [r2, #0]
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ef4:	e030      	b.n	8004f58 <HAL_SPI_Transmit+0x220>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d113      	bne.n	8004f2c <HAL_SPI_Transmit+0x1f4>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	7812      	ldrb	r2, [r2, #0]
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f2a:	e015      	b.n	8004f58 <HAL_SPI_Transmit+0x220>
 8004f2c:	f7fe fcec 	bl	8003908 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d803      	bhi.n	8004f44 <HAL_SPI_Transmit+0x20c>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	d102      	bne.n	8004f4a <HAL_SPI_Transmit+0x212>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_SPI_Transmit+0x220>
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004f56:	e029      	b.n	8004fac <HAL_SPI_Transmit+0x274>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1c9      	bne.n	8004ef6 <HAL_SPI_Transmit+0x1be>
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fbcc 	bl	8005704 <SPI_EndRxTxTransaction>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_Transmit+0x240>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <HAL_SPI_Transmit+0x25e>
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_Transmit+0x26c>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e003      	b.n	8004fac <HAL_SPI_Transmit+0x274>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_SPI_Receive>:
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b088      	sub	sp, #32
 8004fc2:	af02      	add	r7, sp, #8
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d002      	beq.n	8004fe4 <HAL_SPI_Receive+0x26>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	75fb      	strb	r3, [r7, #23]
 8004fe2:	e0fb      	b.n	80051dc <HAL_SPI_Receive+0x21e>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fec:	d112      	bne.n	8005014 <HAL_SPI_Receive+0x56>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10e      	bne.n	8005014 <HAL_SPI_Receive+0x56>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004ffe:	88fa      	ldrh	r2, [r7, #6]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f8ef 	bl	80051ee <HAL_SPI_TransmitReceive>
 8005010:	4603      	mov	r3, r0
 8005012:	e0e8      	b.n	80051e6 <HAL_SPI_Receive+0x228>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_SPI_Receive+0x64>
 800501e:	2302      	movs	r3, #2
 8005020:	e0e1      	b.n	80051e6 <HAL_SPI_Receive+0x228>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800502a:	f7fe fc6d 	bl	8003908 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_SPI_Receive+0x7e>
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <HAL_SPI_Receive+0x84>
 800503c:	2301      	movs	r3, #1
 800503e:	75fb      	strb	r3, [r7, #23]
 8005040:	e0cc      	b.n	80051dc <HAL_SPI_Receive+0x21e>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2204      	movs	r2, #4
 8005046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	88fa      	ldrh	r2, [r7, #6]
 800505a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	869a      	strh	r2, [r3, #52]	; 0x34
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	86da      	strh	r2, [r3, #54]	; 0x36
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	645a      	str	r2, [r3, #68]	; 0x44
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005088:	d10f      	bne.n	80050aa <HAL_SPI_Receive+0xec>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b40      	cmp	r3, #64	; 0x40
 80050b6:	d007      	beq.n	80050c8 <HAL_SPI_Receive+0x10a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d16a      	bne.n	80051a6 <HAL_SPI_Receive+0x1e8>
 80050d0:	e032      	b.n	8005138 <HAL_SPI_Receive+0x17a>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d115      	bne.n	800510c <HAL_SPI_Receive+0x14e>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f103 020c 	add.w	r2, r3, #12
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	87da      	strh	r2, [r3, #62]	; 0x3e
 800510a:	e015      	b.n	8005138 <HAL_SPI_Receive+0x17a>
 800510c:	f7fe fbfc 	bl	8003908 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d803      	bhi.n	8005124 <HAL_SPI_Receive+0x166>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d102      	bne.n	800512a <HAL_SPI_Receive+0x16c>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_SPI_Receive+0x17a>
 800512a:	2303      	movs	r3, #3
 800512c:	75fb      	strb	r3, [r7, #23]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005136:	e051      	b.n	80051dc <HAL_SPI_Receive+0x21e>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1c7      	bne.n	80050d2 <HAL_SPI_Receive+0x114>
 8005142:	e035      	b.n	80051b0 <HAL_SPI_Receive+0x1f2>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d113      	bne.n	800517a <HAL_SPI_Receive+0x1bc>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	b292      	uxth	r2, r2
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	1c9a      	adds	r2, r3, #2
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005178:	e015      	b.n	80051a6 <HAL_SPI_Receive+0x1e8>
 800517a:	f7fe fbc5 	bl	8003908 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d803      	bhi.n	8005192 <HAL_SPI_Receive+0x1d4>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d102      	bne.n	8005198 <HAL_SPI_Receive+0x1da>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <HAL_SPI_Receive+0x1e8>
 8005198:	2303      	movs	r3, #3
 800519a:	75fb      	strb	r3, [r7, #23]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80051a4:	e01a      	b.n	80051dc <HAL_SPI_Receive+0x21e>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1c9      	bne.n	8005144 <HAL_SPI_Receive+0x186>
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fa53 	bl	8005660 <SPI_EndRxTransaction>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_Receive+0x208>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_SPI_Receive+0x216>
 80051ce:	2301      	movs	r3, #1
 80051d0:	75fb      	strb	r3, [r7, #23]
 80051d2:	e003      	b.n	80051dc <HAL_SPI_Receive+0x21e>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_SPI_TransmitReceive>:
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b08c      	sub	sp, #48	; 0x30
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	807b      	strh	r3, [r7, #2]
 80051fc:	2301      	movs	r3, #1
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005200:	2300      	movs	r3, #0
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_SPI_TransmitReceive+0x26>
 8005210:	2302      	movs	r3, #2
 8005212:	e198      	b.n	8005546 <HAL_SPI_TransmitReceive+0x358>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800521c:	f7fe fb74 	bl	8003908 <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	887b      	ldrh	r3, [r7, #2]
 8005234:	837b      	strh	r3, [r7, #26]
 8005236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800523a:	2b01      	cmp	r3, #1
 800523c:	d00f      	beq.n	800525e <HAL_SPI_TransmitReceive+0x70>
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005244:	d107      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x68>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x68>
 800524e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005252:	2b04      	cmp	r3, #4
 8005254:	d003      	beq.n	800525e <HAL_SPI_TransmitReceive+0x70>
 8005256:	2302      	movs	r3, #2
 8005258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525c:	e16d      	b.n	800553a <HAL_SPI_TransmitReceive+0x34c>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x82>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x82>
 800526a:	887b      	ldrh	r3, [r7, #2]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x8a>
 8005270:	2301      	movs	r3, #1
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005276:	e160      	b.n	800553a <HAL_SPI_TransmitReceive+0x34c>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b04      	cmp	r3, #4
 8005282:	d003      	beq.n	800528c <HAL_SPI_TransmitReceive+0x9e>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2205      	movs	r2, #5
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	887a      	ldrh	r2, [r7, #2]
 800529c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	887a      	ldrh	r2, [r7, #2]
 80052a2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	887a      	ldrh	r2, [r7, #2]
 80052ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	887a      	ldrh	r2, [r7, #2]
 80052b4:	869a      	strh	r2, [r3, #52]	; 0x34
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	645a      	str	r2, [r3, #68]	; 0x44
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d007      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0xf2>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	d17c      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x1f6>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x10a>
 80052f2:	8b7b      	ldrh	r3, [r7, #26]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d16a      	bne.n	80053ce <HAL_SPI_TransmitReceive+0x1e0>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	86da      	strh	r2, [r3, #54]	; 0x36
 800531c:	e057      	b.n	80053ce <HAL_SPI_TransmitReceive+0x1e0>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d11b      	bne.n	8005364 <HAL_SPI_TransmitReceive+0x176>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x176>
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d113      	bne.n	8005364 <HAL_SPI_TransmitReceive+0x176>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	881a      	ldrh	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	1c9a      	adds	r2, r3, #2
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005360:	2300      	movs	r3, #0
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b01      	cmp	r3, #1
 8005370:	d119      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x1b8>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d014      	beq.n	80053a6 <HAL_SPI_TransmitReceive+0x1b8>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	b292      	uxth	r2, r2
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	1c9a      	adds	r2, r3, #2
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053a2:	2301      	movs	r3, #1
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a6:	f7fe faaf 	bl	8003908 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d80b      	bhi.n	80053ce <HAL_SPI_TransmitReceive+0x1e0>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d007      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x1e0>
 80053be:	2303      	movs	r3, #3
 80053c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80053cc:	e0b5      	b.n	800553a <HAL_SPI_TransmitReceive+0x34c>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1a2      	bne.n	800531e <HAL_SPI_TransmitReceive+0x130>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d19d      	bne.n	800531e <HAL_SPI_TransmitReceive+0x130>
 80053e2:	e080      	b.n	80054e6 <HAL_SPI_TransmitReceive+0x2f8>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x204>
 80053ec:	8b7b      	ldrh	r3, [r7, #26]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d16f      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x2e4>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	7812      	ldrb	r2, [r2, #0]
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	86da      	strh	r2, [r3, #54]	; 0x36
 8005418:	e05b      	b.n	80054d2 <HAL_SPI_TransmitReceive+0x2e4>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b02      	cmp	r3, #2
 8005426:	d11c      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x274>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d017      	beq.n	8005462 <HAL_SPI_TransmitReceive+0x274>
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d114      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x274>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	86da      	strh	r2, [r3, #54]	; 0x36
 800545e:	2300      	movs	r3, #0
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b01      	cmp	r3, #1
 800546e:	d119      	bne.n	80054a4 <HAL_SPI_TransmitReceive+0x2b6>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d014      	beq.n	80054a4 <HAL_SPI_TransmitReceive+0x2b6>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054a0:	2301      	movs	r3, #1
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a4:	f7fe fa30 	bl	8003908 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d803      	bhi.n	80054bc <HAL_SPI_TransmitReceive+0x2ce>
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d102      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x2d4>
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d107      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x2e4>
 80054c2:	2303      	movs	r3, #3
 80054c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80054d0:	e033      	b.n	800553a <HAL_SPI_TransmitReceive+0x34c>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d19e      	bne.n	800541a <HAL_SPI_TransmitReceive+0x22c>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d199      	bne.n	800541a <HAL_SPI_TransmitReceive+0x22c>
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f90a 	bl	8005704 <SPI_EndRxTxTransaction>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d006      	beq.n	8005504 <HAL_SPI_TransmitReceive+0x316>
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
 8005502:	e01a      	b.n	800553a <HAL_SPI_TransmitReceive+0x34c>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x334>
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_SPI_TransmitReceive+0x344>
 800552a:	2301      	movs	r3, #1
 800552c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005530:	e003      	b.n	800553a <HAL_SPI_TransmitReceive+0x34c>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005546:	4618      	mov	r0, r3
 8005548:	3730      	adds	r7, #48	; 0x30
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <SPI_WaitFlagStateUntilTimeout>:
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	71fb      	strb	r3, [r7, #7]
 8005560:	f7fe f9d2 	bl	8003908 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	4413      	add	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	f7fe f9ca 	bl	8003908 <HAL_GetTick>
 8005574:	61b8      	str	r0, [r7, #24]
 8005576:	4b39      	ldr	r3, [pc, #228]	; (800565c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	0d1b      	lsrs	r3, r3, #20
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e054      	b.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d050      	beq.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005590:	f7fe f9ba 	bl	8003908 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	429a      	cmp	r2, r3
 800559e:	d902      	bls.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d13d      	bne.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055be:	d111      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c8:	d004      	beq.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x84>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d2:	d107      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ec:	d10f      	bne.n	800560e <SPI_WaitFlagStateUntilTimeout+0xbe>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800561e:	2303      	movs	r3, #3
 8005620:	e017      	b.n	8005652 <SPI_WaitFlagStateUntilTimeout+0x102>
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	3b01      	subs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d19b      	bne.n	8005588 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005650:	2300      	movs	r3, #0
 8005652:	4618      	mov	r0, r3
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000028 	.word	0x20000028

08005660 <SPI_EndRxTransaction>:
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005674:	d111      	bne.n	800569a <SPI_EndRxTransaction+0x3a>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567e:	d004      	beq.n	800568a <SPI_EndRxTransaction+0x2a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005688:	d107      	bne.n	800569a <SPI_EndRxTransaction+0x3a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a2:	d117      	bne.n	80056d4 <SPI_EndRxTransaction+0x74>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d112      	bne.n	80056d4 <SPI_EndRxTransaction+0x74>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2200      	movs	r2, #0
 80056b6:	2101      	movs	r1, #1
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff ff49 	bl	8005550 <SPI_WaitFlagStateUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01a      	beq.n	80056fa <SPI_EndRxTransaction+0x9a>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
 80056d0:	2303      	movs	r3, #3
 80056d2:	e013      	b.n	80056fc <SPI_EndRxTransaction+0x9c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff36 	bl	8005550 <SPI_WaitFlagStateUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <SPI_EndRxTransaction+0x9a>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
 80056f6:	2303      	movs	r3, #3
 80056f8:	e000      	b.n	80056fc <SPI_EndRxTransaction+0x9c>
 80056fa:	2300      	movs	r3, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SPI_EndRxTxTransaction>:
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2200      	movs	r2, #0
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff ff18 	bl	8005550 <SPI_WaitFlagStateUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <SPI_EndRxTxTransaction+0x32>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	655a      	str	r2, [r3, #84]	; 0x54
 8005732:	2303      	movs	r3, #3
 8005734:	e000      	b.n	8005738 <SPI_EndRxTxTransaction+0x34>
 8005736:	2300      	movs	r3, #0
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_TIM_Base_Init>:
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_TIM_Base_Init+0x12>
 800574e:	2301      	movs	r3, #1
 8005750:	e041      	b.n	80057d6 <HAL_TIM_Base_Init+0x96>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_TIM_Base_Init+0x2c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fd ff5a 	bl	8003620 <HAL_TIM_Base_MspInit>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f000 fd70 	bl	8006264 <TIM_Base_SetConfig>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057d4:	2300      	movs	r3, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_TIM_Base_Start_IT>:
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d001      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0x18>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e03f      	b.n	8005878 <HAL_TIM_Base_Start_IT+0x98>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	60da      	str	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <HAL_TIM_Base_Start_IT+0xa4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_TIM_Base_Start_IT+0x62>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005822:	d00e      	beq.n	8005842 <HAL_TIM_Base_Start_IT+0x62>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_TIM_Base_Start_IT+0xa8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_TIM_Base_Start_IT+0x62>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a16      	ldr	r2, [pc, #88]	; (800588c <HAL_TIM_Base_Start_IT+0xac>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_TIM_Base_Start_IT+0x62>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a14      	ldr	r2, [pc, #80]	; (8005890 <HAL_TIM_Base_Start_IT+0xb0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d111      	bne.n	8005866 <HAL_TIM_Base_Start_IT+0x86>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b06      	cmp	r3, #6
 8005852:	d010      	beq.n	8005876 <HAL_TIM_Base_Start_IT+0x96>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e007      	b.n	8005876 <HAL_TIM_Base_Start_IT+0x96>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	2300      	movs	r3, #0
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40000400 	.word	0x40000400
 800588c:	40000800 	.word	0x40000800
 8005890:	40000c00 	.word	0x40000c00

08005894 <HAL_TIM_PWM_Init>:
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_PWM_Init+0x12>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e041      	b.n	800592a <HAL_TIM_PWM_Init+0x96>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_TIM_PWM_Init+0x2c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f839 	bl	8005932 <HAL_TIM_PWM_MspInit>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f000 fcc6 	bl	8006264 <TIM_Base_SetConfig>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005928:	2300      	movs	r3, #0
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_TIM_PWM_MspInit>:
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <HAL_TIM_PWM_Start>:
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <HAL_TIM_PWM_Start+0x24>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	e022      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b04      	cmp	r3, #4
 800596c:	d109      	bne.n	8005982 <HAL_TIM_PWM_Start+0x3e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	bf14      	ite	ne
 800597a:	2301      	movne	r3, #1
 800597c:	2300      	moveq	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	e015      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b08      	cmp	r3, #8
 8005986:	d109      	bne.n	800599c <HAL_TIM_PWM_Start+0x58>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e008      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_TIM_PWM_Start+0x72>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e063      	b.n	8005a7e <HAL_TIM_PWM_Start+0x13a>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <HAL_TIM_PWM_Start+0x82>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c4:	e013      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_PWM_Start+0x92>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d4:	e00b      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_PWM_Start+0xa2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e4:	e003      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2201      	movs	r2, #1
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 febe 	bl	8006778 <TIM_CCxChannelCmd>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <HAL_TIM_PWM_Start+0x144>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d107      	bne.n	8005a16 <HAL_TIM_PWM_Start+0xd2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <HAL_TIM_PWM_Start+0x144>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <HAL_TIM_PWM_Start+0x104>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a28:	d00e      	beq.n	8005a48 <HAL_TIM_PWM_Start+0x104>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a17      	ldr	r2, [pc, #92]	; (8005a8c <HAL_TIM_PWM_Start+0x148>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_TIM_PWM_Start+0x104>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <HAL_TIM_PWM_Start+0x14c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_PWM_Start+0x104>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a14      	ldr	r2, [pc, #80]	; (8005a94 <HAL_TIM_PWM_Start+0x150>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d111      	bne.n	8005a6c <HAL_TIM_PWM_Start+0x128>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d010      	beq.n	8005a7c <HAL_TIM_PWM_Start+0x138>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0201 	orr.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e007      	b.n	8005a7c <HAL_TIM_PWM_Start+0x138>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00

08005a98 <HAL_TIM_Encoder_Init>:
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_Encoder_Init+0x14>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e093      	b.n	8005bd4 <HAL_TIM_Encoder_Init+0x13c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <HAL_TIM_Encoder_Init+0x2e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fd fd3f 	bl	8003544 <HAL_TIM_Encoder_MspInit>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	6093      	str	r3, [r2, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4619      	mov	r1, r3
 8005aec:	4610      	mov	r0, r2
 8005aee:	f000 fbb9 	bl	8006264 <TIM_Base_SetConfig>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	f023 0303 	bic.w	r3, r3, #3
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b38:	f023 030c 	bic.w	r3, r3, #12
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	4313      	orrs	r3, r2
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	011a      	lsls	r2, r3, #4
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	031b      	lsls	r3, r3, #12
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	4313      	orrs	r3, r2
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	619a      	str	r2, [r3, #24]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_Encoder_Start>:
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bec:	73fb      	strb	r3, [r7, #15]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bf4:	73bb      	strb	r3, [r7, #14]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bfc:	737b      	strb	r3, [r7, #13]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c04:	733b      	strb	r3, [r7, #12]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d110      	bne.n	8005c2e <HAL_TIM_Encoder_Start+0x52>
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d102      	bne.n	8005c18 <HAL_TIM_Encoder_Start+0x3c>
 8005c12:	7b7b      	ldrb	r3, [r7, #13]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d001      	beq.n	8005c1c <HAL_TIM_Encoder_Start+0x40>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e069      	b.n	8005cf0 <HAL_TIM_Encoder_Start+0x114>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c2c:	e031      	b.n	8005c92 <HAL_TIM_Encoder_Start+0xb6>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d110      	bne.n	8005c56 <HAL_TIM_Encoder_Start+0x7a>
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d102      	bne.n	8005c40 <HAL_TIM_Encoder_Start+0x64>
 8005c3a:	7b3b      	ldrb	r3, [r7, #12]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d001      	beq.n	8005c44 <HAL_TIM_Encoder_Start+0x68>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e055      	b.n	8005cf0 <HAL_TIM_Encoder_Start+0x114>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c54:	e01d      	b.n	8005c92 <HAL_TIM_Encoder_Start+0xb6>
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d108      	bne.n	8005c6e <HAL_TIM_Encoder_Start+0x92>
 8005c5c:	7bbb      	ldrb	r3, [r7, #14]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d105      	bne.n	8005c6e <HAL_TIM_Encoder_Start+0x92>
 8005c62:	7b7b      	ldrb	r3, [r7, #13]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d102      	bne.n	8005c6e <HAL_TIM_Encoder_Start+0x92>
 8005c68:	7b3b      	ldrb	r3, [r7, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d001      	beq.n	8005c72 <HAL_TIM_Encoder_Start+0x96>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e03e      	b.n	8005cf0 <HAL_TIM_Encoder_Start+0x114>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_TIM_Encoder_Start+0xc4>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d008      	beq.n	8005cb0 <HAL_TIM_Encoder_Start+0xd4>
 8005c9e:	e00f      	b.n	8005cc0 <HAL_TIM_Encoder_Start+0xe4>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fd65 	bl	8006778 <TIM_CCxChannelCmd>
 8005cae:	e016      	b.n	8005cde <HAL_TIM_Encoder_Start+0x102>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2104      	movs	r1, #4
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fd5d 	bl	8006778 <TIM_CCxChannelCmd>
 8005cbe:	e00e      	b.n	8005cde <HAL_TIM_Encoder_Start+0x102>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fd55 	bl	8006778 <TIM_CCxChannelCmd>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fd4e 	bl	8006778 <TIM_CCxChannelCmd>
 8005cdc:	bf00      	nop
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_IRQHandler>:
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d122      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x5c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d11b      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x5c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0202 	mvn.w	r2, #2
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	771a      	strb	r2, [r3, #28]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x4a>
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fa76 	bl	800622c <HAL_TIM_IC_CaptureCallback>
 8005d40:	e005      	b.n	8005d4e <HAL_TIM_IRQHandler+0x56>
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa69 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa78 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	771a      	strb	r2, [r3, #28]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0xb0>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0xb0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0204 	mvn.w	r2, #4
 8005d78:	611a      	str	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	771a      	strb	r2, [r3, #28]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x9e>
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa4c 	bl	800622c <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0xaa>
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa3f 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa4e 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x104>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x104>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0208 	mvn.w	r2, #8
 8005dcc:	611a      	str	r2, [r3, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	771a      	strb	r2, [r3, #28]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0xf2>
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa22 	bl	800622c <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0xfe>
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa15 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa24 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b10      	cmp	r3, #16
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x158>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x158>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0210 	mvn.w	r2, #16
 8005e20:	611a      	str	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2208      	movs	r2, #8
 8005e26:	771a      	strb	r2, [r3, #28]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x146>
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9f8 	bl	800622c <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0x152>
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9eb 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9fa 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d10e      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x184>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d107      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x184>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0201 	mvn.w	r2, #1
 8005e74:	611a      	str	r2, [r3, #16]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fc fb56 	bl	8002528 <HAL_TIM_PeriodElapsedCallback>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e86:	2b80      	cmp	r3, #128	; 0x80
 8005e88:	d10e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1b0>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b80      	cmp	r3, #128	; 0x80
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1b0>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ea0:	611a      	str	r2, [r3, #16]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fcfb 	bl	800689e <HAL_TIMEx_BreakCallback>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x1dc>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x1dc>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ecc:	611a      	str	r2, [r3, #16]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9be 	bl	8006250 <HAL_TIM_TriggerCallback>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d10e      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x208>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d107      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x208>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0220 	mvn.w	r2, #32
 8005ef8:	611a      	str	r2, [r3, #16]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fcc6 	bl	800688c <HAL_TIMEx_CommutCallback>
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_TIM_PWM_ConfigChannel>:
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	2300      	movs	r3, #0
 8005f16:	75fb      	strb	r3, [r7, #23]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e0ae      	b.n	8006084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b0c      	cmp	r3, #12
 8005f32:	f200 809f 	bhi.w	8006074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f71 	.word	0x08005f71
 8005f40:	08006075 	.word	0x08006075
 8005f44:	08006075 	.word	0x08006075
 8005f48:	08006075 	.word	0x08006075
 8005f4c:	08005fb1 	.word	0x08005fb1
 8005f50:	08006075 	.word	0x08006075
 8005f54:	08006075 	.word	0x08006075
 8005f58:	08006075 	.word	0x08006075
 8005f5c:	08005ff3 	.word	0x08005ff3
 8005f60:	08006075 	.word	0x08006075
 8005f64:	08006075 	.word	0x08006075
 8005f68:	08006075 	.word	0x08006075
 8005f6c:	08006033 	.word	0x08006033
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 f9e0 	bl	800633c <TIM_OC1_SetConfig>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0208 	orr.w	r2, r2, #8
 8005f8a:	619a      	str	r2, [r3, #24]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0204 	bic.w	r2, r2, #4
 8005f9a:	619a      	str	r2, [r3, #24]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6999      	ldr	r1, [r3, #24]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	619a      	str	r2, [r3, #24]
 8005fae:	e064      	b.n	800607a <HAL_TIM_PWM_ConfigChannel+0x172>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fa26 	bl	8006408 <TIM_OC2_SetConfig>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fca:	619a      	str	r2, [r3, #24]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fda:	619a      	str	r2, [r3, #24]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6999      	ldr	r1, [r3, #24]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	021a      	lsls	r2, r3, #8
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	619a      	str	r2, [r3, #24]
 8005ff0:	e043      	b.n	800607a <HAL_TIM_PWM_ConfigChannel+0x172>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fa6f 	bl	80064dc <TIM_OC3_SetConfig>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0208 	orr.w	r2, r2, #8
 800600c:	61da      	str	r2, [r3, #28]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0204 	bic.w	r2, r2, #4
 800601c:	61da      	str	r2, [r3, #28]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69d9      	ldr	r1, [r3, #28]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	61da      	str	r2, [r3, #28]
 8006030:	e023      	b.n	800607a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fab9 	bl	80065b0 <TIM_OC4_SetConfig>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604c:	61da      	str	r2, [r3, #28]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605c:	61da      	str	r2, [r3, #28]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69d9      	ldr	r1, [r3, #28]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	021a      	lsls	r2, r3, #8
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	61da      	str	r2, [r3, #28]
 8006072:	e002      	b.n	800607a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006074:	2301      	movs	r3, #1
 8006076:	75fb      	strb	r3, [r7, #23]
 8006078:	bf00      	nop
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_ConfigClockSource>:
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIM_ConfigClockSource+0x1c>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e0b4      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x186>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ce:	60bb      	str	r3, [r7, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	609a      	str	r2, [r3, #8]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e0:	d03e      	beq.n	8006160 <HAL_TIM_ConfigClockSource+0xd4>
 80060e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e6:	f200 8087 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ee:	f000 8086 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x172>
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d87f      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d01a      	beq.n	8006132 <HAL_TIM_ConfigClockSource+0xa6>
 80060fc:	2b70      	cmp	r3, #112	; 0x70
 80060fe:	d87b      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006100:	2b60      	cmp	r3, #96	; 0x60
 8006102:	d050      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006104:	2b60      	cmp	r3, #96	; 0x60
 8006106:	d877      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b50      	cmp	r3, #80	; 0x50
 800610a:	d03c      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0xfa>
 800610c:	2b50      	cmp	r3, #80	; 0x50
 800610e:	d873      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d058      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d86f      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006118:	2b30      	cmp	r3, #48	; 0x30
 800611a:	d064      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15a>
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d86b      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d060      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d867      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d05c      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15a>
 800612c:	2b10      	cmp	r3, #16
 800612e:	d05a      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006130:	e062      	b.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f000 fafa 	bl	800673a <TIM_ETR_SetConfig>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	609a      	str	r2, [r3, #8]
 800615e:	e04f      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6899      	ldr	r1, [r3, #8]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f000 fae3 	bl	800673a <TIM_ETR_SetConfig>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	e03c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6859      	ldr	r1, [r3, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	461a      	mov	r2, r3
 8006194:	f000 fa5a 	bl	800664c <TIM_TI1_ConfigInputStage>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2150      	movs	r1, #80	; 0x50
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fab1 	bl	8006706 <TIM_ITRx_SetConfig>
 80061a4:	e02c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6859      	ldr	r1, [r3, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f000 fa78 	bl	80066a8 <TIM_TI2_ConfigInputStage>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2160      	movs	r1, #96	; 0x60
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 faa1 	bl	8006706 <TIM_ITRx_SetConfig>
 80061c4:	e01c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6859      	ldr	r1, [r3, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f000 fa3a 	bl	800664c <TIM_TI1_ConfigInputStage>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2140      	movs	r1, #64	; 0x40
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fa91 	bl	8006706 <TIM_ITRx_SetConfig>
 80061e4:	e00c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f000 fa88 	bl	8006706 <TIM_ITRx_SetConfig>
 80061f6:	e003      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
 80061fc:	e000      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
 80061fe:	bf00      	nop
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_TIM_OC_DelayElapsedCallback>:
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <HAL_TIM_IC_CaptureCallback>:
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <HAL_TIM_PWM_PulseFinishedCallback>:
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <HAL_TIM_TriggerCallback>:
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
	...

08006264 <TIM_Base_SetConfig>:
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a2d      	ldr	r2, [pc, #180]	; (800632c <TIM_Base_SetConfig+0xc8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00f      	beq.n	800629c <TIM_Base_SetConfig+0x38>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0x38>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <TIM_Base_SetConfig+0xcc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x38>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a29      	ldr	r2, [pc, #164]	; (8006334 <TIM_Base_SetConfig+0xd0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x38>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a28      	ldr	r2, [pc, #160]	; (8006338 <TIM_Base_SetConfig+0xd4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x4a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a1e      	ldr	r2, [pc, #120]	; (800632c <TIM_Base_SetConfig+0xc8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00f      	beq.n	80062d6 <TIM_Base_SetConfig+0x72>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d00b      	beq.n	80062d6 <TIM_Base_SetConfig+0x72>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <TIM_Base_SetConfig+0xcc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d007      	beq.n	80062d6 <TIM_Base_SetConfig+0x72>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1a      	ldr	r2, [pc, #104]	; (8006334 <TIM_Base_SetConfig+0xd0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <TIM_Base_SetConfig+0x72>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a19      	ldr	r2, [pc, #100]	; (8006338 <TIM_Base_SetConfig+0xd4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d108      	bne.n	80062e8 <TIM_Base_SetConfig+0x84>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	62da      	str	r2, [r3, #44]	; 0x2c
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	629a      	str	r2, [r3, #40]	; 0x28
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a07      	ldr	r2, [pc, #28]	; (800632c <TIM_Base_SetConfig+0xc8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <TIM_Base_SetConfig+0xb8>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	615a      	str	r2, [r3, #20]
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00

0800633c <TIM_OC1_SetConfig>:
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f023 0201 	bic.w	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	621a      	str	r2, [r3, #32]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f023 0302 	bic.w	r3, r3, #2
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a1c      	ldr	r2, [pc, #112]	; (8006404 <TIM_OC1_SetConfig+0xc8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d10c      	bne.n	80063b2 <TIM_OC1_SetConfig+0x76>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 0308 	bic.w	r3, r3, #8
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 0304 	bic.w	r3, r3, #4
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a13      	ldr	r2, [pc, #76]	; (8006404 <TIM_OC1_SetConfig+0xc8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d111      	bne.n	80063de <TIM_OC1_SetConfig+0xa2>
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	605a      	str	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	619a      	str	r2, [r3, #24]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	635a      	str	r2, [r3, #52]	; 0x34
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	621a      	str	r2, [r3, #32]
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	40012c00 	.word	0x40012c00

08006408 <TIM_OC2_SetConfig>:
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f023 0210 	bic.w	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	621a      	str	r2, [r3, #32]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f023 0320 	bic.w	r3, r3, #32
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <TIM_OC2_SetConfig+0xd0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d10d      	bne.n	8006484 <TIM_OC2_SetConfig+0x7c>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <TIM_OC2_SetConfig+0xd0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d113      	bne.n	80064b4 <TIM_OC2_SetConfig+0xac>
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	619a      	str	r2, [r3, #24]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	621a      	str	r2, [r3, #32]
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr
 80064d8:	40012c00 	.word	0x40012c00

080064dc <TIM_OC3_SetConfig>:
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	621a      	str	r2, [r3, #32]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <TIM_OC3_SetConfig+0xd0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10d      	bne.n	8006556 <TIM_OC3_SetConfig+0x7a>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <TIM_OC3_SetConfig+0xd0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d113      	bne.n	8006586 <TIM_OC3_SetConfig+0xaa>
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	61da      	str	r2, [r3, #28]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	63da      	str	r2, [r3, #60]	; 0x3c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	621a      	str	r2, [r3, #32]
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00

080065b0 <TIM_OC4_SetConfig>:
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	031b      	lsls	r3, r3, #12
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a0f      	ldr	r2, [pc, #60]	; (8006648 <TIM_OC4_SetConfig+0x98>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d109      	bne.n	8006624 <TIM_OC4_SetConfig+0x74>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	019b      	lsls	r3, r3, #6
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	61da      	str	r2, [r3, #28]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	641a      	str	r2, [r3, #64]	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	621a      	str	r2, [r3, #32]
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr
 8006648:	40012c00 	.word	0x40012c00

0800664c <TIM_TI1_ConfigInputStage>:
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f023 0201 	bic.w	r2, r3, #1
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 030a 	bic.w	r3, r3, #10
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	619a      	str	r2, [r3, #24]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	621a      	str	r2, [r3, #32]
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr

080066a8 <TIM_TI2_ConfigInputStage>:
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0210 	bic.w	r2, r3, #16
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	621a      	str	r2, [r3, #32]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	031b      	lsls	r3, r3, #12
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	619a      	str	r2, [r3, #24]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	621a      	str	r2, [r3, #32]
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <TIM_ITRx_SetConfig>:
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	f043 0307 	orr.w	r3, r3, #7
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <TIM_ETR_SetConfig>:
 800673a:	b480      	push	{r7}
 800673c:	b087      	sub	sp, #28
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	021a      	lsls	r2, r3, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	431a      	orrs	r2, r3
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4313      	orrs	r3, r2
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	609a      	str	r2, [r3, #8]
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <TIM_CCxChannelCmd>:
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	2201      	movs	r2, #1
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	43db      	mvns	r3, r3
 800679a:	401a      	ands	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	621a      	str	r2, [r3, #32]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	fa01 f303 	lsl.w	r3, r1, r3
 80067b0:	431a      	orrs	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	621a      	str	r2, [r3, #32]
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_MasterConfigSynchronization>:
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e04b      	b.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	60bb      	str	r3, [r7, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a19      	ldr	r2, [pc, #100]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d013      	beq.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006824:	d00e      	beq.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a13      	ldr	r2, [pc, #76]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a12      	ldr	r2, [pc, #72]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d10c      	bne.n	800685e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800684a:	60bb      	str	r3, [r7, #8]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	4313      	orrs	r3, r2
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	609a      	str	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800686e:	2300      	movs	r3, #0
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40012c00 	.word	0x40012c00
 8006880:	40000400 	.word	0x40000400
 8006884:	40000800 	.word	0x40000800
 8006888:	40000c00 	.word	0x40000c00

0800688c <HAL_TIMEx_CommutCallback>:
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <HAL_TIMEx_BreakCallback>:
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <HAL_UART_Init>:
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_UART_Init+0x12>
 80068be:	2301      	movs	r3, #1
 80068c0:	e042      	b.n	8006948 <HAL_UART_Init+0x98>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_UART_Init+0x2c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fc ff4e 	bl	8003778 <HAL_UART_MspInit>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2224      	movs	r2, #36	; 0x24
 80068e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f82b 	bl	8006950 <UART_SetConfig>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691a      	ldr	r2, [r3, #16]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006908:	611a      	str	r2, [r3, #16]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006918:	615a      	str	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006928:	60da      	str	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	645a      	str	r2, [r3, #68]	; 0x44
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	635a      	str	r2, [r3, #52]	; 0x34
 8006946:	2300      	movs	r3, #0
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <UART_SetConfig>:
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	611a      	str	r2, [r3, #16]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	60bb      	str	r3, [r7, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800698a:	f023 030c 	bic.w	r3, r3, #12
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	68b9      	ldr	r1, [r7, #8]
 8006994:	430b      	orrs	r3, r1
 8006996:	60d3      	str	r3, [r2, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	615a      	str	r2, [r3, #20]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <UART_SetConfig+0x114>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d103      	bne.n	80069c0 <UART_SetConfig+0x70>
 80069b8:	f7fe f908 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	e002      	b.n	80069c6 <UART_SetConfig+0x76>
 80069c0:	f7fe f8f0 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009a      	lsls	r2, r3, #2
 80069d0:	441a      	add	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069dc:	4a22      	ldr	r2, [pc, #136]	; (8006a68 <UART_SetConfig+0x118>)
 80069de:	fba2 2303 	umull	r2, r3, r2, r3
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	0119      	lsls	r1, r3, #4
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009a      	lsls	r2, r3, #2
 80069f0:	441a      	add	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <UART_SetConfig+0x118>)
 80069fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	2064      	movs	r0, #100	; 0x64
 8006a06:	fb00 f303 	mul.w	r3, r0, r3
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	3332      	adds	r3, #50	; 0x32
 8006a10:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <UART_SetConfig+0x118>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a1c:	4419      	add	r1, r3
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009a      	lsls	r2, r3, #2
 8006a28:	441a      	add	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <UART_SetConfig+0x118>)
 8006a36:	fba3 0302 	umull	r0, r3, r3, r2
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2064      	movs	r0, #100	; 0x64
 8006a3e:	fb00 f303 	mul.w	r3, r0, r3
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	3332      	adds	r3, #50	; 0x32
 8006a48:	4a07      	ldr	r2, [pc, #28]	; (8006a68 <UART_SetConfig+0x118>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	440a      	add	r2, r1
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40013800 	.word	0x40013800
 8006a68:	51eb851f 	.word	0x51eb851f

08006a6c <__cvt>:
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a72:	461f      	mov	r7, r3
 8006a74:	bfbb      	ittet	lt
 8006a76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a7a:	461f      	movlt	r7, r3
 8006a7c:	2300      	movge	r3, #0
 8006a7e:	232d      	movlt	r3, #45	; 0x2d
 8006a80:	b088      	sub	sp, #32
 8006a82:	4614      	mov	r4, r2
 8006a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a88:	7013      	strb	r3, [r2, #0]
 8006a8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a90:	f023 0820 	bic.w	r8, r3, #32
 8006a94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a98:	d005      	beq.n	8006aa6 <__cvt+0x3a>
 8006a9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a9e:	d100      	bne.n	8006aa2 <__cvt+0x36>
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e000      	b.n	8006aa8 <__cvt+0x3c>
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	aa07      	add	r2, sp, #28
 8006aaa:	9204      	str	r2, [sp, #16]
 8006aac:	aa06      	add	r2, sp, #24
 8006aae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006ab2:	e9cd 3500 	strd	r3, r5, [sp]
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	463b      	mov	r3, r7
 8006aba:	f000 fe51 	bl	8007760 <_dtoa_r>
 8006abe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	d102      	bne.n	8006acc <__cvt+0x60>
 8006ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ac8:	07db      	lsls	r3, r3, #31
 8006aca:	d522      	bpl.n	8006b12 <__cvt+0xa6>
 8006acc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ad0:	eb06 0905 	add.w	r9, r6, r5
 8006ad4:	d110      	bne.n	8006af8 <__cvt+0x8c>
 8006ad6:	7833      	ldrb	r3, [r6, #0]
 8006ad8:	2b30      	cmp	r3, #48	; 0x30
 8006ada:	d10a      	bne.n	8006af2 <__cvt+0x86>
 8006adc:	2200      	movs	r2, #0
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f7fa f880 	bl	8000be8 <__aeabi_dcmpeq>
 8006ae8:	b918      	cbnz	r0, 8006af2 <__cvt+0x86>
 8006aea:	f1c5 0501 	rsb	r5, r5, #1
 8006aee:	f8ca 5000 	str.w	r5, [sl]
 8006af2:	f8da 3000 	ldr.w	r3, [sl]
 8006af6:	4499      	add	r9, r3
 8006af8:	2200      	movs	r2, #0
 8006afa:	2300      	movs	r3, #0
 8006afc:	4620      	mov	r0, r4
 8006afe:	4639      	mov	r1, r7
 8006b00:	f7fa f872 	bl	8000be8 <__aeabi_dcmpeq>
 8006b04:	b108      	cbz	r0, 8006b0a <__cvt+0x9e>
 8006b06:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b0a:	2230      	movs	r2, #48	; 0x30
 8006b0c:	9b07      	ldr	r3, [sp, #28]
 8006b0e:	454b      	cmp	r3, r9
 8006b10:	d307      	bcc.n	8006b22 <__cvt+0xb6>
 8006b12:	4630      	mov	r0, r6
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b18:	1b9b      	subs	r3, r3, r6
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	b008      	add	sp, #32
 8006b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	9107      	str	r1, [sp, #28]
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	e7f0      	b.n	8006b0c <__cvt+0xa0>

08006b2a <__exponent>:
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	f803 2b02 	strb.w	r2, [r3], #2
 8006b34:	bfb6      	itet	lt
 8006b36:	222d      	movlt	r2, #45	; 0x2d
 8006b38:	222b      	movge	r2, #43	; 0x2b
 8006b3a:	4249      	neglt	r1, r1
 8006b3c:	2909      	cmp	r1, #9
 8006b3e:	7042      	strb	r2, [r0, #1]
 8006b40:	dd2a      	ble.n	8006b98 <__exponent+0x6e>
 8006b42:	f10d 0207 	add.w	r2, sp, #7
 8006b46:	4617      	mov	r7, r2
 8006b48:	260a      	movs	r6, #10
 8006b4a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b4e:	4694      	mov	ip, r2
 8006b50:	fb06 1415 	mls	r4, r6, r5, r1
 8006b54:	3430      	adds	r4, #48	; 0x30
 8006b56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	2c63      	cmp	r4, #99	; 0x63
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b64:	dcf1      	bgt.n	8006b4a <__exponent+0x20>
 8006b66:	3130      	adds	r1, #48	; 0x30
 8006b68:	f1ac 0402 	sub.w	r4, ip, #2
 8006b6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b70:	4622      	mov	r2, r4
 8006b72:	1c41      	adds	r1, r0, #1
 8006b74:	42ba      	cmp	r2, r7
 8006b76:	d30a      	bcc.n	8006b8e <__exponent+0x64>
 8006b78:	f10d 0209 	add.w	r2, sp, #9
 8006b7c:	eba2 020c 	sub.w	r2, r2, ip
 8006b80:	42bc      	cmp	r4, r7
 8006b82:	bf88      	it	hi
 8006b84:	2200      	movhi	r2, #0
 8006b86:	4413      	add	r3, r2
 8006b88:	1a18      	subs	r0, r3, r0
 8006b8a:	b003      	add	sp, #12
 8006b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b96:	e7ed      	b.n	8006b74 <__exponent+0x4a>
 8006b98:	2330      	movs	r3, #48	; 0x30
 8006b9a:	3130      	adds	r1, #48	; 0x30
 8006b9c:	7083      	strb	r3, [r0, #2]
 8006b9e:	70c1      	strb	r1, [r0, #3]
 8006ba0:	1d03      	adds	r3, r0, #4
 8006ba2:	e7f1      	b.n	8006b88 <__exponent+0x5e>

08006ba4 <_printf_float>:
 8006ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba8:	b091      	sub	sp, #68	; 0x44
 8006baa:	460c      	mov	r4, r1
 8006bac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006bb0:	4616      	mov	r6, r2
 8006bb2:	461f      	mov	r7, r3
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	f000 fcc5 	bl	8007544 <_localeconv_r>
 8006bba:	6803      	ldr	r3, [r0, #0]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc0:	f7f9 fb32 	bl	8000228 <strlen>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8006bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bcc:	900a      	str	r0, [sp, #40]	; 0x28
 8006bce:	3307      	adds	r3, #7
 8006bd0:	f023 0307 	bic.w	r3, r3, #7
 8006bd4:	f103 0208 	add.w	r2, r3, #8
 8006bd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8006be0:	f8c8 2000 	str.w	r2, [r8]
 8006be4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006be8:	4652      	mov	r2, sl
 8006bea:	4643      	mov	r3, r8
 8006bec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bf0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	4b9c      	ldr	r3, [pc, #624]	; (8006e70 <_printf_float+0x2cc>)
 8006bfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c00:	f7fa f824 	bl	8000c4c <__aeabi_dcmpun>
 8006c04:	bb70      	cbnz	r0, 8006c64 <_printf_float+0xc0>
 8006c06:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0a:	4650      	mov	r0, sl
 8006c0c:	4b98      	ldr	r3, [pc, #608]	; (8006e70 <_printf_float+0x2cc>)
 8006c0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c10:	f7f9 fffe 	bl	8000c10 <__aeabi_dcmple>
 8006c14:	bb30      	cbnz	r0, 8006c64 <_printf_float+0xc0>
 8006c16:	2200      	movs	r2, #0
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	4641      	mov	r1, r8
 8006c1e:	f7f9 ffed 	bl	8000bfc <__aeabi_dcmplt>
 8006c22:	b110      	cbz	r0, 8006c2a <_printf_float+0x86>
 8006c24:	232d      	movs	r3, #45	; 0x2d
 8006c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c2a:	4a92      	ldr	r2, [pc, #584]	; (8006e74 <_printf_float+0x2d0>)
 8006c2c:	4b92      	ldr	r3, [pc, #584]	; (8006e78 <_printf_float+0x2d4>)
 8006c2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c32:	bf94      	ite	ls
 8006c34:	4690      	movls	r8, r2
 8006c36:	4698      	movhi	r8, r3
 8006c38:	2303      	movs	r3, #3
 8006c3a:	f04f 0a00 	mov.w	sl, #0
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	f02b 0304 	bic.w	r3, fp, #4
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	4633      	mov	r3, r6
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	9700      	str	r7, [sp, #0]
 8006c4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006c50:	f000 f9d6 	bl	8007000 <_printf_common>
 8006c54:	3001      	adds	r0, #1
 8006c56:	f040 8090 	bne.w	8006d7a <_printf_float+0x1d6>
 8006c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5e:	b011      	add	sp, #68	; 0x44
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	4652      	mov	r2, sl
 8006c66:	4643      	mov	r3, r8
 8006c68:	4650      	mov	r0, sl
 8006c6a:	4641      	mov	r1, r8
 8006c6c:	f7f9 ffee 	bl	8000c4c <__aeabi_dcmpun>
 8006c70:	b148      	cbz	r0, 8006c86 <_printf_float+0xe2>
 8006c72:	f1b8 0f00 	cmp.w	r8, #0
 8006c76:	bfb8      	it	lt
 8006c78:	232d      	movlt	r3, #45	; 0x2d
 8006c7a:	4a80      	ldr	r2, [pc, #512]	; (8006e7c <_printf_float+0x2d8>)
 8006c7c:	bfb8      	it	lt
 8006c7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c82:	4b7f      	ldr	r3, [pc, #508]	; (8006e80 <_printf_float+0x2dc>)
 8006c84:	e7d3      	b.n	8006c2e <_printf_float+0x8a>
 8006c86:	6863      	ldr	r3, [r4, #4]
 8006c88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	d142      	bne.n	8006d16 <_printf_float+0x172>
 8006c90:	2306      	movs	r3, #6
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	9206      	str	r2, [sp, #24]
 8006c98:	aa0e      	add	r2, sp, #56	; 0x38
 8006c9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c9e:	aa0d      	add	r2, sp, #52	; 0x34
 8006ca0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006ca4:	9203      	str	r2, [sp, #12]
 8006ca6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006caa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	6863      	ldr	r3, [r4, #4]
 8006cb2:	4652      	mov	r2, sl
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	4643      	mov	r3, r8
 8006cba:	910b      	str	r1, [sp, #44]	; 0x2c
 8006cbc:	f7ff fed6 	bl	8006a6c <__cvt>
 8006cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cc2:	4680      	mov	r8, r0
 8006cc4:	2947      	cmp	r1, #71	; 0x47
 8006cc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cc8:	d108      	bne.n	8006cdc <_printf_float+0x138>
 8006cca:	1cc8      	adds	r0, r1, #3
 8006ccc:	db02      	blt.n	8006cd4 <_printf_float+0x130>
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	dd40      	ble.n	8006d56 <_printf_float+0x1b2>
 8006cd4:	f1a9 0902 	sub.w	r9, r9, #2
 8006cd8:	fa5f f989 	uxtb.w	r9, r9
 8006cdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ce0:	d81f      	bhi.n	8006d22 <_printf_float+0x17e>
 8006ce2:	464a      	mov	r2, r9
 8006ce4:	3901      	subs	r1, #1
 8006ce6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cea:	910d      	str	r1, [sp, #52]	; 0x34
 8006cec:	f7ff ff1d 	bl	8006b2a <__exponent>
 8006cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cf2:	4682      	mov	sl, r0
 8006cf4:	1813      	adds	r3, r2, r0
 8006cf6:	2a01      	cmp	r2, #1
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	dc02      	bgt.n	8006d02 <_printf_float+0x15e>
 8006cfc:	6822      	ldr	r2, [r4, #0]
 8006cfe:	07d2      	lsls	r2, r2, #31
 8006d00:	d501      	bpl.n	8006d06 <_printf_float+0x162>
 8006d02:	3301      	adds	r3, #1
 8006d04:	6123      	str	r3, [r4, #16]
 8006d06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d09b      	beq.n	8006c46 <_printf_float+0xa2>
 8006d0e:	232d      	movs	r3, #45	; 0x2d
 8006d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d14:	e797      	b.n	8006c46 <_printf_float+0xa2>
 8006d16:	2947      	cmp	r1, #71	; 0x47
 8006d18:	d1bc      	bne.n	8006c94 <_printf_float+0xf0>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1ba      	bne.n	8006c94 <_printf_float+0xf0>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e7b7      	b.n	8006c92 <_printf_float+0xee>
 8006d22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d26:	d118      	bne.n	8006d5a <_printf_float+0x1b6>
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	6863      	ldr	r3, [r4, #4]
 8006d2c:	dd0b      	ble.n	8006d46 <_printf_float+0x1a2>
 8006d2e:	6121      	str	r1, [r4, #16]
 8006d30:	b913      	cbnz	r3, 8006d38 <_printf_float+0x194>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	07d0      	lsls	r0, r2, #31
 8006d36:	d502      	bpl.n	8006d3e <_printf_float+0x19a>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	440b      	add	r3, r1
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	f04f 0a00 	mov.w	sl, #0
 8006d42:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d44:	e7df      	b.n	8006d06 <_printf_float+0x162>
 8006d46:	b913      	cbnz	r3, 8006d4e <_printf_float+0x1aa>
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	07d2      	lsls	r2, r2, #31
 8006d4c:	d501      	bpl.n	8006d52 <_printf_float+0x1ae>
 8006d4e:	3302      	adds	r3, #2
 8006d50:	e7f4      	b.n	8006d3c <_printf_float+0x198>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7f2      	b.n	8006d3c <_printf_float+0x198>
 8006d56:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d5c:	4299      	cmp	r1, r3
 8006d5e:	db05      	blt.n	8006d6c <_printf_float+0x1c8>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	6121      	str	r1, [r4, #16]
 8006d64:	07d8      	lsls	r0, r3, #31
 8006d66:	d5ea      	bpl.n	8006d3e <_printf_float+0x19a>
 8006d68:	1c4b      	adds	r3, r1, #1
 8006d6a:	e7e7      	b.n	8006d3c <_printf_float+0x198>
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	bfcc      	ite	gt
 8006d70:	2201      	movgt	r2, #1
 8006d72:	f1c1 0202 	rsble	r2, r1, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	e7e0      	b.n	8006d3c <_printf_float+0x198>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	055a      	lsls	r2, r3, #21
 8006d7e:	d407      	bmi.n	8006d90 <_printf_float+0x1ec>
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	4642      	mov	r2, r8
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d12b      	bne.n	8006de6 <_printf_float+0x242>
 8006d8e:	e764      	b.n	8006c5a <_printf_float+0xb6>
 8006d90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d94:	f240 80dd 	bls.w	8006f52 <_printf_float+0x3ae>
 8006d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f7f9 ff22 	bl	8000be8 <__aeabi_dcmpeq>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d033      	beq.n	8006e10 <_printf_float+0x26c>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	4a35      	ldr	r2, [pc, #212]	; (8006e84 <_printf_float+0x2e0>)
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f af51 	beq.w	8006c5a <_printf_float+0xb6>
 8006db8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	db02      	blt.n	8006dc6 <_printf_float+0x222>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	07d8      	lsls	r0, r3, #31
 8006dc4:	d50f      	bpl.n	8006de6 <_printf_float+0x242>
 8006dc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f af42 	beq.w	8006c5a <_printf_float+0xb6>
 8006dd6:	f04f 0800 	mov.w	r8, #0
 8006dda:	f104 091a 	add.w	r9, r4, #26
 8006dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006de0:	3b01      	subs	r3, #1
 8006de2:	4543      	cmp	r3, r8
 8006de4:	dc09      	bgt.n	8006dfa <_printf_float+0x256>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	079b      	lsls	r3, r3, #30
 8006dea:	f100 8104 	bmi.w	8006ff6 <_printf_float+0x452>
 8006dee:	68e0      	ldr	r0, [r4, #12]
 8006df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006df2:	4298      	cmp	r0, r3
 8006df4:	bfb8      	it	lt
 8006df6:	4618      	movlt	r0, r3
 8006df8:	e731      	b.n	8006c5e <_printf_float+0xba>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	464a      	mov	r2, r9
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f af28 	beq.w	8006c5a <_printf_float+0xb6>
 8006e0a:	f108 0801 	add.w	r8, r8, #1
 8006e0e:	e7e6      	b.n	8006dde <_printf_float+0x23a>
 8006e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dc38      	bgt.n	8006e88 <_printf_float+0x2e4>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	4a19      	ldr	r2, [pc, #100]	; (8006e84 <_printf_float+0x2e0>)
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f af1a 	beq.w	8006c5a <_printf_float+0xb6>
 8006e26:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	d102      	bne.n	8006e34 <_printf_float+0x290>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	07d9      	lsls	r1, r3, #31
 8006e32:	d5d8      	bpl.n	8006de6 <_printf_float+0x242>
 8006e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f af0b 	beq.w	8006c5a <_printf_float+0xb6>
 8006e44:	f04f 0900 	mov.w	r9, #0
 8006e48:	f104 0a1a 	add.w	sl, r4, #26
 8006e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e4e:	425b      	negs	r3, r3
 8006e50:	454b      	cmp	r3, r9
 8006e52:	dc01      	bgt.n	8006e58 <_printf_float+0x2b4>
 8006e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e56:	e794      	b.n	8006d82 <_printf_float+0x1de>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f aef9 	beq.w	8006c5a <_printf_float+0xb6>
 8006e68:	f109 0901 	add.w	r9, r9, #1
 8006e6c:	e7ee      	b.n	8006e4c <_printf_float+0x2a8>
 8006e6e:	bf00      	nop
 8006e70:	7fefffff 	.word	0x7fefffff
 8006e74:	08009414 	.word	0x08009414
 8006e78:	08009418 	.word	0x08009418
 8006e7c:	0800941c 	.word	0x0800941c
 8006e80:	08009420 	.word	0x08009420
 8006e84:	08009424 	.word	0x08009424
 8006e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	bfa8      	it	ge
 8006e90:	461a      	movge	r2, r3
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	4691      	mov	r9, r2
 8006e96:	dc37      	bgt.n	8006f08 <_printf_float+0x364>
 8006e98:	f04f 0b00 	mov.w	fp, #0
 8006e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea0:	f104 021a 	add.w	r2, r4, #26
 8006ea4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006ea8:	ebaa 0309 	sub.w	r3, sl, r9
 8006eac:	455b      	cmp	r3, fp
 8006eae:	dc33      	bgt.n	8006f18 <_printf_float+0x374>
 8006eb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	db3b      	blt.n	8006f30 <_printf_float+0x38c>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	07da      	lsls	r2, r3, #31
 8006ebc:	d438      	bmi.n	8006f30 <_printf_float+0x38c>
 8006ebe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006ec2:	eba2 0903 	sub.w	r9, r2, r3
 8006ec6:	eba2 020a 	sub.w	r2, r2, sl
 8006eca:	4591      	cmp	r9, r2
 8006ecc:	bfa8      	it	ge
 8006ece:	4691      	movge	r9, r2
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	dc34      	bgt.n	8006f40 <_printf_float+0x39c>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ede:	f104 0a1a 	add.w	sl, r4, #26
 8006ee2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	eba3 0309 	sub.w	r3, r3, r9
 8006eec:	4543      	cmp	r3, r8
 8006eee:	f77f af7a 	ble.w	8006de6 <_printf_float+0x242>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f aeac 	beq.w	8006c5a <_printf_float+0xb6>
 8006f02:	f108 0801 	add.w	r8, r8, #1
 8006f06:	e7ec      	b.n	8006ee2 <_printf_float+0x33e>
 8006f08:	4613      	mov	r3, r2
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	d1c0      	bne.n	8006e98 <_printf_float+0x2f4>
 8006f16:	e6a0      	b.n	8006c5a <_printf_float+0xb6>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	f43f ae99 	beq.w	8006c5a <_printf_float+0xb6>
 8006f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f2a:	f10b 0b01 	add.w	fp, fp, #1
 8006f2e:	e7b9      	b.n	8006ea4 <_printf_float+0x300>
 8006f30:	4631      	mov	r1, r6
 8006f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d1bf      	bne.n	8006ebe <_printf_float+0x31a>
 8006f3e:	e68c      	b.n	8006c5a <_printf_float+0xb6>
 8006f40:	464b      	mov	r3, r9
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	eb08 020a 	add.w	r2, r8, sl
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d1c2      	bne.n	8006ed6 <_printf_float+0x332>
 8006f50:	e683      	b.n	8006c5a <_printf_float+0xb6>
 8006f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f54:	2a01      	cmp	r2, #1
 8006f56:	dc01      	bgt.n	8006f5c <_printf_float+0x3b8>
 8006f58:	07db      	lsls	r3, r3, #31
 8006f5a:	d539      	bpl.n	8006fd0 <_printf_float+0x42c>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4642      	mov	r2, r8
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f ae77 	beq.w	8006c5a <_printf_float+0xb6>
 8006f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	f43f ae6f 	beq.w	8006c5a <_printf_float+0xb6>
 8006f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f80:	2200      	movs	r2, #0
 8006f82:	2300      	movs	r3, #0
 8006f84:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006f88:	f7f9 fe2e 	bl	8000be8 <__aeabi_dcmpeq>
 8006f8c:	b9d8      	cbnz	r0, 8006fc6 <_printf_float+0x422>
 8006f8e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006f92:	f108 0201 	add.w	r2, r8, #1
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d10e      	bne.n	8006fbe <_printf_float+0x41a>
 8006fa0:	e65b      	b.n	8006c5a <_printf_float+0xb6>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	464a      	mov	r2, r9
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b8      	blx	r7
 8006fac:	3001      	adds	r0, #1
 8006fae:	f43f ae54 	beq.w	8006c5a <_printf_float+0xb6>
 8006fb2:	f108 0801 	add.w	r8, r8, #1
 8006fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	4543      	cmp	r3, r8
 8006fbc:	dcf1      	bgt.n	8006fa2 <_printf_float+0x3fe>
 8006fbe:	4653      	mov	r3, sl
 8006fc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fc4:	e6de      	b.n	8006d84 <_printf_float+0x1e0>
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	f104 091a 	add.w	r9, r4, #26
 8006fce:	e7f2      	b.n	8006fb6 <_printf_float+0x412>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	e7df      	b.n	8006f96 <_printf_float+0x3f2>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	464a      	mov	r2, r9
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f43f ae3a 	beq.w	8006c5a <_printf_float+0xb6>
 8006fe6:	f108 0801 	add.w	r8, r8, #1
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fee:	1a5b      	subs	r3, r3, r1
 8006ff0:	4543      	cmp	r3, r8
 8006ff2:	dcf0      	bgt.n	8006fd6 <_printf_float+0x432>
 8006ff4:	e6fb      	b.n	8006dee <_printf_float+0x24a>
 8006ff6:	f04f 0800 	mov.w	r8, #0
 8006ffa:	f104 0919 	add.w	r9, r4, #25
 8006ffe:	e7f4      	b.n	8006fea <_printf_float+0x446>

08007000 <_printf_common>:
 8007000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	4616      	mov	r6, r2
 8007006:	4699      	mov	r9, r3
 8007008:	688a      	ldr	r2, [r1, #8]
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	4607      	mov	r7, r0
 800700e:	4293      	cmp	r3, r2
 8007010:	bfb8      	it	lt
 8007012:	4613      	movlt	r3, r2
 8007014:	6033      	str	r3, [r6, #0]
 8007016:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800701a:	460c      	mov	r4, r1
 800701c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007020:	b10a      	cbz	r2, 8007026 <_printf_common+0x26>
 8007022:	3301      	adds	r3, #1
 8007024:	6033      	str	r3, [r6, #0]
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	0699      	lsls	r1, r3, #26
 800702a:	bf42      	ittt	mi
 800702c:	6833      	ldrmi	r3, [r6, #0]
 800702e:	3302      	addmi	r3, #2
 8007030:	6033      	strmi	r3, [r6, #0]
 8007032:	6825      	ldr	r5, [r4, #0]
 8007034:	f015 0506 	ands.w	r5, r5, #6
 8007038:	d106      	bne.n	8007048 <_printf_common+0x48>
 800703a:	f104 0a19 	add.w	sl, r4, #25
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	6832      	ldr	r2, [r6, #0]
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	42ab      	cmp	r3, r5
 8007046:	dc2b      	bgt.n	80070a0 <_printf_common+0xa0>
 8007048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800704c:	1e13      	subs	r3, r2, #0
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	bf18      	it	ne
 8007052:	2301      	movne	r3, #1
 8007054:	0692      	lsls	r2, r2, #26
 8007056:	d430      	bmi.n	80070ba <_printf_common+0xba>
 8007058:	4649      	mov	r1, r9
 800705a:	4638      	mov	r0, r7
 800705c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007060:	47c0      	blx	r8
 8007062:	3001      	adds	r0, #1
 8007064:	d023      	beq.n	80070ae <_printf_common+0xae>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	6922      	ldr	r2, [r4, #16]
 800706a:	f003 0306 	and.w	r3, r3, #6
 800706e:	2b04      	cmp	r3, #4
 8007070:	bf14      	ite	ne
 8007072:	2500      	movne	r5, #0
 8007074:	6833      	ldreq	r3, [r6, #0]
 8007076:	f04f 0600 	mov.w	r6, #0
 800707a:	bf08      	it	eq
 800707c:	68e5      	ldreq	r5, [r4, #12]
 800707e:	f104 041a 	add.w	r4, r4, #26
 8007082:	bf08      	it	eq
 8007084:	1aed      	subeq	r5, r5, r3
 8007086:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800708a:	bf08      	it	eq
 800708c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007090:	4293      	cmp	r3, r2
 8007092:	bfc4      	itt	gt
 8007094:	1a9b      	subgt	r3, r3, r2
 8007096:	18ed      	addgt	r5, r5, r3
 8007098:	42b5      	cmp	r5, r6
 800709a:	d11a      	bne.n	80070d2 <_printf_common+0xd2>
 800709c:	2000      	movs	r0, #0
 800709e:	e008      	b.n	80070b2 <_printf_common+0xb2>
 80070a0:	2301      	movs	r3, #1
 80070a2:	4652      	mov	r2, sl
 80070a4:	4649      	mov	r1, r9
 80070a6:	4638      	mov	r0, r7
 80070a8:	47c0      	blx	r8
 80070aa:	3001      	adds	r0, #1
 80070ac:	d103      	bne.n	80070b6 <_printf_common+0xb6>
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b6:	3501      	adds	r5, #1
 80070b8:	e7c1      	b.n	800703e <_printf_common+0x3e>
 80070ba:	2030      	movs	r0, #48	; 0x30
 80070bc:	18e1      	adds	r1, r4, r3
 80070be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070c8:	4422      	add	r2, r4
 80070ca:	3302      	adds	r3, #2
 80070cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070d0:	e7c2      	b.n	8007058 <_printf_common+0x58>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4622      	mov	r2, r4
 80070d6:	4649      	mov	r1, r9
 80070d8:	4638      	mov	r0, r7
 80070da:	47c0      	blx	r8
 80070dc:	3001      	adds	r0, #1
 80070de:	d0e6      	beq.n	80070ae <_printf_common+0xae>
 80070e0:	3601      	adds	r6, #1
 80070e2:	e7d9      	b.n	8007098 <_printf_common+0x98>

080070e4 <_printf_i>:
 80070e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	7e0f      	ldrb	r7, [r1, #24]
 80070ea:	4691      	mov	r9, r2
 80070ec:	2f78      	cmp	r7, #120	; 0x78
 80070ee:	4680      	mov	r8, r0
 80070f0:	460c      	mov	r4, r1
 80070f2:	469a      	mov	sl, r3
 80070f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070fa:	d807      	bhi.n	800710c <_printf_i+0x28>
 80070fc:	2f62      	cmp	r7, #98	; 0x62
 80070fe:	d80a      	bhi.n	8007116 <_printf_i+0x32>
 8007100:	2f00      	cmp	r7, #0
 8007102:	f000 80d5 	beq.w	80072b0 <_printf_i+0x1cc>
 8007106:	2f58      	cmp	r7, #88	; 0x58
 8007108:	f000 80c1 	beq.w	800728e <_printf_i+0x1aa>
 800710c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007114:	e03a      	b.n	800718c <_printf_i+0xa8>
 8007116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800711a:	2b15      	cmp	r3, #21
 800711c:	d8f6      	bhi.n	800710c <_printf_i+0x28>
 800711e:	a101      	add	r1, pc, #4	; (adr r1, 8007124 <_printf_i+0x40>)
 8007120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007124:	0800717d 	.word	0x0800717d
 8007128:	08007191 	.word	0x08007191
 800712c:	0800710d 	.word	0x0800710d
 8007130:	0800710d 	.word	0x0800710d
 8007134:	0800710d 	.word	0x0800710d
 8007138:	0800710d 	.word	0x0800710d
 800713c:	08007191 	.word	0x08007191
 8007140:	0800710d 	.word	0x0800710d
 8007144:	0800710d 	.word	0x0800710d
 8007148:	0800710d 	.word	0x0800710d
 800714c:	0800710d 	.word	0x0800710d
 8007150:	08007297 	.word	0x08007297
 8007154:	080071bd 	.word	0x080071bd
 8007158:	08007251 	.word	0x08007251
 800715c:	0800710d 	.word	0x0800710d
 8007160:	0800710d 	.word	0x0800710d
 8007164:	080072b9 	.word	0x080072b9
 8007168:	0800710d 	.word	0x0800710d
 800716c:	080071bd 	.word	0x080071bd
 8007170:	0800710d 	.word	0x0800710d
 8007174:	0800710d 	.word	0x0800710d
 8007178:	08007259 	.word	0x08007259
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	1d1a      	adds	r2, r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	602a      	str	r2, [r5, #0]
 8007184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800718c:	2301      	movs	r3, #1
 800718e:	e0a0      	b.n	80072d2 <_printf_i+0x1ee>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	682b      	ldr	r3, [r5, #0]
 8007194:	0607      	lsls	r7, r0, #24
 8007196:	f103 0104 	add.w	r1, r3, #4
 800719a:	6029      	str	r1, [r5, #0]
 800719c:	d501      	bpl.n	80071a2 <_printf_i+0xbe>
 800719e:	681e      	ldr	r6, [r3, #0]
 80071a0:	e003      	b.n	80071aa <_printf_i+0xc6>
 80071a2:	0646      	lsls	r6, r0, #25
 80071a4:	d5fb      	bpl.n	800719e <_printf_i+0xba>
 80071a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	da03      	bge.n	80071b6 <_printf_i+0xd2>
 80071ae:	232d      	movs	r3, #45	; 0x2d
 80071b0:	4276      	negs	r6, r6
 80071b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b6:	230a      	movs	r3, #10
 80071b8:	4859      	ldr	r0, [pc, #356]	; (8007320 <_printf_i+0x23c>)
 80071ba:	e012      	b.n	80071e2 <_printf_i+0xfe>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	6820      	ldr	r0, [r4, #0]
 80071c0:	1d19      	adds	r1, r3, #4
 80071c2:	6029      	str	r1, [r5, #0]
 80071c4:	0605      	lsls	r5, r0, #24
 80071c6:	d501      	bpl.n	80071cc <_printf_i+0xe8>
 80071c8:	681e      	ldr	r6, [r3, #0]
 80071ca:	e002      	b.n	80071d2 <_printf_i+0xee>
 80071cc:	0641      	lsls	r1, r0, #25
 80071ce:	d5fb      	bpl.n	80071c8 <_printf_i+0xe4>
 80071d0:	881e      	ldrh	r6, [r3, #0]
 80071d2:	2f6f      	cmp	r7, #111	; 0x6f
 80071d4:	bf0c      	ite	eq
 80071d6:	2308      	moveq	r3, #8
 80071d8:	230a      	movne	r3, #10
 80071da:	4851      	ldr	r0, [pc, #324]	; (8007320 <_printf_i+0x23c>)
 80071dc:	2100      	movs	r1, #0
 80071de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071e2:	6865      	ldr	r5, [r4, #4]
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	bfa8      	it	ge
 80071e8:	6821      	ldrge	r1, [r4, #0]
 80071ea:	60a5      	str	r5, [r4, #8]
 80071ec:	bfa4      	itt	ge
 80071ee:	f021 0104 	bicge.w	r1, r1, #4
 80071f2:	6021      	strge	r1, [r4, #0]
 80071f4:	b90e      	cbnz	r6, 80071fa <_printf_i+0x116>
 80071f6:	2d00      	cmp	r5, #0
 80071f8:	d04b      	beq.n	8007292 <_printf_i+0x1ae>
 80071fa:	4615      	mov	r5, r2
 80071fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8007200:	fb03 6711 	mls	r7, r3, r1, r6
 8007204:	5dc7      	ldrb	r7, [r0, r7]
 8007206:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800720a:	4637      	mov	r7, r6
 800720c:	42bb      	cmp	r3, r7
 800720e:	460e      	mov	r6, r1
 8007210:	d9f4      	bls.n	80071fc <_printf_i+0x118>
 8007212:	2b08      	cmp	r3, #8
 8007214:	d10b      	bne.n	800722e <_printf_i+0x14a>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	07de      	lsls	r6, r3, #31
 800721a:	d508      	bpl.n	800722e <_printf_i+0x14a>
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	6861      	ldr	r1, [r4, #4]
 8007220:	4299      	cmp	r1, r3
 8007222:	bfde      	ittt	le
 8007224:	2330      	movle	r3, #48	; 0x30
 8007226:	f805 3c01 	strble.w	r3, [r5, #-1]
 800722a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800722e:	1b52      	subs	r2, r2, r5
 8007230:	6122      	str	r2, [r4, #16]
 8007232:	464b      	mov	r3, r9
 8007234:	4621      	mov	r1, r4
 8007236:	4640      	mov	r0, r8
 8007238:	f8cd a000 	str.w	sl, [sp]
 800723c:	aa03      	add	r2, sp, #12
 800723e:	f7ff fedf 	bl	8007000 <_printf_common>
 8007242:	3001      	adds	r0, #1
 8007244:	d14a      	bne.n	80072dc <_printf_i+0x1f8>
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	b004      	add	sp, #16
 800724c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f043 0320 	orr.w	r3, r3, #32
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	2778      	movs	r7, #120	; 0x78
 800725a:	4832      	ldr	r0, [pc, #200]	; (8007324 <_printf_i+0x240>)
 800725c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	6829      	ldr	r1, [r5, #0]
 8007264:	061f      	lsls	r7, r3, #24
 8007266:	f851 6b04 	ldr.w	r6, [r1], #4
 800726a:	d402      	bmi.n	8007272 <_printf_i+0x18e>
 800726c:	065f      	lsls	r7, r3, #25
 800726e:	bf48      	it	mi
 8007270:	b2b6      	uxthmi	r6, r6
 8007272:	07df      	lsls	r7, r3, #31
 8007274:	bf48      	it	mi
 8007276:	f043 0320 	orrmi.w	r3, r3, #32
 800727a:	6029      	str	r1, [r5, #0]
 800727c:	bf48      	it	mi
 800727e:	6023      	strmi	r3, [r4, #0]
 8007280:	b91e      	cbnz	r6, 800728a <_printf_i+0x1a6>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	f023 0320 	bic.w	r3, r3, #32
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	2310      	movs	r3, #16
 800728c:	e7a6      	b.n	80071dc <_printf_i+0xf8>
 800728e:	4824      	ldr	r0, [pc, #144]	; (8007320 <_printf_i+0x23c>)
 8007290:	e7e4      	b.n	800725c <_printf_i+0x178>
 8007292:	4615      	mov	r5, r2
 8007294:	e7bd      	b.n	8007212 <_printf_i+0x12e>
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	6826      	ldr	r6, [r4, #0]
 800729a:	1d18      	adds	r0, r3, #4
 800729c:	6961      	ldr	r1, [r4, #20]
 800729e:	6028      	str	r0, [r5, #0]
 80072a0:	0635      	lsls	r5, r6, #24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	d501      	bpl.n	80072aa <_printf_i+0x1c6>
 80072a6:	6019      	str	r1, [r3, #0]
 80072a8:	e002      	b.n	80072b0 <_printf_i+0x1cc>
 80072aa:	0670      	lsls	r0, r6, #25
 80072ac:	d5fb      	bpl.n	80072a6 <_printf_i+0x1c2>
 80072ae:	8019      	strh	r1, [r3, #0]
 80072b0:	2300      	movs	r3, #0
 80072b2:	4615      	mov	r5, r2
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	e7bc      	b.n	8007232 <_printf_i+0x14e>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	2100      	movs	r1, #0
 80072bc:	1d1a      	adds	r2, r3, #4
 80072be:	602a      	str	r2, [r5, #0]
 80072c0:	681d      	ldr	r5, [r3, #0]
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f9b4 	bl	8007632 <memchr>
 80072ca:	b108      	cbz	r0, 80072d0 <_printf_i+0x1ec>
 80072cc:	1b40      	subs	r0, r0, r5
 80072ce:	6060      	str	r0, [r4, #4]
 80072d0:	6863      	ldr	r3, [r4, #4]
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	2300      	movs	r3, #0
 80072d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072da:	e7aa      	b.n	8007232 <_printf_i+0x14e>
 80072dc:	462a      	mov	r2, r5
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	47d0      	blx	sl
 80072e6:	3001      	adds	r0, #1
 80072e8:	d0ad      	beq.n	8007246 <_printf_i+0x162>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	079b      	lsls	r3, r3, #30
 80072ee:	d413      	bmi.n	8007318 <_printf_i+0x234>
 80072f0:	68e0      	ldr	r0, [r4, #12]
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	4298      	cmp	r0, r3
 80072f6:	bfb8      	it	lt
 80072f8:	4618      	movlt	r0, r3
 80072fa:	e7a6      	b.n	800724a <_printf_i+0x166>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4632      	mov	r2, r6
 8007300:	4649      	mov	r1, r9
 8007302:	4640      	mov	r0, r8
 8007304:	47d0      	blx	sl
 8007306:	3001      	adds	r0, #1
 8007308:	d09d      	beq.n	8007246 <_printf_i+0x162>
 800730a:	3501      	adds	r5, #1
 800730c:	68e3      	ldr	r3, [r4, #12]
 800730e:	9903      	ldr	r1, [sp, #12]
 8007310:	1a5b      	subs	r3, r3, r1
 8007312:	42ab      	cmp	r3, r5
 8007314:	dcf2      	bgt.n	80072fc <_printf_i+0x218>
 8007316:	e7eb      	b.n	80072f0 <_printf_i+0x20c>
 8007318:	2500      	movs	r5, #0
 800731a:	f104 0619 	add.w	r6, r4, #25
 800731e:	e7f5      	b.n	800730c <_printf_i+0x228>
 8007320:	08009426 	.word	0x08009426
 8007324:	08009437 	.word	0x08009437

08007328 <std>:
 8007328:	2300      	movs	r3, #0
 800732a:	b510      	push	{r4, lr}
 800732c:	4604      	mov	r4, r0
 800732e:	e9c0 3300 	strd	r3, r3, [r0]
 8007332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007336:	6083      	str	r3, [r0, #8]
 8007338:	8181      	strh	r1, [r0, #12]
 800733a:	6643      	str	r3, [r0, #100]	; 0x64
 800733c:	81c2      	strh	r2, [r0, #14]
 800733e:	6183      	str	r3, [r0, #24]
 8007340:	4619      	mov	r1, r3
 8007342:	2208      	movs	r2, #8
 8007344:	305c      	adds	r0, #92	; 0x5c
 8007346:	f000 f8f4 	bl	8007532 <memset>
 800734a:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <std+0x58>)
 800734c:	6224      	str	r4, [r4, #32]
 800734e:	6263      	str	r3, [r4, #36]	; 0x24
 8007350:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <std+0x5c>)
 8007352:	62a3      	str	r3, [r4, #40]	; 0x28
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <std+0x60>)
 8007356:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <std+0x64>)
 800735a:	6323      	str	r3, [r4, #48]	; 0x30
 800735c:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <std+0x68>)
 800735e:	429c      	cmp	r4, r3
 8007360:	d006      	beq.n	8007370 <std+0x48>
 8007362:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007366:	4294      	cmp	r4, r2
 8007368:	d002      	beq.n	8007370 <std+0x48>
 800736a:	33d0      	adds	r3, #208	; 0xd0
 800736c:	429c      	cmp	r4, r3
 800736e:	d105      	bne.n	800737c <std+0x54>
 8007370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007378:	f000 b958 	b.w	800762c <__retarget_lock_init_recursive>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	bf00      	nop
 8007380:	080074ad 	.word	0x080074ad
 8007384:	080074cf 	.word	0x080074cf
 8007388:	08007507 	.word	0x08007507
 800738c:	0800752b 	.word	0x0800752b
 8007390:	200004ec 	.word	0x200004ec

08007394 <stdio_exit_handler>:
 8007394:	4a02      	ldr	r2, [pc, #8]	; (80073a0 <stdio_exit_handler+0xc>)
 8007396:	4903      	ldr	r1, [pc, #12]	; (80073a4 <stdio_exit_handler+0x10>)
 8007398:	4803      	ldr	r0, [pc, #12]	; (80073a8 <stdio_exit_handler+0x14>)
 800739a:	f000 b869 	b.w	8007470 <_fwalk_sglue>
 800739e:	bf00      	nop
 80073a0:	20000034 	.word	0x20000034
 80073a4:	08008d15 	.word	0x08008d15
 80073a8:	20000040 	.word	0x20000040

080073ac <cleanup_stdio>:
 80073ac:	6841      	ldr	r1, [r0, #4]
 80073ae:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <cleanup_stdio+0x34>)
 80073b0:	b510      	push	{r4, lr}
 80073b2:	4299      	cmp	r1, r3
 80073b4:	4604      	mov	r4, r0
 80073b6:	d001      	beq.n	80073bc <cleanup_stdio+0x10>
 80073b8:	f001 fcac 	bl	8008d14 <_fflush_r>
 80073bc:	68a1      	ldr	r1, [r4, #8]
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <cleanup_stdio+0x38>)
 80073c0:	4299      	cmp	r1, r3
 80073c2:	d002      	beq.n	80073ca <cleanup_stdio+0x1e>
 80073c4:	4620      	mov	r0, r4
 80073c6:	f001 fca5 	bl	8008d14 <_fflush_r>
 80073ca:	68e1      	ldr	r1, [r4, #12]
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <cleanup_stdio+0x3c>)
 80073ce:	4299      	cmp	r1, r3
 80073d0:	d004      	beq.n	80073dc <cleanup_stdio+0x30>
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d8:	f001 bc9c 	b.w	8008d14 <_fflush_r>
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	bf00      	nop
 80073e0:	200004ec 	.word	0x200004ec
 80073e4:	20000554 	.word	0x20000554
 80073e8:	200005bc 	.word	0x200005bc

080073ec <global_stdio_init.part.0>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4b0b      	ldr	r3, [pc, #44]	; (800741c <global_stdio_init.part.0+0x30>)
 80073f0:	4c0b      	ldr	r4, [pc, #44]	; (8007420 <global_stdio_init.part.0+0x34>)
 80073f2:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <global_stdio_init.part.0+0x38>)
 80073f4:	4620      	mov	r0, r4
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	2104      	movs	r1, #4
 80073fa:	2200      	movs	r2, #0
 80073fc:	f7ff ff94 	bl	8007328 <std>
 8007400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007404:	2201      	movs	r2, #1
 8007406:	2109      	movs	r1, #9
 8007408:	f7ff ff8e 	bl	8007328 <std>
 800740c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007410:	2202      	movs	r2, #2
 8007412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007416:	2112      	movs	r1, #18
 8007418:	f7ff bf86 	b.w	8007328 <std>
 800741c:	20000624 	.word	0x20000624
 8007420:	200004ec 	.word	0x200004ec
 8007424:	08007395 	.word	0x08007395

08007428 <__sfp_lock_acquire>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__sfp_lock_acquire+0x8>)
 800742a:	f000 b900 	b.w	800762e <__retarget_lock_acquire_recursive>
 800742e:	bf00      	nop
 8007430:	2000062d 	.word	0x2000062d

08007434 <__sfp_lock_release>:
 8007434:	4801      	ldr	r0, [pc, #4]	; (800743c <__sfp_lock_release+0x8>)
 8007436:	f000 b8fb 	b.w	8007630 <__retarget_lock_release_recursive>
 800743a:	bf00      	nop
 800743c:	2000062d 	.word	0x2000062d

08007440 <__sinit>:
 8007440:	b510      	push	{r4, lr}
 8007442:	4604      	mov	r4, r0
 8007444:	f7ff fff0 	bl	8007428 <__sfp_lock_acquire>
 8007448:	6a23      	ldr	r3, [r4, #32]
 800744a:	b11b      	cbz	r3, 8007454 <__sinit+0x14>
 800744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007450:	f7ff bff0 	b.w	8007434 <__sfp_lock_release>
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <__sinit+0x28>)
 8007456:	6223      	str	r3, [r4, #32]
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <__sinit+0x2c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1f5      	bne.n	800744c <__sinit+0xc>
 8007460:	f7ff ffc4 	bl	80073ec <global_stdio_init.part.0>
 8007464:	e7f2      	b.n	800744c <__sinit+0xc>
 8007466:	bf00      	nop
 8007468:	080073ad 	.word	0x080073ad
 800746c:	20000624 	.word	0x20000624

08007470 <_fwalk_sglue>:
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007474:	4607      	mov	r7, r0
 8007476:	4688      	mov	r8, r1
 8007478:	4614      	mov	r4, r2
 800747a:	2600      	movs	r6, #0
 800747c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007480:	f1b9 0901 	subs.w	r9, r9, #1
 8007484:	d505      	bpl.n	8007492 <_fwalk_sglue+0x22>
 8007486:	6824      	ldr	r4, [r4, #0]
 8007488:	2c00      	cmp	r4, #0
 800748a:	d1f7      	bne.n	800747c <_fwalk_sglue+0xc>
 800748c:	4630      	mov	r0, r6
 800748e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007492:	89ab      	ldrh	r3, [r5, #12]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d907      	bls.n	80074a8 <_fwalk_sglue+0x38>
 8007498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800749c:	3301      	adds	r3, #1
 800749e:	d003      	beq.n	80074a8 <_fwalk_sglue+0x38>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4638      	mov	r0, r7
 80074a4:	47c0      	blx	r8
 80074a6:	4306      	orrs	r6, r0
 80074a8:	3568      	adds	r5, #104	; 0x68
 80074aa:	e7e9      	b.n	8007480 <_fwalk_sglue+0x10>

080074ac <__sread>:
 80074ac:	b510      	push	{r4, lr}
 80074ae:	460c      	mov	r4, r1
 80074b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b4:	f000 f86c 	bl	8007590 <_read_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	bfab      	itete	ge
 80074bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074be:	89a3      	ldrhlt	r3, [r4, #12]
 80074c0:	181b      	addge	r3, r3, r0
 80074c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074c6:	bfac      	ite	ge
 80074c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074ca:	81a3      	strhlt	r3, [r4, #12]
 80074cc:	bd10      	pop	{r4, pc}

080074ce <__swrite>:
 80074ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d2:	461f      	mov	r7, r3
 80074d4:	898b      	ldrh	r3, [r1, #12]
 80074d6:	4605      	mov	r5, r0
 80074d8:	05db      	lsls	r3, r3, #23
 80074da:	460c      	mov	r4, r1
 80074dc:	4616      	mov	r6, r2
 80074de:	d505      	bpl.n	80074ec <__swrite+0x1e>
 80074e0:	2302      	movs	r3, #2
 80074e2:	2200      	movs	r2, #0
 80074e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e8:	f000 f840 	bl	800756c <_lseek_r>
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	4632      	mov	r2, r6
 80074f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	4628      	mov	r0, r5
 80074f8:	463b      	mov	r3, r7
 80074fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007502:	f000 b857 	b.w	80075b4 <_write_r>

08007506 <__sseek>:
 8007506:	b510      	push	{r4, lr}
 8007508:	460c      	mov	r4, r1
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 f82d 	bl	800756c <_lseek_r>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	bf15      	itete	ne
 8007518:	6560      	strne	r0, [r4, #84]	; 0x54
 800751a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800751e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007522:	81a3      	strheq	r3, [r4, #12]
 8007524:	bf18      	it	ne
 8007526:	81a3      	strhne	r3, [r4, #12]
 8007528:	bd10      	pop	{r4, pc}

0800752a <__sclose>:
 800752a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752e:	f000 b80d 	b.w	800754c <_close_r>

08007532 <memset>:
 8007532:	4603      	mov	r3, r0
 8007534:	4402      	add	r2, r0
 8007536:	4293      	cmp	r3, r2
 8007538:	d100      	bne.n	800753c <memset+0xa>
 800753a:	4770      	bx	lr
 800753c:	f803 1b01 	strb.w	r1, [r3], #1
 8007540:	e7f9      	b.n	8007536 <memset+0x4>
	...

08007544 <_localeconv_r>:
 8007544:	4800      	ldr	r0, [pc, #0]	; (8007548 <_localeconv_r+0x4>)
 8007546:	4770      	bx	lr
 8007548:	20000180 	.word	0x20000180

0800754c <_close_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	2300      	movs	r3, #0
 8007550:	4d05      	ldr	r5, [pc, #20]	; (8007568 <_close_r+0x1c>)
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	f7fb fe10 	bl	800317c <_close>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_close_r+0x1a>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_close_r+0x1a>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20000628 	.word	0x20000628

0800756c <_lseek_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4604      	mov	r4, r0
 8007570:	4608      	mov	r0, r1
 8007572:	4611      	mov	r1, r2
 8007574:	2200      	movs	r2, #0
 8007576:	4d05      	ldr	r5, [pc, #20]	; (800758c <_lseek_r+0x20>)
 8007578:	602a      	str	r2, [r5, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f7fb fe22 	bl	80031c4 <_lseek>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_lseek_r+0x1e>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_lseek_r+0x1e>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	20000628 	.word	0x20000628

08007590 <_read_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	4611      	mov	r1, r2
 8007598:	2200      	movs	r2, #0
 800759a:	4d05      	ldr	r5, [pc, #20]	; (80075b0 <_read_r+0x20>)
 800759c:	602a      	str	r2, [r5, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	f7fb fdb3 	bl	800310a <_read>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_read_r+0x1e>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_read_r+0x1e>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000628 	.word	0x20000628

080075b4 <_write_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	2200      	movs	r2, #0
 80075be:	4d05      	ldr	r5, [pc, #20]	; (80075d4 <_write_r+0x20>)
 80075c0:	602a      	str	r2, [r5, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	f7fb fdbe 	bl	8003144 <_write>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_write_r+0x1e>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_write_r+0x1e>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	20000628 	.word	0x20000628

080075d8 <__errno>:
 80075d8:	4b01      	ldr	r3, [pc, #4]	; (80075e0 <__errno+0x8>)
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	2000008c 	.word	0x2000008c

080075e4 <__libc_init_array>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	2600      	movs	r6, #0
 80075e8:	4d0c      	ldr	r5, [pc, #48]	; (800761c <__libc_init_array+0x38>)
 80075ea:	4c0d      	ldr	r4, [pc, #52]	; (8007620 <__libc_init_array+0x3c>)
 80075ec:	1b64      	subs	r4, r4, r5
 80075ee:	10a4      	asrs	r4, r4, #2
 80075f0:	42a6      	cmp	r6, r4
 80075f2:	d109      	bne.n	8007608 <__libc_init_array+0x24>
 80075f4:	f001 fede 	bl	80093b4 <_init>
 80075f8:	2600      	movs	r6, #0
 80075fa:	4d0a      	ldr	r5, [pc, #40]	; (8007624 <__libc_init_array+0x40>)
 80075fc:	4c0a      	ldr	r4, [pc, #40]	; (8007628 <__libc_init_array+0x44>)
 80075fe:	1b64      	subs	r4, r4, r5
 8007600:	10a4      	asrs	r4, r4, #2
 8007602:	42a6      	cmp	r6, r4
 8007604:	d105      	bne.n	8007612 <__libc_init_array+0x2e>
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	f855 3b04 	ldr.w	r3, [r5], #4
 800760c:	4798      	blx	r3
 800760e:	3601      	adds	r6, #1
 8007610:	e7ee      	b.n	80075f0 <__libc_init_array+0xc>
 8007612:	f855 3b04 	ldr.w	r3, [r5], #4
 8007616:	4798      	blx	r3
 8007618:	3601      	adds	r6, #1
 800761a:	e7f2      	b.n	8007602 <__libc_init_array+0x1e>
 800761c:	0800978c 	.word	0x0800978c
 8007620:	0800978c 	.word	0x0800978c
 8007624:	0800978c 	.word	0x0800978c
 8007628:	08009790 	.word	0x08009790

0800762c <__retarget_lock_init_recursive>:
 800762c:	4770      	bx	lr

0800762e <__retarget_lock_acquire_recursive>:
 800762e:	4770      	bx	lr

08007630 <__retarget_lock_release_recursive>:
 8007630:	4770      	bx	lr

08007632 <memchr>:
 8007632:	4603      	mov	r3, r0
 8007634:	b510      	push	{r4, lr}
 8007636:	b2c9      	uxtb	r1, r1
 8007638:	4402      	add	r2, r0
 800763a:	4293      	cmp	r3, r2
 800763c:	4618      	mov	r0, r3
 800763e:	d101      	bne.n	8007644 <memchr+0x12>
 8007640:	2000      	movs	r0, #0
 8007642:	e003      	b.n	800764c <memchr+0x1a>
 8007644:	7804      	ldrb	r4, [r0, #0]
 8007646:	3301      	adds	r3, #1
 8007648:	428c      	cmp	r4, r1
 800764a:	d1f6      	bne.n	800763a <memchr+0x8>
 800764c:	bd10      	pop	{r4, pc}

0800764e <quorem>:
 800764e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007652:	6903      	ldr	r3, [r0, #16]
 8007654:	690c      	ldr	r4, [r1, #16]
 8007656:	4607      	mov	r7, r0
 8007658:	42a3      	cmp	r3, r4
 800765a:	db7f      	blt.n	800775c <quorem+0x10e>
 800765c:	3c01      	subs	r4, #1
 800765e:	f100 0514 	add.w	r5, r0, #20
 8007662:	f101 0814 	add.w	r8, r1, #20
 8007666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007674:	3301      	adds	r3, #1
 8007676:	429a      	cmp	r2, r3
 8007678:	fbb2 f6f3 	udiv	r6, r2, r3
 800767c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007684:	d331      	bcc.n	80076ea <quorem+0x9c>
 8007686:	f04f 0e00 	mov.w	lr, #0
 800768a:	4640      	mov	r0, r8
 800768c:	46ac      	mov	ip, r5
 800768e:	46f2      	mov	sl, lr
 8007690:	f850 2b04 	ldr.w	r2, [r0], #4
 8007694:	b293      	uxth	r3, r2
 8007696:	fb06 e303 	mla	r3, r6, r3, lr
 800769a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800769e:	0c1a      	lsrs	r2, r3, #16
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	fb06 220e 	mla	r2, r6, lr, r2
 80076a6:	ebaa 0303 	sub.w	r3, sl, r3
 80076aa:	f8dc a000 	ldr.w	sl, [ip]
 80076ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076b2:	fa1f fa8a 	uxth.w	sl, sl
 80076b6:	4453      	add	r3, sl
 80076b8:	f8dc a000 	ldr.w	sl, [ip]
 80076bc:	b292      	uxth	r2, r2
 80076be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076cc:	4581      	cmp	r9, r0
 80076ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076d2:	f84c 3b04 	str.w	r3, [ip], #4
 80076d6:	d2db      	bcs.n	8007690 <quorem+0x42>
 80076d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80076dc:	b92b      	cbnz	r3, 80076ea <quorem+0x9c>
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	429d      	cmp	r5, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	d32d      	bcc.n	8007744 <quorem+0xf6>
 80076e8:	613c      	str	r4, [r7, #16]
 80076ea:	4638      	mov	r0, r7
 80076ec:	f001 f992 	bl	8008a14 <__mcmp>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	db23      	blt.n	800773c <quorem+0xee>
 80076f4:	4629      	mov	r1, r5
 80076f6:	2000      	movs	r0, #0
 80076f8:	3601      	adds	r6, #1
 80076fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80076fe:	f8d1 c000 	ldr.w	ip, [r1]
 8007702:	b293      	uxth	r3, r2
 8007704:	1ac3      	subs	r3, r0, r3
 8007706:	0c12      	lsrs	r2, r2, #16
 8007708:	fa1f f08c 	uxth.w	r0, ip
 800770c:	4403      	add	r3, r0
 800770e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007712:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007716:	b29b      	uxth	r3, r3
 8007718:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800771c:	45c1      	cmp	r9, r8
 800771e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007722:	f841 3b04 	str.w	r3, [r1], #4
 8007726:	d2e8      	bcs.n	80076fa <quorem+0xac>
 8007728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800772c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007730:	b922      	cbnz	r2, 800773c <quorem+0xee>
 8007732:	3b04      	subs	r3, #4
 8007734:	429d      	cmp	r5, r3
 8007736:	461a      	mov	r2, r3
 8007738:	d30a      	bcc.n	8007750 <quorem+0x102>
 800773a:	613c      	str	r4, [r7, #16]
 800773c:	4630      	mov	r0, r6
 800773e:	b003      	add	sp, #12
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	3b04      	subs	r3, #4
 8007748:	2a00      	cmp	r2, #0
 800774a:	d1cd      	bne.n	80076e8 <quorem+0x9a>
 800774c:	3c01      	subs	r4, #1
 800774e:	e7c8      	b.n	80076e2 <quorem+0x94>
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	3b04      	subs	r3, #4
 8007754:	2a00      	cmp	r2, #0
 8007756:	d1f0      	bne.n	800773a <quorem+0xec>
 8007758:	3c01      	subs	r4, #1
 800775a:	e7eb      	b.n	8007734 <quorem+0xe6>
 800775c:	2000      	movs	r0, #0
 800775e:	e7ee      	b.n	800773e <quorem+0xf0>

08007760 <_dtoa_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	4616      	mov	r6, r2
 8007766:	461f      	mov	r7, r3
 8007768:	69c4      	ldr	r4, [r0, #28]
 800776a:	b099      	sub	sp, #100	; 0x64
 800776c:	4605      	mov	r5, r0
 800776e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007772:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007776:	b974      	cbnz	r4, 8007796 <_dtoa_r+0x36>
 8007778:	2010      	movs	r0, #16
 800777a:	f000 fe1d 	bl	80083b8 <malloc>
 800777e:	4602      	mov	r2, r0
 8007780:	61e8      	str	r0, [r5, #28]
 8007782:	b920      	cbnz	r0, 800778e <_dtoa_r+0x2e>
 8007784:	21ef      	movs	r1, #239	; 0xef
 8007786:	4bac      	ldr	r3, [pc, #688]	; (8007a38 <_dtoa_r+0x2d8>)
 8007788:	48ac      	ldr	r0, [pc, #688]	; (8007a3c <_dtoa_r+0x2dc>)
 800778a:	f001 fb09 	bl	8008da0 <__assert_func>
 800778e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007792:	6004      	str	r4, [r0, #0]
 8007794:	60c4      	str	r4, [r0, #12]
 8007796:	69eb      	ldr	r3, [r5, #28]
 8007798:	6819      	ldr	r1, [r3, #0]
 800779a:	b151      	cbz	r1, 80077b2 <_dtoa_r+0x52>
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	2301      	movs	r3, #1
 80077a0:	4093      	lsls	r3, r2
 80077a2:	604a      	str	r2, [r1, #4]
 80077a4:	608b      	str	r3, [r1, #8]
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 fefa 	bl	80085a0 <_Bfree>
 80077ac:	2200      	movs	r2, #0
 80077ae:	69eb      	ldr	r3, [r5, #28]
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	1e3b      	subs	r3, r7, #0
 80077b4:	bfaf      	iteee	ge
 80077b6:	2300      	movge	r3, #0
 80077b8:	2201      	movlt	r2, #1
 80077ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077be:	9305      	strlt	r3, [sp, #20]
 80077c0:	bfa8      	it	ge
 80077c2:	f8c8 3000 	strge.w	r3, [r8]
 80077c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80077ca:	4b9d      	ldr	r3, [pc, #628]	; (8007a40 <_dtoa_r+0x2e0>)
 80077cc:	bfb8      	it	lt
 80077ce:	f8c8 2000 	strlt.w	r2, [r8]
 80077d2:	ea33 0309 	bics.w	r3, r3, r9
 80077d6:	d119      	bne.n	800780c <_dtoa_r+0xac>
 80077d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80077dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077e4:	4333      	orrs	r3, r6
 80077e6:	f000 8589 	beq.w	80082fc <_dtoa_r+0xb9c>
 80077ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077ec:	b953      	cbnz	r3, 8007804 <_dtoa_r+0xa4>
 80077ee:	4b95      	ldr	r3, [pc, #596]	; (8007a44 <_dtoa_r+0x2e4>)
 80077f0:	e023      	b.n	800783a <_dtoa_r+0xda>
 80077f2:	4b95      	ldr	r3, [pc, #596]	; (8007a48 <_dtoa_r+0x2e8>)
 80077f4:	9303      	str	r3, [sp, #12]
 80077f6:	3308      	adds	r3, #8
 80077f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	9803      	ldr	r0, [sp, #12]
 80077fe:	b019      	add	sp, #100	; 0x64
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	4b8f      	ldr	r3, [pc, #572]	; (8007a44 <_dtoa_r+0x2e4>)
 8007806:	9303      	str	r3, [sp, #12]
 8007808:	3303      	adds	r3, #3
 800780a:	e7f5      	b.n	80077f8 <_dtoa_r+0x98>
 800780c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007810:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007818:	2200      	movs	r2, #0
 800781a:	2300      	movs	r3, #0
 800781c:	f7f9 f9e4 	bl	8000be8 <__aeabi_dcmpeq>
 8007820:	4680      	mov	r8, r0
 8007822:	b160      	cbz	r0, 800783e <_dtoa_r+0xde>
 8007824:	2301      	movs	r3, #1
 8007826:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8562 	beq.w	80082f6 <_dtoa_r+0xb96>
 8007832:	4b86      	ldr	r3, [pc, #536]	; (8007a4c <_dtoa_r+0x2ec>)
 8007834:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	3b01      	subs	r3, #1
 800783a:	9303      	str	r3, [sp, #12]
 800783c:	e7de      	b.n	80077fc <_dtoa_r+0x9c>
 800783e:	ab16      	add	r3, sp, #88	; 0x58
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	ab17      	add	r3, sp, #92	; 0x5c
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4628      	mov	r0, r5
 8007848:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800784c:	f001 f98a 	bl	8008b64 <__d2b>
 8007850:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007854:	4682      	mov	sl, r0
 8007856:	2c00      	cmp	r4, #0
 8007858:	d07e      	beq.n	8007958 <_dtoa_r+0x1f8>
 800785a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800785e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007860:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007868:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800786c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007870:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007874:	4619      	mov	r1, r3
 8007876:	2200      	movs	r2, #0
 8007878:	4b75      	ldr	r3, [pc, #468]	; (8007a50 <_dtoa_r+0x2f0>)
 800787a:	f7f8 fd95 	bl	80003a8 <__aeabi_dsub>
 800787e:	a368      	add	r3, pc, #416	; (adr r3, 8007a20 <_dtoa_r+0x2c0>)
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f7f8 ff48 	bl	8000718 <__aeabi_dmul>
 8007888:	a367      	add	r3, pc, #412	; (adr r3, 8007a28 <_dtoa_r+0x2c8>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fd8d 	bl	80003ac <__adddf3>
 8007892:	4606      	mov	r6, r0
 8007894:	4620      	mov	r0, r4
 8007896:	460f      	mov	r7, r1
 8007898:	f7f8 fed4 	bl	8000644 <__aeabi_i2d>
 800789c:	a364      	add	r3, pc, #400	; (adr r3, 8007a30 <_dtoa_r+0x2d0>)
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	f7f8 ff39 	bl	8000718 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4630      	mov	r0, r6
 80078ac:	4639      	mov	r1, r7
 80078ae:	f7f8 fd7d 	bl	80003ac <__adddf3>
 80078b2:	4606      	mov	r6, r0
 80078b4:	460f      	mov	r7, r1
 80078b6:	f7f9 f9df 	bl	8000c78 <__aeabi_d2iz>
 80078ba:	2200      	movs	r2, #0
 80078bc:	4683      	mov	fp, r0
 80078be:	2300      	movs	r3, #0
 80078c0:	4630      	mov	r0, r6
 80078c2:	4639      	mov	r1, r7
 80078c4:	f7f9 f99a 	bl	8000bfc <__aeabi_dcmplt>
 80078c8:	b148      	cbz	r0, 80078de <_dtoa_r+0x17e>
 80078ca:	4658      	mov	r0, fp
 80078cc:	f7f8 feba 	bl	8000644 <__aeabi_i2d>
 80078d0:	4632      	mov	r2, r6
 80078d2:	463b      	mov	r3, r7
 80078d4:	f7f9 f988 	bl	8000be8 <__aeabi_dcmpeq>
 80078d8:	b908      	cbnz	r0, 80078de <_dtoa_r+0x17e>
 80078da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078de:	f1bb 0f16 	cmp.w	fp, #22
 80078e2:	d857      	bhi.n	8007994 <_dtoa_r+0x234>
 80078e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078e8:	4b5a      	ldr	r3, [pc, #360]	; (8007a54 <_dtoa_r+0x2f4>)
 80078ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f7f9 f983 	bl	8000bfc <__aeabi_dcmplt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d04e      	beq.n	8007998 <_dtoa_r+0x238>
 80078fa:	2300      	movs	r3, #0
 80078fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007900:	930f      	str	r3, [sp, #60]	; 0x3c
 8007902:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007904:	1b1b      	subs	r3, r3, r4
 8007906:	1e5a      	subs	r2, r3, #1
 8007908:	bf46      	itte	mi
 800790a:	f1c3 0901 	rsbmi	r9, r3, #1
 800790e:	2300      	movmi	r3, #0
 8007910:	f04f 0900 	movpl.w	r9, #0
 8007914:	9209      	str	r2, [sp, #36]	; 0x24
 8007916:	bf48      	it	mi
 8007918:	9309      	strmi	r3, [sp, #36]	; 0x24
 800791a:	f1bb 0f00 	cmp.w	fp, #0
 800791e:	db3d      	blt.n	800799c <_dtoa_r+0x23c>
 8007920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007922:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007926:	445b      	add	r3, fp
 8007928:	9309      	str	r3, [sp, #36]	; 0x24
 800792a:	2300      	movs	r3, #0
 800792c:	930a      	str	r3, [sp, #40]	; 0x28
 800792e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007930:	2b09      	cmp	r3, #9
 8007932:	d867      	bhi.n	8007a04 <_dtoa_r+0x2a4>
 8007934:	2b05      	cmp	r3, #5
 8007936:	bfc4      	itt	gt
 8007938:	3b04      	subgt	r3, #4
 800793a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800793c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800793e:	bfc8      	it	gt
 8007940:	2400      	movgt	r4, #0
 8007942:	f1a3 0302 	sub.w	r3, r3, #2
 8007946:	bfd8      	it	le
 8007948:	2401      	movle	r4, #1
 800794a:	2b03      	cmp	r3, #3
 800794c:	f200 8086 	bhi.w	8007a5c <_dtoa_r+0x2fc>
 8007950:	e8df f003 	tbb	[pc, r3]
 8007954:	5637392c 	.word	0x5637392c
 8007958:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800795c:	441c      	add	r4, r3
 800795e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007962:	2b20      	cmp	r3, #32
 8007964:	bfc1      	itttt	gt
 8007966:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800796a:	fa09 f903 	lslgt.w	r9, r9, r3
 800796e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007972:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007976:	bfd6      	itet	le
 8007978:	f1c3 0320 	rsble	r3, r3, #32
 800797c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007980:	fa06 f003 	lslle.w	r0, r6, r3
 8007984:	f7f8 fe4e 	bl	8000624 <__aeabi_ui2d>
 8007988:	2201      	movs	r2, #1
 800798a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800798e:	3c01      	subs	r4, #1
 8007990:	9213      	str	r2, [sp, #76]	; 0x4c
 8007992:	e76f      	b.n	8007874 <_dtoa_r+0x114>
 8007994:	2301      	movs	r3, #1
 8007996:	e7b3      	b.n	8007900 <_dtoa_r+0x1a0>
 8007998:	900f      	str	r0, [sp, #60]	; 0x3c
 800799a:	e7b2      	b.n	8007902 <_dtoa_r+0x1a2>
 800799c:	f1cb 0300 	rsb	r3, fp, #0
 80079a0:	930a      	str	r3, [sp, #40]	; 0x28
 80079a2:	2300      	movs	r3, #0
 80079a4:	eba9 090b 	sub.w	r9, r9, fp
 80079a8:	930e      	str	r3, [sp, #56]	; 0x38
 80079aa:	e7c0      	b.n	800792e <_dtoa_r+0x1ce>
 80079ac:	2300      	movs	r3, #0
 80079ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80079b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dc55      	bgt.n	8007a62 <_dtoa_r+0x302>
 80079b6:	2301      	movs	r3, #1
 80079b8:	461a      	mov	r2, r3
 80079ba:	9306      	str	r3, [sp, #24]
 80079bc:	9308      	str	r3, [sp, #32]
 80079be:	9223      	str	r2, [sp, #140]	; 0x8c
 80079c0:	e00b      	b.n	80079da <_dtoa_r+0x27a>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e7f3      	b.n	80079ae <_dtoa_r+0x24e>
 80079c6:	2300      	movs	r3, #0
 80079c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079cc:	445b      	add	r3, fp
 80079ce:	9306      	str	r3, [sp, #24]
 80079d0:	3301      	adds	r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	9308      	str	r3, [sp, #32]
 80079d6:	bfb8      	it	lt
 80079d8:	2301      	movlt	r3, #1
 80079da:	2100      	movs	r1, #0
 80079dc:	2204      	movs	r2, #4
 80079de:	69e8      	ldr	r0, [r5, #28]
 80079e0:	f102 0614 	add.w	r6, r2, #20
 80079e4:	429e      	cmp	r6, r3
 80079e6:	d940      	bls.n	8007a6a <_dtoa_r+0x30a>
 80079e8:	6041      	str	r1, [r0, #4]
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 fd98 	bl	8008520 <_Balloc>
 80079f0:	9003      	str	r0, [sp, #12]
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d13c      	bne.n	8007a70 <_dtoa_r+0x310>
 80079f6:	4602      	mov	r2, r0
 80079f8:	f240 11af 	movw	r1, #431	; 0x1af
 80079fc:	4b16      	ldr	r3, [pc, #88]	; (8007a58 <_dtoa_r+0x2f8>)
 80079fe:	e6c3      	b.n	8007788 <_dtoa_r+0x28>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e7e1      	b.n	80079c8 <_dtoa_r+0x268>
 8007a04:	2401      	movs	r4, #1
 8007a06:	2300      	movs	r3, #0
 8007a08:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a0a:	9322      	str	r3, [sp, #136]	; 0x88
 8007a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a10:	2200      	movs	r2, #0
 8007a12:	9306      	str	r3, [sp, #24]
 8007a14:	9308      	str	r3, [sp, #32]
 8007a16:	2312      	movs	r3, #18
 8007a18:	e7d1      	b.n	80079be <_dtoa_r+0x25e>
 8007a1a:	bf00      	nop
 8007a1c:	f3af 8000 	nop.w
 8007a20:	636f4361 	.word	0x636f4361
 8007a24:	3fd287a7 	.word	0x3fd287a7
 8007a28:	8b60c8b3 	.word	0x8b60c8b3
 8007a2c:	3fc68a28 	.word	0x3fc68a28
 8007a30:	509f79fb 	.word	0x509f79fb
 8007a34:	3fd34413 	.word	0x3fd34413
 8007a38:	08009455 	.word	0x08009455
 8007a3c:	0800946c 	.word	0x0800946c
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	08009451 	.word	0x08009451
 8007a48:	08009448 	.word	0x08009448
 8007a4c:	08009425 	.word	0x08009425
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	08009558 	.word	0x08009558
 8007a58:	080094c4 	.word	0x080094c4
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a60:	e7d4      	b.n	8007a0c <_dtoa_r+0x2ac>
 8007a62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a64:	9306      	str	r3, [sp, #24]
 8007a66:	9308      	str	r3, [sp, #32]
 8007a68:	e7b7      	b.n	80079da <_dtoa_r+0x27a>
 8007a6a:	3101      	adds	r1, #1
 8007a6c:	0052      	lsls	r2, r2, #1
 8007a6e:	e7b7      	b.n	80079e0 <_dtoa_r+0x280>
 8007a70:	69eb      	ldr	r3, [r5, #28]
 8007a72:	9a03      	ldr	r2, [sp, #12]
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	9b08      	ldr	r3, [sp, #32]
 8007a78:	2b0e      	cmp	r3, #14
 8007a7a:	f200 80a8 	bhi.w	8007bce <_dtoa_r+0x46e>
 8007a7e:	2c00      	cmp	r4, #0
 8007a80:	f000 80a5 	beq.w	8007bce <_dtoa_r+0x46e>
 8007a84:	f1bb 0f00 	cmp.w	fp, #0
 8007a88:	dd34      	ble.n	8007af4 <_dtoa_r+0x394>
 8007a8a:	4b9a      	ldr	r3, [pc, #616]	; (8007cf4 <_dtoa_r+0x594>)
 8007a8c:	f00b 020f 	and.w	r2, fp, #15
 8007a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007aa0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007aa4:	d016      	beq.n	8007ad4 <_dtoa_r+0x374>
 8007aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007aaa:	4b93      	ldr	r3, [pc, #588]	; (8007cf8 <_dtoa_r+0x598>)
 8007aac:	2703      	movs	r7, #3
 8007aae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ab2:	f7f8 ff5b 	bl	800096c <__aeabi_ddiv>
 8007ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aba:	f004 040f 	and.w	r4, r4, #15
 8007abe:	4e8e      	ldr	r6, [pc, #568]	; (8007cf8 <_dtoa_r+0x598>)
 8007ac0:	b954      	cbnz	r4, 8007ad8 <_dtoa_r+0x378>
 8007ac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aca:	f7f8 ff4f 	bl	800096c <__aeabi_ddiv>
 8007ace:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ad2:	e029      	b.n	8007b28 <_dtoa_r+0x3c8>
 8007ad4:	2702      	movs	r7, #2
 8007ad6:	e7f2      	b.n	8007abe <_dtoa_r+0x35e>
 8007ad8:	07e1      	lsls	r1, r4, #31
 8007ada:	d508      	bpl.n	8007aee <_dtoa_r+0x38e>
 8007adc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ae0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ae4:	f7f8 fe18 	bl	8000718 <__aeabi_dmul>
 8007ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007aec:	3701      	adds	r7, #1
 8007aee:	1064      	asrs	r4, r4, #1
 8007af0:	3608      	adds	r6, #8
 8007af2:	e7e5      	b.n	8007ac0 <_dtoa_r+0x360>
 8007af4:	f000 80a5 	beq.w	8007c42 <_dtoa_r+0x4e2>
 8007af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007afc:	f1cb 0400 	rsb	r4, fp, #0
 8007b00:	4b7c      	ldr	r3, [pc, #496]	; (8007cf4 <_dtoa_r+0x594>)
 8007b02:	f004 020f 	and.w	r2, r4, #15
 8007b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f7f8 fe03 	bl	8000718 <__aeabi_dmul>
 8007b12:	2702      	movs	r7, #2
 8007b14:	2300      	movs	r3, #0
 8007b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b1a:	4e77      	ldr	r6, [pc, #476]	; (8007cf8 <_dtoa_r+0x598>)
 8007b1c:	1124      	asrs	r4, r4, #4
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	f040 8084 	bne.w	8007c2c <_dtoa_r+0x4cc>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1d2      	bne.n	8007ace <_dtoa_r+0x36e>
 8007b28:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8087 	beq.w	8007c46 <_dtoa_r+0x4e6>
 8007b38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4b6f      	ldr	r3, [pc, #444]	; (8007cfc <_dtoa_r+0x59c>)
 8007b40:	f7f9 f85c 	bl	8000bfc <__aeabi_dcmplt>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d07e      	beq.n	8007c46 <_dtoa_r+0x4e6>
 8007b48:	9b08      	ldr	r3, [sp, #32]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d07b      	beq.n	8007c46 <_dtoa_r+0x4e6>
 8007b4e:	9b06      	ldr	r3, [sp, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dd38      	ble.n	8007bc6 <_dtoa_r+0x466>
 8007b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4b69      	ldr	r3, [pc, #420]	; (8007d00 <_dtoa_r+0x5a0>)
 8007b5c:	f7f8 fddc 	bl	8000718 <__aeabi_dmul>
 8007b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b64:	9c06      	ldr	r4, [sp, #24]
 8007b66:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007b6a:	3701      	adds	r7, #1
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	f7f8 fd69 	bl	8000644 <__aeabi_i2d>
 8007b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b76:	f7f8 fdcf 	bl	8000718 <__aeabi_dmul>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	4b61      	ldr	r3, [pc, #388]	; (8007d04 <_dtoa_r+0x5a4>)
 8007b7e:	f7f8 fc15 	bl	80003ac <__adddf3>
 8007b82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b8a:	9611      	str	r6, [sp, #68]	; 0x44
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	d15d      	bne.n	8007c4c <_dtoa_r+0x4ec>
 8007b90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b94:	2200      	movs	r2, #0
 8007b96:	4b5c      	ldr	r3, [pc, #368]	; (8007d08 <_dtoa_r+0x5a8>)
 8007b98:	f7f8 fc06 	bl	80003a8 <__aeabi_dsub>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ba4:	4633      	mov	r3, r6
 8007ba6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ba8:	f7f9 f846 	bl	8000c38 <__aeabi_dcmpgt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f040 8295 	bne.w	80080dc <_dtoa_r+0x97c>
 8007bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007bbc:	f7f9 f81e 	bl	8000bfc <__aeabi_dcmplt>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f040 8289 	bne.w	80080d8 <_dtoa_r+0x978>
 8007bc6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007bca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f2c0 8151 	blt.w	8007e78 <_dtoa_r+0x718>
 8007bd6:	f1bb 0f0e 	cmp.w	fp, #14
 8007bda:	f300 814d 	bgt.w	8007e78 <_dtoa_r+0x718>
 8007bde:	4b45      	ldr	r3, [pc, #276]	; (8007cf4 <_dtoa_r+0x594>)
 8007be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007be4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007be8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007bec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f280 80da 	bge.w	8007da8 <_dtoa_r+0x648>
 8007bf4:	9b08      	ldr	r3, [sp, #32]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f300 80d6 	bgt.w	8007da8 <_dtoa_r+0x648>
 8007bfc:	f040 826b 	bne.w	80080d6 <_dtoa_r+0x976>
 8007c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c04:	2200      	movs	r2, #0
 8007c06:	4b40      	ldr	r3, [pc, #256]	; (8007d08 <_dtoa_r+0x5a8>)
 8007c08:	f7f8 fd86 	bl	8000718 <__aeabi_dmul>
 8007c0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c10:	f7f9 f808 	bl	8000c24 <__aeabi_dcmpge>
 8007c14:	9c08      	ldr	r4, [sp, #32]
 8007c16:	4626      	mov	r6, r4
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f040 8241 	bne.w	80080a0 <_dtoa_r+0x940>
 8007c1e:	2331      	movs	r3, #49	; 0x31
 8007c20:	9f03      	ldr	r7, [sp, #12]
 8007c22:	f10b 0b01 	add.w	fp, fp, #1
 8007c26:	f807 3b01 	strb.w	r3, [r7], #1
 8007c2a:	e23d      	b.n	80080a8 <_dtoa_r+0x948>
 8007c2c:	07e2      	lsls	r2, r4, #31
 8007c2e:	d505      	bpl.n	8007c3c <_dtoa_r+0x4dc>
 8007c30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c34:	f7f8 fd70 	bl	8000718 <__aeabi_dmul>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	3701      	adds	r7, #1
 8007c3c:	1064      	asrs	r4, r4, #1
 8007c3e:	3608      	adds	r6, #8
 8007c40:	e76d      	b.n	8007b1e <_dtoa_r+0x3be>
 8007c42:	2702      	movs	r7, #2
 8007c44:	e770      	b.n	8007b28 <_dtoa_r+0x3c8>
 8007c46:	46d8      	mov	r8, fp
 8007c48:	9c08      	ldr	r4, [sp, #32]
 8007c4a:	e78f      	b.n	8007b6c <_dtoa_r+0x40c>
 8007c4c:	9903      	ldr	r1, [sp, #12]
 8007c4e:	4b29      	ldr	r3, [pc, #164]	; (8007cf4 <_dtoa_r+0x594>)
 8007c50:	4421      	add	r1, r4
 8007c52:	9112      	str	r1, [sp, #72]	; 0x48
 8007c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c5a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007c5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c62:	2900      	cmp	r1, #0
 8007c64:	d054      	beq.n	8007d10 <_dtoa_r+0x5b0>
 8007c66:	2000      	movs	r0, #0
 8007c68:	4928      	ldr	r1, [pc, #160]	; (8007d0c <_dtoa_r+0x5ac>)
 8007c6a:	f7f8 fe7f 	bl	800096c <__aeabi_ddiv>
 8007c6e:	463b      	mov	r3, r7
 8007c70:	4632      	mov	r2, r6
 8007c72:	f7f8 fb99 	bl	80003a8 <__aeabi_dsub>
 8007c76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c7a:	9f03      	ldr	r7, [sp, #12]
 8007c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c80:	f7f8 fffa 	bl	8000c78 <__aeabi_d2iz>
 8007c84:	4604      	mov	r4, r0
 8007c86:	f7f8 fcdd 	bl	8000644 <__aeabi_i2d>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c92:	f7f8 fb89 	bl	80003a8 <__aeabi_dsub>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	3430      	adds	r4, #48	; 0x30
 8007c9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ca4:	f807 4b01 	strb.w	r4, [r7], #1
 8007ca8:	f7f8 ffa8 	bl	8000bfc <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d173      	bne.n	8007d98 <_dtoa_r+0x638>
 8007cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	4911      	ldr	r1, [pc, #68]	; (8007cfc <_dtoa_r+0x59c>)
 8007cb8:	f7f8 fb76 	bl	80003a8 <__aeabi_dsub>
 8007cbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cc0:	f7f8 ff9c 	bl	8000bfc <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f040 80b6 	bne.w	8007e36 <_dtoa_r+0x6d6>
 8007cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ccc:	429f      	cmp	r7, r3
 8007cce:	f43f af7a 	beq.w	8007bc6 <_dtoa_r+0x466>
 8007cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <_dtoa_r+0x5a0>)
 8007cda:	f7f8 fd1d 	bl	8000718 <__aeabi_dmul>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <_dtoa_r+0x5a0>)
 8007cea:	f7f8 fd15 	bl	8000718 <__aeabi_dmul>
 8007cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cf2:	e7c3      	b.n	8007c7c <_dtoa_r+0x51c>
 8007cf4:	08009558 	.word	0x08009558
 8007cf8:	08009530 	.word	0x08009530
 8007cfc:	3ff00000 	.word	0x3ff00000
 8007d00:	40240000 	.word	0x40240000
 8007d04:	401c0000 	.word	0x401c0000
 8007d08:	40140000 	.word	0x40140000
 8007d0c:	3fe00000 	.word	0x3fe00000
 8007d10:	4630      	mov	r0, r6
 8007d12:	4639      	mov	r1, r7
 8007d14:	f7f8 fd00 	bl	8000718 <__aeabi_dmul>
 8007d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d1e:	9c03      	ldr	r4, [sp, #12]
 8007d20:	9314      	str	r3, [sp, #80]	; 0x50
 8007d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d26:	f7f8 ffa7 	bl	8000c78 <__aeabi_d2iz>
 8007d2a:	9015      	str	r0, [sp, #84]	; 0x54
 8007d2c:	f7f8 fc8a 	bl	8000644 <__aeabi_i2d>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d38:	f7f8 fb36 	bl	80003a8 <__aeabi_dsub>
 8007d3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d3e:	4606      	mov	r6, r0
 8007d40:	3330      	adds	r3, #48	; 0x30
 8007d42:	f804 3b01 	strb.w	r3, [r4], #1
 8007d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d48:	460f      	mov	r7, r1
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	f04f 0200 	mov.w	r2, #0
 8007d50:	d124      	bne.n	8007d9c <_dtoa_r+0x63c>
 8007d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d56:	4baf      	ldr	r3, [pc, #700]	; (8008014 <_dtoa_r+0x8b4>)
 8007d58:	f7f8 fb28 	bl	80003ac <__adddf3>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 ff68 	bl	8000c38 <__aeabi_dcmpgt>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d163      	bne.n	8007e34 <_dtoa_r+0x6d4>
 8007d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d70:	2000      	movs	r0, #0
 8007d72:	49a8      	ldr	r1, [pc, #672]	; (8008014 <_dtoa_r+0x8b4>)
 8007d74:	f7f8 fb18 	bl	80003a8 <__aeabi_dsub>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f7f8 ff3c 	bl	8000bfc <__aeabi_dcmplt>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	f43f af1e 	beq.w	8007bc6 <_dtoa_r+0x466>
 8007d8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007d8c:	1e7b      	subs	r3, r7, #1
 8007d8e:	9314      	str	r3, [sp, #80]	; 0x50
 8007d90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007d94:	2b30      	cmp	r3, #48	; 0x30
 8007d96:	d0f8      	beq.n	8007d8a <_dtoa_r+0x62a>
 8007d98:	46c3      	mov	fp, r8
 8007d9a:	e03b      	b.n	8007e14 <_dtoa_r+0x6b4>
 8007d9c:	4b9e      	ldr	r3, [pc, #632]	; (8008018 <_dtoa_r+0x8b8>)
 8007d9e:	f7f8 fcbb 	bl	8000718 <__aeabi_dmul>
 8007da2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007da6:	e7bc      	b.n	8007d22 <_dtoa_r+0x5c2>
 8007da8:	9f03      	ldr	r7, [sp, #12]
 8007daa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007db2:	4640      	mov	r0, r8
 8007db4:	4649      	mov	r1, r9
 8007db6:	f7f8 fdd9 	bl	800096c <__aeabi_ddiv>
 8007dba:	f7f8 ff5d 	bl	8000c78 <__aeabi_d2iz>
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	f7f8 fc40 	bl	8000644 <__aeabi_i2d>
 8007dc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dc8:	f7f8 fca6 	bl	8000718 <__aeabi_dmul>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fae8 	bl	80003a8 <__aeabi_dsub>
 8007dd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007ddc:	f807 6b01 	strb.w	r6, [r7], #1
 8007de0:	9e03      	ldr	r6, [sp, #12]
 8007de2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007de6:	1bbe      	subs	r6, r7, r6
 8007de8:	45b4      	cmp	ip, r6
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	d136      	bne.n	8007e5e <_dtoa_r+0x6fe>
 8007df0:	f7f8 fadc 	bl	80003ac <__adddf3>
 8007df4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007df8:	4680      	mov	r8, r0
 8007dfa:	4689      	mov	r9, r1
 8007dfc:	f7f8 ff1c 	bl	8000c38 <__aeabi_dcmpgt>
 8007e00:	bb58      	cbnz	r0, 8007e5a <_dtoa_r+0x6fa>
 8007e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e06:	4640      	mov	r0, r8
 8007e08:	4649      	mov	r1, r9
 8007e0a:	f7f8 feed 	bl	8000be8 <__aeabi_dcmpeq>
 8007e0e:	b108      	cbz	r0, 8007e14 <_dtoa_r+0x6b4>
 8007e10:	07e3      	lsls	r3, r4, #31
 8007e12:	d422      	bmi.n	8007e5a <_dtoa_r+0x6fa>
 8007e14:	4651      	mov	r1, sl
 8007e16:	4628      	mov	r0, r5
 8007e18:	f000 fbc2 	bl	80085a0 <_Bfree>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e20:	703b      	strb	r3, [r7, #0]
 8007e22:	f10b 0301 	add.w	r3, fp, #1
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f43f ace6 	beq.w	80077fc <_dtoa_r+0x9c>
 8007e30:	601f      	str	r7, [r3, #0]
 8007e32:	e4e3      	b.n	80077fc <_dtoa_r+0x9c>
 8007e34:	4627      	mov	r7, r4
 8007e36:	463b      	mov	r3, r7
 8007e38:	461f      	mov	r7, r3
 8007e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e3e:	2a39      	cmp	r2, #57	; 0x39
 8007e40:	d107      	bne.n	8007e52 <_dtoa_r+0x6f2>
 8007e42:	9a03      	ldr	r2, [sp, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d1f7      	bne.n	8007e38 <_dtoa_r+0x6d8>
 8007e48:	2230      	movs	r2, #48	; 0x30
 8007e4a:	9903      	ldr	r1, [sp, #12]
 8007e4c:	f108 0801 	add.w	r8, r8, #1
 8007e50:	700a      	strb	r2, [r1, #0]
 8007e52:	781a      	ldrb	r2, [r3, #0]
 8007e54:	3201      	adds	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	e79e      	b.n	8007d98 <_dtoa_r+0x638>
 8007e5a:	46d8      	mov	r8, fp
 8007e5c:	e7eb      	b.n	8007e36 <_dtoa_r+0x6d6>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4b6d      	ldr	r3, [pc, #436]	; (8008018 <_dtoa_r+0x8b8>)
 8007e62:	f7f8 fc59 	bl	8000718 <__aeabi_dmul>
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	f7f8 febb 	bl	8000be8 <__aeabi_dcmpeq>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d09b      	beq.n	8007dae <_dtoa_r+0x64e>
 8007e76:	e7cd      	b.n	8007e14 <_dtoa_r+0x6b4>
 8007e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	f000 80c4 	beq.w	8008008 <_dtoa_r+0x8a8>
 8007e80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e82:	2a01      	cmp	r2, #1
 8007e84:	f300 80a8 	bgt.w	8007fd8 <_dtoa_r+0x878>
 8007e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	f000 80a0 	beq.w	8007fd0 <_dtoa_r+0x870>
 8007e90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e94:	464f      	mov	r7, r9
 8007e96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	441a      	add	r2, r3
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	4499      	add	r9, r3
 8007ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ea4:	f000 fc32 	bl	800870c <__i2b>
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	b15f      	cbz	r7, 8007ec4 <_dtoa_r+0x764>
 8007eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dd08      	ble.n	8007ec4 <_dtoa_r+0x764>
 8007eb2:	42bb      	cmp	r3, r7
 8007eb4:	bfa8      	it	ge
 8007eb6:	463b      	movge	r3, r7
 8007eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eba:	eba9 0903 	sub.w	r9, r9, r3
 8007ebe:	1aff      	subs	r7, r7, r3
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec6:	b1f3      	cbz	r3, 8007f06 <_dtoa_r+0x7a6>
 8007ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80a0 	beq.w	8008010 <_dtoa_r+0x8b0>
 8007ed0:	2c00      	cmp	r4, #0
 8007ed2:	dd10      	ble.n	8007ef6 <_dtoa_r+0x796>
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4622      	mov	r2, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 fcd5 	bl	8008888 <__pow5mult>
 8007ede:	4652      	mov	r2, sl
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f000 fc27 	bl	8008738 <__multiply>
 8007eea:	4680      	mov	r8, r0
 8007eec:	4651      	mov	r1, sl
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f000 fb56 	bl	80085a0 <_Bfree>
 8007ef4:	46c2      	mov	sl, r8
 8007ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef8:	1b1a      	subs	r2, r3, r4
 8007efa:	d004      	beq.n	8007f06 <_dtoa_r+0x7a6>
 8007efc:	4651      	mov	r1, sl
 8007efe:	4628      	mov	r0, r5
 8007f00:	f000 fcc2 	bl	8008888 <__pow5mult>
 8007f04:	4682      	mov	sl, r0
 8007f06:	2101      	movs	r1, #1
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 fbff 	bl	800870c <__i2b>
 8007f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f10:	4604      	mov	r4, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f340 8082 	ble.w	800801c <_dtoa_r+0x8bc>
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 fcb3 	bl	8008888 <__pow5mult>
 8007f22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f24:	4604      	mov	r4, r0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	dd7b      	ble.n	8008022 <_dtoa_r+0x8c2>
 8007f2a:	f04f 0800 	mov.w	r8, #0
 8007f2e:	6923      	ldr	r3, [r4, #16]
 8007f30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f34:	6918      	ldr	r0, [r3, #16]
 8007f36:	f000 fb9b 	bl	8008670 <__hi0bits>
 8007f3a:	f1c0 0020 	rsb	r0, r0, #32
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	4418      	add	r0, r3
 8007f42:	f010 001f 	ands.w	r0, r0, #31
 8007f46:	f000 8092 	beq.w	800806e <_dtoa_r+0x90e>
 8007f4a:	f1c0 0320 	rsb	r3, r0, #32
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	f340 8085 	ble.w	800805e <_dtoa_r+0x8fe>
 8007f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f56:	f1c0 001c 	rsb	r0, r0, #28
 8007f5a:	4403      	add	r3, r0
 8007f5c:	4481      	add	r9, r0
 8007f5e:	4407      	add	r7, r0
 8007f60:	9309      	str	r3, [sp, #36]	; 0x24
 8007f62:	f1b9 0f00 	cmp.w	r9, #0
 8007f66:	dd05      	ble.n	8007f74 <_dtoa_r+0x814>
 8007f68:	4651      	mov	r1, sl
 8007f6a:	464a      	mov	r2, r9
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f000 fce5 	bl	800893c <__lshift>
 8007f72:	4682      	mov	sl, r0
 8007f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	dd05      	ble.n	8007f86 <_dtoa_r+0x826>
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f000 fcdc 	bl	800893c <__lshift>
 8007f84:	4604      	mov	r4, r0
 8007f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d072      	beq.n	8008072 <_dtoa_r+0x912>
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4650      	mov	r0, sl
 8007f90:	f000 fd40 	bl	8008a14 <__mcmp>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	da6c      	bge.n	8008072 <_dtoa_r+0x912>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4651      	mov	r1, sl
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 fb20 	bl	80085e4 <__multadd>
 8007fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 81ac 	beq.w	800830a <_dtoa_r+0xbaa>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	220a      	movs	r2, #10
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f000 fb13 	bl	80085e4 <__multadd>
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f300 8093 	bgt.w	80080ee <_dtoa_r+0x98e>
 8007fc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	dc59      	bgt.n	8008082 <_dtoa_r+0x922>
 8007fce:	e08e      	b.n	80080ee <_dtoa_r+0x98e>
 8007fd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007fd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fd6:	e75d      	b.n	8007e94 <_dtoa_r+0x734>
 8007fd8:	9b08      	ldr	r3, [sp, #32]
 8007fda:	1e5c      	subs	r4, r3, #1
 8007fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fde:	42a3      	cmp	r3, r4
 8007fe0:	bfbf      	itttt	lt
 8007fe2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007fe4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007fe6:	1ae3      	sublt	r3, r4, r3
 8007fe8:	18d2      	addlt	r2, r2, r3
 8007fea:	bfa8      	it	ge
 8007fec:	1b1c      	subge	r4, r3, r4
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	bfbe      	ittt	lt
 8007ff2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007ff4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007ff6:	2400      	movlt	r4, #0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bfb5      	itete	lt
 8007ffc:	eba9 0703 	sublt.w	r7, r9, r3
 8008000:	464f      	movge	r7, r9
 8008002:	2300      	movlt	r3, #0
 8008004:	9b08      	ldrge	r3, [sp, #32]
 8008006:	e747      	b.n	8007e98 <_dtoa_r+0x738>
 8008008:	464f      	mov	r7, r9
 800800a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800800c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800800e:	e74c      	b.n	8007eaa <_dtoa_r+0x74a>
 8008010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008012:	e773      	b.n	8007efc <_dtoa_r+0x79c>
 8008014:	3fe00000 	.word	0x3fe00000
 8008018:	40240000 	.word	0x40240000
 800801c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800801e:	2b01      	cmp	r3, #1
 8008020:	dc18      	bgt.n	8008054 <_dtoa_r+0x8f4>
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	b9b3      	cbnz	r3, 8008054 <_dtoa_r+0x8f4>
 8008026:	9b05      	ldr	r3, [sp, #20]
 8008028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800802c:	b993      	cbnz	r3, 8008054 <_dtoa_r+0x8f4>
 800802e:	9b05      	ldr	r3, [sp, #20]
 8008030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008034:	0d1b      	lsrs	r3, r3, #20
 8008036:	051b      	lsls	r3, r3, #20
 8008038:	b17b      	cbz	r3, 800805a <_dtoa_r+0x8fa>
 800803a:	f04f 0801 	mov.w	r8, #1
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	f109 0901 	add.w	r9, r9, #1
 8008044:	3301      	adds	r3, #1
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800804a:	2b00      	cmp	r3, #0
 800804c:	f47f af6f 	bne.w	8007f2e <_dtoa_r+0x7ce>
 8008050:	2001      	movs	r0, #1
 8008052:	e774      	b.n	8007f3e <_dtoa_r+0x7de>
 8008054:	f04f 0800 	mov.w	r8, #0
 8008058:	e7f6      	b.n	8008048 <_dtoa_r+0x8e8>
 800805a:	4698      	mov	r8, r3
 800805c:	e7f4      	b.n	8008048 <_dtoa_r+0x8e8>
 800805e:	d080      	beq.n	8007f62 <_dtoa_r+0x802>
 8008060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008062:	331c      	adds	r3, #28
 8008064:	441a      	add	r2, r3
 8008066:	4499      	add	r9, r3
 8008068:	441f      	add	r7, r3
 800806a:	9209      	str	r2, [sp, #36]	; 0x24
 800806c:	e779      	b.n	8007f62 <_dtoa_r+0x802>
 800806e:	4603      	mov	r3, r0
 8008070:	e7f6      	b.n	8008060 <_dtoa_r+0x900>
 8008072:	9b08      	ldr	r3, [sp, #32]
 8008074:	2b00      	cmp	r3, #0
 8008076:	dc34      	bgt.n	80080e2 <_dtoa_r+0x982>
 8008078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800807a:	2b02      	cmp	r3, #2
 800807c:	dd31      	ble.n	80080e2 <_dtoa_r+0x982>
 800807e:	9b08      	ldr	r3, [sp, #32]
 8008080:	9306      	str	r3, [sp, #24]
 8008082:	9b06      	ldr	r3, [sp, #24]
 8008084:	b963      	cbnz	r3, 80080a0 <_dtoa_r+0x940>
 8008086:	4621      	mov	r1, r4
 8008088:	2205      	movs	r2, #5
 800808a:	4628      	mov	r0, r5
 800808c:	f000 faaa 	bl	80085e4 <__multadd>
 8008090:	4601      	mov	r1, r0
 8008092:	4604      	mov	r4, r0
 8008094:	4650      	mov	r0, sl
 8008096:	f000 fcbd 	bl	8008a14 <__mcmp>
 800809a:	2800      	cmp	r0, #0
 800809c:	f73f adbf 	bgt.w	8007c1e <_dtoa_r+0x4be>
 80080a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080a2:	9f03      	ldr	r7, [sp, #12]
 80080a4:	ea6f 0b03 	mvn.w	fp, r3
 80080a8:	f04f 0800 	mov.w	r8, #0
 80080ac:	4621      	mov	r1, r4
 80080ae:	4628      	mov	r0, r5
 80080b0:	f000 fa76 	bl	80085a0 <_Bfree>
 80080b4:	2e00      	cmp	r6, #0
 80080b6:	f43f aead 	beq.w	8007e14 <_dtoa_r+0x6b4>
 80080ba:	f1b8 0f00 	cmp.w	r8, #0
 80080be:	d005      	beq.n	80080cc <_dtoa_r+0x96c>
 80080c0:	45b0      	cmp	r8, r6
 80080c2:	d003      	beq.n	80080cc <_dtoa_r+0x96c>
 80080c4:	4641      	mov	r1, r8
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 fa6a 	bl	80085a0 <_Bfree>
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	f000 fa66 	bl	80085a0 <_Bfree>
 80080d4:	e69e      	b.n	8007e14 <_dtoa_r+0x6b4>
 80080d6:	2400      	movs	r4, #0
 80080d8:	4626      	mov	r6, r4
 80080da:	e7e1      	b.n	80080a0 <_dtoa_r+0x940>
 80080dc:	46c3      	mov	fp, r8
 80080de:	4626      	mov	r6, r4
 80080e0:	e59d      	b.n	8007c1e <_dtoa_r+0x4be>
 80080e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 80c8 	beq.w	800827a <_dtoa_r+0xb1a>
 80080ea:	9b08      	ldr	r3, [sp, #32]
 80080ec:	9306      	str	r3, [sp, #24]
 80080ee:	2f00      	cmp	r7, #0
 80080f0:	dd05      	ble.n	80080fe <_dtoa_r+0x99e>
 80080f2:	4631      	mov	r1, r6
 80080f4:	463a      	mov	r2, r7
 80080f6:	4628      	mov	r0, r5
 80080f8:	f000 fc20 	bl	800893c <__lshift>
 80080fc:	4606      	mov	r6, r0
 80080fe:	f1b8 0f00 	cmp.w	r8, #0
 8008102:	d05b      	beq.n	80081bc <_dtoa_r+0xa5c>
 8008104:	4628      	mov	r0, r5
 8008106:	6871      	ldr	r1, [r6, #4]
 8008108:	f000 fa0a 	bl	8008520 <_Balloc>
 800810c:	4607      	mov	r7, r0
 800810e:	b928      	cbnz	r0, 800811c <_dtoa_r+0x9bc>
 8008110:	4602      	mov	r2, r0
 8008112:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008116:	4b81      	ldr	r3, [pc, #516]	; (800831c <_dtoa_r+0xbbc>)
 8008118:	f7ff bb36 	b.w	8007788 <_dtoa_r+0x28>
 800811c:	6932      	ldr	r2, [r6, #16]
 800811e:	f106 010c 	add.w	r1, r6, #12
 8008122:	3202      	adds	r2, #2
 8008124:	0092      	lsls	r2, r2, #2
 8008126:	300c      	adds	r0, #12
 8008128:	f000 fe2c 	bl	8008d84 <memcpy>
 800812c:	2201      	movs	r2, #1
 800812e:	4639      	mov	r1, r7
 8008130:	4628      	mov	r0, r5
 8008132:	f000 fc03 	bl	800893c <__lshift>
 8008136:	46b0      	mov	r8, r6
 8008138:	4606      	mov	r6, r0
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	9a03      	ldr	r2, [sp, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	9308      	str	r3, [sp, #32]
 8008142:	9b06      	ldr	r3, [sp, #24]
 8008144:	4413      	add	r3, r2
 8008146:	930b      	str	r3, [sp, #44]	; 0x2c
 8008148:	9b04      	ldr	r3, [sp, #16]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	930a      	str	r3, [sp, #40]	; 0x28
 8008150:	9b08      	ldr	r3, [sp, #32]
 8008152:	4621      	mov	r1, r4
 8008154:	3b01      	subs	r3, #1
 8008156:	4650      	mov	r0, sl
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	f7ff fa78 	bl	800764e <quorem>
 800815e:	4641      	mov	r1, r8
 8008160:	9006      	str	r0, [sp, #24]
 8008162:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008166:	4650      	mov	r0, sl
 8008168:	f000 fc54 	bl	8008a14 <__mcmp>
 800816c:	4632      	mov	r2, r6
 800816e:	9009      	str	r0, [sp, #36]	; 0x24
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f000 fc6a 	bl	8008a4c <__mdiff>
 8008178:	68c2      	ldr	r2, [r0, #12]
 800817a:	4607      	mov	r7, r0
 800817c:	bb02      	cbnz	r2, 80081c0 <_dtoa_r+0xa60>
 800817e:	4601      	mov	r1, r0
 8008180:	4650      	mov	r0, sl
 8008182:	f000 fc47 	bl	8008a14 <__mcmp>
 8008186:	4602      	mov	r2, r0
 8008188:	4639      	mov	r1, r7
 800818a:	4628      	mov	r0, r5
 800818c:	920c      	str	r2, [sp, #48]	; 0x30
 800818e:	f000 fa07 	bl	80085a0 <_Bfree>
 8008192:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008196:	9f08      	ldr	r7, [sp, #32]
 8008198:	ea43 0102 	orr.w	r1, r3, r2
 800819c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819e:	4319      	orrs	r1, r3
 80081a0:	d110      	bne.n	80081c4 <_dtoa_r+0xa64>
 80081a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081a6:	d029      	beq.n	80081fc <_dtoa_r+0xa9c>
 80081a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dd02      	ble.n	80081b4 <_dtoa_r+0xa54>
 80081ae:	9b06      	ldr	r3, [sp, #24]
 80081b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081b4:	9b04      	ldr	r3, [sp, #16]
 80081b6:	f883 9000 	strb.w	r9, [r3]
 80081ba:	e777      	b.n	80080ac <_dtoa_r+0x94c>
 80081bc:	4630      	mov	r0, r6
 80081be:	e7ba      	b.n	8008136 <_dtoa_r+0x9d6>
 80081c0:	2201      	movs	r2, #1
 80081c2:	e7e1      	b.n	8008188 <_dtoa_r+0xa28>
 80081c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	db04      	blt.n	80081d4 <_dtoa_r+0xa74>
 80081ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80081cc:	430b      	orrs	r3, r1
 80081ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081d0:	430b      	orrs	r3, r1
 80081d2:	d120      	bne.n	8008216 <_dtoa_r+0xab6>
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	dded      	ble.n	80081b4 <_dtoa_r+0xa54>
 80081d8:	4651      	mov	r1, sl
 80081da:	2201      	movs	r2, #1
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 fbad 	bl	800893c <__lshift>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4682      	mov	sl, r0
 80081e6:	f000 fc15 	bl	8008a14 <__mcmp>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	dc03      	bgt.n	80081f6 <_dtoa_r+0xa96>
 80081ee:	d1e1      	bne.n	80081b4 <_dtoa_r+0xa54>
 80081f0:	f019 0f01 	tst.w	r9, #1
 80081f4:	d0de      	beq.n	80081b4 <_dtoa_r+0xa54>
 80081f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081fa:	d1d8      	bne.n	80081ae <_dtoa_r+0xa4e>
 80081fc:	2339      	movs	r3, #57	; 0x39
 80081fe:	9a04      	ldr	r2, [sp, #16]
 8008200:	7013      	strb	r3, [r2, #0]
 8008202:	463b      	mov	r3, r7
 8008204:	461f      	mov	r7, r3
 8008206:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800820a:	3b01      	subs	r3, #1
 800820c:	2a39      	cmp	r2, #57	; 0x39
 800820e:	d06b      	beq.n	80082e8 <_dtoa_r+0xb88>
 8008210:	3201      	adds	r2, #1
 8008212:	701a      	strb	r2, [r3, #0]
 8008214:	e74a      	b.n	80080ac <_dtoa_r+0x94c>
 8008216:	2a00      	cmp	r2, #0
 8008218:	dd07      	ble.n	800822a <_dtoa_r+0xaca>
 800821a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800821e:	d0ed      	beq.n	80081fc <_dtoa_r+0xa9c>
 8008220:	9a04      	ldr	r2, [sp, #16]
 8008222:	f109 0301 	add.w	r3, r9, #1
 8008226:	7013      	strb	r3, [r2, #0]
 8008228:	e740      	b.n	80080ac <_dtoa_r+0x94c>
 800822a:	9b08      	ldr	r3, [sp, #32]
 800822c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800822e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008232:	4293      	cmp	r3, r2
 8008234:	d042      	beq.n	80082bc <_dtoa_r+0xb5c>
 8008236:	4651      	mov	r1, sl
 8008238:	2300      	movs	r3, #0
 800823a:	220a      	movs	r2, #10
 800823c:	4628      	mov	r0, r5
 800823e:	f000 f9d1 	bl	80085e4 <__multadd>
 8008242:	45b0      	cmp	r8, r6
 8008244:	4682      	mov	sl, r0
 8008246:	f04f 0300 	mov.w	r3, #0
 800824a:	f04f 020a 	mov.w	r2, #10
 800824e:	4641      	mov	r1, r8
 8008250:	4628      	mov	r0, r5
 8008252:	d107      	bne.n	8008264 <_dtoa_r+0xb04>
 8008254:	f000 f9c6 	bl	80085e4 <__multadd>
 8008258:	4680      	mov	r8, r0
 800825a:	4606      	mov	r6, r0
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	3301      	adds	r3, #1
 8008260:	9308      	str	r3, [sp, #32]
 8008262:	e775      	b.n	8008150 <_dtoa_r+0x9f0>
 8008264:	f000 f9be 	bl	80085e4 <__multadd>
 8008268:	4631      	mov	r1, r6
 800826a:	4680      	mov	r8, r0
 800826c:	2300      	movs	r3, #0
 800826e:	220a      	movs	r2, #10
 8008270:	4628      	mov	r0, r5
 8008272:	f000 f9b7 	bl	80085e4 <__multadd>
 8008276:	4606      	mov	r6, r0
 8008278:	e7f0      	b.n	800825c <_dtoa_r+0xafc>
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	9306      	str	r3, [sp, #24]
 800827e:	9f03      	ldr	r7, [sp, #12]
 8008280:	4621      	mov	r1, r4
 8008282:	4650      	mov	r0, sl
 8008284:	f7ff f9e3 	bl	800764e <quorem>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800828e:	f807 9b01 	strb.w	r9, [r7], #1
 8008292:	1afa      	subs	r2, r7, r3
 8008294:	9b06      	ldr	r3, [sp, #24]
 8008296:	4293      	cmp	r3, r2
 8008298:	dd07      	ble.n	80082aa <_dtoa_r+0xb4a>
 800829a:	4651      	mov	r1, sl
 800829c:	2300      	movs	r3, #0
 800829e:	220a      	movs	r2, #10
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 f99f 	bl	80085e4 <__multadd>
 80082a6:	4682      	mov	sl, r0
 80082a8:	e7ea      	b.n	8008280 <_dtoa_r+0xb20>
 80082aa:	9b06      	ldr	r3, [sp, #24]
 80082ac:	f04f 0800 	mov.w	r8, #0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bfcc      	ite	gt
 80082b4:	461f      	movgt	r7, r3
 80082b6:	2701      	movle	r7, #1
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	441f      	add	r7, r3
 80082bc:	4651      	mov	r1, sl
 80082be:	2201      	movs	r2, #1
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 fb3b 	bl	800893c <__lshift>
 80082c6:	4621      	mov	r1, r4
 80082c8:	4682      	mov	sl, r0
 80082ca:	f000 fba3 	bl	8008a14 <__mcmp>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	dc97      	bgt.n	8008202 <_dtoa_r+0xaa2>
 80082d2:	d102      	bne.n	80082da <_dtoa_r+0xb7a>
 80082d4:	f019 0f01 	tst.w	r9, #1
 80082d8:	d193      	bne.n	8008202 <_dtoa_r+0xaa2>
 80082da:	463b      	mov	r3, r7
 80082dc:	461f      	mov	r7, r3
 80082de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e2:	2a30      	cmp	r2, #48	; 0x30
 80082e4:	d0fa      	beq.n	80082dc <_dtoa_r+0xb7c>
 80082e6:	e6e1      	b.n	80080ac <_dtoa_r+0x94c>
 80082e8:	9a03      	ldr	r2, [sp, #12]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d18a      	bne.n	8008204 <_dtoa_r+0xaa4>
 80082ee:	2331      	movs	r3, #49	; 0x31
 80082f0:	f10b 0b01 	add.w	fp, fp, #1
 80082f4:	e797      	b.n	8008226 <_dtoa_r+0xac6>
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <_dtoa_r+0xbc0>)
 80082f8:	f7ff ba9f 	b.w	800783a <_dtoa_r+0xda>
 80082fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f47f aa77 	bne.w	80077f2 <_dtoa_r+0x92>
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <_dtoa_r+0xbc4>)
 8008306:	f7ff ba98 	b.w	800783a <_dtoa_r+0xda>
 800830a:	9b06      	ldr	r3, [sp, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	dcb6      	bgt.n	800827e <_dtoa_r+0xb1e>
 8008310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008312:	2b02      	cmp	r3, #2
 8008314:	f73f aeb5 	bgt.w	8008082 <_dtoa_r+0x922>
 8008318:	e7b1      	b.n	800827e <_dtoa_r+0xb1e>
 800831a:	bf00      	nop
 800831c:	080094c4 	.word	0x080094c4
 8008320:	08009424 	.word	0x08009424
 8008324:	08009448 	.word	0x08009448

08008328 <_free_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4605      	mov	r5, r0
 800832c:	2900      	cmp	r1, #0
 800832e:	d040      	beq.n	80083b2 <_free_r+0x8a>
 8008330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008334:	1f0c      	subs	r4, r1, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfb8      	it	lt
 800833a:	18e4      	addlt	r4, r4, r3
 800833c:	f000 f8e4 	bl	8008508 <__malloc_lock>
 8008340:	4a1c      	ldr	r2, [pc, #112]	; (80083b4 <_free_r+0x8c>)
 8008342:	6813      	ldr	r3, [r2, #0]
 8008344:	b933      	cbnz	r3, 8008354 <_free_r+0x2c>
 8008346:	6063      	str	r3, [r4, #4]
 8008348:	6014      	str	r4, [r2, #0]
 800834a:	4628      	mov	r0, r5
 800834c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008350:	f000 b8e0 	b.w	8008514 <__malloc_unlock>
 8008354:	42a3      	cmp	r3, r4
 8008356:	d908      	bls.n	800836a <_free_r+0x42>
 8008358:	6820      	ldr	r0, [r4, #0]
 800835a:	1821      	adds	r1, r4, r0
 800835c:	428b      	cmp	r3, r1
 800835e:	bf01      	itttt	eq
 8008360:	6819      	ldreq	r1, [r3, #0]
 8008362:	685b      	ldreq	r3, [r3, #4]
 8008364:	1809      	addeq	r1, r1, r0
 8008366:	6021      	streq	r1, [r4, #0]
 8008368:	e7ed      	b.n	8008346 <_free_r+0x1e>
 800836a:	461a      	mov	r2, r3
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	b10b      	cbz	r3, 8008374 <_free_r+0x4c>
 8008370:	42a3      	cmp	r3, r4
 8008372:	d9fa      	bls.n	800836a <_free_r+0x42>
 8008374:	6811      	ldr	r1, [r2, #0]
 8008376:	1850      	adds	r0, r2, r1
 8008378:	42a0      	cmp	r0, r4
 800837a:	d10b      	bne.n	8008394 <_free_r+0x6c>
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	4401      	add	r1, r0
 8008380:	1850      	adds	r0, r2, r1
 8008382:	4283      	cmp	r3, r0
 8008384:	6011      	str	r1, [r2, #0]
 8008386:	d1e0      	bne.n	800834a <_free_r+0x22>
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	4408      	add	r0, r1
 800838e:	6010      	str	r0, [r2, #0]
 8008390:	6053      	str	r3, [r2, #4]
 8008392:	e7da      	b.n	800834a <_free_r+0x22>
 8008394:	d902      	bls.n	800839c <_free_r+0x74>
 8008396:	230c      	movs	r3, #12
 8008398:	602b      	str	r3, [r5, #0]
 800839a:	e7d6      	b.n	800834a <_free_r+0x22>
 800839c:	6820      	ldr	r0, [r4, #0]
 800839e:	1821      	adds	r1, r4, r0
 80083a0:	428b      	cmp	r3, r1
 80083a2:	bf01      	itttt	eq
 80083a4:	6819      	ldreq	r1, [r3, #0]
 80083a6:	685b      	ldreq	r3, [r3, #4]
 80083a8:	1809      	addeq	r1, r1, r0
 80083aa:	6021      	streq	r1, [r4, #0]
 80083ac:	6063      	str	r3, [r4, #4]
 80083ae:	6054      	str	r4, [r2, #4]
 80083b0:	e7cb      	b.n	800834a <_free_r+0x22>
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20000630 	.word	0x20000630

080083b8 <malloc>:
 80083b8:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <malloc+0xc>)
 80083ba:	4601      	mov	r1, r0
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	f000 b823 	b.w	8008408 <_malloc_r>
 80083c2:	bf00      	nop
 80083c4:	2000008c 	.word	0x2000008c

080083c8 <sbrk_aligned>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	4e0e      	ldr	r6, [pc, #56]	; (8008404 <sbrk_aligned+0x3c>)
 80083cc:	460c      	mov	r4, r1
 80083ce:	6831      	ldr	r1, [r6, #0]
 80083d0:	4605      	mov	r5, r0
 80083d2:	b911      	cbnz	r1, 80083da <sbrk_aligned+0x12>
 80083d4:	f000 fcc6 	bl	8008d64 <_sbrk_r>
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 fcc1 	bl	8008d64 <_sbrk_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d00a      	beq.n	80083fc <sbrk_aligned+0x34>
 80083e6:	1cc4      	adds	r4, r0, #3
 80083e8:	f024 0403 	bic.w	r4, r4, #3
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d007      	beq.n	8008400 <sbrk_aligned+0x38>
 80083f0:	1a21      	subs	r1, r4, r0
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 fcb6 	bl	8008d64 <_sbrk_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d101      	bne.n	8008400 <sbrk_aligned+0x38>
 80083fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008400:	4620      	mov	r0, r4
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	20000634 	.word	0x20000634

08008408 <_malloc_r>:
 8008408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800840c:	1ccd      	adds	r5, r1, #3
 800840e:	f025 0503 	bic.w	r5, r5, #3
 8008412:	3508      	adds	r5, #8
 8008414:	2d0c      	cmp	r5, #12
 8008416:	bf38      	it	cc
 8008418:	250c      	movcc	r5, #12
 800841a:	2d00      	cmp	r5, #0
 800841c:	4607      	mov	r7, r0
 800841e:	db01      	blt.n	8008424 <_malloc_r+0x1c>
 8008420:	42a9      	cmp	r1, r5
 8008422:	d905      	bls.n	8008430 <_malloc_r+0x28>
 8008424:	230c      	movs	r3, #12
 8008426:	2600      	movs	r6, #0
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	4630      	mov	r0, r6
 800842c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008430:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008504 <_malloc_r+0xfc>
 8008434:	f000 f868 	bl	8008508 <__malloc_lock>
 8008438:	f8d8 3000 	ldr.w	r3, [r8]
 800843c:	461c      	mov	r4, r3
 800843e:	bb5c      	cbnz	r4, 8008498 <_malloc_r+0x90>
 8008440:	4629      	mov	r1, r5
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff ffc0 	bl	80083c8 <sbrk_aligned>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	4604      	mov	r4, r0
 800844c:	d155      	bne.n	80084fa <_malloc_r+0xf2>
 800844e:	f8d8 4000 	ldr.w	r4, [r8]
 8008452:	4626      	mov	r6, r4
 8008454:	2e00      	cmp	r6, #0
 8008456:	d145      	bne.n	80084e4 <_malloc_r+0xdc>
 8008458:	2c00      	cmp	r4, #0
 800845a:	d048      	beq.n	80084ee <_malloc_r+0xe6>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	4631      	mov	r1, r6
 8008460:	4638      	mov	r0, r7
 8008462:	eb04 0903 	add.w	r9, r4, r3
 8008466:	f000 fc7d 	bl	8008d64 <_sbrk_r>
 800846a:	4581      	cmp	r9, r0
 800846c:	d13f      	bne.n	80084ee <_malloc_r+0xe6>
 800846e:	6821      	ldr	r1, [r4, #0]
 8008470:	4638      	mov	r0, r7
 8008472:	1a6d      	subs	r5, r5, r1
 8008474:	4629      	mov	r1, r5
 8008476:	f7ff ffa7 	bl	80083c8 <sbrk_aligned>
 800847a:	3001      	adds	r0, #1
 800847c:	d037      	beq.n	80084ee <_malloc_r+0xe6>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	442b      	add	r3, r5
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	f8d8 3000 	ldr.w	r3, [r8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d038      	beq.n	80084fe <_malloc_r+0xf6>
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	42a2      	cmp	r2, r4
 8008490:	d12b      	bne.n	80084ea <_malloc_r+0xe2>
 8008492:	2200      	movs	r2, #0
 8008494:	605a      	str	r2, [r3, #4]
 8008496:	e00f      	b.n	80084b8 <_malloc_r+0xb0>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	1b52      	subs	r2, r2, r5
 800849c:	d41f      	bmi.n	80084de <_malloc_r+0xd6>
 800849e:	2a0b      	cmp	r2, #11
 80084a0:	d917      	bls.n	80084d2 <_malloc_r+0xca>
 80084a2:	1961      	adds	r1, r4, r5
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	6025      	str	r5, [r4, #0]
 80084a8:	bf18      	it	ne
 80084aa:	6059      	strne	r1, [r3, #4]
 80084ac:	6863      	ldr	r3, [r4, #4]
 80084ae:	bf08      	it	eq
 80084b0:	f8c8 1000 	streq.w	r1, [r8]
 80084b4:	5162      	str	r2, [r4, r5]
 80084b6:	604b      	str	r3, [r1, #4]
 80084b8:	4638      	mov	r0, r7
 80084ba:	f104 060b 	add.w	r6, r4, #11
 80084be:	f000 f829 	bl	8008514 <__malloc_unlock>
 80084c2:	f026 0607 	bic.w	r6, r6, #7
 80084c6:	1d23      	adds	r3, r4, #4
 80084c8:	1af2      	subs	r2, r6, r3
 80084ca:	d0ae      	beq.n	800842a <_malloc_r+0x22>
 80084cc:	1b9b      	subs	r3, r3, r6
 80084ce:	50a3      	str	r3, [r4, r2]
 80084d0:	e7ab      	b.n	800842a <_malloc_r+0x22>
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	6862      	ldr	r2, [r4, #4]
 80084d6:	d1dd      	bne.n	8008494 <_malloc_r+0x8c>
 80084d8:	f8c8 2000 	str.w	r2, [r8]
 80084dc:	e7ec      	b.n	80084b8 <_malloc_r+0xb0>
 80084de:	4623      	mov	r3, r4
 80084e0:	6864      	ldr	r4, [r4, #4]
 80084e2:	e7ac      	b.n	800843e <_malloc_r+0x36>
 80084e4:	4634      	mov	r4, r6
 80084e6:	6876      	ldr	r6, [r6, #4]
 80084e8:	e7b4      	b.n	8008454 <_malloc_r+0x4c>
 80084ea:	4613      	mov	r3, r2
 80084ec:	e7cc      	b.n	8008488 <_malloc_r+0x80>
 80084ee:	230c      	movs	r3, #12
 80084f0:	4638      	mov	r0, r7
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	f000 f80e 	bl	8008514 <__malloc_unlock>
 80084f8:	e797      	b.n	800842a <_malloc_r+0x22>
 80084fa:	6025      	str	r5, [r4, #0]
 80084fc:	e7dc      	b.n	80084b8 <_malloc_r+0xb0>
 80084fe:	605b      	str	r3, [r3, #4]
 8008500:	deff      	udf	#255	; 0xff
 8008502:	bf00      	nop
 8008504:	20000630 	.word	0x20000630

08008508 <__malloc_lock>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__malloc_lock+0x8>)
 800850a:	f7ff b890 	b.w	800762e <__retarget_lock_acquire_recursive>
 800850e:	bf00      	nop
 8008510:	2000062c 	.word	0x2000062c

08008514 <__malloc_unlock>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__malloc_unlock+0x8>)
 8008516:	f7ff b88b 	b.w	8007630 <__retarget_lock_release_recursive>
 800851a:	bf00      	nop
 800851c:	2000062c 	.word	0x2000062c

08008520 <_Balloc>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	69c6      	ldr	r6, [r0, #28]
 8008524:	4604      	mov	r4, r0
 8008526:	460d      	mov	r5, r1
 8008528:	b976      	cbnz	r6, 8008548 <_Balloc+0x28>
 800852a:	2010      	movs	r0, #16
 800852c:	f7ff ff44 	bl	80083b8 <malloc>
 8008530:	4602      	mov	r2, r0
 8008532:	61e0      	str	r0, [r4, #28]
 8008534:	b920      	cbnz	r0, 8008540 <_Balloc+0x20>
 8008536:	216b      	movs	r1, #107	; 0x6b
 8008538:	4b17      	ldr	r3, [pc, #92]	; (8008598 <_Balloc+0x78>)
 800853a:	4818      	ldr	r0, [pc, #96]	; (800859c <_Balloc+0x7c>)
 800853c:	f000 fc30 	bl	8008da0 <__assert_func>
 8008540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008544:	6006      	str	r6, [r0, #0]
 8008546:	60c6      	str	r6, [r0, #12]
 8008548:	69e6      	ldr	r6, [r4, #28]
 800854a:	68f3      	ldr	r3, [r6, #12]
 800854c:	b183      	cbz	r3, 8008570 <_Balloc+0x50>
 800854e:	69e3      	ldr	r3, [r4, #28]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008556:	b9b8      	cbnz	r0, 8008588 <_Balloc+0x68>
 8008558:	2101      	movs	r1, #1
 800855a:	fa01 f605 	lsl.w	r6, r1, r5
 800855e:	1d72      	adds	r2, r6, #5
 8008560:	4620      	mov	r0, r4
 8008562:	0092      	lsls	r2, r2, #2
 8008564:	f000 fc3a 	bl	8008ddc <_calloc_r>
 8008568:	b160      	cbz	r0, 8008584 <_Balloc+0x64>
 800856a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800856e:	e00e      	b.n	800858e <_Balloc+0x6e>
 8008570:	2221      	movs	r2, #33	; 0x21
 8008572:	2104      	movs	r1, #4
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fc31 	bl	8008ddc <_calloc_r>
 800857a:	69e3      	ldr	r3, [r4, #28]
 800857c:	60f0      	str	r0, [r6, #12]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e4      	bne.n	800854e <_Balloc+0x2e>
 8008584:	2000      	movs	r0, #0
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	6802      	ldr	r2, [r0, #0]
 800858a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800858e:	2300      	movs	r3, #0
 8008590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008594:	e7f7      	b.n	8008586 <_Balloc+0x66>
 8008596:	bf00      	nop
 8008598:	08009455 	.word	0x08009455
 800859c:	080094d5 	.word	0x080094d5

080085a0 <_Bfree>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	69c6      	ldr	r6, [r0, #28]
 80085a4:	4605      	mov	r5, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	b976      	cbnz	r6, 80085c8 <_Bfree+0x28>
 80085aa:	2010      	movs	r0, #16
 80085ac:	f7ff ff04 	bl	80083b8 <malloc>
 80085b0:	4602      	mov	r2, r0
 80085b2:	61e8      	str	r0, [r5, #28]
 80085b4:	b920      	cbnz	r0, 80085c0 <_Bfree+0x20>
 80085b6:	218f      	movs	r1, #143	; 0x8f
 80085b8:	4b08      	ldr	r3, [pc, #32]	; (80085dc <_Bfree+0x3c>)
 80085ba:	4809      	ldr	r0, [pc, #36]	; (80085e0 <_Bfree+0x40>)
 80085bc:	f000 fbf0 	bl	8008da0 <__assert_func>
 80085c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085c4:	6006      	str	r6, [r0, #0]
 80085c6:	60c6      	str	r6, [r0, #12]
 80085c8:	b13c      	cbz	r4, 80085da <_Bfree+0x3a>
 80085ca:	69eb      	ldr	r3, [r5, #28]
 80085cc:	6862      	ldr	r2, [r4, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085d4:	6021      	str	r1, [r4, #0]
 80085d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	08009455 	.word	0x08009455
 80085e0:	080094d5 	.word	0x080094d5

080085e4 <__multadd>:
 80085e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e8:	4607      	mov	r7, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	461e      	mov	r6, r3
 80085ee:	2000      	movs	r0, #0
 80085f0:	690d      	ldr	r5, [r1, #16]
 80085f2:	f101 0c14 	add.w	ip, r1, #20
 80085f6:	f8dc 3000 	ldr.w	r3, [ip]
 80085fa:	3001      	adds	r0, #1
 80085fc:	b299      	uxth	r1, r3
 80085fe:	fb02 6101 	mla	r1, r2, r1, r6
 8008602:	0c1e      	lsrs	r6, r3, #16
 8008604:	0c0b      	lsrs	r3, r1, #16
 8008606:	fb02 3306 	mla	r3, r2, r6, r3
 800860a:	b289      	uxth	r1, r1
 800860c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008610:	4285      	cmp	r5, r0
 8008612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008616:	f84c 1b04 	str.w	r1, [ip], #4
 800861a:	dcec      	bgt.n	80085f6 <__multadd+0x12>
 800861c:	b30e      	cbz	r6, 8008662 <__multadd+0x7e>
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	42ab      	cmp	r3, r5
 8008622:	dc19      	bgt.n	8008658 <__multadd+0x74>
 8008624:	6861      	ldr	r1, [r4, #4]
 8008626:	4638      	mov	r0, r7
 8008628:	3101      	adds	r1, #1
 800862a:	f7ff ff79 	bl	8008520 <_Balloc>
 800862e:	4680      	mov	r8, r0
 8008630:	b928      	cbnz	r0, 800863e <__multadd+0x5a>
 8008632:	4602      	mov	r2, r0
 8008634:	21ba      	movs	r1, #186	; 0xba
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <__multadd+0x84>)
 8008638:	480c      	ldr	r0, [pc, #48]	; (800866c <__multadd+0x88>)
 800863a:	f000 fbb1 	bl	8008da0 <__assert_func>
 800863e:	6922      	ldr	r2, [r4, #16]
 8008640:	f104 010c 	add.w	r1, r4, #12
 8008644:	3202      	adds	r2, #2
 8008646:	0092      	lsls	r2, r2, #2
 8008648:	300c      	adds	r0, #12
 800864a:	f000 fb9b 	bl	8008d84 <memcpy>
 800864e:	4621      	mov	r1, r4
 8008650:	4638      	mov	r0, r7
 8008652:	f7ff ffa5 	bl	80085a0 <_Bfree>
 8008656:	4644      	mov	r4, r8
 8008658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800865c:	3501      	adds	r5, #1
 800865e:	615e      	str	r6, [r3, #20]
 8008660:	6125      	str	r5, [r4, #16]
 8008662:	4620      	mov	r0, r4
 8008664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008668:	080094c4 	.word	0x080094c4
 800866c:	080094d5 	.word	0x080094d5

08008670 <__hi0bits>:
 8008670:	0c02      	lsrs	r2, r0, #16
 8008672:	0412      	lsls	r2, r2, #16
 8008674:	4603      	mov	r3, r0
 8008676:	b9ca      	cbnz	r2, 80086ac <__hi0bits+0x3c>
 8008678:	0403      	lsls	r3, r0, #16
 800867a:	2010      	movs	r0, #16
 800867c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008680:	bf04      	itt	eq
 8008682:	021b      	lsleq	r3, r3, #8
 8008684:	3008      	addeq	r0, #8
 8008686:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800868a:	bf04      	itt	eq
 800868c:	011b      	lsleq	r3, r3, #4
 800868e:	3004      	addeq	r0, #4
 8008690:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008694:	bf04      	itt	eq
 8008696:	009b      	lsleq	r3, r3, #2
 8008698:	3002      	addeq	r0, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	db05      	blt.n	80086aa <__hi0bits+0x3a>
 800869e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80086a2:	f100 0001 	add.w	r0, r0, #1
 80086a6:	bf08      	it	eq
 80086a8:	2020      	moveq	r0, #32
 80086aa:	4770      	bx	lr
 80086ac:	2000      	movs	r0, #0
 80086ae:	e7e5      	b.n	800867c <__hi0bits+0xc>

080086b0 <__lo0bits>:
 80086b0:	6803      	ldr	r3, [r0, #0]
 80086b2:	4602      	mov	r2, r0
 80086b4:	f013 0007 	ands.w	r0, r3, #7
 80086b8:	d00b      	beq.n	80086d2 <__lo0bits+0x22>
 80086ba:	07d9      	lsls	r1, r3, #31
 80086bc:	d421      	bmi.n	8008702 <__lo0bits+0x52>
 80086be:	0798      	lsls	r0, r3, #30
 80086c0:	bf49      	itett	mi
 80086c2:	085b      	lsrmi	r3, r3, #1
 80086c4:	089b      	lsrpl	r3, r3, #2
 80086c6:	2001      	movmi	r0, #1
 80086c8:	6013      	strmi	r3, [r2, #0]
 80086ca:	bf5c      	itt	pl
 80086cc:	2002      	movpl	r0, #2
 80086ce:	6013      	strpl	r3, [r2, #0]
 80086d0:	4770      	bx	lr
 80086d2:	b299      	uxth	r1, r3
 80086d4:	b909      	cbnz	r1, 80086da <__lo0bits+0x2a>
 80086d6:	2010      	movs	r0, #16
 80086d8:	0c1b      	lsrs	r3, r3, #16
 80086da:	b2d9      	uxtb	r1, r3
 80086dc:	b909      	cbnz	r1, 80086e2 <__lo0bits+0x32>
 80086de:	3008      	adds	r0, #8
 80086e0:	0a1b      	lsrs	r3, r3, #8
 80086e2:	0719      	lsls	r1, r3, #28
 80086e4:	bf04      	itt	eq
 80086e6:	091b      	lsreq	r3, r3, #4
 80086e8:	3004      	addeq	r0, #4
 80086ea:	0799      	lsls	r1, r3, #30
 80086ec:	bf04      	itt	eq
 80086ee:	089b      	lsreq	r3, r3, #2
 80086f0:	3002      	addeq	r0, #2
 80086f2:	07d9      	lsls	r1, r3, #31
 80086f4:	d403      	bmi.n	80086fe <__lo0bits+0x4e>
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	f100 0001 	add.w	r0, r0, #1
 80086fc:	d003      	beq.n	8008706 <__lo0bits+0x56>
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	4770      	bx	lr
 8008702:	2000      	movs	r0, #0
 8008704:	4770      	bx	lr
 8008706:	2020      	movs	r0, #32
 8008708:	4770      	bx	lr
	...

0800870c <__i2b>:
 800870c:	b510      	push	{r4, lr}
 800870e:	460c      	mov	r4, r1
 8008710:	2101      	movs	r1, #1
 8008712:	f7ff ff05 	bl	8008520 <_Balloc>
 8008716:	4602      	mov	r2, r0
 8008718:	b928      	cbnz	r0, 8008726 <__i2b+0x1a>
 800871a:	f240 1145 	movw	r1, #325	; 0x145
 800871e:	4b04      	ldr	r3, [pc, #16]	; (8008730 <__i2b+0x24>)
 8008720:	4804      	ldr	r0, [pc, #16]	; (8008734 <__i2b+0x28>)
 8008722:	f000 fb3d 	bl	8008da0 <__assert_func>
 8008726:	2301      	movs	r3, #1
 8008728:	6144      	str	r4, [r0, #20]
 800872a:	6103      	str	r3, [r0, #16]
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	080094c4 	.word	0x080094c4
 8008734:	080094d5 	.word	0x080094d5

08008738 <__multiply>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	4691      	mov	r9, r2
 800873e:	690a      	ldr	r2, [r1, #16]
 8008740:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008744:	460c      	mov	r4, r1
 8008746:	429a      	cmp	r2, r3
 8008748:	bfbe      	ittt	lt
 800874a:	460b      	movlt	r3, r1
 800874c:	464c      	movlt	r4, r9
 800874e:	4699      	movlt	r9, r3
 8008750:	6927      	ldr	r7, [r4, #16]
 8008752:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008756:	68a3      	ldr	r3, [r4, #8]
 8008758:	6861      	ldr	r1, [r4, #4]
 800875a:	eb07 060a 	add.w	r6, r7, sl
 800875e:	42b3      	cmp	r3, r6
 8008760:	b085      	sub	sp, #20
 8008762:	bfb8      	it	lt
 8008764:	3101      	addlt	r1, #1
 8008766:	f7ff fedb 	bl	8008520 <_Balloc>
 800876a:	b930      	cbnz	r0, 800877a <__multiply+0x42>
 800876c:	4602      	mov	r2, r0
 800876e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008772:	4b43      	ldr	r3, [pc, #268]	; (8008880 <__multiply+0x148>)
 8008774:	4843      	ldr	r0, [pc, #268]	; (8008884 <__multiply+0x14c>)
 8008776:	f000 fb13 	bl	8008da0 <__assert_func>
 800877a:	f100 0514 	add.w	r5, r0, #20
 800877e:	462b      	mov	r3, r5
 8008780:	2200      	movs	r2, #0
 8008782:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008786:	4543      	cmp	r3, r8
 8008788:	d321      	bcc.n	80087ce <__multiply+0x96>
 800878a:	f104 0314 	add.w	r3, r4, #20
 800878e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008792:	f109 0314 	add.w	r3, r9, #20
 8008796:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800879a:	9202      	str	r2, [sp, #8]
 800879c:	1b3a      	subs	r2, r7, r4
 800879e:	3a15      	subs	r2, #21
 80087a0:	f022 0203 	bic.w	r2, r2, #3
 80087a4:	3204      	adds	r2, #4
 80087a6:	f104 0115 	add.w	r1, r4, #21
 80087aa:	428f      	cmp	r7, r1
 80087ac:	bf38      	it	cc
 80087ae:	2204      	movcc	r2, #4
 80087b0:	9201      	str	r2, [sp, #4]
 80087b2:	9a02      	ldr	r2, [sp, #8]
 80087b4:	9303      	str	r3, [sp, #12]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d80c      	bhi.n	80087d4 <__multiply+0x9c>
 80087ba:	2e00      	cmp	r6, #0
 80087bc:	dd03      	ble.n	80087c6 <__multiply+0x8e>
 80087be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d05a      	beq.n	800887c <__multiply+0x144>
 80087c6:	6106      	str	r6, [r0, #16]
 80087c8:	b005      	add	sp, #20
 80087ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ce:	f843 2b04 	str.w	r2, [r3], #4
 80087d2:	e7d8      	b.n	8008786 <__multiply+0x4e>
 80087d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80087d8:	f1ba 0f00 	cmp.w	sl, #0
 80087dc:	d023      	beq.n	8008826 <__multiply+0xee>
 80087de:	46a9      	mov	r9, r5
 80087e0:	f04f 0c00 	mov.w	ip, #0
 80087e4:	f104 0e14 	add.w	lr, r4, #20
 80087e8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087ec:	f8d9 1000 	ldr.w	r1, [r9]
 80087f0:	fa1f fb82 	uxth.w	fp, r2
 80087f4:	b289      	uxth	r1, r1
 80087f6:	fb0a 110b 	mla	r1, sl, fp, r1
 80087fa:	4461      	add	r1, ip
 80087fc:	f8d9 c000 	ldr.w	ip, [r9]
 8008800:	0c12      	lsrs	r2, r2, #16
 8008802:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008806:	fb0a c202 	mla	r2, sl, r2, ip
 800880a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800880e:	b289      	uxth	r1, r1
 8008810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008814:	4577      	cmp	r7, lr
 8008816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800881a:	f849 1b04 	str.w	r1, [r9], #4
 800881e:	d8e3      	bhi.n	80087e8 <__multiply+0xb0>
 8008820:	9a01      	ldr	r2, [sp, #4]
 8008822:	f845 c002 	str.w	ip, [r5, r2]
 8008826:	9a03      	ldr	r2, [sp, #12]
 8008828:	3304      	adds	r3, #4
 800882a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800882e:	f1b9 0f00 	cmp.w	r9, #0
 8008832:	d021      	beq.n	8008878 <__multiply+0x140>
 8008834:	46ae      	mov	lr, r5
 8008836:	f04f 0a00 	mov.w	sl, #0
 800883a:	6829      	ldr	r1, [r5, #0]
 800883c:	f104 0c14 	add.w	ip, r4, #20
 8008840:	f8bc b000 	ldrh.w	fp, [ip]
 8008844:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008848:	b289      	uxth	r1, r1
 800884a:	fb09 220b 	mla	r2, r9, fp, r2
 800884e:	4452      	add	r2, sl
 8008850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008854:	f84e 1b04 	str.w	r1, [lr], #4
 8008858:	f85c 1b04 	ldr.w	r1, [ip], #4
 800885c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008860:	f8be 1000 	ldrh.w	r1, [lr]
 8008864:	4567      	cmp	r7, ip
 8008866:	fb09 110a 	mla	r1, r9, sl, r1
 800886a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800886e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008872:	d8e5      	bhi.n	8008840 <__multiply+0x108>
 8008874:	9a01      	ldr	r2, [sp, #4]
 8008876:	50a9      	str	r1, [r5, r2]
 8008878:	3504      	adds	r5, #4
 800887a:	e79a      	b.n	80087b2 <__multiply+0x7a>
 800887c:	3e01      	subs	r6, #1
 800887e:	e79c      	b.n	80087ba <__multiply+0x82>
 8008880:	080094c4 	.word	0x080094c4
 8008884:	080094d5 	.word	0x080094d5

08008888 <__pow5mult>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	4615      	mov	r5, r2
 800888e:	f012 0203 	ands.w	r2, r2, #3
 8008892:	4606      	mov	r6, r0
 8008894:	460f      	mov	r7, r1
 8008896:	d007      	beq.n	80088a8 <__pow5mult+0x20>
 8008898:	4c25      	ldr	r4, [pc, #148]	; (8008930 <__pow5mult+0xa8>)
 800889a:	3a01      	subs	r2, #1
 800889c:	2300      	movs	r3, #0
 800889e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088a2:	f7ff fe9f 	bl	80085e4 <__multadd>
 80088a6:	4607      	mov	r7, r0
 80088a8:	10ad      	asrs	r5, r5, #2
 80088aa:	d03d      	beq.n	8008928 <__pow5mult+0xa0>
 80088ac:	69f4      	ldr	r4, [r6, #28]
 80088ae:	b97c      	cbnz	r4, 80088d0 <__pow5mult+0x48>
 80088b0:	2010      	movs	r0, #16
 80088b2:	f7ff fd81 	bl	80083b8 <malloc>
 80088b6:	4602      	mov	r2, r0
 80088b8:	61f0      	str	r0, [r6, #28]
 80088ba:	b928      	cbnz	r0, 80088c8 <__pow5mult+0x40>
 80088bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80088c0:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <__pow5mult+0xac>)
 80088c2:	481d      	ldr	r0, [pc, #116]	; (8008938 <__pow5mult+0xb0>)
 80088c4:	f000 fa6c 	bl	8008da0 <__assert_func>
 80088c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088cc:	6004      	str	r4, [r0, #0]
 80088ce:	60c4      	str	r4, [r0, #12]
 80088d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80088d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088d8:	b94c      	cbnz	r4, 80088ee <__pow5mult+0x66>
 80088da:	f240 2171 	movw	r1, #625	; 0x271
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ff14 	bl	800870c <__i2b>
 80088e4:	2300      	movs	r3, #0
 80088e6:	4604      	mov	r4, r0
 80088e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80088ec:	6003      	str	r3, [r0, #0]
 80088ee:	f04f 0900 	mov.w	r9, #0
 80088f2:	07eb      	lsls	r3, r5, #31
 80088f4:	d50a      	bpl.n	800890c <__pow5mult+0x84>
 80088f6:	4639      	mov	r1, r7
 80088f8:	4622      	mov	r2, r4
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ff1c 	bl	8008738 <__multiply>
 8008900:	4680      	mov	r8, r0
 8008902:	4639      	mov	r1, r7
 8008904:	4630      	mov	r0, r6
 8008906:	f7ff fe4b 	bl	80085a0 <_Bfree>
 800890a:	4647      	mov	r7, r8
 800890c:	106d      	asrs	r5, r5, #1
 800890e:	d00b      	beq.n	8008928 <__pow5mult+0xa0>
 8008910:	6820      	ldr	r0, [r4, #0]
 8008912:	b938      	cbnz	r0, 8008924 <__pow5mult+0x9c>
 8008914:	4622      	mov	r2, r4
 8008916:	4621      	mov	r1, r4
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff ff0d 	bl	8008738 <__multiply>
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	f8c0 9000 	str.w	r9, [r0]
 8008924:	4604      	mov	r4, r0
 8008926:	e7e4      	b.n	80088f2 <__pow5mult+0x6a>
 8008928:	4638      	mov	r0, r7
 800892a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892e:	bf00      	nop
 8008930:	08009620 	.word	0x08009620
 8008934:	08009455 	.word	0x08009455
 8008938:	080094d5 	.word	0x080094d5

0800893c <__lshift>:
 800893c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008940:	460c      	mov	r4, r1
 8008942:	4607      	mov	r7, r0
 8008944:	4691      	mov	r9, r2
 8008946:	6923      	ldr	r3, [r4, #16]
 8008948:	6849      	ldr	r1, [r1, #4]
 800894a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008954:	f108 0601 	add.w	r6, r8, #1
 8008958:	42b3      	cmp	r3, r6
 800895a:	db0b      	blt.n	8008974 <__lshift+0x38>
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff fddf 	bl	8008520 <_Balloc>
 8008962:	4605      	mov	r5, r0
 8008964:	b948      	cbnz	r0, 800897a <__lshift+0x3e>
 8008966:	4602      	mov	r2, r0
 8008968:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800896c:	4b27      	ldr	r3, [pc, #156]	; (8008a0c <__lshift+0xd0>)
 800896e:	4828      	ldr	r0, [pc, #160]	; (8008a10 <__lshift+0xd4>)
 8008970:	f000 fa16 	bl	8008da0 <__assert_func>
 8008974:	3101      	adds	r1, #1
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	e7ee      	b.n	8008958 <__lshift+0x1c>
 800897a:	2300      	movs	r3, #0
 800897c:	f100 0114 	add.w	r1, r0, #20
 8008980:	f100 0210 	add.w	r2, r0, #16
 8008984:	4618      	mov	r0, r3
 8008986:	4553      	cmp	r3, sl
 8008988:	db33      	blt.n	80089f2 <__lshift+0xb6>
 800898a:	6920      	ldr	r0, [r4, #16]
 800898c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008990:	f104 0314 	add.w	r3, r4, #20
 8008994:	f019 091f 	ands.w	r9, r9, #31
 8008998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800899c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089a0:	d02b      	beq.n	80089fa <__lshift+0xbe>
 80089a2:	468a      	mov	sl, r1
 80089a4:	2200      	movs	r2, #0
 80089a6:	f1c9 0e20 	rsb	lr, r9, #32
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	fa00 f009 	lsl.w	r0, r0, r9
 80089b0:	4310      	orrs	r0, r2
 80089b2:	f84a 0b04 	str.w	r0, [sl], #4
 80089b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ba:	459c      	cmp	ip, r3
 80089bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80089c0:	d8f3      	bhi.n	80089aa <__lshift+0x6e>
 80089c2:	ebac 0304 	sub.w	r3, ip, r4
 80089c6:	3b15      	subs	r3, #21
 80089c8:	f023 0303 	bic.w	r3, r3, #3
 80089cc:	3304      	adds	r3, #4
 80089ce:	f104 0015 	add.w	r0, r4, #21
 80089d2:	4584      	cmp	ip, r0
 80089d4:	bf38      	it	cc
 80089d6:	2304      	movcc	r3, #4
 80089d8:	50ca      	str	r2, [r1, r3]
 80089da:	b10a      	cbz	r2, 80089e0 <__lshift+0xa4>
 80089dc:	f108 0602 	add.w	r6, r8, #2
 80089e0:	3e01      	subs	r6, #1
 80089e2:	4638      	mov	r0, r7
 80089e4:	4621      	mov	r1, r4
 80089e6:	612e      	str	r6, [r5, #16]
 80089e8:	f7ff fdda 	bl	80085a0 <_Bfree>
 80089ec:	4628      	mov	r0, r5
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80089f6:	3301      	adds	r3, #1
 80089f8:	e7c5      	b.n	8008986 <__lshift+0x4a>
 80089fa:	3904      	subs	r1, #4
 80089fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a00:	459c      	cmp	ip, r3
 8008a02:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a06:	d8f9      	bhi.n	80089fc <__lshift+0xc0>
 8008a08:	e7ea      	b.n	80089e0 <__lshift+0xa4>
 8008a0a:	bf00      	nop
 8008a0c:	080094c4 	.word	0x080094c4
 8008a10:	080094d5 	.word	0x080094d5

08008a14 <__mcmp>:
 8008a14:	4603      	mov	r3, r0
 8008a16:	690a      	ldr	r2, [r1, #16]
 8008a18:	6900      	ldr	r0, [r0, #16]
 8008a1a:	b530      	push	{r4, r5, lr}
 8008a1c:	1a80      	subs	r0, r0, r2
 8008a1e:	d10d      	bne.n	8008a3c <__mcmp+0x28>
 8008a20:	3314      	adds	r3, #20
 8008a22:	3114      	adds	r1, #20
 8008a24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a34:	4295      	cmp	r5, r2
 8008a36:	d002      	beq.n	8008a3e <__mcmp+0x2a>
 8008a38:	d304      	bcc.n	8008a44 <__mcmp+0x30>
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	bd30      	pop	{r4, r5, pc}
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	d3f4      	bcc.n	8008a2c <__mcmp+0x18>
 8008a42:	e7fb      	b.n	8008a3c <__mcmp+0x28>
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295
 8008a48:	e7f8      	b.n	8008a3c <__mcmp+0x28>
	...

08008a4c <__mdiff>:
 8008a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	460d      	mov	r5, r1
 8008a52:	4607      	mov	r7, r0
 8008a54:	4611      	mov	r1, r2
 8008a56:	4628      	mov	r0, r5
 8008a58:	4614      	mov	r4, r2
 8008a5a:	f7ff ffdb 	bl	8008a14 <__mcmp>
 8008a5e:	1e06      	subs	r6, r0, #0
 8008a60:	d111      	bne.n	8008a86 <__mdiff+0x3a>
 8008a62:	4631      	mov	r1, r6
 8008a64:	4638      	mov	r0, r7
 8008a66:	f7ff fd5b 	bl	8008520 <_Balloc>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	b928      	cbnz	r0, 8008a7a <__mdiff+0x2e>
 8008a6e:	f240 2137 	movw	r1, #567	; 0x237
 8008a72:	4b3a      	ldr	r3, [pc, #232]	; (8008b5c <__mdiff+0x110>)
 8008a74:	483a      	ldr	r0, [pc, #232]	; (8008b60 <__mdiff+0x114>)
 8008a76:	f000 f993 	bl	8008da0 <__assert_func>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a80:	4610      	mov	r0, r2
 8008a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a86:	bfa4      	itt	ge
 8008a88:	4623      	movge	r3, r4
 8008a8a:	462c      	movge	r4, r5
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	6861      	ldr	r1, [r4, #4]
 8008a90:	bfa6      	itte	ge
 8008a92:	461d      	movge	r5, r3
 8008a94:	2600      	movge	r6, #0
 8008a96:	2601      	movlt	r6, #1
 8008a98:	f7ff fd42 	bl	8008520 <_Balloc>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	b918      	cbnz	r0, 8008aa8 <__mdiff+0x5c>
 8008aa0:	f240 2145 	movw	r1, #581	; 0x245
 8008aa4:	4b2d      	ldr	r3, [pc, #180]	; (8008b5c <__mdiff+0x110>)
 8008aa6:	e7e5      	b.n	8008a74 <__mdiff+0x28>
 8008aa8:	f102 0814 	add.w	r8, r2, #20
 8008aac:	46c2      	mov	sl, r8
 8008aae:	f04f 0c00 	mov.w	ip, #0
 8008ab2:	6927      	ldr	r7, [r4, #16]
 8008ab4:	60c6      	str	r6, [r0, #12]
 8008ab6:	692e      	ldr	r6, [r5, #16]
 8008ab8:	f104 0014 	add.w	r0, r4, #20
 8008abc:	f105 0914 	add.w	r9, r5, #20
 8008ac0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008ac4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ac8:	3410      	adds	r4, #16
 8008aca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008ace:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ad2:	fa1f f18b 	uxth.w	r1, fp
 8008ad6:	4461      	add	r1, ip
 8008ad8:	fa1f fc83 	uxth.w	ip, r3
 8008adc:	0c1b      	lsrs	r3, r3, #16
 8008ade:	eba1 010c 	sub.w	r1, r1, ip
 8008ae2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ae6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008aea:	b289      	uxth	r1, r1
 8008aec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008af0:	454e      	cmp	r6, r9
 8008af2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008af6:	f84a 1b04 	str.w	r1, [sl], #4
 8008afa:	d8e6      	bhi.n	8008aca <__mdiff+0x7e>
 8008afc:	1b73      	subs	r3, r6, r5
 8008afe:	3b15      	subs	r3, #21
 8008b00:	f023 0303 	bic.w	r3, r3, #3
 8008b04:	3515      	adds	r5, #21
 8008b06:	3304      	adds	r3, #4
 8008b08:	42ae      	cmp	r6, r5
 8008b0a:	bf38      	it	cc
 8008b0c:	2304      	movcc	r3, #4
 8008b0e:	4418      	add	r0, r3
 8008b10:	4443      	add	r3, r8
 8008b12:	461e      	mov	r6, r3
 8008b14:	4605      	mov	r5, r0
 8008b16:	4575      	cmp	r5, lr
 8008b18:	d30e      	bcc.n	8008b38 <__mdiff+0xec>
 8008b1a:	f10e 0103 	add.w	r1, lr, #3
 8008b1e:	1a09      	subs	r1, r1, r0
 8008b20:	f021 0103 	bic.w	r1, r1, #3
 8008b24:	3803      	subs	r0, #3
 8008b26:	4586      	cmp	lr, r0
 8008b28:	bf38      	it	cc
 8008b2a:	2100      	movcc	r1, #0
 8008b2c:	440b      	add	r3, r1
 8008b2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b32:	b189      	cbz	r1, 8008b58 <__mdiff+0x10c>
 8008b34:	6117      	str	r7, [r2, #16]
 8008b36:	e7a3      	b.n	8008a80 <__mdiff+0x34>
 8008b38:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b3c:	fa1f f188 	uxth.w	r1, r8
 8008b40:	4461      	add	r1, ip
 8008b42:	140c      	asrs	r4, r1, #16
 8008b44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b48:	b289      	uxth	r1, r1
 8008b4a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b4e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008b52:	f846 1b04 	str.w	r1, [r6], #4
 8008b56:	e7de      	b.n	8008b16 <__mdiff+0xca>
 8008b58:	3f01      	subs	r7, #1
 8008b5a:	e7e8      	b.n	8008b2e <__mdiff+0xe2>
 8008b5c:	080094c4 	.word	0x080094c4
 8008b60:	080094d5 	.word	0x080094d5

08008b64 <__d2b>:
 8008b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b66:	2101      	movs	r1, #1
 8008b68:	4617      	mov	r7, r2
 8008b6a:	461c      	mov	r4, r3
 8008b6c:	9e08      	ldr	r6, [sp, #32]
 8008b6e:	f7ff fcd7 	bl	8008520 <_Balloc>
 8008b72:	4605      	mov	r5, r0
 8008b74:	b930      	cbnz	r0, 8008b84 <__d2b+0x20>
 8008b76:	4602      	mov	r2, r0
 8008b78:	f240 310f 	movw	r1, #783	; 0x30f
 8008b7c:	4b22      	ldr	r3, [pc, #136]	; (8008c08 <__d2b+0xa4>)
 8008b7e:	4823      	ldr	r0, [pc, #140]	; (8008c0c <__d2b+0xa8>)
 8008b80:	f000 f90e 	bl	8008da0 <__assert_func>
 8008b84:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008b88:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008b8c:	bb24      	cbnz	r4, 8008bd8 <__d2b+0x74>
 8008b8e:	2f00      	cmp	r7, #0
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	d026      	beq.n	8008be2 <__d2b+0x7e>
 8008b94:	4668      	mov	r0, sp
 8008b96:	9700      	str	r7, [sp, #0]
 8008b98:	f7ff fd8a 	bl	80086b0 <__lo0bits>
 8008b9c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ba0:	b1e8      	cbz	r0, 8008bde <__d2b+0x7a>
 8008ba2:	f1c0 0320 	rsb	r3, r0, #32
 8008ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8008baa:	430b      	orrs	r3, r1
 8008bac:	40c2      	lsrs	r2, r0
 8008bae:	616b      	str	r3, [r5, #20]
 8008bb0:	9201      	str	r2, [sp, #4]
 8008bb2:	9b01      	ldr	r3, [sp, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bf14      	ite	ne
 8008bb8:	2102      	movne	r1, #2
 8008bba:	2101      	moveq	r1, #1
 8008bbc:	61ab      	str	r3, [r5, #24]
 8008bbe:	6129      	str	r1, [r5, #16]
 8008bc0:	b1bc      	cbz	r4, 8008bf2 <__d2b+0x8e>
 8008bc2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008bc6:	4404      	add	r4, r0
 8008bc8:	6034      	str	r4, [r6, #0]
 8008bca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd0:	6018      	str	r0, [r3, #0]
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	b003      	add	sp, #12
 8008bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bdc:	e7d7      	b.n	8008b8e <__d2b+0x2a>
 8008bde:	6169      	str	r1, [r5, #20]
 8008be0:	e7e7      	b.n	8008bb2 <__d2b+0x4e>
 8008be2:	a801      	add	r0, sp, #4
 8008be4:	f7ff fd64 	bl	80086b0 <__lo0bits>
 8008be8:	9b01      	ldr	r3, [sp, #4]
 8008bea:	2101      	movs	r1, #1
 8008bec:	616b      	str	r3, [r5, #20]
 8008bee:	3020      	adds	r0, #32
 8008bf0:	e7e5      	b.n	8008bbe <__d2b+0x5a>
 8008bf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bf6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008bfa:	6030      	str	r0, [r6, #0]
 8008bfc:	6918      	ldr	r0, [r3, #16]
 8008bfe:	f7ff fd37 	bl	8008670 <__hi0bits>
 8008c02:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c06:	e7e2      	b.n	8008bce <__d2b+0x6a>
 8008c08:	080094c4 	.word	0x080094c4
 8008c0c:	080094d5 	.word	0x080094d5

08008c10 <__sflush_r>:
 8008c10:	898a      	ldrh	r2, [r1, #12]
 8008c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c14:	4605      	mov	r5, r0
 8008c16:	0710      	lsls	r0, r2, #28
 8008c18:	460c      	mov	r4, r1
 8008c1a:	d457      	bmi.n	8008ccc <__sflush_r+0xbc>
 8008c1c:	684b      	ldr	r3, [r1, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dc04      	bgt.n	8008c2c <__sflush_r+0x1c>
 8008c22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	dc01      	bgt.n	8008c2c <__sflush_r+0x1c>
 8008c28:	2000      	movs	r0, #0
 8008c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	d0fa      	beq.n	8008c28 <__sflush_r+0x18>
 8008c32:	2300      	movs	r3, #0
 8008c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c38:	682f      	ldr	r7, [r5, #0]
 8008c3a:	6a21      	ldr	r1, [r4, #32]
 8008c3c:	602b      	str	r3, [r5, #0]
 8008c3e:	d032      	beq.n	8008ca6 <__sflush_r+0x96>
 8008c40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	075a      	lsls	r2, r3, #29
 8008c46:	d505      	bpl.n	8008c54 <__sflush_r+0x44>
 8008c48:	6863      	ldr	r3, [r4, #4]
 8008c4a:	1ac0      	subs	r0, r0, r3
 8008c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c4e:	b10b      	cbz	r3, 8008c54 <__sflush_r+0x44>
 8008c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c52:	1ac0      	subs	r0, r0, r3
 8008c54:	2300      	movs	r3, #0
 8008c56:	4602      	mov	r2, r0
 8008c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	6a21      	ldr	r1, [r4, #32]
 8008c5e:	47b0      	blx	r6
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	d106      	bne.n	8008c74 <__sflush_r+0x64>
 8008c66:	6829      	ldr	r1, [r5, #0]
 8008c68:	291d      	cmp	r1, #29
 8008c6a:	d82b      	bhi.n	8008cc4 <__sflush_r+0xb4>
 8008c6c:	4a28      	ldr	r2, [pc, #160]	; (8008d10 <__sflush_r+0x100>)
 8008c6e:	410a      	asrs	r2, r1
 8008c70:	07d6      	lsls	r6, r2, #31
 8008c72:	d427      	bmi.n	8008cc4 <__sflush_r+0xb4>
 8008c74:	2200      	movs	r2, #0
 8008c76:	6062      	str	r2, [r4, #4]
 8008c78:	6922      	ldr	r2, [r4, #16]
 8008c7a:	04d9      	lsls	r1, r3, #19
 8008c7c:	6022      	str	r2, [r4, #0]
 8008c7e:	d504      	bpl.n	8008c8a <__sflush_r+0x7a>
 8008c80:	1c42      	adds	r2, r0, #1
 8008c82:	d101      	bne.n	8008c88 <__sflush_r+0x78>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b903      	cbnz	r3, 8008c8a <__sflush_r+0x7a>
 8008c88:	6560      	str	r0, [r4, #84]	; 0x54
 8008c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c8c:	602f      	str	r7, [r5, #0]
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d0ca      	beq.n	8008c28 <__sflush_r+0x18>
 8008c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c96:	4299      	cmp	r1, r3
 8008c98:	d002      	beq.n	8008ca0 <__sflush_r+0x90>
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f7ff fb44 	bl	8008328 <_free_r>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ca4:	e7c1      	b.n	8008c2a <__sflush_r+0x1a>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b0      	blx	r6
 8008cac:	1c41      	adds	r1, r0, #1
 8008cae:	d1c8      	bne.n	8008c42 <__sflush_r+0x32>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0c5      	beq.n	8008c42 <__sflush_r+0x32>
 8008cb6:	2b1d      	cmp	r3, #29
 8008cb8:	d001      	beq.n	8008cbe <__sflush_r+0xae>
 8008cba:	2b16      	cmp	r3, #22
 8008cbc:	d101      	bne.n	8008cc2 <__sflush_r+0xb2>
 8008cbe:	602f      	str	r7, [r5, #0]
 8008cc0:	e7b2      	b.n	8008c28 <__sflush_r+0x18>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc8:	81a3      	strh	r3, [r4, #12]
 8008cca:	e7ae      	b.n	8008c2a <__sflush_r+0x1a>
 8008ccc:	690f      	ldr	r7, [r1, #16]
 8008cce:	2f00      	cmp	r7, #0
 8008cd0:	d0aa      	beq.n	8008c28 <__sflush_r+0x18>
 8008cd2:	0793      	lsls	r3, r2, #30
 8008cd4:	bf18      	it	ne
 8008cd6:	2300      	movne	r3, #0
 8008cd8:	680e      	ldr	r6, [r1, #0]
 8008cda:	bf08      	it	eq
 8008cdc:	694b      	ldreq	r3, [r1, #20]
 8008cde:	1bf6      	subs	r6, r6, r7
 8008ce0:	600f      	str	r7, [r1, #0]
 8008ce2:	608b      	str	r3, [r1, #8]
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	dd9f      	ble.n	8008c28 <__sflush_r+0x18>
 8008ce8:	4633      	mov	r3, r6
 8008cea:	463a      	mov	r2, r7
 8008cec:	4628      	mov	r0, r5
 8008cee:	6a21      	ldr	r1, [r4, #32]
 8008cf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008cf4:	47e0      	blx	ip
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	dc06      	bgt.n	8008d08 <__sflush_r+0xf8>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	e790      	b.n	8008c2a <__sflush_r+0x1a>
 8008d08:	4407      	add	r7, r0
 8008d0a:	1a36      	subs	r6, r6, r0
 8008d0c:	e7ea      	b.n	8008ce4 <__sflush_r+0xd4>
 8008d0e:	bf00      	nop
 8008d10:	dfbffffe 	.word	0xdfbffffe

08008d14 <_fflush_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	690b      	ldr	r3, [r1, #16]
 8008d18:	4605      	mov	r5, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	b913      	cbnz	r3, 8008d24 <_fflush_r+0x10>
 8008d1e:	2500      	movs	r5, #0
 8008d20:	4628      	mov	r0, r5
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	b118      	cbz	r0, 8008d2e <_fflush_r+0x1a>
 8008d26:	6a03      	ldr	r3, [r0, #32]
 8008d28:	b90b      	cbnz	r3, 8008d2e <_fflush_r+0x1a>
 8008d2a:	f7fe fb89 	bl	8007440 <__sinit>
 8008d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0f3      	beq.n	8008d1e <_fflush_r+0xa>
 8008d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d38:	07d0      	lsls	r0, r2, #31
 8008d3a:	d404      	bmi.n	8008d46 <_fflush_r+0x32>
 8008d3c:	0599      	lsls	r1, r3, #22
 8008d3e:	d402      	bmi.n	8008d46 <_fflush_r+0x32>
 8008d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d42:	f7fe fc74 	bl	800762e <__retarget_lock_acquire_recursive>
 8008d46:	4628      	mov	r0, r5
 8008d48:	4621      	mov	r1, r4
 8008d4a:	f7ff ff61 	bl	8008c10 <__sflush_r>
 8008d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d50:	4605      	mov	r5, r0
 8008d52:	07da      	lsls	r2, r3, #31
 8008d54:	d4e4      	bmi.n	8008d20 <_fflush_r+0xc>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	059b      	lsls	r3, r3, #22
 8008d5a:	d4e1      	bmi.n	8008d20 <_fflush_r+0xc>
 8008d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d5e:	f7fe fc67 	bl	8007630 <__retarget_lock_release_recursive>
 8008d62:	e7dd      	b.n	8008d20 <_fflush_r+0xc>

08008d64 <_sbrk_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	2300      	movs	r3, #0
 8008d68:	4d05      	ldr	r5, [pc, #20]	; (8008d80 <_sbrk_r+0x1c>)
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7fa fa34 	bl	80031dc <_sbrk>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_sbrk_r+0x1a>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_sbrk_r+0x1a>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	20000628 	.word	0x20000628

08008d84 <memcpy>:
 8008d84:	440a      	add	r2, r1
 8008d86:	4291      	cmp	r1, r2
 8008d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d8c:	d100      	bne.n	8008d90 <memcpy+0xc>
 8008d8e:	4770      	bx	lr
 8008d90:	b510      	push	{r4, lr}
 8008d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d96:	4291      	cmp	r1, r2
 8008d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d9c:	d1f9      	bne.n	8008d92 <memcpy+0xe>
 8008d9e:	bd10      	pop	{r4, pc}

08008da0 <__assert_func>:
 8008da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008da2:	4614      	mov	r4, r2
 8008da4:	461a      	mov	r2, r3
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <__assert_func+0x2c>)
 8008da8:	4605      	mov	r5, r0
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68d8      	ldr	r0, [r3, #12]
 8008dae:	b14c      	cbz	r4, 8008dc4 <__assert_func+0x24>
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <__assert_func+0x30>)
 8008db2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008db6:	9100      	str	r1, [sp, #0]
 8008db8:	462b      	mov	r3, r5
 8008dba:	4906      	ldr	r1, [pc, #24]	; (8008dd4 <__assert_func+0x34>)
 8008dbc:	f000 f842 	bl	8008e44 <fiprintf>
 8008dc0:	f000 f852 	bl	8008e68 <abort>
 8008dc4:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <__assert_func+0x38>)
 8008dc6:	461c      	mov	r4, r3
 8008dc8:	e7f3      	b.n	8008db2 <__assert_func+0x12>
 8008dca:	bf00      	nop
 8008dcc:	2000008c 	.word	0x2000008c
 8008dd0:	08009636 	.word	0x08009636
 8008dd4:	08009643 	.word	0x08009643
 8008dd8:	08009671 	.word	0x08009671

08008ddc <_calloc_r>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	fba1 5402 	umull	r5, r4, r1, r2
 8008de2:	b934      	cbnz	r4, 8008df2 <_calloc_r+0x16>
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7ff fb0f 	bl	8008408 <_malloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	b928      	cbnz	r0, 8008dfa <_calloc_r+0x1e>
 8008dee:	4630      	mov	r0, r6
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	220c      	movs	r2, #12
 8008df4:	2600      	movs	r6, #0
 8008df6:	6002      	str	r2, [r0, #0]
 8008df8:	e7f9      	b.n	8008dee <_calloc_r+0x12>
 8008dfa:	462a      	mov	r2, r5
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	f7fe fb98 	bl	8007532 <memset>
 8008e02:	e7f4      	b.n	8008dee <_calloc_r+0x12>

08008e04 <__ascii_mbtowc>:
 8008e04:	b082      	sub	sp, #8
 8008e06:	b901      	cbnz	r1, 8008e0a <__ascii_mbtowc+0x6>
 8008e08:	a901      	add	r1, sp, #4
 8008e0a:	b142      	cbz	r2, 8008e1e <__ascii_mbtowc+0x1a>
 8008e0c:	b14b      	cbz	r3, 8008e22 <__ascii_mbtowc+0x1e>
 8008e0e:	7813      	ldrb	r3, [r2, #0]
 8008e10:	600b      	str	r3, [r1, #0]
 8008e12:	7812      	ldrb	r2, [r2, #0]
 8008e14:	1e10      	subs	r0, r2, #0
 8008e16:	bf18      	it	ne
 8008e18:	2001      	movne	r0, #1
 8008e1a:	b002      	add	sp, #8
 8008e1c:	4770      	bx	lr
 8008e1e:	4610      	mov	r0, r2
 8008e20:	e7fb      	b.n	8008e1a <__ascii_mbtowc+0x16>
 8008e22:	f06f 0001 	mvn.w	r0, #1
 8008e26:	e7f8      	b.n	8008e1a <__ascii_mbtowc+0x16>

08008e28 <__ascii_wctomb>:
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4608      	mov	r0, r1
 8008e2c:	b141      	cbz	r1, 8008e40 <__ascii_wctomb+0x18>
 8008e2e:	2aff      	cmp	r2, #255	; 0xff
 8008e30:	d904      	bls.n	8008e3c <__ascii_wctomb+0x14>
 8008e32:	228a      	movs	r2, #138	; 0x8a
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	4770      	bx	lr
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	700a      	strb	r2, [r1, #0]
 8008e40:	4770      	bx	lr
	...

08008e44 <fiprintf>:
 8008e44:	b40e      	push	{r1, r2, r3}
 8008e46:	b503      	push	{r0, r1, lr}
 8008e48:	4601      	mov	r1, r0
 8008e4a:	ab03      	add	r3, sp, #12
 8008e4c:	4805      	ldr	r0, [pc, #20]	; (8008e64 <fiprintf+0x20>)
 8008e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e52:	6800      	ldr	r0, [r0, #0]
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	f000 f835 	bl	8008ec4 <_vfiprintf_r>
 8008e5a:	b002      	add	sp, #8
 8008e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e60:	b003      	add	sp, #12
 8008e62:	4770      	bx	lr
 8008e64:	2000008c 	.word	0x2000008c

08008e68 <abort>:
 8008e68:	2006      	movs	r0, #6
 8008e6a:	b508      	push	{r3, lr}
 8008e6c:	f000 fa02 	bl	8009274 <raise>
 8008e70:	2001      	movs	r0, #1
 8008e72:	f7fa f940 	bl	80030f6 <_exit>

08008e76 <__sfputc_r>:
 8008e76:	6893      	ldr	r3, [r2, #8]
 8008e78:	b410      	push	{r4}
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	6093      	str	r3, [r2, #8]
 8008e80:	da07      	bge.n	8008e92 <__sfputc_r+0x1c>
 8008e82:	6994      	ldr	r4, [r2, #24]
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	db01      	blt.n	8008e8c <__sfputc_r+0x16>
 8008e88:	290a      	cmp	r1, #10
 8008e8a:	d102      	bne.n	8008e92 <__sfputc_r+0x1c>
 8008e8c:	bc10      	pop	{r4}
 8008e8e:	f000 b933 	b.w	80090f8 <__swbuf_r>
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	1c58      	adds	r0, r3, #1
 8008e96:	6010      	str	r0, [r2, #0]
 8008e98:	7019      	strb	r1, [r3, #0]
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	bc10      	pop	{r4}
 8008e9e:	4770      	bx	lr

08008ea0 <__sfputs_r>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	460f      	mov	r7, r1
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	18d5      	adds	r5, r2, r3
 8008eaa:	42ac      	cmp	r4, r5
 8008eac:	d101      	bne.n	8008eb2 <__sfputs_r+0x12>
 8008eae:	2000      	movs	r0, #0
 8008eb0:	e007      	b.n	8008ec2 <__sfputs_r+0x22>
 8008eb2:	463a      	mov	r2, r7
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eba:	f7ff ffdc 	bl	8008e76 <__sfputc_r>
 8008ebe:	1c43      	adds	r3, r0, #1
 8008ec0:	d1f3      	bne.n	8008eaa <__sfputs_r+0xa>
 8008ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ec4 <_vfiprintf_r>:
 8008ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	460d      	mov	r5, r1
 8008eca:	4614      	mov	r4, r2
 8008ecc:	4698      	mov	r8, r3
 8008ece:	4606      	mov	r6, r0
 8008ed0:	b09d      	sub	sp, #116	; 0x74
 8008ed2:	b118      	cbz	r0, 8008edc <_vfiprintf_r+0x18>
 8008ed4:	6a03      	ldr	r3, [r0, #32]
 8008ed6:	b90b      	cbnz	r3, 8008edc <_vfiprintf_r+0x18>
 8008ed8:	f7fe fab2 	bl	8007440 <__sinit>
 8008edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ede:	07d9      	lsls	r1, r3, #31
 8008ee0:	d405      	bmi.n	8008eee <_vfiprintf_r+0x2a>
 8008ee2:	89ab      	ldrh	r3, [r5, #12]
 8008ee4:	059a      	lsls	r2, r3, #22
 8008ee6:	d402      	bmi.n	8008eee <_vfiprintf_r+0x2a>
 8008ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eea:	f7fe fba0 	bl	800762e <__retarget_lock_acquire_recursive>
 8008eee:	89ab      	ldrh	r3, [r5, #12]
 8008ef0:	071b      	lsls	r3, r3, #28
 8008ef2:	d501      	bpl.n	8008ef8 <_vfiprintf_r+0x34>
 8008ef4:	692b      	ldr	r3, [r5, #16]
 8008ef6:	b99b      	cbnz	r3, 8008f20 <_vfiprintf_r+0x5c>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4630      	mov	r0, r6
 8008efc:	f000 f93a 	bl	8009174 <__swsetup_r>
 8008f00:	b170      	cbz	r0, 8008f20 <_vfiprintf_r+0x5c>
 8008f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f04:	07dc      	lsls	r4, r3, #31
 8008f06:	d504      	bpl.n	8008f12 <_vfiprintf_r+0x4e>
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	b01d      	add	sp, #116	; 0x74
 8008f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	0598      	lsls	r0, r3, #22
 8008f16:	d4f7      	bmi.n	8008f08 <_vfiprintf_r+0x44>
 8008f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f1a:	f7fe fb89 	bl	8007630 <__retarget_lock_release_recursive>
 8008f1e:	e7f3      	b.n	8008f08 <_vfiprintf_r+0x44>
 8008f20:	2300      	movs	r3, #0
 8008f22:	9309      	str	r3, [sp, #36]	; 0x24
 8008f24:	2320      	movs	r3, #32
 8008f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f2a:	2330      	movs	r3, #48	; 0x30
 8008f2c:	f04f 0901 	mov.w	r9, #1
 8008f30:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f34:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80090e4 <_vfiprintf_r+0x220>
 8008f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	469a      	mov	sl, r3
 8008f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f44:	b10a      	cbz	r2, 8008f4a <_vfiprintf_r+0x86>
 8008f46:	2a25      	cmp	r2, #37	; 0x25
 8008f48:	d1f9      	bne.n	8008f3e <_vfiprintf_r+0x7a>
 8008f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4e:	d00b      	beq.n	8008f68 <_vfiprintf_r+0xa4>
 8008f50:	465b      	mov	r3, fp
 8008f52:	4622      	mov	r2, r4
 8008f54:	4629      	mov	r1, r5
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff ffa2 	bl	8008ea0 <__sfputs_r>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f000 80a9 	beq.w	80090b4 <_vfiprintf_r+0x1f0>
 8008f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f64:	445a      	add	r2, fp
 8008f66:	9209      	str	r2, [sp, #36]	; 0x24
 8008f68:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 80a1 	beq.w	80090b4 <_vfiprintf_r+0x1f0>
 8008f72:	2300      	movs	r3, #0
 8008f74:	f04f 32ff 	mov.w	r2, #4294967295
 8008f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7c:	f10a 0a01 	add.w	sl, sl, #1
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	9307      	str	r3, [sp, #28]
 8008f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f88:	931a      	str	r3, [sp, #104]	; 0x68
 8008f8a:	4654      	mov	r4, sl
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f92:	4854      	ldr	r0, [pc, #336]	; (80090e4 <_vfiprintf_r+0x220>)
 8008f94:	f7fe fb4d 	bl	8007632 <memchr>
 8008f98:	9a04      	ldr	r2, [sp, #16]
 8008f9a:	b9d8      	cbnz	r0, 8008fd4 <_vfiprintf_r+0x110>
 8008f9c:	06d1      	lsls	r1, r2, #27
 8008f9e:	bf44      	itt	mi
 8008fa0:	2320      	movmi	r3, #32
 8008fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa6:	0713      	lsls	r3, r2, #28
 8008fa8:	bf44      	itt	mi
 8008faa:	232b      	movmi	r3, #43	; 0x2b
 8008fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb6:	d015      	beq.n	8008fe4 <_vfiprintf_r+0x120>
 8008fb8:	4654      	mov	r4, sl
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f04f 0c0a 	mov.w	ip, #10
 8008fc0:	9a07      	ldr	r2, [sp, #28]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc8:	3b30      	subs	r3, #48	; 0x30
 8008fca:	2b09      	cmp	r3, #9
 8008fcc:	d94d      	bls.n	800906a <_vfiprintf_r+0x1a6>
 8008fce:	b1b0      	cbz	r0, 8008ffe <_vfiprintf_r+0x13a>
 8008fd0:	9207      	str	r2, [sp, #28]
 8008fd2:	e014      	b.n	8008ffe <_vfiprintf_r+0x13a>
 8008fd4:	eba0 0308 	sub.w	r3, r0, r8
 8008fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	46a2      	mov	sl, r4
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	e7d2      	b.n	8008f8a <_vfiprintf_r+0xc6>
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	1d19      	adds	r1, r3, #4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	9103      	str	r1, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfbb      	ittet	lt
 8008ff0:	425b      	neglt	r3, r3
 8008ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff6:	9307      	strge	r3, [sp, #28]
 8008ff8:	9307      	strlt	r3, [sp, #28]
 8008ffa:	bfb8      	it	lt
 8008ffc:	9204      	strlt	r2, [sp, #16]
 8008ffe:	7823      	ldrb	r3, [r4, #0]
 8009000:	2b2e      	cmp	r3, #46	; 0x2e
 8009002:	d10c      	bne.n	800901e <_vfiprintf_r+0x15a>
 8009004:	7863      	ldrb	r3, [r4, #1]
 8009006:	2b2a      	cmp	r3, #42	; 0x2a
 8009008:	d134      	bne.n	8009074 <_vfiprintf_r+0x1b0>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	3402      	adds	r4, #2
 800900e:	1d1a      	adds	r2, r3, #4
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	9203      	str	r2, [sp, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	bfb8      	it	lt
 8009018:	f04f 33ff 	movlt.w	r3, #4294967295
 800901c:	9305      	str	r3, [sp, #20]
 800901e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090e8 <_vfiprintf_r+0x224>
 8009022:	2203      	movs	r2, #3
 8009024:	4650      	mov	r0, sl
 8009026:	7821      	ldrb	r1, [r4, #0]
 8009028:	f7fe fb03 	bl	8007632 <memchr>
 800902c:	b138      	cbz	r0, 800903e <_vfiprintf_r+0x17a>
 800902e:	2240      	movs	r2, #64	; 0x40
 8009030:	9b04      	ldr	r3, [sp, #16]
 8009032:	eba0 000a 	sub.w	r0, r0, sl
 8009036:	4082      	lsls	r2, r0
 8009038:	4313      	orrs	r3, r2
 800903a:	3401      	adds	r4, #1
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009042:	2206      	movs	r2, #6
 8009044:	4829      	ldr	r0, [pc, #164]	; (80090ec <_vfiprintf_r+0x228>)
 8009046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800904a:	f7fe faf2 	bl	8007632 <memchr>
 800904e:	2800      	cmp	r0, #0
 8009050:	d03f      	beq.n	80090d2 <_vfiprintf_r+0x20e>
 8009052:	4b27      	ldr	r3, [pc, #156]	; (80090f0 <_vfiprintf_r+0x22c>)
 8009054:	bb1b      	cbnz	r3, 800909e <_vfiprintf_r+0x1da>
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	3307      	adds	r3, #7
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	3308      	adds	r3, #8
 8009060:	9303      	str	r3, [sp, #12]
 8009062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009064:	443b      	add	r3, r7
 8009066:	9309      	str	r3, [sp, #36]	; 0x24
 8009068:	e768      	b.n	8008f3c <_vfiprintf_r+0x78>
 800906a:	460c      	mov	r4, r1
 800906c:	2001      	movs	r0, #1
 800906e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009072:	e7a6      	b.n	8008fc2 <_vfiprintf_r+0xfe>
 8009074:	2300      	movs	r3, #0
 8009076:	f04f 0c0a 	mov.w	ip, #10
 800907a:	4619      	mov	r1, r3
 800907c:	3401      	adds	r4, #1
 800907e:	9305      	str	r3, [sp, #20]
 8009080:	4620      	mov	r0, r4
 8009082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009086:	3a30      	subs	r2, #48	; 0x30
 8009088:	2a09      	cmp	r2, #9
 800908a:	d903      	bls.n	8009094 <_vfiprintf_r+0x1d0>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0c6      	beq.n	800901e <_vfiprintf_r+0x15a>
 8009090:	9105      	str	r1, [sp, #20]
 8009092:	e7c4      	b.n	800901e <_vfiprintf_r+0x15a>
 8009094:	4604      	mov	r4, r0
 8009096:	2301      	movs	r3, #1
 8009098:	fb0c 2101 	mla	r1, ip, r1, r2
 800909c:	e7f0      	b.n	8009080 <_vfiprintf_r+0x1bc>
 800909e:	ab03      	add	r3, sp, #12
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	462a      	mov	r2, r5
 80090a4:	4630      	mov	r0, r6
 80090a6:	4b13      	ldr	r3, [pc, #76]	; (80090f4 <_vfiprintf_r+0x230>)
 80090a8:	a904      	add	r1, sp, #16
 80090aa:	f7fd fd7b 	bl	8006ba4 <_printf_float>
 80090ae:	4607      	mov	r7, r0
 80090b0:	1c78      	adds	r0, r7, #1
 80090b2:	d1d6      	bne.n	8009062 <_vfiprintf_r+0x19e>
 80090b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b6:	07d9      	lsls	r1, r3, #31
 80090b8:	d405      	bmi.n	80090c6 <_vfiprintf_r+0x202>
 80090ba:	89ab      	ldrh	r3, [r5, #12]
 80090bc:	059a      	lsls	r2, r3, #22
 80090be:	d402      	bmi.n	80090c6 <_vfiprintf_r+0x202>
 80090c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c2:	f7fe fab5 	bl	8007630 <__retarget_lock_release_recursive>
 80090c6:	89ab      	ldrh	r3, [r5, #12]
 80090c8:	065b      	lsls	r3, r3, #25
 80090ca:	f53f af1d 	bmi.w	8008f08 <_vfiprintf_r+0x44>
 80090ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d0:	e71c      	b.n	8008f0c <_vfiprintf_r+0x48>
 80090d2:	ab03      	add	r3, sp, #12
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	462a      	mov	r2, r5
 80090d8:	4630      	mov	r0, r6
 80090da:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <_vfiprintf_r+0x230>)
 80090dc:	a904      	add	r1, sp, #16
 80090de:	f7fe f801 	bl	80070e4 <_printf_i>
 80090e2:	e7e4      	b.n	80090ae <_vfiprintf_r+0x1ea>
 80090e4:	08009773 	.word	0x08009773
 80090e8:	08009779 	.word	0x08009779
 80090ec:	0800977d 	.word	0x0800977d
 80090f0:	08006ba5 	.word	0x08006ba5
 80090f4:	08008ea1 	.word	0x08008ea1

080090f8 <__swbuf_r>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	460e      	mov	r6, r1
 80090fc:	4614      	mov	r4, r2
 80090fe:	4605      	mov	r5, r0
 8009100:	b118      	cbz	r0, 800910a <__swbuf_r+0x12>
 8009102:	6a03      	ldr	r3, [r0, #32]
 8009104:	b90b      	cbnz	r3, 800910a <__swbuf_r+0x12>
 8009106:	f7fe f99b 	bl	8007440 <__sinit>
 800910a:	69a3      	ldr	r3, [r4, #24]
 800910c:	60a3      	str	r3, [r4, #8]
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	071a      	lsls	r2, r3, #28
 8009112:	d525      	bpl.n	8009160 <__swbuf_r+0x68>
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	b31b      	cbz	r3, 8009160 <__swbuf_r+0x68>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	6922      	ldr	r2, [r4, #16]
 800911c:	b2f6      	uxtb	r6, r6
 800911e:	1a98      	subs	r0, r3, r2
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	4637      	mov	r7, r6
 8009124:	4283      	cmp	r3, r0
 8009126:	dc04      	bgt.n	8009132 <__swbuf_r+0x3a>
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f7ff fdf2 	bl	8008d14 <_fflush_r>
 8009130:	b9e0      	cbnz	r0, 800916c <__swbuf_r+0x74>
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	3b01      	subs	r3, #1
 8009136:	60a3      	str	r3, [r4, #8]
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	6022      	str	r2, [r4, #0]
 800913e:	701e      	strb	r6, [r3, #0]
 8009140:	6962      	ldr	r2, [r4, #20]
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	429a      	cmp	r2, r3
 8009146:	d004      	beq.n	8009152 <__swbuf_r+0x5a>
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	07db      	lsls	r3, r3, #31
 800914c:	d506      	bpl.n	800915c <__swbuf_r+0x64>
 800914e:	2e0a      	cmp	r6, #10
 8009150:	d104      	bne.n	800915c <__swbuf_r+0x64>
 8009152:	4621      	mov	r1, r4
 8009154:	4628      	mov	r0, r5
 8009156:	f7ff fddd 	bl	8008d14 <_fflush_r>
 800915a:	b938      	cbnz	r0, 800916c <__swbuf_r+0x74>
 800915c:	4638      	mov	r0, r7
 800915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009160:	4621      	mov	r1, r4
 8009162:	4628      	mov	r0, r5
 8009164:	f000 f806 	bl	8009174 <__swsetup_r>
 8009168:	2800      	cmp	r0, #0
 800916a:	d0d5      	beq.n	8009118 <__swbuf_r+0x20>
 800916c:	f04f 37ff 	mov.w	r7, #4294967295
 8009170:	e7f4      	b.n	800915c <__swbuf_r+0x64>
	...

08009174 <__swsetup_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4b2a      	ldr	r3, [pc, #168]	; (8009220 <__swsetup_r+0xac>)
 8009178:	4605      	mov	r5, r0
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	460c      	mov	r4, r1
 800917e:	b118      	cbz	r0, 8009188 <__swsetup_r+0x14>
 8009180:	6a03      	ldr	r3, [r0, #32]
 8009182:	b90b      	cbnz	r3, 8009188 <__swsetup_r+0x14>
 8009184:	f7fe f95c 	bl	8007440 <__sinit>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800918e:	0718      	lsls	r0, r3, #28
 8009190:	d422      	bmi.n	80091d8 <__swsetup_r+0x64>
 8009192:	06d9      	lsls	r1, r3, #27
 8009194:	d407      	bmi.n	80091a6 <__swsetup_r+0x32>
 8009196:	2309      	movs	r3, #9
 8009198:	602b      	str	r3, [r5, #0]
 800919a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800919e:	f04f 30ff 	mov.w	r0, #4294967295
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	e034      	b.n	8009210 <__swsetup_r+0x9c>
 80091a6:	0758      	lsls	r0, r3, #29
 80091a8:	d512      	bpl.n	80091d0 <__swsetup_r+0x5c>
 80091aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ac:	b141      	cbz	r1, 80091c0 <__swsetup_r+0x4c>
 80091ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091b2:	4299      	cmp	r1, r3
 80091b4:	d002      	beq.n	80091bc <__swsetup_r+0x48>
 80091b6:	4628      	mov	r0, r5
 80091b8:	f7ff f8b6 	bl	8008328 <_free_r>
 80091bc:	2300      	movs	r3, #0
 80091be:	6363      	str	r3, [r4, #52]	; 0x34
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	2300      	movs	r3, #0
 80091ca:	6063      	str	r3, [r4, #4]
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	f043 0308 	orr.w	r3, r3, #8
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	b94b      	cbnz	r3, 80091f0 <__swsetup_r+0x7c>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091e6:	d003      	beq.n	80091f0 <__swsetup_r+0x7c>
 80091e8:	4621      	mov	r1, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 f883 	bl	80092f6 <__smakebuf_r>
 80091f0:	89a0      	ldrh	r0, [r4, #12]
 80091f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091f6:	f010 0301 	ands.w	r3, r0, #1
 80091fa:	d00a      	beq.n	8009212 <__swsetup_r+0x9e>
 80091fc:	2300      	movs	r3, #0
 80091fe:	60a3      	str	r3, [r4, #8]
 8009200:	6963      	ldr	r3, [r4, #20]
 8009202:	425b      	negs	r3, r3
 8009204:	61a3      	str	r3, [r4, #24]
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	b943      	cbnz	r3, 800921c <__swsetup_r+0xa8>
 800920a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800920e:	d1c4      	bne.n	800919a <__swsetup_r+0x26>
 8009210:	bd38      	pop	{r3, r4, r5, pc}
 8009212:	0781      	lsls	r1, r0, #30
 8009214:	bf58      	it	pl
 8009216:	6963      	ldrpl	r3, [r4, #20]
 8009218:	60a3      	str	r3, [r4, #8]
 800921a:	e7f4      	b.n	8009206 <__swsetup_r+0x92>
 800921c:	2000      	movs	r0, #0
 800921e:	e7f7      	b.n	8009210 <__swsetup_r+0x9c>
 8009220:	2000008c 	.word	0x2000008c

08009224 <_raise_r>:
 8009224:	291f      	cmp	r1, #31
 8009226:	b538      	push	{r3, r4, r5, lr}
 8009228:	4604      	mov	r4, r0
 800922a:	460d      	mov	r5, r1
 800922c:	d904      	bls.n	8009238 <_raise_r+0x14>
 800922e:	2316      	movs	r3, #22
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	f04f 30ff 	mov.w	r0, #4294967295
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800923a:	b112      	cbz	r2, 8009242 <_raise_r+0x1e>
 800923c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009240:	b94b      	cbnz	r3, 8009256 <_raise_r+0x32>
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f830 	bl	80092a8 <_getpid_r>
 8009248:	462a      	mov	r2, r5
 800924a:	4601      	mov	r1, r0
 800924c:	4620      	mov	r0, r4
 800924e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009252:	f000 b817 	b.w	8009284 <_kill_r>
 8009256:	2b01      	cmp	r3, #1
 8009258:	d00a      	beq.n	8009270 <_raise_r+0x4c>
 800925a:	1c59      	adds	r1, r3, #1
 800925c:	d103      	bne.n	8009266 <_raise_r+0x42>
 800925e:	2316      	movs	r3, #22
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	2001      	movs	r0, #1
 8009264:	e7e7      	b.n	8009236 <_raise_r+0x12>
 8009266:	2400      	movs	r4, #0
 8009268:	4628      	mov	r0, r5
 800926a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800926e:	4798      	blx	r3
 8009270:	2000      	movs	r0, #0
 8009272:	e7e0      	b.n	8009236 <_raise_r+0x12>

08009274 <raise>:
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <raise+0xc>)
 8009276:	4601      	mov	r1, r0
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	f7ff bfd3 	b.w	8009224 <_raise_r>
 800927e:	bf00      	nop
 8009280:	2000008c 	.word	0x2000008c

08009284 <_kill_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	2300      	movs	r3, #0
 8009288:	4d06      	ldr	r5, [pc, #24]	; (80092a4 <_kill_r+0x20>)
 800928a:	4604      	mov	r4, r0
 800928c:	4608      	mov	r0, r1
 800928e:	4611      	mov	r1, r2
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	f7f9 ff20 	bl	80030d6 <_kill>
 8009296:	1c43      	adds	r3, r0, #1
 8009298:	d102      	bne.n	80092a0 <_kill_r+0x1c>
 800929a:	682b      	ldr	r3, [r5, #0]
 800929c:	b103      	cbz	r3, 80092a0 <_kill_r+0x1c>
 800929e:	6023      	str	r3, [r4, #0]
 80092a0:	bd38      	pop	{r3, r4, r5, pc}
 80092a2:	bf00      	nop
 80092a4:	20000628 	.word	0x20000628

080092a8 <_getpid_r>:
 80092a8:	f7f9 bf0e 	b.w	80030c8 <_getpid>

080092ac <__swhatbuf_r>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	460c      	mov	r4, r1
 80092b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b4:	4615      	mov	r5, r2
 80092b6:	2900      	cmp	r1, #0
 80092b8:	461e      	mov	r6, r3
 80092ba:	b096      	sub	sp, #88	; 0x58
 80092bc:	da0c      	bge.n	80092d8 <__swhatbuf_r+0x2c>
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	2100      	movs	r1, #0
 80092c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092c6:	bf0c      	ite	eq
 80092c8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092cc:	2340      	movne	r3, #64	; 0x40
 80092ce:	2000      	movs	r0, #0
 80092d0:	6031      	str	r1, [r6, #0]
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	b016      	add	sp, #88	; 0x58
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	466a      	mov	r2, sp
 80092da:	f000 f849 	bl	8009370 <_fstat_r>
 80092de:	2800      	cmp	r0, #0
 80092e0:	dbed      	blt.n	80092be <__swhatbuf_r+0x12>
 80092e2:	9901      	ldr	r1, [sp, #4]
 80092e4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092e8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092ec:	4259      	negs	r1, r3
 80092ee:	4159      	adcs	r1, r3
 80092f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f4:	e7eb      	b.n	80092ce <__swhatbuf_r+0x22>

080092f6 <__smakebuf_r>:
 80092f6:	898b      	ldrh	r3, [r1, #12]
 80092f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092fa:	079d      	lsls	r5, r3, #30
 80092fc:	4606      	mov	r6, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	d507      	bpl.n	8009312 <__smakebuf_r+0x1c>
 8009302:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009306:	6023      	str	r3, [r4, #0]
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	2301      	movs	r3, #1
 800930c:	6163      	str	r3, [r4, #20]
 800930e:	b002      	add	sp, #8
 8009310:	bd70      	pop	{r4, r5, r6, pc}
 8009312:	466a      	mov	r2, sp
 8009314:	ab01      	add	r3, sp, #4
 8009316:	f7ff ffc9 	bl	80092ac <__swhatbuf_r>
 800931a:	9900      	ldr	r1, [sp, #0]
 800931c:	4605      	mov	r5, r0
 800931e:	4630      	mov	r0, r6
 8009320:	f7ff f872 	bl	8008408 <_malloc_r>
 8009324:	b948      	cbnz	r0, 800933a <__smakebuf_r+0x44>
 8009326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932a:	059a      	lsls	r2, r3, #22
 800932c:	d4ef      	bmi.n	800930e <__smakebuf_r+0x18>
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	f043 0302 	orr.w	r3, r3, #2
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	e7e3      	b.n	8009302 <__smakebuf_r+0xc>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	6020      	str	r0, [r4, #0]
 800933e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	9b00      	ldr	r3, [sp, #0]
 8009346:	6120      	str	r0, [r4, #16]
 8009348:	6163      	str	r3, [r4, #20]
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	b15b      	cbz	r3, 8009366 <__smakebuf_r+0x70>
 800934e:	4630      	mov	r0, r6
 8009350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009354:	f000 f81e 	bl	8009394 <_isatty_r>
 8009358:	b128      	cbz	r0, 8009366 <__smakebuf_r+0x70>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	f023 0303 	bic.w	r3, r3, #3
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	431d      	orrs	r5, r3
 800936a:	81a5      	strh	r5, [r4, #12]
 800936c:	e7cf      	b.n	800930e <__smakebuf_r+0x18>
	...

08009370 <_fstat_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	2300      	movs	r3, #0
 8009374:	4d06      	ldr	r5, [pc, #24]	; (8009390 <_fstat_r+0x20>)
 8009376:	4604      	mov	r4, r0
 8009378:	4608      	mov	r0, r1
 800937a:	4611      	mov	r1, r2
 800937c:	602b      	str	r3, [r5, #0]
 800937e:	f7f9 ff08 	bl	8003192 <_fstat>
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	d102      	bne.n	800938c <_fstat_r+0x1c>
 8009386:	682b      	ldr	r3, [r5, #0]
 8009388:	b103      	cbz	r3, 800938c <_fstat_r+0x1c>
 800938a:	6023      	str	r3, [r4, #0]
 800938c:	bd38      	pop	{r3, r4, r5, pc}
 800938e:	bf00      	nop
 8009390:	20000628 	.word	0x20000628

08009394 <_isatty_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	2300      	movs	r3, #0
 8009398:	4d05      	ldr	r5, [pc, #20]	; (80093b0 <_isatty_r+0x1c>)
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	602b      	str	r3, [r5, #0]
 80093a0:	f7f9 ff06 	bl	80031b0 <_isatty>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d102      	bne.n	80093ae <_isatty_r+0x1a>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b103      	cbz	r3, 80093ae <_isatty_r+0x1a>
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	20000628 	.word	0x20000628

080093b4 <_init>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	bf00      	nop
 80093b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ba:	bc08      	pop	{r3}
 80093bc:	469e      	mov	lr, r3
 80093be:	4770      	bx	lr

080093c0 <_fini>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	bf00      	nop
 80093c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c6:	bc08      	pop	{r3}
 80093c8:	469e      	mov	lr, r3
 80093ca:	4770      	bx	lr
