
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f4  080035f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035fc  080035fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035fc  080035fc  000135fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08003610  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003610  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e514  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253a  00000000  00000000  0002e58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00030ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb3  00000000  00000000  00031b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020a0  00000000  00000000  000327d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014786  00000000  00000000  00034873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b989d  00000000  00000000  00048ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004474  00000000  00000000  00102898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00106d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080035a4 	.word	0x080035a4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080035a4 	.word	0x080035a4

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b972 	b.w	8000520 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14c      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d967      	bls.n	800033a <__udivmoddi4+0xe6>
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	b153      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000270:	fa02 fc03 	lsl.w	ip, r2, r3
 8000274:	f1c3 0220 	rsb	r2, r3, #32
 8000278:	fa01 fe03 	lsl.w	lr, r1, r3
 800027c:	fa20 f202 	lsr.w	r2, r0, r2
 8000280:	ea42 0e0e 	orr.w	lr, r2, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fbbe f1f7 	udiv	r1, lr, r7
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fb07 ee11 	mls	lr, r7, r1, lr
 8000296:	fb01 f005 	mul.w	r0, r1, r5
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002ac:	f080 8119 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8116 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002c0:	fb07 2210 	mls	r2, r7, r0, r2
 80002c4:	fb00 f505 	mul.w	r5, r0, r5
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8104 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8101 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xc0>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ea 	beq.w	80004dc <__udivmoddi4+0x288>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d148      	bne.n	80003ae <__udivmoddi4+0x15a>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xd2>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2c2>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4696      	mov	lr, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa6>
 8000334:	e9c6 4e00 	strd	r4, lr, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa6>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xea>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 808e 	bne.w	8000464 <__udivmoddi4+0x210>
 8000348:	1a88      	subs	r0, r1, r2
 800034a:	2101      	movs	r1, #1
 800034c:	0c17      	lsrs	r7, r2, #16
 800034e:	fa1f fe82 	uxth.w	lr, r2
 8000352:	fbb0 f5f7 	udiv	r5, r0, r7
 8000356:	fb07 0015 	mls	r0, r7, r5, r0
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb0e f005 	mul.w	r0, lr, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x126>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4290      	cmp	r0, r2
 8000374:	f200 80cc 	bhi.w	8000510 <__udivmoddi4+0x2bc>
 8000378:	4645      	mov	r5, r8
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000380:	fb07 2210 	mls	r2, r7, r0, r2
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x150>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14e>
 800039c:	45a6      	cmp	lr, r4
 800039e:	f200 80b4 	bhi.w	800050a <__udivmoddi4+0x2b6>
 80003a2:	4610      	mov	r0, r2
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ac:	e7a0      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	408b      	lsls	r3, r1
 80003b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003bc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	fbba f8f9 	udiv	r8, sl, r9
 80003c8:	408d      	lsls	r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	432b      	orrs	r3, r5
 80003d8:	fa00 f501 	lsl.w	r5, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	0c1c      	lsrs	r4, r3, #16
 80003e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e6:	42a0      	cmp	r0, r4
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	d90b      	bls.n	8000406 <__udivmoddi4+0x1b2>
 80003ee:	eb1c 0404 	adds.w	r4, ip, r4
 80003f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f6:	f080 8086 	bcs.w	8000506 <__udivmoddi4+0x2b2>
 80003fa:	42a0      	cmp	r0, r4
 80003fc:	f240 8083 	bls.w	8000506 <__udivmoddi4+0x2b2>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4464      	add	r4, ip
 8000406:	1a24      	subs	r4, r4, r0
 8000408:	b298      	uxth	r0, r3
 800040a:	fbb4 f3f9 	udiv	r3, r4, r9
 800040e:	fb09 4413 	mls	r4, r9, r3, r4
 8000412:	fb03 fe0e 	mul.w	lr, r3, lr
 8000416:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d26a      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d968      	bls.n	80004fe <__udivmoddi4+0x2aa>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 9302 	umull	r9, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c8      	mov	r8, r9
 8000440:	469e      	mov	lr, r3
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d067      	beq.n	800051a <__udivmoddi4+0x2c6>
 800044a:	ebb5 0308 	subs.w	r3, r5, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	40cb      	lsrs	r3, r1
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	431f      	orrs	r7, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	2100      	movs	r1, #0
 8000462:	e74a      	b.n	80002fa <__udivmoddi4+0xa6>
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	f1c3 0020 	rsb	r0, r3, #32
 800046c:	40c1      	lsrs	r1, r0
 800046e:	409d      	lsls	r5, r3
 8000470:	fa24 f000 	lsr.w	r0, r4, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	4328      	orrs	r0, r5
 800047a:	fbb1 f5f7 	udiv	r5, r1, r7
 800047e:	fb07 1115 	mls	r1, r7, r5, r1
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	0c02      	lsrs	r2, r0, #16
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	fa04 f403 	lsl.w	r4, r4, r3
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x256>
 8000498:	eb1c 0202 	adds.w	r2, ip, r2
 800049c:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a0:	d22f      	bcs.n	8000502 <__udivmoddi4+0x2ae>
 80004a2:	4291      	cmp	r1, r2
 80004a4:	d92d      	bls.n	8000502 <__udivmoddi4+0x2ae>
 80004a6:	3d02      	subs	r5, #2
 80004a8:	4462      	add	r2, ip
 80004aa:	1a52      	subs	r2, r2, r1
 80004ac:	fbb2 f1f7 	udiv	r1, r2, r7
 80004b0:	fb07 2211 	mls	r2, r7, r1, r2
 80004b4:	b280      	uxth	r0, r0
 80004b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ba:	fb01 f20e 	mul.w	r2, r1, lr
 80004be:	4282      	cmp	r2, r0
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x280>
 80004c2:	eb1c 0000 	adds.w	r0, ip, r0
 80004c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ca:	d216      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d914      	bls.n	80004fa <__udivmoddi4+0x2a6>
 80004d0:	3902      	subs	r1, #2
 80004d2:	4460      	add	r0, ip
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70b      	b.n	80002fa <__udivmoddi4+0xa6>
 80004e2:	4671      	mov	r1, lr
 80004e4:	e6e9      	b.n	80002ba <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6fe      	b.n	80002e8 <__udivmoddi4+0x94>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb9 0802 	subs.w	r8, r9, r2
 80004f2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a5      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fa:	4641      	mov	r1, r8
 80004fc:	e7ea      	b.n	80004d4 <__udivmoddi4+0x280>
 80004fe:	4603      	mov	r3, r0
 8000500:	e796      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000502:	4645      	mov	r5, r8
 8000504:	e7d1      	b.n	80004aa <__udivmoddi4+0x256>
 8000506:	46d0      	mov	r8, sl
 8000508:	e77d      	b.n	8000406 <__udivmoddi4+0x1b2>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e749      	b.n	80003a4 <__udivmoddi4+0x150>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e731      	b.n	800037a <__udivmoddi4+0x126>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xdc>
 800051a:	4631      	mov	r1, r6
 800051c:	e6ed      	b.n	80002fa <__udivmoddi4+0xa6>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <DRV8836_Init>:
 *      Author: Michal Klebokowski
 */
#include "drv8836.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	4611      	mov	r1, r2
 8000530:	461a      	mov	r2, r3
 8000532:	460b      	mov	r3, r1
 8000534:	80fb      	strh	r3, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	88ba      	ldrh	r2, [r7, #4]
 800054a:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	8b3a      	ldrh	r2, [r7, #24]
 8000550:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	8bba      	ldrh	r2, [r7, #28]
 8000556:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	685a      	ldr	r2, [r3, #4]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	891b      	ldrh	r3, [r3, #8]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f002 fa08 	bl	8002978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	685a      	ldr	r2, [r3, #4]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	895b      	ldrh	r3, [r3, #10]
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f002 fa00 	bl	8002978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	685a      	ldr	r2, [r3, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	899b      	ldrh	r3, [r3, #12]
 8000580:	4619      	mov	r1, r3
 8000582:	4610      	mov	r0, r2
 8000584:	f002 f9f8 	bl	8002978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	89db      	ldrh	r3, [r3, #14]
 8000590:	4619      	mov	r1, r3
 8000592:	4610      	mov	r0, r2
 8000594:	f002 f9f0 	bl	8002978 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 8000598:	88fb      	ldrh	r3, [r7, #6]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d105      	bne.n	80005aa <DRV8836_Init+0x86>
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	635a      	str	r2, [r3, #52]	; 0x34
 80005a8:	e016      	b.n	80005d8 <DRV8836_Init+0xb4>
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d105      	bne.n	80005bc <DRV8836_Init+0x98>
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	6393      	str	r3, [r2, #56]	; 0x38
 80005ba:	e00d      	b.n	80005d8 <DRV8836_Init+0xb4>
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	2b08      	cmp	r3, #8
 80005c0:	d105      	bne.n	80005ce <DRV8836_Init+0xaa>
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 80005cc:	e004      	b.n	80005d8 <DRV8836_Init+0xb4>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 80005d8:	88bb      	ldrh	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d105      	bne.n	80005ea <DRV8836_Init+0xc6>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34
 80005e8:	e016      	b.n	8000618 <DRV8836_Init+0xf4>
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d105      	bne.n	80005fc <DRV8836_Init+0xd8>
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	6393      	str	r3, [r2, #56]	; 0x38
 80005fa:	e00d      	b.n	8000618 <DRV8836_Init+0xf4>
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d105      	bne.n	800060e <DRV8836_Init+0xea>
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	2300      	movs	r3, #0
 800060a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800060c:	e004      	b.n	8000618 <DRV8836_Init+0xf4>
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 8000618:	8b3b      	ldrh	r3, [r7, #24]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d105      	bne.n	800062a <DRV8836_Init+0x106>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
 8000628:	e016      	b.n	8000658 <DRV8836_Init+0x134>
 800062a:	8b3b      	ldrh	r3, [r7, #24]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d105      	bne.n	800063c <DRV8836_Init+0x118>
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	6393      	str	r3, [r2, #56]	; 0x38
 800063a:	e00d      	b.n	8000658 <DRV8836_Init+0x134>
 800063c:	8b3b      	ldrh	r3, [r7, #24]
 800063e:	2b08      	cmp	r3, #8
 8000640:	d105      	bne.n	800064e <DRV8836_Init+0x12a>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800064c:	e004      	b.n	8000658 <DRV8836_Init+0x134>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8000658:	8bbb      	ldrh	r3, [r7, #28]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d105      	bne.n	800066a <DRV8836_Init+0x146>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000668:	e016      	b.n	8000698 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800066a:	8bbb      	ldrh	r3, [r7, #28]
 800066c:	2b04      	cmp	r3, #4
 800066e:	d105      	bne.n	800067c <DRV8836_Init+0x158>
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	2300      	movs	r3, #0
 8000678:	6393      	str	r3, [r2, #56]	; 0x38
}
 800067a:	e00d      	b.n	8000698 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800067c:	8bbb      	ldrh	r3, [r7, #28]
 800067e:	2b08      	cmp	r3, #8
 8000680:	d105      	bne.n	800068e <DRV8836_Init+0x16a>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800068c:	e004      	b.n	8000698 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <DRV8836_SetDirection>:

void DRV8836_SetDirection(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction)		//maybe this set of 2 function can be raplaced by: set speed, set direction, apply changes
{																										//also consider switch to gpio when coast and brake because of spikes
 80006a0:	b480      	push	{r7}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
 80006ac:	4613      	mov	r3, r2
 80006ae:	70bb      	strb	r3, [r7, #2]
	DRV8836_Direction_t *TargetDirection;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;
	uint16_t TargetSpeed;

	if(Output_A == output)
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10c      	bne.n	80006d0 <DRV8836_SetDirection+0x30>
	{
		TargetForwardChannel = ic->a_forward_channel;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	891b      	ldrh	r3, [r3, #8]
 80006ba:	827b      	strh	r3, [r7, #18]
		TargetReverseChannel = ic->a_reverse_channel;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	895b      	ldrh	r3, [r3, #10]
 80006c0:	823b      	strh	r3, [r7, #16]
		TargetSpeed = ic->a_speed;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8a1b      	ldrh	r3, [r3, #16]
 80006c6:	81fb      	strh	r3, [r7, #14]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3314      	adds	r3, #20
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e00e      	b.n	80006ee <DRV8836_SetDirection+0x4e>
	}
	else if(Output_B == output)
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d10b      	bne.n	80006ee <DRV8836_SetDirection+0x4e>
	{
		TargetForwardChannel = ic->b_forward_channel;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	899b      	ldrh	r3, [r3, #12]
 80006da:	827b      	strh	r3, [r7, #18]
		TargetReverseChannel = ic->b_reverse_channel;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	89db      	ldrh	r3, [r3, #14]
 80006e0:	823b      	strh	r3, [r7, #16]
		TargetSpeed = ic->b_speed;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	8a5b      	ldrh	r3, [r3, #18]
 80006e6:	81fb      	strh	r3, [r7, #14]
		TargetDirection = &(ic->b_direction);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3315      	adds	r3, #21
 80006ec:	617b      	str	r3, [r7, #20]
	else
	{
		//error
	}

	switch(direction)
 80006ee:	78bb      	ldrb	r3, [r7, #2]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	f200 811f 	bhi.w	8000934 <DRV8836_SetDirection+0x294>
 80006f6:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <DRV8836_SetDirection+0x5c>)
 80006f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	0800078f 	.word	0x0800078f
 8000704:	08000811 	.word	0x08000811
 8000708:	08000893 	.word	0x08000893
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 800070c:	8a7b      	ldrh	r3, [r7, #18]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <DRV8836_SetDirection+0x7e>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34
 800071c:	e016      	b.n	800074c <DRV8836_SetDirection+0xac>
 800071e:	8a7b      	ldrh	r3, [r7, #18]
 8000720:	2b04      	cmp	r3, #4
 8000722:	d105      	bne.n	8000730 <DRV8836_SetDirection+0x90>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	2300      	movs	r3, #0
 800072c:	6393      	str	r3, [r2, #56]	; 0x38
 800072e:	e00d      	b.n	800074c <DRV8836_SetDirection+0xac>
 8000730:	8a7b      	ldrh	r3, [r7, #18]
 8000732:	2b08      	cmp	r3, #8
 8000734:	d105      	bne.n	8000742 <DRV8836_SetDirection+0xa2>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	2300      	movs	r3, #0
 800073e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000740:	e004      	b.n	800074c <DRV8836_SetDirection+0xac>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2300      	movs	r3, #0
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800074c:	8a3b      	ldrh	r3, [r7, #16]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <DRV8836_SetDirection+0xbe>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800075c:	e0eb      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800075e:	8a3b      	ldrh	r3, [r7, #16]
 8000760:	2b04      	cmp	r3, #4
 8000762:	d105      	bne.n	8000770 <DRV8836_SetDirection+0xd0>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	2300      	movs	r3, #0
 800076c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800076e:	e0e2      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000770:	8a3b      	ldrh	r3, [r7, #16]
 8000772:	2b08      	cmp	r3, #8
 8000774:	d105      	bne.n	8000782 <DRV8836_SetDirection+0xe2>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	2300      	movs	r3, #0
 800077e:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000780:	e0d9      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	2300      	movs	r3, #0
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800078c:	e0d3      	b.n	8000936 <DRV8836_SetDirection+0x296>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 800078e:	8a7b      	ldrh	r3, [r7, #18]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d105      	bne.n	80007a0 <DRV8836_SetDirection+0x100>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	e016      	b.n	80007ce <DRV8836_SetDirection+0x12e>
 80007a0:	8a7b      	ldrh	r3, [r7, #18]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d105      	bne.n	80007b2 <DRV8836_SetDirection+0x112>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	6393      	str	r3, [r2, #56]	; 0x38
 80007b0:	e00d      	b.n	80007ce <DRV8836_SetDirection+0x12e>
 80007b2:	8a7b      	ldrh	r3, [r7, #18]
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d105      	bne.n	80007c4 <DRV8836_SetDirection+0x124>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	2300      	movs	r3, #0
 80007c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007c2:	e004      	b.n	80007ce <DRV8836_SetDirection+0x12e>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, TargetSpeed);
 80007ce:	8a3b      	ldrh	r3, [r7, #16]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d105      	bne.n	80007e0 <DRV8836_SetDirection+0x140>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	89fa      	ldrh	r2, [r7, #14]
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80007de:	e0aa      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, TargetSpeed);
 80007e0:	8a3b      	ldrh	r3, [r7, #16]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d105      	bne.n	80007f2 <DRV8836_SetDirection+0x152>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80007f0:	e0a1      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, TargetSpeed);
 80007f2:	8a3b      	ldrh	r3, [r7, #16]
 80007f4:	2b08      	cmp	r3, #8
 80007f6:	d105      	bne.n	8000804 <DRV8836_SetDirection+0x164>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000802:	e098      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, TargetSpeed);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800080e:	e092      	b.n	8000936 <DRV8836_SetDirection+0x296>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, TargetSpeed);
 8000810:	8a7b      	ldrh	r3, [r7, #18]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d105      	bne.n	8000822 <DRV8836_SetDirection+0x182>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	89fa      	ldrh	r2, [r7, #14]
 800081e:	635a      	str	r2, [r3, #52]	; 0x34
 8000820:	e016      	b.n	8000850 <DRV8836_SetDirection+0x1b0>
 8000822:	8a7b      	ldrh	r3, [r7, #18]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d105      	bne.n	8000834 <DRV8836_SetDirection+0x194>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	89fb      	ldrh	r3, [r7, #14]
 8000830:	6393      	str	r3, [r2, #56]	; 0x38
 8000832:	e00d      	b.n	8000850 <DRV8836_SetDirection+0x1b0>
 8000834:	8a7b      	ldrh	r3, [r7, #18]
 8000836:	2b08      	cmp	r3, #8
 8000838:	d105      	bne.n	8000846 <DRV8836_SetDirection+0x1a6>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000844:	e004      	b.n	8000850 <DRV8836_SetDirection+0x1b0>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000850:	8a3b      	ldrh	r3, [r7, #16]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d105      	bne.n	8000862 <DRV8836_SetDirection+0x1c2>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2200      	movs	r2, #0
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000860:	e069      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000862:	8a3b      	ldrh	r3, [r7, #16]
 8000864:	2b04      	cmp	r3, #4
 8000866:	d105      	bne.n	8000874 <DRV8836_SetDirection+0x1d4>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000872:	e060      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000874:	8a3b      	ldrh	r3, [r7, #16]
 8000876:	2b08      	cmp	r3, #8
 8000878:	d105      	bne.n	8000886 <DRV8836_SetDirection+0x1e6>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	2300      	movs	r3, #0
 8000882:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000884:	e057      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000890:	e051      	b.n	8000936 <DRV8836_SetDirection+0x296>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 8000892:	8a7b      	ldrh	r3, [r7, #18]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d107      	bne.n	80008a8 <DRV8836_SetDirection+0x208>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68d2      	ldr	r2, [r2, #12]
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
 80008a6:	e01c      	b.n	80008e2 <DRV8836_SetDirection+0x242>
 80008a8:	8a7b      	ldrh	r3, [r7, #18]
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d107      	bne.n	80008be <DRV8836_SetDirection+0x21e>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	6852      	ldr	r2, [r2, #4]
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	6393      	str	r3, [r2, #56]	; 0x38
 80008bc:	e011      	b.n	80008e2 <DRV8836_SetDirection+0x242>
 80008be:	8a7b      	ldrh	r3, [r7, #18]
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d107      	bne.n	80008d4 <DRV8836_SetDirection+0x234>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	6852      	ldr	r2, [r2, #4]
 80008cc:	6812      	ldr	r2, [r2, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008d2:	e006      	b.n	80008e2 <DRV8836_SetDirection+0x242>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	6852      	ldr	r2, [r2, #4]
 80008dc:	6812      	ldr	r2, [r2, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80008e2:	8a3b      	ldrh	r3, [r7, #16]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d107      	bne.n	80008f8 <DRV8836_SetDirection+0x258>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	68d2      	ldr	r2, [r2, #12]
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80008f6:	e01e      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80008f8:	8a3b      	ldrh	r3, [r7, #16]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d107      	bne.n	800090e <DRV8836_SetDirection+0x26e>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	6852      	ldr	r2, [r2, #4]
 8000906:	6812      	ldr	r2, [r2, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800090c:	e013      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 800090e:	8a3b      	ldrh	r3, [r7, #16]
 8000910:	2b08      	cmp	r3, #8
 8000912:	d107      	bne.n	8000924 <DRV8836_SetDirection+0x284>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	6852      	ldr	r2, [r2, #4]
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000922:	e008      	b.n	8000936 <DRV8836_SetDirection+0x296>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6852      	ldr	r2, [r2, #4]
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000932:	e000      	b.n	8000936 <DRV8836_SetDirection+0x296>

	default:
		break;
 8000934:	bf00      	nop
	}

	*TargetDirection = direction;	//save set direction
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	78ba      	ldrb	r2, [r7, #2]
 800093a:	701a      	strb	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	371c      	adds	r7, #28
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <DRV8836_SetSpeed>:

void DRV8836_SetSpeed(DRV8836_t *ic, DRV8836_Output_t output, uint16_t speed)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
 8000954:	4613      	mov	r3, r2
 8000956:	803b      	strh	r3, [r7, #0]
	if(speed > ic->drv_htim->Init.Period)
 8000958:	883a      	ldrh	r2, [r7, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d909      	bls.n	8000978 <DRV8836_SetSpeed+0x30>
	{
		//error
		ic->a_speed = speed;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	883a      	ldrh	r2, [r7, #0]
 8000968:	821a      	strh	r2, [r3, #16]
				DRV8836_SetDirection(ic, output, ic->a_direction);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7d1a      	ldrb	r2, [r3, #20]
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	4619      	mov	r1, r3
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fe94 	bl	80006a0 <DRV8836_SetDirection>
	}

	if(Output_A == output)
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10a      	bne.n	8000994 <DRV8836_SetSpeed+0x4c>
	{
		ic->a_speed = speed;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	883a      	ldrh	r2, [r7, #0]
 8000982:	821a      	strh	r2, [r3, #16]
		DRV8836_SetDirection(ic, output, ic->a_direction);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7d1a      	ldrb	r2, [r3, #20]
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	4619      	mov	r1, r3
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff fe87 	bl	80006a0 <DRV8836_SetDirection>
	else
	{

	}

}
 8000992:	e00c      	b.n	80009ae <DRV8836_SetSpeed+0x66>
	else if(Output_B == output)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d109      	bne.n	80009ae <DRV8836_SetSpeed+0x66>
		ic->b_speed = speed;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	883a      	ldrh	r2, [r7, #0]
 800099e:	825a      	strh	r2, [r3, #18]
		DRV8836_SetDirection(ic, output, ic->b_direction);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7d5a      	ldrb	r2, [r3, #21]
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	4619      	mov	r1, r3
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fe79 	bl	80006a0 <DRV8836_SetDirection>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <MX_GPIO_Init+0x154>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <MX_GPIO_Init+0x154>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <MX_GPIO_Init+0x154>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b49      	ldr	r3, [pc, #292]	; (8000b0c <MX_GPIO_Init+0x154>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a48      	ldr	r2, [pc, #288]	; (8000b0c <MX_GPIO_Init+0x154>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <MX_GPIO_Init+0x154>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0320 	and.w	r3, r3, #32
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x154>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a42      	ldr	r2, [pc, #264]	; (8000b0c <MX_GPIO_Init+0x154>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <MX_GPIO_Init+0x154>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <MX_GPIO_Init+0x154>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x154>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x154>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f246 0103 	movw	r1, #24579	; 0x6003
 8000a32:	4837      	ldr	r0, [pc, #220]	; (8000b10 <MX_GPIO_Init+0x158>)
 8000a34:	f000 ffce 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4835      	ldr	r0, [pc, #212]	; (8000b14 <MX_GPIO_Init+0x15c>)
 8000a3e:	f000 ffc9 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2110      	movs	r1, #16
 8000a46:	4834      	ldr	r0, [pc, #208]	; (8000b18 <MX_GPIO_Init+0x160>)
 8000a48:	f000 ffc4 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 8000a4c:	f246 0302 	movw	r3, #24578	; 0x6002
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	482a      	ldr	r0, [pc, #168]	; (8000b10 <MX_GPIO_Init+0x158>)
 8000a66:	f000 fe31 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_GPIO_Init+0x158>)
 8000a82:	f000 fe23 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4820      	ldr	r0, [pc, #128]	; (8000b1c <MX_GPIO_Init+0x164>)
 8000a9c:	f000 fe16 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_GPIO_Init+0x168>)
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_GPIO_Init+0x164>)
 8000ab6:	f000 fe09 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8000aba:	2304      	movs	r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <MX_GPIO_Init+0x15c>)
 8000ad2:	f000 fdfb 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <MX_GPIO_Init+0x160>)
 8000aee:	f000 fded 	bl	80016cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2028      	movs	r0, #40	; 0x28
 8000af8:	f000 fdb1 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000afc:	2028      	movs	r0, #40	; 0x28
 8000afe:	f000 fdca 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40011000 	.word	0x40011000
 8000b14:	40011400 	.word	0x40011400
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	10210000 	.word	0x10210000

08000b24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MX_I2C1_Init+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x58>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b62:	f000 ff67 	bl	8001a34 <HAL_I2C_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f000 f8f7 	bl	8000d5e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000028 	.word	0x20000028
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	00061a80 	.word	0x00061a80

08000b80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <HAL_I2C_MspInit+0x90>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d132      	bne.n	8000c06 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_I2C_MspInit+0x94>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <HAL_I2C_MspInit+0x94>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_I2C_MspInit+0x94>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <HAL_I2C_MspInit+0x98>)
 8000bce:	f000 fd7d 	bl	80016cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_I2C_MspInit+0x9c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	f043 0302 	orr.w	r3, r3, #2
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
 8000be8:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_I2C_MspInit+0x9c>)
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_I2C_MspInit+0x94>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_I2C_MspInit+0x94>)
 8000bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_I2C_MspInit+0x94>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40005400 	.word	0x40005400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40010000 	.word	0x40010000

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 fbe1 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f83b 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f7ff fec3 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c32:	f7ff ff77 	bl	8000b24 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000c36:	f000 f8a3 	bl	8000d80 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000c3a:	f000 f99b 	bl	8000f74 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c3e:	f000 f9f1 	bl	8001024 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c42:	f000 fa85 	bl	8001150 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000c46:	230c      	movs	r3, #12
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2304      	movs	r3, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	490f      	ldr	r1, [pc, #60]	; (8000c90 <main+0x70>)
 8000c54:	480f      	ldr	r0, [pc, #60]	; (8000c94 <main+0x74>)
 8000c56:	f7ff fc65 	bl	8000524 <DRV8836_Init>
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <main+0x78>)
 8000c62:	f000 feb7 	bl	80019d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	480a      	ldr	r0, [pc, #40]	; (8000c98 <main+0x78>)
 8000c6e:	f000 feb1 	bl	80019d4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // Radio_Process(&Parser_Klebot);
	  DRV8836_SetDirection(&MotorDriver, Output_B, Dir);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <main+0x7c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <main+0x74>)
 8000c7c:	f7ff fd10 	bl	80006a0 <DRV8836_SetDirection>
	  DRV8836_SetSpeed(&MotorDriver, Output_B, Spd);
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <main+0x80>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	2101      	movs	r1, #1
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <main+0x74>)
 8000c8a:	f7ff fe5d 	bl	8000948 <DRV8836_SetSpeed>
	  DRV8836_SetDirection(&MotorDriver, Output_B, Dir);
 8000c8e:	e7f0      	b.n	8000c72 <main+0x52>
 8000c90:	2000013c 	.word	0x2000013c
 8000c94:	2000007c 	.word	0x2000007c
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	20000094 	.word	0x20000094
 8000ca0:	20000096 	.word	0x20000096

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	; 0x50
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	2238      	movs	r2, #56	; 0x38
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 fc4a 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ce6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 ffe1 	bl	8001cbc <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000d00:	f000 f82d 	bl	8000d5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fae2 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d2a:	f000 f818 	bl	8000d5e <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000d2e:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <SystemClock_Config+0x98>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	3750      	adds	r7, #80	; 0x50
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	42420070 	.word	0x42420070

08000d40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d50:	d101      	bne.n	8000d56 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8000d52:	f000 f809 	bl	8000d68 <nRF24_IRQ_Handler>
	}
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d62:	b672      	cpsid	i
}
 8000d64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <Error_Handler+0x8>

08000d68 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <nRF24_IRQ_Handler+0x14>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000098 	.word	0x20000098

08000d80 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000d86:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <MX_SPI3_Init+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000d8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000dcc:	220a      	movs	r2, #10
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_SPI3_Init+0x64>)
 8000dd2:	f001 fca5 	bl	8002720 <HAL_SPI_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000ddc:	f7ff ffbf 	bl	8000d5e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000009c 	.word	0x2000009c
 8000de8:	40003c00 	.word	0x40003c00

08000dec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <HAL_SPI_MspInit+0xa8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d13f      	bne.n	8000e8c <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_SPI_MspInit+0xac>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <HAL_SPI_MspInit+0xac>)
 8000e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e16:	61d3      	str	r3, [r2, #28]
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_SPI_MspInit+0xac>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_SPI_MspInit+0xac>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <HAL_SPI_MspInit+0xac>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_SPI_MspInit+0xac>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 8000e3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4812      	ldr	r0, [pc, #72]	; (8000e9c <HAL_SPI_MspInit+0xb0>)
 8000e52:	f000 fc3b 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 8000e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <HAL_SPI_MspInit+0xb0>)
 8000e6c:	f000 fc2e 	bl	80016cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_SPI_MspInit+0xb4>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
 8000e86:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_SPI_MspInit+0xb4>)
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40003c00 	.word	0x40003c00
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_MspInit+0x5c>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_MspInit+0x5c>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_MspInit+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_MspInit+0x5c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_MspInit+0x60>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_MspInit+0x60>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4e:	f000 fa93 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8000f5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f5e:	f000 fd51 	bl	8001a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2224      	movs	r2, #36	; 0x24
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fae2 	bl	800354c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_TIM1_Init+0xa8>)
 8000f92:	4a23      	ldr	r2, [pc, #140]	; (8001020 <MX_TIM1_Init+0xac>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <MX_TIM1_Init+0xa8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_TIM1_Init+0xa8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <MX_TIM1_Init+0xa8>)
 8000fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_TIM1_Init+0xa8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_TIM1_Init+0xa8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_TIM1_Init+0xa8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_TIM1_Init+0xa8>)
 8000fe8:	f001 fd70 	bl	8002acc <HAL_TIM_Encoder_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000ff2:	f7ff feb4 	bl	8000d5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <MX_TIM1_Init+0xa8>)
 8001004:	f002 fa3c 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800100e:	f7ff fea6 	bl	8000d5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	; 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000f4 	.word	0x200000f4
 8001020:	40012c00 	.word	0x40012c00

08001024 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	; 0x38
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <MX_TIM3_Init+0x124>)
 8001056:	4a3d      	ldr	r2, [pc, #244]	; (800114c <MX_TIM3_Init+0x128>)
 8001058:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <MX_TIM3_Init+0x124>)
 800105c:	2201      	movs	r2, #1
 800105e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b39      	ldr	r3, [pc, #228]	; (8001148 <MX_TIM3_Init+0x124>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <MX_TIM3_Init+0x124>)
 8001068:	22ff      	movs	r2, #255	; 0xff
 800106a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <MX_TIM3_Init+0x124>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <MX_TIM3_Init+0x124>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001078:	4833      	ldr	r0, [pc, #204]	; (8001148 <MX_TIM3_Init+0x124>)
 800107a:	f001 fbd5 	bl	8002828 <HAL_TIM_Base_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001084:	f7ff fe6b 	bl	8000d5e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800108e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001092:	4619      	mov	r1, r3
 8001094:	482c      	ldr	r0, [pc, #176]	; (8001148 <MX_TIM3_Init+0x124>)
 8001096:	f001 fe7d 	bl	8002d94 <HAL_TIM_ConfigClockSource>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010a0:	f7ff fe5d 	bl	8000d5e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010a4:	4828      	ldr	r0, [pc, #160]	; (8001148 <MX_TIM3_Init+0x124>)
 80010a6:	f001 fc0e 	bl	80028c6 <HAL_TIM_PWM_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80010b0:	f7ff fe55 	bl	8000d5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4619      	mov	r1, r3
 80010c2:	4821      	ldr	r0, [pc, #132]	; (8001148 <MX_TIM3_Init+0x124>)
 80010c4:	f002 f9dc 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80010ce:	f7ff fe46 	bl	8000d5e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d2:	2360      	movs	r3, #96	; 0x60
 80010d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010de:	2304      	movs	r3, #4
 80010e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <MX_TIM3_Init+0x124>)
 80010ea:	f001 fd91 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80010f4:	f7ff fe33 	bl	8000d5e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4812      	ldr	r0, [pc, #72]	; (8001148 <MX_TIM3_Init+0x124>)
 8001100:	f001 fd86 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800110a:	f7ff fe28 	bl	8000d5e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2208      	movs	r2, #8
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_TIM3_Init+0x124>)
 8001116:	f001 fd7b 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001120:	f7ff fe1d 	bl	8000d5e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	220c      	movs	r2, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_TIM3_Init+0x124>)
 800112c:	f001 fd70 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001136:	f7ff fe12 	bl	8000d5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_TIM3_Init+0x124>)
 800113c:	f000 f8e8 	bl	8001310 <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3738      	adds	r7, #56	; 0x38
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000013c 	.word	0x2000013c
 800114c:	40000400 	.word	0x40000400

08001150 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2224      	movs	r2, #36	; 0x24
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f002 f9f4 	bl	800354c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_TIM4_Init+0xa0>)
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <MX_TIM4_Init+0xa4>)
 8001170:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_TIM4_Init+0xa0>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_TIM4_Init+0xa0>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_TIM4_Init+0xa0>)
 8001180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001184:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_TIM4_Init+0xa0>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_TIM4_Init+0xa0>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001192:	2301      	movs	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800119a:	2301      	movs	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011aa:	2301      	movs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM4_Init+0xa0>)
 80011be:	f001 fc85 	bl	8002acc <HAL_TIM_Encoder_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80011c8:	f7ff fdc9 	bl	8000d5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_TIM4_Init+0xa0>)
 80011da:	f002 f951 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011e4:	f7ff fdbb 	bl	8000d5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3730      	adds	r7, #48	; 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000184 	.word	0x20000184
 80011f4:	40000800 	.word	0x40000800

080011f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d125      	bne.n	8001264 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800121e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8001248:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4619      	mov	r1, r3
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <HAL_TIM_Encoder_MspInit+0xd0>)
 800125e:	f000 fa35 	bl	80016cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001262:	e028      	b.n	80012b6 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <HAL_TIM_Encoder_MspInit+0xd4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d123      	bne.n	80012b6 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6193      	str	r3, [r2, #24]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 800129e:	23c0      	movs	r3, #192	; 0xc0
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 0318 	add.w	r3, r7, #24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <HAL_TIM_Encoder_MspInit+0xd8>)
 80012b2:	f000 fa0b 	bl	80016cc <HAL_GPIO_Init>
}
 80012b6:	bf00      	nop
 80012b8:	3728      	adds	r7, #40	; 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012c00 	.word	0x40012c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40000800 	.word	0x40000800
 80012d0:	40010c00 	.word	0x40010c00

080012d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_TIM_Base_MspInit+0x34>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10b      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_TIM_Base_MspInit+0x38>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_TIM_Base_MspInit+0x38>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_TIM_Base_MspInit+0x38>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40000400 	.word	0x40000400
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a19      	ldr	r2, [pc, #100]	; (8001390 <HAL_TIM_MspPostInit+0x80>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d12a      	bne.n	8001386 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_TIM_MspPostInit+0x84>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_TIM_MspPostInit+0x84>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_TIM_MspPostInit+0x84>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 8001348:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800134c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	480e      	ldr	r0, [pc, #56]	; (8001398 <HAL_TIM_MspPostInit+0x88>)
 800135e:	f000 f9b5 	bl	80016cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_TIM_MspPostInit+0x8c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_TIM_MspPostInit+0x8c>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40000400 	.word	0x40000400
 8001394:	40021000 	.word	0x40021000
 8001398:	40011000 	.word	0x40011000
 800139c:	40010000 	.word	0x40010000

080013a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a0:	f7ff fde1 	bl	8000f66 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013a6:	490c      	ldr	r1, [pc, #48]	; (80013d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a8:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013bc:	4c09      	ldr	r4, [pc, #36]	; (80013e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80013ca:	f002 f8c7 	bl	800355c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ce:	f7ff fc27 	bl	8000c20 <main>
  bx lr
 80013d2:	4770      	bx	lr
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013dc:	08003604 	.word	0x08003604
  ldr r2, =_sbss
 80013e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013e4:	200001d0 	.word	0x200001d0

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x28>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f923 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f000 f808 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fd4c 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f93b 	bl	80016b2 <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 f903 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_IncTick+0x1c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_IncTick+0x20>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_IncTick+0x20>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000008 	.word	0x20000008
 8001498:	200001cc 	.word	0x200001cc

0800149c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <HAL_GetTick+0x10>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	200001cc 	.word	0x200001cc

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4906      	ldr	r1, [pc, #24]	; (8001548 <__NVIC_EnableIRQ+0x34>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff90 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff2d 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff42 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff90 	bl	80015a0 <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5f 	bl	800154c <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff35 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b08b      	sub	sp, #44	; 0x2c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e169      	b.n	80019b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e0:	2201      	movs	r2, #1
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8158 	bne.w	80019ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a9a      	ldr	r2, [pc, #616]	; (800196c <HAL_GPIO_Init+0x2a0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d05e      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001708:	4a98      	ldr	r2, [pc, #608]	; (800196c <HAL_GPIO_Init+0x2a0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d875      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800170e:	4a98      	ldr	r2, [pc, #608]	; (8001970 <HAL_GPIO_Init+0x2a4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d058      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001714:	4a96      	ldr	r2, [pc, #600]	; (8001970 <HAL_GPIO_Init+0x2a4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d86f      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800171a:	4a96      	ldr	r2, [pc, #600]	; (8001974 <HAL_GPIO_Init+0x2a8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d052      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001720:	4a94      	ldr	r2, [pc, #592]	; (8001974 <HAL_GPIO_Init+0x2a8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d869      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001726:	4a94      	ldr	r2, [pc, #592]	; (8001978 <HAL_GPIO_Init+0x2ac>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04c      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 800172c:	4a92      	ldr	r2, [pc, #584]	; (8001978 <HAL_GPIO_Init+0x2ac>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d863      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001732:	4a92      	ldr	r2, [pc, #584]	; (800197c <HAL_GPIO_Init+0x2b0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d046      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001738:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_GPIO_Init+0x2b0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d85d      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800173e:	2b12      	cmp	r3, #18
 8001740:	d82a      	bhi.n	8001798 <HAL_GPIO_Init+0xcc>
 8001742:	2b12      	cmp	r3, #18
 8001744:	d859      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <HAL_GPIO_Init+0x80>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	080017c7 	.word	0x080017c7
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017b3 	.word	0x080017b3
 8001758:	080017f5 	.word	0x080017f5
 800175c:	080017fb 	.word	0x080017fb
 8001760:	080017fb 	.word	0x080017fb
 8001764:	080017fb 	.word	0x080017fb
 8001768:	080017fb 	.word	0x080017fb
 800176c:	080017fb 	.word	0x080017fb
 8001770:	080017fb 	.word	0x080017fb
 8001774:	080017fb 	.word	0x080017fb
 8001778:	080017fb 	.word	0x080017fb
 800177c:	080017fb 	.word	0x080017fb
 8001780:	080017fb 	.word	0x080017fb
 8001784:	080017fb 	.word	0x080017fb
 8001788:	080017fb 	.word	0x080017fb
 800178c:	080017fb 	.word	0x080017fb
 8001790:	080017a9 	.word	0x080017a9
 8001794:	080017bd 	.word	0x080017bd
 8001798:	4a79      	ldr	r2, [pc, #484]	; (8001980 <HAL_GPIO_Init+0x2b4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800179e:	e02c      	b.n	80017fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e029      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	3304      	adds	r3, #4
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e024      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	3308      	adds	r3, #8
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e01f      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	330c      	adds	r3, #12
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e01a      	b.n	80017fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ce:	2304      	movs	r3, #4
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e013      	b.n	80017fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	611a      	str	r2, [r3, #16]
          break;
 80017e6:	e009      	b.n	80017fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2308      	movs	r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	615a      	str	r2, [r3, #20]
          break;
 80017f2:	e003      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
          break;
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x130>
          break;
 80017fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d801      	bhi.n	8001806 <HAL_GPIO_Init+0x13a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	e001      	b.n	800180a <HAL_GPIO_Init+0x13e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3304      	adds	r3, #4
 800180a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d802      	bhi.n	8001818 <HAL_GPIO_Init+0x14c>
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x152>
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	3b08      	subs	r3, #8
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	210f      	movs	r1, #15
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	401a      	ands	r2, r3
 8001830:	6a39      	ldr	r1, [r7, #32]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80b1 	beq.w	80019ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001864:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_GPIO_Init+0x2bc>)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a40      	ldr	r2, [pc, #256]	; (800198c <HAL_GPIO_Init+0x2c0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1ec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3f      	ldr	r2, [pc, #252]	; (8001990 <HAL_GPIO_Init+0x2c4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1e8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <HAL_GPIO_Init+0x2c8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1e4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <HAL_GPIO_Init+0x2cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1e0>
 80018a8:	2303      	movs	r3, #3
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018ac:	2304      	movs	r3, #4
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b8:	2300      	movs	r3, #0
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ca:	492f      	ldr	r1, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x2bc>)
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	492c      	ldr	r1, [pc, #176]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4928      	ldr	r1, [pc, #160]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	4922      	ldr	r1, [pc, #136]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	491e      	ldr	r1, [pc, #120]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001924:	4013      	ands	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4918      	ldr	r1, [pc, #96]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4914      	ldr	r1, [pc, #80]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800194c:	4013      	ands	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d021      	beq.n	80019a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e021      	b.n	80019ae <HAL_GPIO_Init+0x2e2>
 800196a:	bf00      	nop
 800196c:	10320000 	.word	0x10320000
 8001970:	10310000 	.word	0x10310000
 8001974:	10220000 	.word	0x10220000
 8001978:	10210000 	.word	0x10210000
 800197c:	10120000 	.word	0x10120000
 8001980:	10110000 	.word	0x10110000
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	40010800 	.word	0x40010800
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40011000 	.word	0x40011000
 8001998:	40011400 	.word	0x40011400
 800199c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4909      	ldr	r1, [pc, #36]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	3301      	adds	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f47f ae8e 	bne.w	80016e0 <HAL_GPIO_Init+0x14>
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	372c      	adds	r7, #44	; 0x2c
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f0:	e003      	b.n	80019fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f98c 	bl	8000d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e12b      	b.n	8001c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff f890 	bl	8000b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a98:	f000 fe10 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a81      	ldr	r2, [pc, #516]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d807      	bhi.n	8001ab8 <HAL_I2C_Init+0x84>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4a80      	ldr	r2, [pc, #512]	; (8001cac <HAL_I2C_Init+0x278>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	bf94      	ite	ls
 8001ab0:	2301      	movls	r3, #1
 8001ab2:	2300      	movhi	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	e006      	b.n	8001ac6 <HAL_I2C_Init+0x92>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a7d      	ldr	r2, [pc, #500]	; (8001cb0 <HAL_I2C_Init+0x27c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	bf94      	ite	ls
 8001ac0:	2301      	movls	r3, #1
 8001ac2:	2300      	movhi	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0e7      	b.n	8001c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4a78      	ldr	r2, [pc, #480]	; (8001cb4 <HAL_I2C_Init+0x280>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a6a      	ldr	r2, [pc, #424]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d802      	bhi.n	8001b08 <HAL_I2C_Init+0xd4>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3301      	adds	r3, #1
 8001b06:	e009      	b.n	8001b1c <HAL_I2C_Init+0xe8>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_I2C_Init+0x284>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	495c      	ldr	r1, [pc, #368]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001b38:	428b      	cmp	r3, r1
 8001b3a:	d819      	bhi.n	8001b70 <HAL_I2C_Init+0x13c>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e59      	subs	r1, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b50:	400b      	ands	r3, r1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <HAL_I2C_Init+0x138>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1e59      	subs	r1, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6a:	e051      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e04f      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d111      	bne.n	8001b9c <HAL_I2C_Init+0x168>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1e58      	subs	r0, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	440b      	add	r3, r1
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e012      	b.n	8001bc2 <HAL_I2C_Init+0x18e>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Init+0x196>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e022      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_I2C_Init+0x1bc>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1e58      	subs	r0, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6859      	ldr	r1, [r3, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	440b      	add	r3, r1
 8001be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bee:	e00f      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	0099      	lsls	r1, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	6809      	ldr	r1, [r1, #0]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6911      	ldr	r1, [r2, #16]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68d2      	ldr	r2, [r2, #12]
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	000186a0 	.word	0x000186a0
 8001cac:	001e847f 	.word	0x001e847f
 8001cb0:	003d08ff 	.word	0x003d08ff
 8001cb4:	431bde83 	.word	0x431bde83
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e304      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8087 	beq.w	8001dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d00c      	beq.n	8001d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce8:	4b8f      	ldr	r3, [pc, #572]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d112      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5e>
 8001cf4:	4b8c      	ldr	r3, [pc, #560]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d00:	d10b      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d02:	4b89      	ldr	r3, [pc, #548]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d06c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x12c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d168      	bne.n	8001de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e2de      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x76>
 8001d24:	4b80      	ldr	r3, [pc, #512]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a7f      	ldr	r2, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e02e      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x98>
 8001d3a:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7a      	ldr	r2, [pc, #488]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b78      	ldr	r3, [pc, #480]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a77      	ldr	r2, [pc, #476]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e01d      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0xbc>
 8001d5e:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a71      	ldr	r2, [pc, #452]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xd4>
 8001d78:	4b6b      	ldr	r3, [pc, #428]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6a      	ldr	r2, [pc, #424]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a67      	ldr	r2, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fb80 	bl	800149c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff fb7c 	bl	800149c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e292      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0xe4>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fb6c 	bl	800149c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fb68 	bl	800149c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e27e      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x10c>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d063      	beq.n	8001ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df6:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e02:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d11c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x18c>
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d116      	bne.n	8001e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x176>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e252      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4939      	ldr	r1, [pc, #228]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	e03a      	b.n	8001ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff fb21 	bl	800149c <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fb1d 	bl	800149c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e233      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4927      	ldr	r1, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_RCC_OscConfig+0x270>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fb00 	bl	800149c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fafc 	bl	800149c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e212      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03a      	beq.n	8001f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d019      	beq.n	8001f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fae0 	bl	800149c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fadc 	bl	800149c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1f2      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f000 fbf0 	bl	80026e4 <RCC_Delay>
 8001f04:	e01c      	b.n	8001f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_OscConfig+0x274>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fac6 	bl	800149c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f12:	e00f      	b.n	8001f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff fac2 	bl	800149c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d908      	bls.n	8001f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1d8      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	42420000 	.word	0x42420000
 8001f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	4b9b      	ldr	r3, [pc, #620]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e9      	bne.n	8001f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a6 	beq.w	800209a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a90      	ldr	r2, [pc, #576]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b8e      	ldr	r3, [pc, #568]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x4ec>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d118      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x4ec>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a87      	ldr	r2, [pc, #540]	; (80021a8 <HAL_RCC_OscConfig+0x4ec>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f92:	f7ff fa83 	bl	800149c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9a:	f7ff fa7f 	bl	800149c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	; 0x64
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e195      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	4b7e      	ldr	r3, [pc, #504]	; (80021a8 <HAL_RCC_OscConfig+0x4ec>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x312>
 8001fc0:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a77      	ldr	r2, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x334>
 8001fd6:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a6f      	ldr	r2, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	e01c      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_OscConfig+0x356>
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0x36e>
 8002012:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a63      	ldr	r2, [pc, #396]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a60      	ldr	r2, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d015      	beq.n	800205e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff fa33 	bl	800149c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff fa2f 	bl	800149c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e143      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ee      	beq.n	800203a <HAL_RCC_OscConfig+0x37e>
 800205c:	e014      	b.n	8002088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff fa1d 	bl	800149c <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff fa19 	bl	800149c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e12d      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ee      	bne.n	8002066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a44      	ldr	r2, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 808c 	beq.w	80021bc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80020a4:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d10e      	bne.n	80020d0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d108      	bne.n	80020d0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e103      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d14e      	bne.n	8002176 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d009      	beq.n	80020f8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0ef      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RCC_OscConfig+0x4f0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff f9cd 	bl	800149c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002106:	f7ff f9c9 	bl	800149c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e0df      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	491c      	ldr	r1, [pc, #112]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002132:	4313      	orrs	r3, r2
 8002134:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4918      	ldr	r1, [pc, #96]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002144:	4313      	orrs	r3, r2
 8002146:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_RCC_OscConfig+0x4f0>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff f9a5 	bl	800149c <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002156:	f7ff f9a1 	bl	800149c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0b7      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x49a>
 8002174:	e022      	b.n	80021bc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x4e8>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_OscConfig+0x4f0>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff f988 	bl	800149c <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800218e:	e00f      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002190:	f7ff f984 	bl	800149c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d908      	bls.n	80021b0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e09a      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80021b0:	4b4b      	ldr	r3, [pc, #300]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e9      	bne.n	8002190 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 8088 	beq.w	80022d6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c6:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d068      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d14d      	bne.n	8002276 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <HAL_RCC_OscConfig+0x628>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff f95c 	bl	800149c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f958 	bl	800149c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e06e      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220e:	d10f      	bne.n	8002230 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4931      	ldr	r1, [pc, #196]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 800221a:	4313      	orrs	r3, r2
 800221c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f023 020f 	bic.w	r2, r3, #15
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	492d      	ldr	r1, [pc, #180]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 800222c:	4313      	orrs	r3, r2
 800222e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	430b      	orrs	r3, r1
 8002242:	4927      	ldr	r1, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_RCC_OscConfig+0x628>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff f925 	bl	800149c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7ff f921 	bl	800149c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e037      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x59a>
 8002274:	e02f      	b.n	80022d6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x628>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f90e 	bl	800149c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff f90a 	bl	800149c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e020      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x5c8>
 80022a2:	e018      	b.n	80022d6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e013      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_OscConfig+0x624>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	42420060 	.word	0x42420060

080022e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0d0      	b.n	800249e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d910      	bls.n	800232c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 0207 	bic.w	r2, r3, #7
 8002312:	4965      	ldr	r1, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800234e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002366:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d040      	beq.n	8002408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d115      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e073      	b.n	800249e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06b      	b.n	800249e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4936      	ldr	r1, [pc, #216]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7ff f860 	bl	800149c <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7ff f85c 	bl	800149c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e053      	b.n	800249e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d210      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4922      	ldr	r1, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002476:	f000 f821 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe ffbe 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40022000 	.word	0x40022000
 80024ac:	40021000 	.word	0x40021000
 80024b0:	080035bc 	.word	0x080035bc
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c0:	b092      	sub	sp, #72	; 0x48
 80024c2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c8:	2300      	movs	r3, #0
 80024ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80024cc:	2300      	movs	r3, #0
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
 80024d0:	2300      	movs	r3, #0
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024e0:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d002      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d003      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x40>
 80024f4:	e0c3      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f6:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80024f8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80024fa:	e0c3      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024fe:	0c9b      	lsrs	r3, r3, #18
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	4b64      	ldr	r3, [pc, #400]	; (8002698 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800250a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80ac 	beq.w	800266e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002516:	4b5e      	ldr	r3, [pc, #376]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	f003 020f 	and.w	r2, r3, #15
 800251e:	4b5f      	ldr	r3, [pc, #380]	; (800269c <HAL_RCC_GetSysClockFreq+0x1e0>)
 8002520:	5c9b      	ldrb	r3, [r3, r2]
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002524:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 808c 	beq.w	800264a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	3301      	adds	r3, #1
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3302      	adds	r3, #2
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	2200      	movs	r2, #0
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	627a      	str	r2, [r7, #36]	; 0x24
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	2200      	movs	r2, #0
 800255a:	4618      	mov	r0, r3
 800255c:	4611      	mov	r1, r2
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	fb00 f203 	mul.w	r2, r0, r3
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	fb03 f301 	mul.w	r3, r3, r1
 800256a:	4413      	add	r3, r2
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	fba2 4500 	umull	r4, r5, r2, r0
 8002572:	442b      	add	r3, r5
 8002574:	461d      	mov	r5, r3
 8002576:	4622      	mov	r2, r4
 8002578:	462b      	mov	r3, r5
 800257a:	f04f 0000 	mov.w	r0, #0
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	0159      	lsls	r1, r3, #5
 8002584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002588:	0150      	lsls	r0, r2, #5
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	ebb2 0a04 	subs.w	sl, r2, r4
 8002592:	eb63 0b05 	sbc.w	fp, r3, r5
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025aa:	ebb2 080a 	subs.w	r8, r2, sl
 80025ae:	eb63 090b 	sbc.w	r9, r3, fp
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c6:	4690      	mov	r8, r2
 80025c8:	4699      	mov	r9, r3
 80025ca:	eb18 0304 	adds.w	r3, r8, r4
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	eb49 0305 	adc.w	r3, r9, r5
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e2:	4629      	mov	r1, r5
 80025e4:	028b      	lsls	r3, r1, #10
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	4604      	mov	r4, r0
 80025ec:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80025f0:	4601      	mov	r1, r0
 80025f2:	028a      	lsls	r2, r1, #10
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	2200      	movs	r2, #0
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	617a      	str	r2, [r7, #20]
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	2200      	movs	r2, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	60fa      	str	r2, [r7, #12]
 8002608:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800260c:	4622      	mov	r2, r4
 800260e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002612:	4645      	mov	r5, r8
 8002614:	fb05 f202 	mul.w	r2, r5, r2
 8002618:	46cc      	mov	ip, r9
 800261a:	4625      	mov	r5, r4
 800261c:	461c      	mov	r4, r3
 800261e:	4623      	mov	r3, r4
 8002620:	fb03 f30c 	mul.w	r3, r3, ip
 8002624:	4413      	add	r3, r2
 8002626:	4622      	mov	r2, r4
 8002628:	4644      	mov	r4, r8
 800262a:	fba2 2404 	umull	r2, r4, r2, r4
 800262e:	61fc      	str	r4, [r7, #28]
 8002630:	61ba      	str	r2, [r7, #24]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263c:	f7fd fdf2 	bl	8000224 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	647b      	str	r3, [r7, #68]	; 0x44
 8002648:	e007      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800265c:	7b5b      	ldrb	r3, [r3, #13]
 800265e:	461a      	mov	r2, r3
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	4293      	cmp	r3, r2
 8002664:	d108      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8002666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
 800266c:	e004      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002670:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8002678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800267c:	e002      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8002680:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002682:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002686:	4618      	mov	r0, r3
 8002688:	3748      	adds	r7, #72	; 0x48
 800268a:	46bd      	mov	sp, r7
 800268c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	00f42400 	.word	0x00f42400
 8002698:	080035d4 	.word	0x080035d4
 800269c:	080035e4 	.word	0x080035e4
 80026a0:	003d0900 	.word	0x003d0900
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026c0:	f7ff fff2 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4903      	ldr	r1, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	080035cc 	.word	0x080035cc

080026e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCC_Delay+0x34>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <RCC_Delay+0x38>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002700:	bf00      	nop
  }
  while (Delay --);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <RCC_Delay+0x1c>
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000000 	.word	0x20000000
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e076      	b.n	8002820 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002742:	d009      	beq.n	8002758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
 800274a:	e005      	b.n	8002758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fb3a 	bl	8000dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	ea42 0103 	orr.w	r1, r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	0c1a      	lsrs	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f002 0204 	and.w	r2, r2, #4
 80027fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e041      	b.n	80028be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fd40 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 fb5c 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e041      	b.n	800295c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f839 	bl	8002964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f000 fb0d 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
	...

08002978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_TIM_PWM_Start+0x24>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e022      	b.n	80029e2 <HAL_TIM_PWM_Start+0x6a>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d109      	bne.n	80029b6 <HAL_TIM_PWM_Start+0x3e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e015      	b.n	80029e2 <HAL_TIM_PWM_Start+0x6a>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start+0x58>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e008      	b.n	80029e2 <HAL_TIM_PWM_Start+0x6a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e063      	b.n	8002ab2 <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PWM_Start+0x82>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f8:	e013      	b.n	8002a22 <HAL_TIM_PWM_Start+0xaa>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d104      	bne.n	8002a0a <HAL_TIM_PWM_Start+0x92>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a08:	e00b      	b.n	8002a22 <HAL_TIM_PWM_Start+0xaa>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d104      	bne.n	8002a1a <HAL_TIM_PWM_Start+0xa2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a18:	e003      	b.n	8002a22 <HAL_TIM_PWM_Start+0xaa>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2201      	movs	r2, #1
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fd04 	bl	8003438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a21      	ldr	r2, [pc, #132]	; (8002abc <HAL_TIM_PWM_Start+0x144>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d107      	bne.n	8002a4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_TIM_PWM_Start+0x144>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x104>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d00e      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x104>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_TIM_PWM_Start+0x148>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x104>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <HAL_TIM_PWM_Start+0x14c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x104>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_TIM_PWM_Start+0x150>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d111      	bne.n	8002aa0 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d010      	beq.n	8002ab0 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9e:	e007      	b.n	8002ab0 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40000c00 	.word	0x40000c00

08002acc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e093      	b.n	8002c08 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7fe fb7f 	bl	80011f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b10:	f023 0307 	bic.w	r3, r3, #7
 8002b14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f000 f9ff 	bl	8002f24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b6c:	f023 030c 	bic.w	r3, r3, #12
 8002b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	011a      	lsls	r2, r3, #4
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	031b      	lsls	r3, r3, #12
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002baa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0ae      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	f200 809f 	bhi.w	8002d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002d7d 	.word	0x08002d7d
 8002c4c:	08002d7d 	.word	0x08002d7d
 8002c50:	08002d7d 	.word	0x08002d7d
 8002c54:	08002cb9 	.word	0x08002cb9
 8002c58:	08002d7d 	.word	0x08002d7d
 8002c5c:	08002d7d 	.word	0x08002d7d
 8002c60:	08002d7d 	.word	0x08002d7d
 8002c64:	08002cfb 	.word	0x08002cfb
 8002c68:	08002d7d 	.word	0x08002d7d
 8002c6c:	08002d7d 	.word	0x08002d7d
 8002c70:	08002d7d 	.word	0x08002d7d
 8002c74:	08002d3b 	.word	0x08002d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f9bc 	bl	8002ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0208 	orr.w	r2, r2, #8
 8002c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6999      	ldr	r1, [r3, #24]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	619a      	str	r2, [r3, #24]
      break;
 8002cb6:	e064      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fa02 	bl	80030c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6999      	ldr	r1, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	021a      	lsls	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	619a      	str	r2, [r3, #24]
      break;
 8002cf8:	e043      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fa4b 	bl	800319c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0208 	orr.w	r2, r2, #8
 8002d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0204 	bic.w	r2, r2, #4
 8002d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69d9      	ldr	r1, [r3, #28]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	61da      	str	r2, [r3, #28]
      break;
 8002d38:	e023      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fa95 	bl	8003270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69d9      	ldr	r1, [r3, #28]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	61da      	str	r2, [r3, #28]
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0b4      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x186>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de8:	d03e      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0xd4>
 8002dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dee:	f200 8087 	bhi.w	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df6:	f000 8086 	beq.w	8002f06 <HAL_TIM_ConfigClockSource+0x172>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d87f      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b70      	cmp	r3, #112	; 0x70
 8002e02:	d01a      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0xa6>
 8002e04:	2b70      	cmp	r3, #112	; 0x70
 8002e06:	d87b      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b60      	cmp	r3, #96	; 0x60
 8002e0a:	d050      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x11a>
 8002e0c:	2b60      	cmp	r3, #96	; 0x60
 8002e0e:	d877      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b50      	cmp	r3, #80	; 0x50
 8002e12:	d03c      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0xfa>
 8002e14:	2b50      	cmp	r3, #80	; 0x50
 8002e16:	d873      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d058      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x13a>
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d86f      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b30      	cmp	r3, #48	; 0x30
 8002e22:	d064      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e24:	2b30      	cmp	r3, #48	; 0x30
 8002e26:	d86b      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d060      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d867      	bhi.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05c      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d05a      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x15a>
 8002e38:	e062      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e4a:	f000 fad6 	bl	80033fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	609a      	str	r2, [r3, #8]
      break;
 8002e66:	e04f      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	f000 fabf 	bl	80033fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e8a:	609a      	str	r2, [r3, #8]
      break;
 8002e8c:	e03c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 fa36 	bl	800330c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2150      	movs	r1, #80	; 0x50
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fa8d 	bl	80033c6 <TIM_ITRx_SetConfig>
      break;
 8002eac:	e02c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 fa54 	bl	8003368 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2160      	movs	r1, #96	; 0x60
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fa7d 	bl	80033c6 <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e01c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eda:	461a      	mov	r2, r3
 8002edc:	f000 fa16 	bl	800330c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fa6d 	bl	80033c6 <TIM_ITRx_SetConfig>
      break;
 8002eec:	e00c      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f000 fa64 	bl	80033c6 <TIM_ITRx_SetConfig>
      break;
 8002efe:	e003      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e000      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a2d      	ldr	r2, [pc, #180]	; (8002fec <TIM_Base_SetConfig+0xc8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00f      	beq.n	8002f5c <TIM_Base_SetConfig+0x38>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d00b      	beq.n	8002f5c <TIM_Base_SetConfig+0x38>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	; (8002ff0 <TIM_Base_SetConfig+0xcc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <TIM_Base_SetConfig+0x38>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <TIM_Base_SetConfig+0xd0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_Base_SetConfig+0x38>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a28      	ldr	r2, [pc, #160]	; (8002ff8 <TIM_Base_SetConfig+0xd4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d108      	bne.n	8002f6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <TIM_Base_SetConfig+0xc8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <TIM_Base_SetConfig+0x72>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0x72>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <TIM_Base_SetConfig+0xcc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0x72>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <TIM_Base_SetConfig+0xd0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0x72>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <TIM_Base_SetConfig+0xd4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <TIM_Base_SetConfig+0xc8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00

08002ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f023 0201 	bic.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 0302 	bic.w	r3, r3, #2
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <TIM_OC1_SetConfig+0xc8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10c      	bne.n	8003072 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0308 	bic.w	r3, r3, #8
 800305e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <TIM_OC1_SetConfig+0xc8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d111      	bne.n	800309e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	621a      	str	r2, [r3, #32]
}
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f023 0210 	bic.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0320 	bic.w	r3, r3, #32
 8003112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <TIM_OC2_SetConfig+0xd0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d10d      	bne.n	8003144 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003142:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a14      	ldr	r2, [pc, #80]	; (8003198 <TIM_OC2_SetConfig+0xd0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d113      	bne.n	8003174 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	40012c00 	.word	0x40012c00

0800319c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <TIM_OC3_SetConfig+0xd0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10d      	bne.n	8003216 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <TIM_OC3_SetConfig+0xd0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d113      	bne.n	8003246 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800322c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40012c00 	.word	0x40012c00

08003270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	031b      	lsls	r3, r3, #12
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <TIM_OC4_SetConfig+0x98>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d109      	bne.n	80032e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	40012c00 	.word	0x40012c00

0800330c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f023 0201 	bic.w	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 030a 	bic.w	r3, r3, #10
 8003348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	621a      	str	r2, [r3, #32]
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0210 	bic.w	r2, r3, #16
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	031b      	lsls	r3, r3, #12
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f043 0307 	orr.w	r3, r3, #7
 80033e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b087      	sub	sp, #28
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003414:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	431a      	orrs	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4313      	orrs	r3, r2
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	609a      	str	r2, [r3, #8]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2201      	movs	r2, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1a      	ldr	r2, [r3, #32]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	43db      	mvns	r3, r3
 800345a:	401a      	ands	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003494:	2302      	movs	r3, #2
 8003496:	e04b      	b.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d013      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d00e      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d009      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a13      	ldr	r2, [pc, #76]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d004      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10c      	bne.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	4313      	orrs	r3, r2
 8003514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00

0800354c <memset>:
 800354c:	4603      	mov	r3, r0
 800354e:	4402      	add	r2, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <__libc_init_array>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	2600      	movs	r6, #0
 8003560:	4d0c      	ldr	r5, [pc, #48]	; (8003594 <__libc_init_array+0x38>)
 8003562:	4c0d      	ldr	r4, [pc, #52]	; (8003598 <__libc_init_array+0x3c>)
 8003564:	1b64      	subs	r4, r4, r5
 8003566:	10a4      	asrs	r4, r4, #2
 8003568:	42a6      	cmp	r6, r4
 800356a:	d109      	bne.n	8003580 <__libc_init_array+0x24>
 800356c:	f000 f81a 	bl	80035a4 <_init>
 8003570:	2600      	movs	r6, #0
 8003572:	4d0a      	ldr	r5, [pc, #40]	; (800359c <__libc_init_array+0x40>)
 8003574:	4c0a      	ldr	r4, [pc, #40]	; (80035a0 <__libc_init_array+0x44>)
 8003576:	1b64      	subs	r4, r4, r5
 8003578:	10a4      	asrs	r4, r4, #2
 800357a:	42a6      	cmp	r6, r4
 800357c:	d105      	bne.n	800358a <__libc_init_array+0x2e>
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	f855 3b04 	ldr.w	r3, [r5], #4
 8003584:	4798      	blx	r3
 8003586:	3601      	adds	r6, #1
 8003588:	e7ee      	b.n	8003568 <__libc_init_array+0xc>
 800358a:	f855 3b04 	ldr.w	r3, [r5], #4
 800358e:	4798      	blx	r3
 8003590:	3601      	adds	r6, #1
 8003592:	e7f2      	b.n	800357a <__libc_init_array+0x1e>
 8003594:	080035fc 	.word	0x080035fc
 8003598:	080035fc 	.word	0x080035fc
 800359c:	080035fc 	.word	0x080035fc
 80035a0:	08003600 	.word	0x08003600

080035a4 <_init>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	bf00      	nop
 80035a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035aa:	bc08      	pop	{r3}
 80035ac:	469e      	mov	lr, r3
 80035ae:	4770      	bx	lr

080035b0 <_fini>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	bf00      	nop
 80035b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b6:	bc08      	pop	{r3}
 80035b8:	469e      	mov	lr, r3
 80035ba:	4770      	bx	lr
