
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08008fe0  08008fe0  00018fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800939c  0800939c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a4  080093a4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080093ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001d8  08009584  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200005b0  08009584  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001488f  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032df  00000000  00000000  00034ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00037db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fce  00000000  00000000  00039208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021711  00000000  00000000  0003a1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184af  00000000  00000000  0005b8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1c0e  00000000  00000000  00073d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066a8  00000000  00000000  001359a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0013c04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08008fc4 	.word	0x08008fc4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	08008fc4 	.word	0x08008fc4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_f2iz>:
 8000ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eec:	d30f      	bcc.n	8000f0e <__aeabi_f2iz+0x2a>
 8000eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d90d      	bls.n	8000f14 <__aeabi_f2iz+0x30>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f04:	fa23 f002 	lsr.w	r0, r3, r2
 8000f08:	bf18      	it	ne
 8000f0a:	4240      	negne	r0, r0
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2iz+0x3a>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d105      	bne.n	8000f2a <__aeabi_f2iz+0x46>
 8000f1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f22:	bf08      	it	eq
 8000f24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f28:	4770      	bx	lr
 8000f2a:	f04f 0000 	mov.w	r0, #0
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_uldivmod>:
 8000f30:	b953      	cbnz	r3, 8000f48 <__aeabi_uldivmod+0x18>
 8000f32:	b94a      	cbnz	r2, 8000f48 <__aeabi_uldivmod+0x18>
 8000f34:	2900      	cmp	r1, #0
 8000f36:	bf08      	it	eq
 8000f38:	2800      	cmpeq	r0, #0
 8000f3a:	bf1c      	itt	ne
 8000f3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000f40:	f04f 30ff 	movne.w	r0, #4294967295
 8000f44:	f000 b972 	b.w	800122c <__aeabi_idiv0>
 8000f48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f50:	f000 f806 	bl	8000f60 <__udivmoddi4>
 8000f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4770      	bx	lr

08000f60 <__udivmoddi4>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	9e08      	ldr	r6, [sp, #32]
 8000f66:	460d      	mov	r5, r1
 8000f68:	4604      	mov	r4, r0
 8000f6a:	468e      	mov	lr, r1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d14c      	bne.n	800100a <__udivmoddi4+0xaa>
 8000f70:	428a      	cmp	r2, r1
 8000f72:	4694      	mov	ip, r2
 8000f74:	d967      	bls.n	8001046 <__udivmoddi4+0xe6>
 8000f76:	fab2 f382 	clz	r3, r2
 8000f7a:	b153      	cbz	r3, 8000f92 <__udivmoddi4+0x32>
 8000f7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f80:	f1c3 0220 	rsb	r2, r3, #32
 8000f84:	fa01 fe03 	lsl.w	lr, r1, r3
 8000f88:	fa20 f202 	lsr.w	r2, r0, r2
 8000f8c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000f90:	409c      	lsls	r4, r3
 8000f92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f96:	fbbe f1f7 	udiv	r1, lr, r7
 8000f9a:	fa1f f58c 	uxth.w	r5, ip
 8000f9e:	fb07 ee11 	mls	lr, r7, r1, lr
 8000fa2:	fb01 f005 	mul.w	r0, r1, r5
 8000fa6:	0c22      	lsrs	r2, r4, #16
 8000fa8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000fac:	4290      	cmp	r0, r2
 8000fae:	d90a      	bls.n	8000fc6 <__udivmoddi4+0x66>
 8000fb0:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000fb8:	f080 8119 	bcs.w	80011ee <__udivmoddi4+0x28e>
 8000fbc:	4290      	cmp	r0, r2
 8000fbe:	f240 8116 	bls.w	80011ee <__udivmoddi4+0x28e>
 8000fc2:	3902      	subs	r1, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fcc:	fb07 2210 	mls	r2, r7, r0, r2
 8000fd0:	fb00 f505 	mul.w	r5, r0, r5
 8000fd4:	b2a4      	uxth	r4, r4
 8000fd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fda:	42a5      	cmp	r5, r4
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x94>
 8000fde:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fe6:	f080 8104 	bcs.w	80011f2 <__udivmoddi4+0x292>
 8000fea:	42a5      	cmp	r5, r4
 8000fec:	f240 8101 	bls.w	80011f2 <__udivmoddi4+0x292>
 8000ff0:	4464      	add	r4, ip
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	1b64      	subs	r4, r4, r5
 8000ffc:	b11e      	cbz	r6, 8001006 <__udivmoddi4+0xa6>
 8000ffe:	40dc      	lsrs	r4, r3
 8001000:	2300      	movs	r3, #0
 8001002:	e9c6 4300 	strd	r4, r3, [r6]
 8001006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100a:	428b      	cmp	r3, r1
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0xc0>
 800100e:	2e00      	cmp	r6, #0
 8001010:	f000 80ea 	beq.w	80011e8 <__udivmoddi4+0x288>
 8001014:	2100      	movs	r1, #0
 8001016:	e9c6 0500 	strd	r0, r5, [r6]
 800101a:	4608      	mov	r0, r1
 800101c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001020:	fab3 f183 	clz	r1, r3
 8001024:	2900      	cmp	r1, #0
 8001026:	d148      	bne.n	80010ba <__udivmoddi4+0x15a>
 8001028:	42ab      	cmp	r3, r5
 800102a:	d302      	bcc.n	8001032 <__udivmoddi4+0xd2>
 800102c:	4282      	cmp	r2, r0
 800102e:	f200 80f8 	bhi.w	8001222 <__udivmoddi4+0x2c2>
 8001032:	1a84      	subs	r4, r0, r2
 8001034:	eb65 0203 	sbc.w	r2, r5, r3
 8001038:	2001      	movs	r0, #1
 800103a:	4696      	mov	lr, r2
 800103c:	2e00      	cmp	r6, #0
 800103e:	d0e2      	beq.n	8001006 <__udivmoddi4+0xa6>
 8001040:	e9c6 4e00 	strd	r4, lr, [r6]
 8001044:	e7df      	b.n	8001006 <__udivmoddi4+0xa6>
 8001046:	b902      	cbnz	r2, 800104a <__udivmoddi4+0xea>
 8001048:	deff      	udf	#255	; 0xff
 800104a:	fab2 f382 	clz	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	f040 808e 	bne.w	8001170 <__udivmoddi4+0x210>
 8001054:	1a88      	subs	r0, r1, r2
 8001056:	2101      	movs	r1, #1
 8001058:	0c17      	lsrs	r7, r2, #16
 800105a:	fa1f fe82 	uxth.w	lr, r2
 800105e:	fbb0 f5f7 	udiv	r5, r0, r7
 8001062:	fb07 0015 	mls	r0, r7, r5, r0
 8001066:	0c22      	lsrs	r2, r4, #16
 8001068:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800106c:	fb0e f005 	mul.w	r0, lr, r5
 8001070:	4290      	cmp	r0, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x126>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d202      	bcs.n	8001084 <__udivmoddi4+0x124>
 800107e:	4290      	cmp	r0, r2
 8001080:	f200 80cc 	bhi.w	800121c <__udivmoddi4+0x2bc>
 8001084:	4645      	mov	r5, r8
 8001086:	1a12      	subs	r2, r2, r0
 8001088:	fbb2 f0f7 	udiv	r0, r2, r7
 800108c:	fb07 2210 	mls	r2, r7, r0, r2
 8001090:	fb0e fe00 	mul.w	lr, lr, r0
 8001094:	b2a4      	uxth	r4, r4
 8001096:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800109a:	45a6      	cmp	lr, r4
 800109c:	d908      	bls.n	80010b0 <__udivmoddi4+0x150>
 800109e:	eb1c 0404 	adds.w	r4, ip, r4
 80010a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80010a6:	d202      	bcs.n	80010ae <__udivmoddi4+0x14e>
 80010a8:	45a6      	cmp	lr, r4
 80010aa:	f200 80b4 	bhi.w	8001216 <__udivmoddi4+0x2b6>
 80010ae:	4610      	mov	r0, r2
 80010b0:	eba4 040e 	sub.w	r4, r4, lr
 80010b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80010b8:	e7a0      	b.n	8000ffc <__udivmoddi4+0x9c>
 80010ba:	f1c1 0720 	rsb	r7, r1, #32
 80010be:	408b      	lsls	r3, r1
 80010c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80010c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80010c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80010cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010d0:	fbba f8f9 	udiv	r8, sl, r9
 80010d4:	408d      	lsls	r5, r1
 80010d6:	fa20 f307 	lsr.w	r3, r0, r7
 80010da:	fb09 aa18 	mls	sl, r9, r8, sl
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	432b      	orrs	r3, r5
 80010e4:	fa00 f501 	lsl.w	r5, r0, r1
 80010e8:	fb08 f00e 	mul.w	r0, r8, lr
 80010ec:	0c1c      	lsrs	r4, r3, #16
 80010ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010f2:	42a0      	cmp	r0, r4
 80010f4:	fa02 f201 	lsl.w	r2, r2, r1
 80010f8:	d90b      	bls.n	8001112 <__udivmoddi4+0x1b2>
 80010fa:	eb1c 0404 	adds.w	r4, ip, r4
 80010fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8001102:	f080 8086 	bcs.w	8001212 <__udivmoddi4+0x2b2>
 8001106:	42a0      	cmp	r0, r4
 8001108:	f240 8083 	bls.w	8001212 <__udivmoddi4+0x2b2>
 800110c:	f1a8 0802 	sub.w	r8, r8, #2
 8001110:	4464      	add	r4, ip
 8001112:	1a24      	subs	r4, r4, r0
 8001114:	b298      	uxth	r0, r3
 8001116:	fbb4 f3f9 	udiv	r3, r4, r9
 800111a:	fb09 4413 	mls	r4, r9, r3, r4
 800111e:	fb03 fe0e 	mul.w	lr, r3, lr
 8001122:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001126:	45a6      	cmp	lr, r4
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x1dc>
 800112a:	eb1c 0404 	adds.w	r4, ip, r4
 800112e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001132:	d26a      	bcs.n	800120a <__udivmoddi4+0x2aa>
 8001134:	45a6      	cmp	lr, r4
 8001136:	d968      	bls.n	800120a <__udivmoddi4+0x2aa>
 8001138:	3b02      	subs	r3, #2
 800113a:	4464      	add	r4, ip
 800113c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001140:	fba0 9302 	umull	r9, r3, r0, r2
 8001144:	eba4 040e 	sub.w	r4, r4, lr
 8001148:	429c      	cmp	r4, r3
 800114a:	46c8      	mov	r8, r9
 800114c:	469e      	mov	lr, r3
 800114e:	d354      	bcc.n	80011fa <__udivmoddi4+0x29a>
 8001150:	d051      	beq.n	80011f6 <__udivmoddi4+0x296>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d067      	beq.n	8001226 <__udivmoddi4+0x2c6>
 8001156:	ebb5 0308 	subs.w	r3, r5, r8
 800115a:	eb64 040e 	sbc.w	r4, r4, lr
 800115e:	40cb      	lsrs	r3, r1
 8001160:	fa04 f707 	lsl.w	r7, r4, r7
 8001164:	431f      	orrs	r7, r3
 8001166:	40cc      	lsrs	r4, r1
 8001168:	e9c6 7400 	strd	r7, r4, [r6]
 800116c:	2100      	movs	r1, #0
 800116e:	e74a      	b.n	8001006 <__udivmoddi4+0xa6>
 8001170:	fa02 fc03 	lsl.w	ip, r2, r3
 8001174:	f1c3 0020 	rsb	r0, r3, #32
 8001178:	40c1      	lsrs	r1, r0
 800117a:	409d      	lsls	r5, r3
 800117c:	fa24 f000 	lsr.w	r0, r4, r0
 8001180:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001184:	4328      	orrs	r0, r5
 8001186:	fbb1 f5f7 	udiv	r5, r1, r7
 800118a:	fb07 1115 	mls	r1, r7, r5, r1
 800118e:	fa1f fe8c 	uxth.w	lr, ip
 8001192:	0c02      	lsrs	r2, r0, #16
 8001194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001198:	fb05 f10e 	mul.w	r1, r5, lr
 800119c:	4291      	cmp	r1, r2
 800119e:	fa04 f403 	lsl.w	r4, r4, r3
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0x256>
 80011a4:	eb1c 0202 	adds.w	r2, ip, r2
 80011a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80011ac:	d22f      	bcs.n	800120e <__udivmoddi4+0x2ae>
 80011ae:	4291      	cmp	r1, r2
 80011b0:	d92d      	bls.n	800120e <__udivmoddi4+0x2ae>
 80011b2:	3d02      	subs	r5, #2
 80011b4:	4462      	add	r2, ip
 80011b6:	1a52      	subs	r2, r2, r1
 80011b8:	fbb2 f1f7 	udiv	r1, r2, r7
 80011bc:	fb07 2211 	mls	r2, r7, r1, r2
 80011c0:	b280      	uxth	r0, r0
 80011c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80011c6:	fb01 f20e 	mul.w	r2, r1, lr
 80011ca:	4282      	cmp	r2, r0
 80011cc:	d908      	bls.n	80011e0 <__udivmoddi4+0x280>
 80011ce:	eb1c 0000 	adds.w	r0, ip, r0
 80011d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80011d6:	d216      	bcs.n	8001206 <__udivmoddi4+0x2a6>
 80011d8:	4282      	cmp	r2, r0
 80011da:	d914      	bls.n	8001206 <__udivmoddi4+0x2a6>
 80011dc:	3902      	subs	r1, #2
 80011de:	4460      	add	r0, ip
 80011e0:	1a80      	subs	r0, r0, r2
 80011e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80011e6:	e73a      	b.n	800105e <__udivmoddi4+0xfe>
 80011e8:	4631      	mov	r1, r6
 80011ea:	4630      	mov	r0, r6
 80011ec:	e70b      	b.n	8001006 <__udivmoddi4+0xa6>
 80011ee:	4671      	mov	r1, lr
 80011f0:	e6e9      	b.n	8000fc6 <__udivmoddi4+0x66>
 80011f2:	4610      	mov	r0, r2
 80011f4:	e6fe      	b.n	8000ff4 <__udivmoddi4+0x94>
 80011f6:	454d      	cmp	r5, r9
 80011f8:	d2ab      	bcs.n	8001152 <__udivmoddi4+0x1f2>
 80011fa:	ebb9 0802 	subs.w	r8, r9, r2
 80011fe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001202:	3801      	subs	r0, #1
 8001204:	e7a5      	b.n	8001152 <__udivmoddi4+0x1f2>
 8001206:	4641      	mov	r1, r8
 8001208:	e7ea      	b.n	80011e0 <__udivmoddi4+0x280>
 800120a:	4603      	mov	r3, r0
 800120c:	e796      	b.n	800113c <__udivmoddi4+0x1dc>
 800120e:	4645      	mov	r5, r8
 8001210:	e7d1      	b.n	80011b6 <__udivmoddi4+0x256>
 8001212:	46d0      	mov	r8, sl
 8001214:	e77d      	b.n	8001112 <__udivmoddi4+0x1b2>
 8001216:	4464      	add	r4, ip
 8001218:	3802      	subs	r0, #2
 800121a:	e749      	b.n	80010b0 <__udivmoddi4+0x150>
 800121c:	3d02      	subs	r5, #2
 800121e:	4462      	add	r2, ip
 8001220:	e731      	b.n	8001086 <__udivmoddi4+0x126>
 8001222:	4608      	mov	r0, r1
 8001224:	e70a      	b.n	800103c <__udivmoddi4+0xdc>
 8001226:	4631      	mov	r1, r6
 8001228:	e6ed      	b.n	8001006 <__udivmoddi4+0xa6>
 800122a:	bf00      	nop

0800122c <__aeabi_idiv0>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <MotorEnc_Init>:
int32_t FilterSum;
uint16_t OldestMember;


void MotorEnc_Init(MotorEncoder_t *encoder, TIM_HandleTypeDef *htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	encoder->htimEnc = htim;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001240:	213c      	movs	r1, #60	; 0x3c
 8001242:	6838      	ldr	r0, [r7, #0]
 8001244:	f004 f816 	bl	8005274 <HAL_TIM_Encoder_Start>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <MotorEnc_Uptade>:

void MotorEnc_Uptade(MotorEncoder_t *encoder)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	uint32_t NewCounter = encoder->htimEnc->Instance->CNT;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	60fb      	str	r3, [r7, #12]
	int16_t TempPosition = encoder->Position;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	899b      	ldrh	r3, [r3, #12]
 8001266:	817b      	strh	r3, [r7, #10]

	if(NewCounter == encoder->LastCounter)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	429a      	cmp	r2, r3
 8001270:	d103      	bne.n	800127a <MotorEnc_Uptade+0x2a>
	{
		encoder->Velocity = 0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	809a      	strh	r2, [r3, #4]
 8001278:	e052      	b.n	8001320 <MotorEnc_Uptade+0xd0>
	}
	else if(NewCounter > encoder->LastCounter)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d924      	bls.n	80012ce <MotorEnc_Uptade+0x7e>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))	//overflow happened
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b10      	cmp	r3, #16
 8001292:	d111      	bne.n	80012b8 <MotorEnc_Uptade+0x68>
		{
			encoder->Velocity = - ( encoder->LastCounter + (encoder->htimEnc->Instance->ARR - NewCounter) );
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	809a      	strh	r2, [r3, #4]
 80012b6:	e033      	b.n	8001320 <MotorEnc_Uptade+0xd0>
		}
		else
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	809a      	strh	r2, [r3, #4]
 80012cc:	e028      	b.n	8001320 <MotorEnc_Uptade+0xd0>
		}
	}
	else if(NewCounter < encoder->LastCounter)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d223      	bcs.n	8001320 <MotorEnc_Uptade+0xd0>
	{
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htimEnc))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d10a      	bne.n	80012fe <MotorEnc_Uptade+0xae>
		{
			encoder->Velocity = NewCounter - encoder->LastCounter;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	809a      	strh	r2, [r3, #4]
 80012fc:	e010      	b.n	8001320 <MotorEnc_Uptade+0xd0>
		}
		else																//overflow happened
		{
			encoder->Velocity = NewCounter + (encoder->htimEnc->Instance->ARR + encoder->LastCounter);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21a      	sxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	809a      	strh	r2, [r3, #4]
		}
	}


	TempPosition = encoder->Position + encoder->Velocity;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001326:	b29a      	uxth	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	817b      	strh	r3, [r7, #10]

	if(encoder->Velocity != 0)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d024      	beq.n	800138a <MotorEnc_Uptade+0x13a>
	{
		if(TempPosition >= 0)
 8001340:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db16      	blt.n	8001376 <MotorEnc_Uptade+0x126>
		{
			encoder->Position = (encoder->Position + encoder->Velocity) % PULSES_PER_ROTATION;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001356:	4413      	add	r3, r2
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <MotorEnc_Uptade+0x170>)
 800135a:	fb82 1203 	smull	r1, r2, r2, r3
 800135e:	1251      	asrs	r1, r2, #9
 8001360:	17da      	asrs	r2, r3, #31
 8001362:	1a8a      	subs	r2, r1, r2
 8001364:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8001368:	fb01 f202 	mul.w	r2, r1, r2
 800136c:	1a9a      	subs	r2, r3, r2
 800136e:	b212      	sxth	r2, r2
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	819a      	strh	r2, [r3, #12]
 8001374:	e009      	b.n	800138a <MotorEnc_Uptade+0x13a>
		}
		else
		{
			encoder->Position = PULSES_PER_ROTATION + encoder->Velocity;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800137c:	b29b      	uxth	r3, r3
 800137e:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8001382:	b29b      	uxth	r3, r3
 8001384:	b21a      	sxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	819a      	strh	r2, [r3, #12]
		}
	}

	encoder->RPM = (encoder->Velocity * (1000 / ENCODER_SAMPLING_TIME_MS) * 60 ) / PULSES_PER_ROTATION; //define constants
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001390:	461a      	mov	r2, r3
 8001392:	f241 7370 	movw	r3, #6000	; 0x1770
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <MotorEnc_Uptade+0x170>)
 800139c:	fb82 1203 	smull	r1, r2, r2, r3
 80013a0:	1252      	asrs	r2, r2, #9
 80013a2:	17db      	asrs	r3, r3, #31
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fd48 	bl	8000e3c <__aeabi_i2f>
 80013ac:	4602      	mov	r2, r0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	615a      	str	r2, [r3, #20]
	encoder->LastCounter = NewCounter;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	611a      	str	r2, [r3, #16]
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	5d9f7391 	.word	0x5d9f7391

080013c4 <MotorEnc_FilterVelocity>:

void MotorEnc_FilterVelocity(MotorEncoder_t *encoder)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]


	//static float VelocityIIR;


	float alpha = 0.1;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MotorEnc_FilterVelocity+0x5c>)
 80013ce:	60fb      	str	r3, [r7, #12]
	encoder->VelocityFiltered = alpha * (float) encoder->Velocity + (1.0f - alpha) * encoder->VelocityFiltered;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fd30 	bl	8000e3c <__aeabi_i2f>
 80013dc:	4603      	mov	r3, r0
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe ff29 	bl	8000238 <__aeabi_fmul>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461c      	mov	r4, r3
 80013ea:	68f9      	ldr	r1, [r7, #12]
 80013ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80013f0:	f7ff fc6e 	bl	8000cd0 <__aeabi_fsub>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4610      	mov	r0, r2
 8001400:	f7fe ff1a 	bl	8000238 <__aeabi_fmul>
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff fc63 	bl	8000cd4 <__addsf3>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	609a      	str	r2, [r3, #8]
//	VelocityFilterBuffer[OldestMember] = VelocityIIR;
//	OldestMember = (OldestMember + 1) % 100;



}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	3dcccccd 	.word	0x3dcccccd

08001424 <DRV8836_Init>:
 *      Author: Michal Klebokowski
 */
#include "drv8836.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	460b      	mov	r3, r1
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	88fa      	ldrh	r2, [r7, #6]
 8001444:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	88ba      	ldrh	r2, [r7, #4]
 800144a:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8b3a      	ldrh	r2, [r7, #24]
 8001450:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8bba      	ldrh	r2, [r7, #28]
 8001456:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	891b      	ldrh	r3, [r3, #8]
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f003 fdba 	bl	8004fdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	895b      	ldrh	r3, [r3, #10]
 8001470:	4619      	mov	r1, r3
 8001472:	4610      	mov	r0, r2
 8001474:	f003 fdb2 	bl	8004fdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	899b      	ldrh	r3, [r3, #12]
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f003 fdaa 	bl	8004fdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	89db      	ldrh	r3, [r3, #14]
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f003 fda2 	bl	8004fdc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <DRV8836_Init+0x86>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
 80014a8:	e016      	b.n	80014d8 <DRV8836_Init+0xb4>
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d105      	bne.n	80014bc <DRV8836_Init+0x98>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	6393      	str	r3, [r2, #56]	; 0x38
 80014ba:	e00d      	b.n	80014d8 <DRV8836_Init+0xb4>
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d105      	bne.n	80014ce <DRV8836_Init+0xaa>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014cc:	e004      	b.n	80014d8 <DRV8836_Init+0xb4>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2300      	movs	r3, #0
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <DRV8836_Init+0xc6>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
 80014e8:	e016      	b.n	8001518 <DRV8836_Init+0xf4>
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d105      	bne.n	80014fc <DRV8836_Init+0xd8>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	6393      	str	r3, [r2, #56]	; 0x38
 80014fa:	e00d      	b.n	8001518 <DRV8836_Init+0xf4>
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d105      	bne.n	800150e <DRV8836_Init+0xea>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800150c:	e004      	b.n	8001518 <DRV8836_Init+0xf4>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2300      	movs	r3, #0
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 8001518:	8b3b      	ldrh	r3, [r7, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d105      	bne.n	800152a <DRV8836_Init+0x106>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
 8001528:	e016      	b.n	8001558 <DRV8836_Init+0x134>
 800152a:	8b3b      	ldrh	r3, [r7, #24]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d105      	bne.n	800153c <DRV8836_Init+0x118>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	6393      	str	r3, [r2, #56]	; 0x38
 800153a:	e00d      	b.n	8001558 <DRV8836_Init+0x134>
 800153c:	8b3b      	ldrh	r3, [r7, #24]
 800153e:	2b08      	cmp	r3, #8
 8001540:	d105      	bne.n	800154e <DRV8836_Init+0x12a>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800154c:	e004      	b.n	8001558 <DRV8836_Init+0x134>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2300      	movs	r3, #0
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8001558:	8bbb      	ldrh	r3, [r7, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <DRV8836_Init+0x146>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001568:	e016      	b.n	8001598 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800156a:	8bbb      	ldrh	r3, [r7, #28]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d105      	bne.n	800157c <DRV8836_Init+0x158>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	6393      	str	r3, [r2, #56]	; 0x38
}
 800157a:	e00d      	b.n	8001598 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800157c:	8bbb      	ldrh	r3, [r7, #28]
 800157e:	2b08      	cmp	r3, #8
 8001580:	d105      	bne.n	800158e <DRV8836_Init+0x16a>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800158c:	e004      	b.n	8001598 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <DRV8836_SetMotor>:

void DRV8836_SetMotor(DRV8836_t *ic, DRV8836_Output_t output, DRV8836_Direction_t direction, uint16_t speed)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	70fb      	strb	r3, [r7, #3]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70bb      	strb	r3, [r7, #2]
 80015b6:	4613      	mov	r3, r2
 80015b8:	803b      	strh	r3, [r7, #0]
	uint16_t *TargetSpeed;
	uint16_t TargetForwardChannel;
	uint16_t TargetReverseChannel;


	if(Output_A == output)
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10c      	bne.n	80015da <DRV8836_SetMotor+0x3a>
	{
		TargetForwardChannel = ic->a_forward_channel;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	891b      	ldrh	r3, [r3, #8]
 80015c4:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->a_reverse_channel;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	895b      	ldrh	r3, [r3, #10]
 80015ca:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->a_speed);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3310      	adds	r3, #16
 80015d0:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->a_direction);			//TODO: test here
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3314      	adds	r3, #20
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e00e      	b.n	80015f8 <DRV8836_SetMotor+0x58>
	}
	else if(Output_B == output)
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10b      	bne.n	80015f8 <DRV8836_SetMotor+0x58>
	{
		TargetForwardChannel = ic->b_forward_channel;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	899b      	ldrh	r3, [r3, #12]
 80015e4:	81fb      	strh	r3, [r7, #14]
		TargetReverseChannel = ic->b_reverse_channel;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	89db      	ldrh	r3, [r3, #14]
 80015ea:	81bb      	strh	r3, [r7, #12]
		TargetSpeed = &(ic->b_speed);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3312      	adds	r3, #18
 80015f0:	613b      	str	r3, [r7, #16]
		TargetDirection = &(ic->b_direction);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3315      	adds	r3, #21
 80015f6:	617b      	str	r3, [r7, #20]
	else
	{
		//error
	}

	switch(direction)
 80015f8:	78bb      	ldrb	r3, [r7, #2]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	f200 8120 	bhi.w	8001840 <DRV8836_SetMotor+0x2a0>
 8001600:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <DRV8836_SetMotor+0x68>)
 8001602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001606:	bf00      	nop
 8001608:	08001619 	.word	0x08001619
 800160c:	0800169b 	.word	0x0800169b
 8001610:	0800171d 	.word	0x0800171d
 8001614:	0800179f 	.word	0x0800179f
	{
	case Coast:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 8001618:	89fb      	ldrh	r3, [r7, #14]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d105      	bne.n	800162a <DRV8836_SetMotor+0x8a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
 8001628:	e016      	b.n	8001658 <DRV8836_SetMotor+0xb8>
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d105      	bne.n	800163c <DRV8836_SetMotor+0x9c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	6393      	str	r3, [r2, #56]	; 0x38
 800163a:	e00d      	b.n	8001658 <DRV8836_SetMotor+0xb8>
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	2b08      	cmp	r3, #8
 8001640:	d105      	bne.n	800164e <DRV8836_SetMotor+0xae>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800164c:	e004      	b.n	8001658 <DRV8836_SetMotor+0xb8>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001658:	89bb      	ldrh	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <DRV8836_SetMotor+0xca>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001668:	e0eb      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800166a:	89bb      	ldrh	r3, [r7, #12]
 800166c:	2b04      	cmp	r3, #4
 800166e:	d105      	bne.n	800167c <DRV8836_SetMotor+0xdc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800167a:	e0e2      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800167c:	89bb      	ldrh	r3, [r7, #12]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d105      	bne.n	800168e <DRV8836_SetMotor+0xee>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800168c:	e0d9      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001698:	e0d3      	b.n	8001842 <DRV8836_SetMotor+0x2a2>

	case Reverse:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, 0);
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <DRV8836_SetMotor+0x10c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34
 80016aa:	e016      	b.n	80016da <DRV8836_SetMotor+0x13a>
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d105      	bne.n	80016be <DRV8836_SetMotor+0x11e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	6393      	str	r3, [r2, #56]	; 0x38
 80016bc:	e00d      	b.n	80016da <DRV8836_SetMotor+0x13a>
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d105      	bne.n	80016d0 <DRV8836_SetMotor+0x130>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80016ce:	e004      	b.n	80016da <DRV8836_SetMotor+0x13a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80016da:	89bb      	ldrh	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <DRV8836_SetMotor+0x14c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	883a      	ldrh	r2, [r7, #0]
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80016ea:	e0aa      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80016ec:	89bb      	ldrh	r3, [r7, #12]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d105      	bne.n	80016fe <DRV8836_SetMotor+0x15e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	883b      	ldrh	r3, [r7, #0]
 80016fa:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80016fc:	e0a1      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 80016fe:	89bb      	ldrh	r3, [r7, #12]
 8001700:	2b08      	cmp	r3, #8
 8001702:	d105      	bne.n	8001710 <DRV8836_SetMotor+0x170>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	883b      	ldrh	r3, [r7, #0]
 800170c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800170e:	e098      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, speed);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	883b      	ldrh	r3, [r7, #0]
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800171a:	e092      	b.n	8001842 <DRV8836_SetMotor+0x2a2>

	case Forward:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, speed);
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <DRV8836_SetMotor+0x18e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	883a      	ldrh	r2, [r7, #0]
 800172a:	635a      	str	r2, [r3, #52]	; 0x34
 800172c:	e016      	b.n	800175c <DRV8836_SetMotor+0x1bc>
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d105      	bne.n	8001740 <DRV8836_SetMotor+0x1a0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	883b      	ldrh	r3, [r7, #0]
 800173c:	6393      	str	r3, [r2, #56]	; 0x38
 800173e:	e00d      	b.n	800175c <DRV8836_SetMotor+0x1bc>
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d105      	bne.n	8001752 <DRV8836_SetMotor+0x1b2>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	883b      	ldrh	r3, [r7, #0]
 800174e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001750:	e004      	b.n	800175c <DRV8836_SetMotor+0x1bc>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	883b      	ldrh	r3, [r7, #0]
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800175c:	89bb      	ldrh	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <DRV8836_SetMotor+0x1ce>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800176c:	e069      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 800176e:	89bb      	ldrh	r3, [r7, #12]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d105      	bne.n	8001780 <DRV8836_SetMotor+0x1e0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800177e:	e060      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001780:	89bb      	ldrh	r3, [r7, #12]
 8001782:	2b08      	cmp	r3, #8
 8001784:	d105      	bne.n	8001792 <DRV8836_SetMotor+0x1f2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2300      	movs	r3, #0
 800178e:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001790:	e057      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, 0);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2300      	movs	r3, #0
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800179c:	e051      	b.n	8001842 <DRV8836_SetMotor+0x2a2>

	case Brake:
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetForwardChannel, ic->drv_htim->Init.Period);	//TODO: CHECK IF IT WORKS CORRECTLY!
 800179e:	89fb      	ldrh	r3, [r7, #14]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <DRV8836_SetMotor+0x214>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68d2      	ldr	r2, [r2, #12]
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
 80017b2:	e01c      	b.n	80017ee <DRV8836_SetMotor+0x24e>
 80017b4:	89fb      	ldrh	r3, [r7, #14]
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d107      	bne.n	80017ca <DRV8836_SetMotor+0x22a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6852      	ldr	r2, [r2, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	6393      	str	r3, [r2, #56]	; 0x38
 80017c8:	e011      	b.n	80017ee <DRV8836_SetMotor+0x24e>
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d107      	bne.n	80017e0 <DRV8836_SetMotor+0x240>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6852      	ldr	r2, [r2, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80017de:	e006      	b.n	80017ee <DRV8836_SetMotor+0x24e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6852      	ldr	r2, [r2, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 80017ee:	89bb      	ldrh	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <DRV8836_SetMotor+0x264>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68d2      	ldr	r2, [r2, #12]
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001802:	e01e      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001804:	89bb      	ldrh	r3, [r7, #12]
 8001806:	2b04      	cmp	r3, #4
 8001808:	d107      	bne.n	800181a <DRV8836_SetMotor+0x27a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6852      	ldr	r2, [r2, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001818:	e013      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 800181a:	89bb      	ldrh	r3, [r7, #12]
 800181c:	2b08      	cmp	r3, #8
 800181e:	d107      	bne.n	8001830 <DRV8836_SetMotor+0x290>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6852      	ldr	r2, [r2, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800182e:	e008      	b.n	8001842 <DRV8836_SetMotor+0x2a2>
		__HAL_TIM_SET_COMPARE(ic->drv_htim, TargetReverseChannel, ic->drv_htim->Init.Period);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6852      	ldr	r2, [r2, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800183e:	e000      	b.n	8001842 <DRV8836_SetMotor+0x2a2>

	default:
		break;
 8001840:	bf00      	nop
	}

	*TargetDirection = direction;	//save set direction
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	78ba      	ldrb	r2, [r7, #2]
 8001846:	701a      	strb	r2, [r3, #0]
	*TargetSpeed = speed;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	883a      	ldrh	r2, [r7, #0]
 800184c:	801a      	strh	r2, [r3, #0]

}
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186c:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <MX_GPIO_Init+0x154>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a4e      	ldr	r2, [pc, #312]	; (80019ac <MX_GPIO_Init+0x154>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <MX_GPIO_Init+0x154>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001884:	4b49      	ldr	r3, [pc, #292]	; (80019ac <MX_GPIO_Init+0x154>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a48      	ldr	r2, [pc, #288]	; (80019ac <MX_GPIO_Init+0x154>)
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b46      	ldr	r3, [pc, #280]	; (80019ac <MX_GPIO_Init+0x154>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b43      	ldr	r3, [pc, #268]	; (80019ac <MX_GPIO_Init+0x154>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a42      	ldr	r2, [pc, #264]	; (80019ac <MX_GPIO_Init+0x154>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b40      	ldr	r3, [pc, #256]	; (80019ac <MX_GPIO_Init+0x154>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <MX_GPIO_Init+0x154>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <MX_GPIO_Init+0x154>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <MX_GPIO_Init+0x154>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f246 0103 	movw	r1, #24579	; 0x6003
 80018d2:	4837      	ldr	r0, [pc, #220]	; (80019b0 <MX_GPIO_Init+0x158>)
 80018d4:	f001 fe3e 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2104      	movs	r1, #4
 80018dc:	4835      	ldr	r0, [pc, #212]	; (80019b4 <MX_GPIO_Init+0x15c>)
 80018de:	f001 fe39 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2110      	movs	r1, #16
 80018e6:	4834      	ldr	r0, [pc, #208]	; (80019b8 <MX_GPIO_Init+0x160>)
 80018e8:	f001 fe34 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 80018ec:	f246 0302 	movw	r3, #24578	; 0x6002
 80018f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4619      	mov	r1, r3
 8001904:	482a      	ldr	r0, [pc, #168]	; (80019b0 <MX_GPIO_Init+0x158>)
 8001906:	f001 fca1 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800190a:	2301      	movs	r3, #1
 800190c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	4823      	ldr	r0, [pc, #140]	; (80019b0 <MX_GPIO_Init+0x158>)
 8001922:	f001 fc93 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	4820      	ldr	r0, [pc, #128]	; (80019bc <MX_GPIO_Init+0x164>)
 800193c:	f001 fc86 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_GPIO_Init+0x168>)
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4619      	mov	r1, r3
 8001954:	4819      	ldr	r0, [pc, #100]	; (80019bc <MX_GPIO_Init+0x164>)
 8001956:	f001 fc79 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 800195a:	2304      	movs	r3, #4
 800195c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2302      	movs	r3, #2
 8001968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	4810      	ldr	r0, [pc, #64]	; (80019b4 <MX_GPIO_Init+0x15c>)
 8001972:	f001 fc6b 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001976:	2310      	movs	r3, #16
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2302      	movs	r3, #2
 8001984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <MX_GPIO_Init+0x160>)
 800198e:	f001 fc5d 	bl	800324c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2028      	movs	r0, #40	; 0x28
 8001998:	f001 fc21 	bl	80031de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800199c:	2028      	movs	r0, #40	; 0x28
 800199e:	f001 fc3a 	bl	8003216 <HAL_NVIC_EnableIRQ>

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40011400 	.word	0x40011400
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	40010800 	.word	0x40010800
 80019c0:	10210000 	.word	0x10210000

080019c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <MX_I2C1_Init+0x54>)
 80019cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019d0:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <MX_I2C1_Init+0x58>)
 80019d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_I2C1_Init+0x50>)
 8001a02:	f001 fdd7 	bl	80035b4 <HAL_I2C_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a0c:	f000 f9d1 	bl	8001db2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200001f4 	.word	0x200001f4
 8001a18:	40005400 	.word	0x40005400
 8001a1c:	00061a80 	.word	0x00061a80

08001a20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_I2C_MspInit+0x90>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d132      	bne.n	8001aa6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_I2C_MspInit+0x94>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_I2C_MspInit+0x94>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_I2C_MspInit+0x94>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5e:	2312      	movs	r3, #18
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <HAL_I2C_MspInit+0x98>)
 8001a6e:	f001 fbed 	bl	800324c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_I2C_MspInit+0x9c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
 8001a88:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_I2C_MspInit+0x9c>)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_I2C_MspInit+0x94>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_I2C_MspInit+0x94>)
 8001a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_I2C_MspInit+0x94>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	40010000 	.word	0x40010000

08001ac0 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fcfd 	bl	80024c8 <nRF24_Init>

#ifdef ROBOT
	nRF24_SetRXAddress(0, (uint8_t*) "Bot");
 8001ace:	4906      	ldr	r1, [pc, #24]	; (8001ae8 <Radio_Init+0x28>)
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 fc04 	bl	80022de <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Con");
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <Radio_Init+0x2c>)
 8001ad8:	f000 fc3a 	bl	8002350 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8001adc:	f000 fa3e 	bl	8001f5c <nRF24_RX_Mode>
#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
	nRF24_SetTXAddress( (uint8_t*) "Bot");
	nRF24_TX_Mode();
#endif
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	08008fe0 	.word	0x08008fe0
 8001aec:	08008fe4 	.word	0x08008fe4

08001af0 <Radio_HandlerIRQ>:

//
//Klebot radio callbacks to use
//
void Radio_HandlerIRQ(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	nRF24_IRQ_Handler();
 8001af4:	f000 fcdc 	bl	80024b0 <nRF24_IRQ_Handler>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001b14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001b1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00b      	beq.n	8001b3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001b24:	e000      	b.n	8001b28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001b26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001b28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f9      	beq.n	8001b26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001b32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b4e:	f001 f9e9 	bl	8002f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b52:	f000 f887 	bl	8001c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b56:	f7ff fe7f 	bl	8001858 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b5a:	f7ff ff33 	bl	80019c4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001b5e:	f000 fd1b 	bl	8002598 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001b62:	f000 fedd 	bl	8002920 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b66:	f000 ff33 	bl	80029d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b6a:	f000 ffc7 	bl	8002afc <MX_TIM4_Init>
  MX_TIM7_Init();
 8001b6e:	f001 f819 	bl	8002ba4 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8001b72:	f001 f93d 	bl	8002df0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DRV8836_Init(&MotorDriver1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001b76:	230c      	movs	r3, #12
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2304      	movs	r3, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	492b      	ldr	r1, [pc, #172]	; (8001c30 <main+0xe8>)
 8001b84:	482b      	ldr	r0, [pc, #172]	; (8001c34 <main+0xec>)
 8001b86:	f7ff fc4d 	bl	8001424 <DRV8836_Init>
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b90:	4829      	ldr	r0, [pc, #164]	; (8001c38 <main+0xf0>)
 8001b92:	f001 fcdf 	bl	8003554 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9c:	4826      	ldr	r0, [pc, #152]	; (8001c38 <main+0xf0>)
 8001b9e:	f001 fcd9 	bl	8003554 <HAL_GPIO_WritePin>

  MotorEnc_Init(&MotorEncoderA, &htim1);
 8001ba2:	4926      	ldr	r1, [pc, #152]	; (8001c3c <main+0xf4>)
 8001ba4:	4826      	ldr	r0, [pc, #152]	; (8001c40 <main+0xf8>)
 8001ba6:	f7ff fb43 	bl	8001230 <MotorEnc_Init>

  HAL_TIM_Base_Start_IT(&htim7);
 8001baa:	4826      	ldr	r0, [pc, #152]	; (8001c44 <main+0xfc>)
 8001bac:	f003 f964 	bl	8004e78 <HAL_TIM_Base_Start_IT>


  Radio_Init(&hspi3);
 8001bb0:	4825      	ldr	r0, [pc, #148]	; (8001c48 <main+0x100>)
 8001bb2:	f7ff ff85 	bl	8001ac0 <Radio_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //KlebotScheduler();

	  DRV8836_SetMotor(&MotorDriver1, Output_A , Dir, Spd);
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <main+0x104>)
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <main+0x108>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	481c      	ldr	r0, [pc, #112]	; (8001c34 <main+0xec>)
 8001bc2:	f7ff fced 	bl	80015a0 <DRV8836_SetMotor>
	  DRV8836_SetMotor(&MotorDriver1, Output_B , Dir1, Spd1);
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <main+0x10c>)
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <main+0x110>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	2101      	movs	r1, #1
 8001bd0:	4818      	ldr	r0, [pc, #96]	; (8001c34 <main+0xec>)
 8001bd2:	f7ff fce5 	bl	80015a0 <DRV8836_SetMotor>

	  if(HAL_GetTick() - LastTick > 100)
 8001bd6:	f001 f9fd 	bl	8002fd4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <main+0x114>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d9e7      	bls.n	8001bb6 <main+0x6e>
	  {
		  if(IncOrDec == 0)
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <main+0x118>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10d      	bne.n	8001c0a <main+0xc2>
		  {
			  Spd++;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <main+0x108>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <main+0x108>)
 8001bf8:	801a      	strh	r2, [r3, #0]
			  if(Spd > 254) IncOrDec = 1;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <main+0x108>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	2bfe      	cmp	r3, #254	; 0xfe
 8001c00:	d910      	bls.n	8001c24 <main+0xdc>
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <main+0x118>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e00c      	b.n	8001c24 <main+0xdc>
		  }
		  else
		  {
			  Spd--;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <main+0x108>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <main+0x108>)
 8001c14:	801a      	strh	r2, [r3, #0]
			  if(Spd < 160) IncOrDec = 0;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <main+0x108>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	2b9f      	cmp	r3, #159	; 0x9f
 8001c1c:	d802      	bhi.n	8001c24 <main+0xdc>
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <main+0x118>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
		  }
		  LastTick = HAL_GetTick();
 8001c24:	f001 f9d6 	bl	8002fd4 <HAL_GetTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <main+0x114>)
 8001c2c:	6013      	str	r3, [r2, #0]
	  DRV8836_SetMotor(&MotorDriver1, Output_A , Dir, Spd);
 8001c2e:	e7c2      	b.n	8001bb6 <main+0x6e>
 8001c30:	20000340 	.word	0x20000340
 8001c34:	20000248 	.word	0x20000248
 8001c38:	40011000 	.word	0x40011000
 8001c3c:	200002f8 	.word	0x200002f8
 8001c40:	20000260 	.word	0x20000260
 8001c44:	200003d0 	.word	0x200003d0
 8001c48:	2000029c 	.word	0x2000029c
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000278 	.word	0x20000278
 8001c54:	2000027a 	.word	0x2000027a
 8001c58:	2000027c 	.word	0x2000027c
 8001c5c:	20000280 	.word	0x20000280
 8001c60:	20000284 	.word	0x20000284

08001c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b094      	sub	sp, #80	; 0x50
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	2238      	movs	r2, #56	; 0x38
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f005 f8bb 	bl	8006dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001c90:	2301      	movs	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ca6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 fdc1 	bl	800383c <HAL_RCC_OscConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001cc0:	f000 f877 	bl	8001db2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2102      	movs	r1, #2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 f8c2 	bl	8003e68 <HAL_RCC_ClockConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001cea:	f000 f862 	bl	8001db2 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001cee:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <SystemClock_Config+0x98>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	3750      	adds	r7, #80	; 0x50
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	42420070 	.word	0x42420070

08001d00 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fef6 	bl	8001afc <ITM_SendChar>

	return ch;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_TIM_PeriodElapsedCallback>:
		return 0;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d121      	bne.n	8001d72 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		MotorEnc_Uptade(&MotorEncoderA);
 8001d2e:	4814      	ldr	r0, [pc, #80]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d30:	f7ff fa8e 	bl	8001250 <MotorEnc_Uptade>
		MotorEnc_FilterVelocity(&MotorEncoderA);
 8001d34:	4812      	ldr	r0, [pc, #72]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d36:	f7ff fb45 	bl	80013c4 <MotorEnc_FilterVelocity>

		USB_Buffer_Length = sprintf((char*) USB_Buffer, "$%d %d;",(int16_t) MotorEncoderA.VelocityFiltered, MotorEncoderA.Velocity );
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f8d0 	bl	8000ee4 <__aeabi_f2iz>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d52:	480d      	ldr	r0, [pc, #52]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001d54:	f004 ffe8 	bl	8006d28 <siprintf>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001d5e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, USB_Buffer, USB_Buffer_Length, 500);
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d6a:	4907      	ldr	r1, [pc, #28]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001d6c:	4808      	ldr	r0, [pc, #32]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001d6e:	f004 f93b 	bl	8005fe8 <HAL_UART_Transmit>

	}
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40001400 	.word	0x40001400
 8001d80:	20000260 	.word	0x20000260
 8001d84:	08008fec 	.word	0x08008fec
 8001d88:	20000288 	.word	0x20000288
 8001d8c:	20000292 	.word	0x20000292
 8001d90:	20000418 	.word	0x20000418

08001d94 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_EXTI_Callback+0x16>
	{
		Radio_HandlerIRQ();
 8001da6:	f7ff fea3 	bl	8001af0 <Radio_HandlerIRQ>

	}
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db6:	b672      	cpsid	i
}
 8001db8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dba:	e7fe      	b.n	8001dba <Error_Handler+0x8>

08001dbc <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 f90d 	bl	8002fe8 <HAL_Delay>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <nRF24_SendSpi+0x28>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	f002 faed 	bl	80043d0 <HAL_SPI_Transmit>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000294 	.word	0x20000294

08001e04 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <nRF24_ReadSpi+0x28>)
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	f002 fc1a 	bl	8004656 <HAL_SPI_Receive>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000294 	.word	0x20000294

08001e30 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2104      	movs	r1, #4
 8001e42:	480c      	ldr	r0, [pc, #48]	; (8001e74 <nRF24_ReadRegister+0x44>)
 8001e44:	f001 fb86 	bl	8003554 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ffc3 	bl	8001dd8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001e52:	f107 030f 	add.w	r3, r7, #15
 8001e56:	2101      	movs	r1, #1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ffd3 	bl	8001e04 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2104      	movs	r1, #4
 8001e62:	4804      	ldr	r0, [pc, #16]	; (8001e74 <nRF24_ReadRegister+0x44>)
 8001e64:	f001 fb76 	bl	8003554 <HAL_GPIO_WritePin>

	return result;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40011400 	.word	0x40011400

08001e78 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2104      	movs	r1, #4
 8001e90:	480a      	ldr	r0, [pc, #40]	; (8001ebc <nRF24_ReadRegisters+0x44>)
 8001e92:	f001 fb5f 	bl	8003554 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e96:	1dfb      	adds	r3, r7, #7
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff9c 	bl	8001dd8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6838      	ldr	r0, [r7, #0]
 8001ea6:	f7ff ffad 	bl	8001e04 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2104      	movs	r1, #4
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <nRF24_ReadRegisters+0x44>)
 8001eb0:	f001 fb50 	bl	8003554 <HAL_GPIO_WritePin>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40011400 	.word	0x40011400

08001ec0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460a      	mov	r2, r1
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f043 0320 	orr.w	r3, r3, #32
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <nRF24_WriteRegister+0x48>)
 8001ee4:	f001 fb36 	bl	8003554 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2102      	movs	r1, #2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff72 	bl	8001dd8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <nRF24_WriteRegister+0x48>)
 8001efa:	f001 fb2b 	bl	8003554 <HAL_GPIO_WritePin>
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40011400 	.word	0x40011400

08001f0c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f043 0320 	orr.w	r3, r3, #32
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f26:	2200      	movs	r2, #0
 8001f28:	2104      	movs	r1, #4
 8001f2a:	480b      	ldr	r0, [pc, #44]	; (8001f58 <nRF24_WriteRegisters+0x4c>)
 8001f2c:	f001 fb12 	bl	8003554 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	2101      	movs	r1, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff4f 	bl	8001dd8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6838      	ldr	r0, [r7, #0]
 8001f40:	f7ff ff4a 	bl	8001dd8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f44:	2201      	movs	r2, #1
 8001f46:	2104      	movs	r1, #4
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <nRF24_WriteRegisters+0x4c>)
 8001f4a:	f001 fb03 	bl	8003554 <HAL_GPIO_WritePin>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40011400 	.word	0x40011400

08001f5c <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f62:	f000 f829 	bl	8001fb8 <nRF24_ReadConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f6a:	4911      	ldr	r1, [pc, #68]	; (8001fb0 <nRF24_RX_Mode+0x54>)
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f000 f9b6 	bl	80022de <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 f81f 	bl	8001fc8 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f8a:	2070      	movs	r0, #112	; 0x70
 8001f8c:	f000 f877 	bl	800207e <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f90:	f000 f884 	bl	800209c <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f94:	f000 f89c 	bl	80020d0 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <nRF24_RX_Mode+0x58>)
 8001f9e:	f001 fad9 	bl	8003554 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff ff0a 	bl	8001dbc <nRF24_Delay_ms>
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000298 	.word	0x20000298
 8001fb4:	40010c00 	.word	0x40010c00

08001fb8 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff ff37 	bl	8001e30 <nRF24_ReadRegister>
 8001fc2:	4603      	mov	r3, r0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff ff72 	bl	8001ec0 <nRF24_WriteRegister>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fee:	2006      	movs	r0, #6
 8001ff0:	f7ff ff1e 	bl	8001e30 <nRF24_ReadRegister>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	f023 0307 	bic.w	r3, r3, #7
 8001ffe:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	b25a      	sxtb	r2, r3
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4313      	orrs	r3, r2
 800200c:	b25b      	sxtb	r3, r3
 800200e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	4619      	mov	r1, r3
 8002014:	2006      	movs	r0, #6
 8002016:	f7ff ff53 	bl	8001ec0 <nRF24_WriteRegister>
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800202c:	2006      	movs	r0, #6
 800202e:	f7ff feff 	bl	8001e30 <nRF24_ReadRegister>
 8002032:	4603      	mov	r3, r0
 8002034:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800203c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d104      	bne.n	800204e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	f043 0320 	orr.w	r3, r3, #32
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e006      	b.n	800205c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d103      	bne.n	800205c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	4619      	mov	r1, r3
 8002060:	2006      	movs	r0, #6
 8002062:	f7ff ff2d 	bl	8001ec0 <nRF24_WriteRegister>
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8002072:	2007      	movs	r0, #7
 8002074:	f7ff fedc 	bl	8001e30 <nRF24_ReadRegister>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}

0800207e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	4619      	mov	r1, r3
 800208c:	2007      	movs	r0, #7
 800208e:	f7ff ff17 	bl	8001ec0 <nRF24_WriteRegister>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80020a2:	23e2      	movs	r3, #226	; 0xe2
 80020a4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020a6:	2200      	movs	r2, #0
 80020a8:	2104      	movs	r1, #4
 80020aa:	4808      	ldr	r0, [pc, #32]	; (80020cc <nRF24_FlushRX+0x30>)
 80020ac:	f001 fa52 	bl	8003554 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	2101      	movs	r1, #1
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fe8f 	bl	8001dd8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020ba:	2201      	movs	r2, #1
 80020bc:	2104      	movs	r1, #4
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <nRF24_FlushRX+0x30>)
 80020c0:	f001 fa48 	bl	8003554 <HAL_GPIO_WritePin>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40011400 	.word	0x40011400

080020d0 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020d6:	23e1      	movs	r3, #225	; 0xe1
 80020d8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020da:	2200      	movs	r2, #0
 80020dc:	2104      	movs	r1, #4
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <nRF24_FlushTX+0x30>)
 80020e0:	f001 fa38 	bl	8003554 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	2101      	movs	r1, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fe75 	bl	8001dd8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020ee:	2201      	movs	r2, #1
 80020f0:	2104      	movs	r1, #4
 80020f2:	4803      	ldr	r0, [pc, #12]	; (8002100 <nRF24_FlushTX+0x30>)
 80020f4:	f001 fa2e 	bl	8003554 <HAL_GPIO_WritePin>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40011400 	.word	0x40011400

08002104 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800210e:	f7ff ff53 	bl	8001fb8 <nRF24_ReadConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	f043 0308 	orr.w	r3, r3, #8
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e003      	b.n	800212e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	f023 0308 	bic.w	r3, r3, #8
 800212c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff49 	bl	8001fc8 <nRF24_WriteConfig>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002148:	f7ff ff36 	bl	8001fb8 <nRF24_ReadConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d104      	bne.n	8002160 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e003      	b.n	8002168 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ff2c 	bl	8001fc8 <nRF24_WriteConfig>
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	460a      	mov	r2, r1
 8002182:	71fb      	strb	r3, [r7, #7]
 8002184:	4613      	mov	r3, r2
 8002186:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	b25a      	sxtb	r2, r3
 800218e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	b25b      	sxtb	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b25b      	sxtb	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	2004      	movs	r0, #4
 80021a2:	f7ff fe8d 	bl	8001ec0 <nRF24_WriteRegister>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	4619      	mov	r1, r3
 80021c2:	2005      	movs	r0, #5
 80021c4:	f7ff fe7c 	bl	8001ec0 <nRF24_WriteRegister>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	460a      	mov	r2, r1
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	4613      	mov	r3, r2
 80021de:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d901      	bls.n	80021ea <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80021e6:	2305      	movs	r3, #5
 80021e8:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80021ea:	2002      	movs	r0, #2
 80021ec:	f7ff fe20 	bl	8001e30 <nRF24_ReadRegister>
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10a      	bne.n	8002210 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2201      	movs	r2, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	b25a      	sxtb	r2, r3
 8002204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002208:	4313      	orrs	r3, r2
 800220a:	b25b      	sxtb	r3, r3
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	e00b      	b.n	8002228 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2201      	movs	r2, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	b25b      	sxtb	r3, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	b25a      	sxtb	r2, r3
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4013      	ands	r3, r2
 8002224:	b25b      	sxtb	r3, r3
 8002226:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4619      	mov	r1, r3
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff fe47 	bl	8001ec0 <nRF24_WriteRegister>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	460a      	mov	r2, r1
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	4613      	mov	r3, r2
 8002248:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d901      	bls.n	8002254 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002250:	2305      	movs	r3, #5
 8002252:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff fdeb 	bl	8001e30 <nRF24_ReadRegister>
 800225a:	4603      	mov	r3, r0
 800225c:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800225e:	79bb      	ldrb	r3, [r7, #6]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10a      	bne.n	800227a <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2201      	movs	r2, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	b25a      	sxtb	r2, r3
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4313      	orrs	r3, r2
 8002274:	b25b      	sxtb	r3, r3
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e00b      	b.n	8002292 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2201      	movs	r2, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	b25b      	sxtb	r3, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	b25a      	sxtb	r2, r3
 8002288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228c:	4013      	ands	r3, r2
 800228e:	b25b      	sxtb	r3, r3
 8002290:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	4619      	mov	r1, r3
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff fe12 	bl	8001ec0 <nRF24_WriteRegister>
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d901      	bls.n	80022b8 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022b4:	2305      	movs	r3, #5
 80022b6:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d801      	bhi.n	80022c2 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022be:	2303      	movs	r3, #3
 80022c0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	3b02      	subs	r3, #2
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7ff fdf5 	bl	8001ec0 <nRF24_WriteRegister>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	6039      	str	r1, [r7, #0]
 80022e8:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <nRF24_SetRXAddress+0x18>
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d11d      	bne.n	8002332 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e00d      	b.n	8002318 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	441a      	add	r2, r3
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	f1c3 0302 	rsb	r3, r3, #2
 8002308:	7812      	ldrb	r2, [r2, #0]
 800230a:	3310      	adds	r3, #16
 800230c:	443b      	add	r3, r7
 800230e:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	3301      	adds	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d9ee      	bls.n	80022fc <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	330a      	adds	r3, #10
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f107 010c 	add.w	r1, r7, #12
 8002328:	2203      	movs	r2, #3
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fdee 	bl	8001f0c <nRF24_WriteRegisters>
	{
 8002330:	e00a      	b.n	8002348 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	330a      	adds	r3, #10
 8002336:	b2da      	uxtb	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	3302      	adds	r3, #2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	4610      	mov	r0, r2
 8002342:	f7ff fdbd 	bl	8001ec0 <nRF24_WriteRegister>
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2203      	movs	r2, #3
 800235e:	4619      	mov	r1, r3
 8002360:	200a      	movs	r0, #10
 8002362:	f7ff fd89 	bl	8001e78 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e00c      	b.n	8002386 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	f1c3 0302 	rsb	r3, r3, #2
 8002374:	3210      	adds	r2, #16
 8002376:	443a      	add	r2, r7
 8002378:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800237c:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <nRF24_SetTXAddress+0x88>)
 800237e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	3301      	adds	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d9ef      	bls.n	800236c <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e00d      	b.n	80023ae <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	441a      	add	r2, r3
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	f1c3 0302 	rsb	r3, r3, #2
 800239e:	7812      	ldrb	r2, [r2, #0]
 80023a0:	3310      	adds	r3, #16
 80023a2:	443b      	add	r3, r7
 80023a4:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d9ee      	bls.n	8002392 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2203      	movs	r2, #3
 80023ba:	4619      	mov	r1, r3
 80023bc:	200a      	movs	r0, #10
 80023be:	f7ff fda5 	bl	8001f0c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023c2:	f107 030c 	add.w	r3, r7, #12
 80023c6:	2203      	movs	r2, #3
 80023c8:	4619      	mov	r1, r3
 80023ca:	2010      	movs	r0, #16
 80023cc:	f7ff fd9e 	bl	8001f0c <nRF24_WriteRegisters>

}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000298 	.word	0x20000298

080023dc <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80023e2:	f7ff fe44 	bl	800206e <nRF24_ReadStatus>
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80023f0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe42 	bl	800207e <nRF24_WriteStatus>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <nRF24_EnableRXDataReadyIRQ>:
    }
    return result;
}

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800240c:	f7ff fdd4 	bl	8001fb8 <nRF24_ReadConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d104      	bne.n	8002424 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e003      	b.n	800242c <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800242a:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fdca 	bl	8001fc8 <nRF24_WriteConfig>
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002446:	f7ff fdb7 	bl	8001fb8 <nRF24_ReadConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	f043 0320 	orr.w	r3, r3, #32
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e003      	b.n	8002466 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	f023 0320 	bic.w	r3, r3, #32
 8002464:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fdad 	bl	8001fc8 <nRF24_WriteConfig>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002480:	f7ff fd9a 	bl	8001fb8 <nRF24_ReadConfig>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d104      	bne.n	8002498 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e003      	b.n	80024a0 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	f023 0310 	bic.w	r3, r3, #16
 800249e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fd90 	bl	8001fc8 <nRF24_WriteConfig>
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <nRF24_IRQ_Handler+0x14>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	2000029b 	.word	0x2000029b

080024c8 <nRF24_Init>:
		nrf24_mr_flag = 0;
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80024d0:	4a2e      	ldr	r2, [pc, #184]	; (800258c <nRF24_Init+0xc4>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80024d6:	2200      	movs	r2, #0
 80024d8:	2110      	movs	r1, #16
 80024da:	482d      	ldr	r0, [pc, #180]	; (8002590 <nRF24_Init+0xc8>)
 80024dc:	f001 f83a 	bl	8003554 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80024e0:	2201      	movs	r2, #1
 80024e2:	2104      	movs	r1, #4
 80024e4:	482b      	ldr	r0, [pc, #172]	; (8002594 <nRF24_Init+0xcc>)
 80024e6:	f001 f835 	bl	8003554 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 80024ea:	2005      	movs	r0, #5
 80024ec:	f7ff fc66 	bl	8001dbc <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80024f0:	2003      	movs	r0, #3
 80024f2:	f7ff fd77 	bl	8001fe4 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80024f6:	2002      	movs	r0, #2
 80024f8:	f7ff fd93 	bl	8002022 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff fe01 	bl	8002104 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8002502:	2000      	movs	r0, #0
 8002504:	f7ff fe1b 	bl	800213e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8002508:	2107      	movs	r1, #7
 800250a:	2004      	movs	r0, #4
 800250c:	f7ff fe34 	bl	8002178 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8002510:	201d      	movs	r0, #29
 8002512:	f7ff fc8d 	bl	8001e30 <nRF24_ReadRegister>
 8002516:	4603      	mov	r3, r0
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	201d      	movs	r0, #29
 8002522:	f7ff fccd 	bl	8001ec0 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8002526:	213f      	movs	r1, #63	; 0x3f
 8002528:	201c      	movs	r0, #28
 800252a:	f7ff fcc9 	bl	8001ec0 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 800252e:	200a      	movs	r0, #10
 8002530:	f7ff fe3d 	bl	80021ae <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002534:	2101      	movs	r1, #1
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff fe4a 	bl	80021d0 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800253c:	2101      	movs	r1, #1
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff fe7b 	bl	800223a <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002544:	2003      	movs	r0, #3
 8002546:	f7ff fead 	bl	80022a4 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 800254a:	2001      	movs	r0, #1
 800254c:	f7ff fc36 	bl	8001dbc <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8002550:	2001      	movs	r0, #1
 8002552:	f7ff ff56 	bl	8002402 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8002556:	2001      	movs	r0, #1
 8002558:	f7ff ff70 	bl	800243c <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 800255c:	2001      	movs	r0, #1
 800255e:	f7ff ff8a 	bl	8002476 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8002562:	2001      	movs	r0, #1
 8002564:	f7ff fc2a 	bl	8001dbc <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8002568:	f7ff ff38 	bl	80023dc <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 800256c:	201d      	movs	r0, #29
 800256e:	f7ff fc5f 	bl	8001e30 <nRF24_ReadRegister>
 8002572:	4603      	mov	r3, r0
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4619      	mov	r1, r3
 800257c:	201d      	movs	r0, #29
 800257e:	f7ff fc9f 	bl	8001ec0 <nRF24_WriteRegister>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000294 	.word	0x20000294
 8002590:	40010c00 	.word	0x40010c00
 8002594:	40011400 	.word	0x40011400

08002598 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <MX_SPI3_Init+0x64>)
 800259e:	4a18      	ldr	r2, [pc, #96]	; (8002600 <MX_SPI3_Init+0x68>)
 80025a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <MX_SPI3_Init+0x64>)
 80025a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <MX_SPI3_Init+0x64>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <MX_SPI3_Init+0x64>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_SPI3_Init+0x64>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <MX_SPI3_Init+0x64>)
 80025be:	2200      	movs	r2, #0
 80025c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_SPI3_Init+0x64>)
 80025c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_SPI3_Init+0x64>)
 80025cc:	2218      	movs	r2, #24
 80025ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <MX_SPI3_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_SPI3_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <MX_SPI3_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_SPI3_Init+0x64>)
 80025e4:	220a      	movs	r2, #10
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <MX_SPI3_Init+0x64>)
 80025ea:	f001 fe6d 	bl	80042c8 <HAL_SPI_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80025f4:	f7ff fbdd 	bl	8001db2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2000029c 	.word	0x2000029c
 8002600:	40003c00 	.word	0x40003c00

08002604 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_SPI_MspInit+0xa8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d13f      	bne.n	80026a4 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_SPI_MspInit+0xac>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <HAL_SPI_MspInit+0xac>)
 800262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262e:	61d3      	str	r3, [r2, #28]
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_SPI_MspInit+0xac>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800263c:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_SPI_MspInit+0xac>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_SPI_MspInit+0xac>)
 8002642:	f043 0310 	orr.w	r3, r3, #16
 8002646:	6193      	str	r3, [r2, #24]
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_SPI_MspInit+0xac>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 8002654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4812      	ldr	r0, [pc, #72]	; (80026b4 <HAL_SPI_MspInit+0xb0>)
 800266a:	f000 fdef 	bl	800324c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 800266e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4619      	mov	r1, r3
 8002682:	480c      	ldr	r0, [pc, #48]	; (80026b4 <HAL_SPI_MspInit+0xb0>)
 8002684:	f000 fde2 	bl	800324c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_SPI_MspInit+0xb4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <HAL_SPI_MspInit+0xb4>)
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80026a4:	bf00      	nop
 80026a6:	3728      	adds	r7, #40	; 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40003c00 	.word	0x40003c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40010000 	.word	0x40010000

080026bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_MspInit+0x5c>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_MspInit+0x5c>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6193      	str	r3, [r2, #24]
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_MspInit+0x5c>)
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_MspInit+0x5c>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_MspInit+0x5c>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	61d3      	str	r3, [r2, #28]
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <HAL_MspInit+0x5c>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_MspInit+0x60>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_MspInit+0x60>)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	40021000 	.word	0x40021000
 800271c:	40010000 	.word	0x40010000

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <NMI_Handler+0x4>

08002726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <HardFault_Handler+0x4>

0800272c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <MemManage_Handler+0x4>

08002732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <BusFault_Handler+0x4>

08002738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <UsageFault_Handler+0x4>

0800273e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002766:	f000 fc23 	bl	8002fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}

0800276e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002772:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002776:	f000 ff05 	bl	8003584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TIM7_IRQHandler+0x10>)
 8002786:	f002 fe03 	bl	8005390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200003d0 	.word	0x200003d0

08002794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return 1;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <_kill>:

int _kill(int pid, int sig)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027ac:	f004 fb72 	bl	8006e94 <__errno>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2216      	movs	r2, #22
 80027b4:	601a      	str	r2, [r3, #0]
  return -1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <_exit>:

void _exit (int status)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027ca:	f04f 31ff 	mov.w	r1, #4294967295
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffe7 	bl	80027a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027d4:	e7fe      	b.n	80027d4 <_exit+0x12>

080027d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e00a      	b.n	80027fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027e8:	f3af 8000 	nop.w
 80027ec:	4601      	mov	r1, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	60ba      	str	r2, [r7, #8]
 80027f4:	b2ca      	uxtb	r2, r1
 80027f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	dbf0      	blt.n	80027e8 <_read+0x12>
  }

  return len;
 8002806:	687b      	ldr	r3, [r7, #4]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e009      	b.n	8002836 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	60ba      	str	r2, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fa68 	bl	8001d00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbf1      	blt.n	8002822 <_write+0x12>
  }
  return len;
 800283e:	687b      	ldr	r3, [r7, #4]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_close>:

int _close(int file)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800286e:	605a      	str	r2, [r3, #4]
  return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <_isatty>:

int _isatty(int file)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f004 fadc 	bl	8006e94 <__errno>
 80028dc:	4603      	mov	r3, r0
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20010000 	.word	0x20010000
 8002908:	00001000 	.word	0x00001000
 800290c:	200002f4 	.word	0x200002f4
 8002910:	200005b0 	.word	0x200005b0

08002914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	2224      	movs	r2, #36	; 0x24
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f004 fa5d 	bl	8006dee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <MX_TIM1_Init+0xa8>)
 800293e:	4a23      	ldr	r2, [pc, #140]	; (80029cc <MX_TIM1_Init+0xac>)
 8002940:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_TIM1_Init+0xa8>)
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_TIM1_Init+0xa8>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <MX_TIM1_Init+0xa8>)
 8002950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <MX_TIM1_Init+0xa8>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_TIM1_Init+0xa8>)
 800295e:	2200      	movs	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <MX_TIM1_Init+0xa8>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002968:	2303      	movs	r3, #3
 800296a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800296c:	2302      	movs	r3, #2
 800296e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002970:	2301      	movs	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800297c:	2302      	movs	r3, #2
 800297e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002980:	2301      	movs	r3, #1
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	4619      	mov	r1, r3
 8002992:	480d      	ldr	r0, [pc, #52]	; (80029c8 <MX_TIM1_Init+0xa8>)
 8002994:	f002 fbcc 	bl	8005130 <HAL_TIM_Encoder_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800299e:	f7ff fa08 	bl	8001db2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4806      	ldr	r0, [pc, #24]	; (80029c8 <MX_TIM1_Init+0xa8>)
 80029b0:	f003 fa52 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80029ba:	f7ff f9fa 	bl	8001db2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	3730      	adds	r7, #48	; 0x30
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200002f8 	.word	0x200002f8
 80029cc:	40012c00 	.word	0x40012c00

080029d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08e      	sub	sp, #56	; 0x38
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e4:	f107 0320 	add.w	r3, r7, #32
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a00:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a02:	4a3d      	ldr	r2, [pc, #244]	; (8002af8 <MX_TIM3_Init+0x128>)
 8002a04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0c:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002a12:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1e:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a24:	4833      	ldr	r0, [pc, #204]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a26:	f002 f9d7 	bl	8004dd8 <HAL_TIM_Base_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002a30:	f7ff f9bf 	bl	8001db2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	482c      	ldr	r0, [pc, #176]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a42:	f002 fe6f 	bl	8005724 <HAL_TIM_ConfigClockSource>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002a4c:	f7ff f9b1 	bl	8001db2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a50:	4828      	ldr	r0, [pc, #160]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a52:	f002 fa6b 	bl	8004f2c <HAL_TIM_PWM_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002a5c:	f7ff f9a9 	bl	8001db2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a68:	f107 0320 	add.w	r3, r7, #32
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4821      	ldr	r0, [pc, #132]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a70:	f003 f9f2 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002a7a:	f7ff f99a 	bl	8001db2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a7e:	2360      	movs	r3, #96	; 0x60
 8002a80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2200      	movs	r2, #0
 8002a92:	4619      	mov	r1, r3
 8002a94:	4817      	ldr	r0, [pc, #92]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002a96:	f002 fd83 	bl	80055a0 <HAL_TIM_PWM_ConfigChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002aa0:	f7ff f987 	bl	8001db2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4812      	ldr	r0, [pc, #72]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002aac:	f002 fd78 	bl	80055a0 <HAL_TIM_PWM_ConfigChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002ab6:	f7ff f97c 	bl	8001db2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2208      	movs	r2, #8
 8002abe:	4619      	mov	r1, r3
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002ac2:	f002 fd6d 	bl	80055a0 <HAL_TIM_PWM_ConfigChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002acc:	f7ff f971 	bl	8001db2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4807      	ldr	r0, [pc, #28]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002ad8:	f002 fd62 	bl	80055a0 <HAL_TIM_PWM_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8002ae2:	f7ff f966 	bl	8001db2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ae6:	4803      	ldr	r0, [pc, #12]	; (8002af4 <MX_TIM3_Init+0x124>)
 8002ae8:	f000 f93a 	bl	8002d60 <HAL_TIM_MspPostInit>

}
 8002aec:	bf00      	nop
 8002aee:	3738      	adds	r7, #56	; 0x38
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000340 	.word	0x20000340
 8002af8:	40000400 	.word	0x40000400

08002afc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 f96f 	bl	8006dee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <MX_TIM4_Init+0xa4>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002b42:	2302      	movs	r3, #2
 8002b44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b46:	2301      	movs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002b52:	2302      	movs	r3, #2
 8002b54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b56:	2301      	movs	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	4619      	mov	r1, r3
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b6a:	f002 fae1 	bl	8005130 <HAL_TIM_Encoder_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002b74:	f7ff f91d 	bl	8001db2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b86:	f003 f967 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002b90:	f7ff f90f 	bl	8001db2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000388 	.word	0x20000388
 8002ba0:	40000800 	.word	0x40000800

08002ba4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002baa:	463b      	mov	r3, r7
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bb4:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <MX_TIM7_Init+0x68>)
 8002bb6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bba:	2247      	movs	r2, #71	; 0x47
 8002bbc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bc6:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bd4:	f002 f900 	bl	8004dd8 <HAL_TIM_Base_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002bde:	f7ff f8e8 	bl	8001db2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002bea:	463b      	mov	r3, r7
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bf0:	f003 f932 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002bfa:	f7ff f8da 	bl	8001db2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200003d0 	.word	0x200003d0
 8002c0c:	40001400 	.word	0x40001400

08002c10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0318 	add.w	r3, r7, #24
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d125      	bne.n	8002c7c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	4a29      	ldr	r2, [pc, #164]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c3a:	6193      	str	r3, [r2, #24]
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6193      	str	r3, [r2, #24]
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8002c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f107 0318 	add.w	r3, r7, #24
 8002c72:	4619      	mov	r1, r3
 8002c74:	481a      	ldr	r0, [pc, #104]	; (8002ce0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002c76:	f000 fae9 	bl	800324c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c7a:	e028      	b.n	8002cce <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d123      	bne.n	8002cce <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	61d3      	str	r3, [r2, #28]
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	6193      	str	r3, [r2, #24]
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 8002cb6:	23c0      	movs	r3, #192	; 0xc0
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc2:	f107 0318 	add.w	r3, r7, #24
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4807      	ldr	r0, [pc, #28]	; (8002ce8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002cca:	f000 fabf 	bl	800324c <HAL_GPIO_Init>
}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010800 	.word	0x40010800
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40010c00 	.word	0x40010c00

08002cec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIM_Base_MspInit+0x68>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10c      	bne.n	8002d18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_TIM_Base_MspInit+0x6c>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_TIM_Base_MspInit+0x6c>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	61d3      	str	r3, [r2, #28]
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_TIM_Base_MspInit+0x6c>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d16:	e018      	b.n	8002d4a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <HAL_TIM_Base_MspInit+0x70>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d113      	bne.n	8002d4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_TIM_Base_MspInit+0x6c>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <HAL_TIM_Base_MspInit+0x6c>)
 8002d28:	f043 0320 	orr.w	r3, r3, #32
 8002d2c:	61d3      	str	r3, [r2, #28]
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_TIM_Base_MspInit+0x6c>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2037      	movs	r0, #55	; 0x37
 8002d40:	f000 fa4d 	bl	80031de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d44:	2037      	movs	r0, #55	; 0x37
 8002d46:	f000 fa66 	bl	8003216 <HAL_NVIC_EnableIRQ>
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40001400 	.word	0x40001400

08002d60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_TIM_MspPostInit+0x80>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d12a      	bne.n	8002dd6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d80:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_TIM_MspPostInit+0x84>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_TIM_MspPostInit+0x84>)
 8002d86:	f043 0310 	orr.w	r3, r3, #16
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_TIM_MspPostInit+0x84>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 8002d98:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002d9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	4619      	mov	r1, r3
 8002dac:	480e      	ldr	r0, [pc, #56]	; (8002de8 <HAL_TIM_MspPostInit+0x88>)
 8002dae:	f000 fa4d 	bl	800324c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_TIM_MspPostInit+0x8c>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <HAL_TIM_MspPostInit+0x8c>)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dd6:	bf00      	nop
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40011000 	.word	0x40011000
 8002dec:	40010000 	.word	0x40010000

08002df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <MX_USART2_UART_Init+0x50>)
 8002df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e16:	220c      	movs	r2, #12
 8002e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e26:	4805      	ldr	r0, [pc, #20]	; (8002e3c <MX_USART2_UART_Init+0x4c>)
 8002e28:	f003 f88e 	bl	8005f48 <HAL_UART_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e32:	f7fe ffbe 	bl	8001db2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000418 	.word	0x20000418
 8002e40:	40004400 	.word	0x40004400

08002e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <HAL_UART_MspInit+0x88>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d12f      	bne.n	8002ec4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_UART_MspInit+0x8c>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <HAL_UART_MspInit+0x8c>)
 8002e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6e:	61d3      	str	r3, [r2, #28]
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_UART_MspInit+0x8c>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_UART_MspInit+0x8c>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <HAL_UART_MspInit+0x8c>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_UART_MspInit+0x8c>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e94:	2304      	movs	r3, #4
 8002e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea0:	f107 0310 	add.w	r3, r7, #16
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	480b      	ldr	r0, [pc, #44]	; (8002ed4 <HAL_UART_MspInit+0x90>)
 8002ea8:	f000 f9d0 	bl	800324c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002eac:	2308      	movs	r3, #8
 8002eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <HAL_UART_MspInit+0x90>)
 8002ec0:	f000 f9c4 	bl	800324c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40004400 	.word	0x40004400
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40010800 	.word	0x40010800

08002ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ed8:	f7ff fd1c 	bl	8002914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002edc:	480b      	ldr	r0, [pc, #44]	; (8002f0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ede:	490c      	ldr	r1, [pc, #48]	; (8002f10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee4:	e002      	b.n	8002eec <LoopCopyDataInit>

08002ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eea:	3304      	adds	r3, #4

08002eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef0:	d3f9      	bcc.n	8002ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ef4:	4c09      	ldr	r4, [pc, #36]	; (8002f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef8:	e001      	b.n	8002efe <LoopFillZerobss>

08002efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002efc:	3204      	adds	r2, #4

08002efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f00:	d3fb      	bcc.n	8002efa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002f02:	f003 ffcd 	bl	8006ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f06:	f7fe fe1f 	bl	8001b48 <main>
  bx lr
 8002f0a:	4770      	bx	lr
  ldr r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f10:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002f14:	080093ac 	.word	0x080093ac
  ldr r2, =_sbss
 8002f18:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002f1c:	200005b0 	.word	0x200005b0

08002f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <ADC1_2_IRQHandler>
	...

08002f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_Init+0x28>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <HAL_Init+0x28>)
 8002f2e:	f043 0310 	orr.w	r3, r3, #16
 8002f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f34:	2003      	movs	r0, #3
 8002f36:	f000 f947 	bl	80031c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3a:	200f      	movs	r0, #15
 8002f3c:	f000 f808 	bl	8002f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f40:	f7ff fbbc 	bl	80026bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40022000 	.word	0x40022000

08002f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_InitTick+0x54>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_InitTick+0x58>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	4619      	mov	r1, r3
 8002f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f95f 	bl	8003232 <HAL_SYSTICK_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e00e      	b.n	8002f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b0f      	cmp	r3, #15
 8002f82:	d80a      	bhi.n	8002f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f84:	2200      	movs	r2, #0
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f000 f927 	bl	80031de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f90:	4a06      	ldr	r2, [pc, #24]	; (8002fac <HAL_InitTick+0x5c>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000004 	.word	0x20000004
 8002fa8:	2000000c 	.word	0x2000000c
 8002fac:	20000008 	.word	0x20000008

08002fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_IncTick+0x1c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_IncTick+0x20>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <HAL_IncTick+0x20>)
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	2000000c 	.word	0x2000000c
 8002fd0:	20000460 	.word	0x20000460

08002fd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b02      	ldr	r3, [pc, #8]	; (8002fe4 <HAL_GetTick+0x10>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	20000460 	.word	0x20000460

08002fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d005      	beq.n	800300e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_Delay+0x44>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300e:	bf00      	nop
 8003010:	f7ff ffe0 	bl	8002fd4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d8f7      	bhi.n	8003010 <HAL_Delay+0x28>
  {
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000000c 	.word	0x2000000c

08003030 <__NVIC_SetPriorityGrouping>:
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800304c:	4013      	ands	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	60d3      	str	r3, [r2, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_GetPriorityGrouping>:
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <__NVIC_GetPriorityGrouping+0x18>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 0307 	and.w	r3, r3, #7
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_EnableIRQ>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	db0b      	blt.n	80030be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4906      	ldr	r1, [pc, #24]	; (80030c8 <__NVIC_EnableIRQ+0x34>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	2001      	movs	r0, #1
 80030b6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <SysTick_Config>:
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003194:	d301      	bcc.n	800319a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003196:	2301      	movs	r3, #1
 8003198:	e00f      	b.n	80031ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <SysTick_Config+0x40>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a2:	210f      	movs	r1, #15
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	f7ff ff90 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <SysTick_Config+0x40>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <SysTick_Config+0x40>)
 80031b4:	2207      	movs	r2, #7
 80031b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	e000e010 	.word	0xe000e010

080031c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff2d 	bl	8003030 <__NVIC_SetPriorityGrouping>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f0:	f7ff ff42 	bl	8003078 <__NVIC_GetPriorityGrouping>
 80031f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f7ff ff90 	bl	8003120 <NVIC_EncodePriority>
 8003200:	4602      	mov	r2, r0
 8003202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff5f 	bl	80030cc <__NVIC_SetPriority>
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff35 	bl	8003094 <__NVIC_EnableIRQ>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffa2 	bl	8003184 <SysTick_Config>
 8003240:	4603      	mov	r3, r0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800324c:	b480      	push	{r7}
 800324e:	b08b      	sub	sp, #44	; 0x2c
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800325a:	2300      	movs	r3, #0
 800325c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325e:	e169      	b.n	8003534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003260:	2201      	movs	r2, #1
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	429a      	cmp	r2, r3
 800327a:	f040 8158 	bne.w	800352e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a9a      	ldr	r2, [pc, #616]	; (80034ec <HAL_GPIO_Init+0x2a0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d05e      	beq.n	8003346 <HAL_GPIO_Init+0xfa>
 8003288:	4a98      	ldr	r2, [pc, #608]	; (80034ec <HAL_GPIO_Init+0x2a0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d875      	bhi.n	800337a <HAL_GPIO_Init+0x12e>
 800328e:	4a98      	ldr	r2, [pc, #608]	; (80034f0 <HAL_GPIO_Init+0x2a4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d058      	beq.n	8003346 <HAL_GPIO_Init+0xfa>
 8003294:	4a96      	ldr	r2, [pc, #600]	; (80034f0 <HAL_GPIO_Init+0x2a4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d86f      	bhi.n	800337a <HAL_GPIO_Init+0x12e>
 800329a:	4a96      	ldr	r2, [pc, #600]	; (80034f4 <HAL_GPIO_Init+0x2a8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d052      	beq.n	8003346 <HAL_GPIO_Init+0xfa>
 80032a0:	4a94      	ldr	r2, [pc, #592]	; (80034f4 <HAL_GPIO_Init+0x2a8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d869      	bhi.n	800337a <HAL_GPIO_Init+0x12e>
 80032a6:	4a94      	ldr	r2, [pc, #592]	; (80034f8 <HAL_GPIO_Init+0x2ac>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d04c      	beq.n	8003346 <HAL_GPIO_Init+0xfa>
 80032ac:	4a92      	ldr	r2, [pc, #584]	; (80034f8 <HAL_GPIO_Init+0x2ac>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d863      	bhi.n	800337a <HAL_GPIO_Init+0x12e>
 80032b2:	4a92      	ldr	r2, [pc, #584]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d046      	beq.n	8003346 <HAL_GPIO_Init+0xfa>
 80032b8:	4a90      	ldr	r2, [pc, #576]	; (80034fc <HAL_GPIO_Init+0x2b0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d85d      	bhi.n	800337a <HAL_GPIO_Init+0x12e>
 80032be:	2b12      	cmp	r3, #18
 80032c0:	d82a      	bhi.n	8003318 <HAL_GPIO_Init+0xcc>
 80032c2:	2b12      	cmp	r3, #18
 80032c4:	d859      	bhi.n	800337a <HAL_GPIO_Init+0x12e>
 80032c6:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <HAL_GPIO_Init+0x80>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	08003347 	.word	0x08003347
 80032d0:	08003321 	.word	0x08003321
 80032d4:	08003333 	.word	0x08003333
 80032d8:	08003375 	.word	0x08003375
 80032dc:	0800337b 	.word	0x0800337b
 80032e0:	0800337b 	.word	0x0800337b
 80032e4:	0800337b 	.word	0x0800337b
 80032e8:	0800337b 	.word	0x0800337b
 80032ec:	0800337b 	.word	0x0800337b
 80032f0:	0800337b 	.word	0x0800337b
 80032f4:	0800337b 	.word	0x0800337b
 80032f8:	0800337b 	.word	0x0800337b
 80032fc:	0800337b 	.word	0x0800337b
 8003300:	0800337b 	.word	0x0800337b
 8003304:	0800337b 	.word	0x0800337b
 8003308:	0800337b 	.word	0x0800337b
 800330c:	0800337b 	.word	0x0800337b
 8003310:	08003329 	.word	0x08003329
 8003314:	0800333d 	.word	0x0800333d
 8003318:	4a79      	ldr	r2, [pc, #484]	; (8003500 <HAL_GPIO_Init+0x2b4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800331e:	e02c      	b.n	800337a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	623b      	str	r3, [r7, #32]
          break;
 8003326:	e029      	b.n	800337c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	3304      	adds	r3, #4
 800332e:	623b      	str	r3, [r7, #32]
          break;
 8003330:	e024      	b.n	800337c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	3308      	adds	r3, #8
 8003338:	623b      	str	r3, [r7, #32]
          break;
 800333a:	e01f      	b.n	800337c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	330c      	adds	r3, #12
 8003342:	623b      	str	r3, [r7, #32]
          break;
 8003344:	e01a      	b.n	800337c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800334e:	2304      	movs	r3, #4
 8003350:	623b      	str	r3, [r7, #32]
          break;
 8003352:	e013      	b.n	800337c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800335c:	2308      	movs	r3, #8
 800335e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	611a      	str	r2, [r3, #16]
          break;
 8003366:	e009      	b.n	800337c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003368:	2308      	movs	r3, #8
 800336a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	615a      	str	r2, [r3, #20]
          break;
 8003372:	e003      	b.n	800337c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003374:	2300      	movs	r3, #0
 8003376:	623b      	str	r3, [r7, #32]
          break;
 8003378:	e000      	b.n	800337c <HAL_GPIO_Init+0x130>
          break;
 800337a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2bff      	cmp	r3, #255	; 0xff
 8003380:	d801      	bhi.n	8003386 <HAL_GPIO_Init+0x13a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	e001      	b.n	800338a <HAL_GPIO_Init+0x13e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2bff      	cmp	r3, #255	; 0xff
 8003390:	d802      	bhi.n	8003398 <HAL_GPIO_Init+0x14c>
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	e002      	b.n	800339e <HAL_GPIO_Init+0x152>
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	3b08      	subs	r3, #8
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	210f      	movs	r1, #15
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	401a      	ands	r2, r3
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	431a      	orrs	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80b1 	beq.w	800352e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033cc:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <HAL_GPIO_Init+0x2b8>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <HAL_GPIO_Init+0x2b8>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6193      	str	r3, [r2, #24]
 80033d8:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_GPIO_Init+0x2b8>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033e4:	4a48      	ldr	r2, [pc, #288]	; (8003508 <HAL_GPIO_Init+0x2bc>)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	3302      	adds	r3, #2
 80033ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	220f      	movs	r2, #15
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a40      	ldr	r2, [pc, #256]	; (800350c <HAL_GPIO_Init+0x2c0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_GPIO_Init+0x1ec>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a3f      	ldr	r2, [pc, #252]	; (8003510 <HAL_GPIO_Init+0x2c4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00d      	beq.n	8003434 <HAL_GPIO_Init+0x1e8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a3e      	ldr	r2, [pc, #248]	; (8003514 <HAL_GPIO_Init+0x2c8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <HAL_GPIO_Init+0x1e4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a3d      	ldr	r2, [pc, #244]	; (8003518 <HAL_GPIO_Init+0x2cc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_GPIO_Init+0x1e0>
 8003428:	2303      	movs	r3, #3
 800342a:	e006      	b.n	800343a <HAL_GPIO_Init+0x1ee>
 800342c:	2304      	movs	r3, #4
 800342e:	e004      	b.n	800343a <HAL_GPIO_Init+0x1ee>
 8003430:	2302      	movs	r3, #2
 8003432:	e002      	b.n	800343a <HAL_GPIO_Init+0x1ee>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <HAL_GPIO_Init+0x1ee>
 8003438:	2300      	movs	r3, #0
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	f002 0203 	and.w	r2, r2, #3
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	4093      	lsls	r3, r2
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800344a:	492f      	ldr	r1, [pc, #188]	; (8003508 <HAL_GPIO_Init+0x2bc>)
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	3302      	adds	r3, #2
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d006      	beq.n	8003472 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_GPIO_Init+0x2d0>)
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	492c      	ldr	r1, [pc, #176]	; (800351c <HAL_GPIO_Init+0x2d0>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	608b      	str	r3, [r1, #8]
 8003470:	e006      	b.n	8003480 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003472:	4b2a      	ldr	r3, [pc, #168]	; (800351c <HAL_GPIO_Init+0x2d0>)
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	43db      	mvns	r3, r3
 800347a:	4928      	ldr	r1, [pc, #160]	; (800351c <HAL_GPIO_Init+0x2d0>)
 800347c:	4013      	ands	r3, r2
 800347e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d006      	beq.n	800349a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800348c:	4b23      	ldr	r3, [pc, #140]	; (800351c <HAL_GPIO_Init+0x2d0>)
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	4922      	ldr	r1, [pc, #136]	; (800351c <HAL_GPIO_Init+0x2d0>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	60cb      	str	r3, [r1, #12]
 8003498:	e006      	b.n	80034a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800349a:	4b20      	ldr	r3, [pc, #128]	; (800351c <HAL_GPIO_Init+0x2d0>)
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	491e      	ldr	r1, [pc, #120]	; (800351c <HAL_GPIO_Init+0x2d0>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_GPIO_Init+0x2d0>)
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4918      	ldr	r1, [pc, #96]	; (800351c <HAL_GPIO_Init+0x2d0>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
 80034c0:	e006      	b.n	80034d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_GPIO_Init+0x2d0>)
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	4914      	ldr	r1, [pc, #80]	; (800351c <HAL_GPIO_Init+0x2d0>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d021      	beq.n	8003520 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <HAL_GPIO_Init+0x2d0>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_GPIO_Init+0x2d0>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
 80034e8:	e021      	b.n	800352e <HAL_GPIO_Init+0x2e2>
 80034ea:	bf00      	nop
 80034ec:	10320000 	.word	0x10320000
 80034f0:	10310000 	.word	0x10310000
 80034f4:	10220000 	.word	0x10220000
 80034f8:	10210000 	.word	0x10210000
 80034fc:	10120000 	.word	0x10120000
 8003500:	10110000 	.word	0x10110000
 8003504:	40021000 	.word	0x40021000
 8003508:	40010000 	.word	0x40010000
 800350c:	40010800 	.word	0x40010800
 8003510:	40010c00 	.word	0x40010c00
 8003514:	40011000 	.word	0x40011000
 8003518:	40011400 	.word	0x40011400
 800351c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_GPIO_Init+0x304>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	43db      	mvns	r3, r3
 8003528:	4909      	ldr	r1, [pc, #36]	; (8003550 <HAL_GPIO_Init+0x304>)
 800352a:	4013      	ands	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	3301      	adds	r3, #1
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	f47f ae8e 	bne.w	8003260 <HAL_GPIO_Init+0x14>
  }
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	372c      	adds	r7, #44	; 0x2c
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	40010400 	.word	0x40010400

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003570:	e003      	b.n	800357a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	611a      	str	r2, [r3, #16]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fbf6 	bl	8001d94 <HAL_GPIO_EXTI_Callback>
  }
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40010400 	.word	0x40010400

080035b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e12b      	b.n	800381e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fa20 	bl	8001a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003618:	f000 fe10 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 800361c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4a81      	ldr	r2, [pc, #516]	; (8003828 <HAL_I2C_Init+0x274>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d807      	bhi.n	8003638 <HAL_I2C_Init+0x84>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a80      	ldr	r2, [pc, #512]	; (800382c <HAL_I2C_Init+0x278>)
 800362c:	4293      	cmp	r3, r2
 800362e:	bf94      	ite	ls
 8003630:	2301      	movls	r3, #1
 8003632:	2300      	movhi	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e006      	b.n	8003646 <HAL_I2C_Init+0x92>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a7d      	ldr	r2, [pc, #500]	; (8003830 <HAL_I2C_Init+0x27c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	bf94      	ite	ls
 8003640:	2301      	movls	r3, #1
 8003642:	2300      	movhi	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0e7      	b.n	800381e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a78      	ldr	r2, [pc, #480]	; (8003834 <HAL_I2C_Init+0x280>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a6a      	ldr	r2, [pc, #424]	; (8003828 <HAL_I2C_Init+0x274>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d802      	bhi.n	8003688 <HAL_I2C_Init+0xd4>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	e009      	b.n	800369c <HAL_I2C_Init+0xe8>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	4a69      	ldr	r2, [pc, #420]	; (8003838 <HAL_I2C_Init+0x284>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	3301      	adds	r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	495c      	ldr	r1, [pc, #368]	; (8003828 <HAL_I2C_Init+0x274>)
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d819      	bhi.n	80036f0 <HAL_I2C_Init+0x13c>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1e59      	subs	r1, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036d0:	400b      	ands	r3, r1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_I2C_Init+0x138>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e59      	subs	r1, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	e051      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036ec:	2304      	movs	r3, #4
 80036ee:	e04f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d111      	bne.n	800371c <HAL_I2C_Init+0x168>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	440b      	add	r3, r1
 8003706:	fbb0 f3f3 	udiv	r3, r0, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e012      	b.n	8003742 <HAL_I2C_Init+0x18e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	0099      	lsls	r1, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Init+0x196>
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10e      	bne.n	8003770 <HAL_I2C_Init+0x1bc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e58      	subs	r0, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	440b      	add	r3, r1
 8003760:	fbb0 f3f3 	udiv	r3, r0, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	e00f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	0099      	lsls	r1, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	6809      	ldr	r1, [r1, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6911      	ldr	r1, [r2, #16]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	000186a0 	.word	0x000186a0
 800382c:	001e847f 	.word	0x001e847f
 8003830:	003d08ff 	.word	0x003d08ff
 8003834:	431bde83 	.word	0x431bde83
 8003838:	10624dd3 	.word	0x10624dd3

0800383c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e304      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8087 	beq.w	800396a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800385c:	4b92      	ldr	r3, [pc, #584]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b04      	cmp	r3, #4
 8003866:	d00c      	beq.n	8003882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003868:	4b8f      	ldr	r3, [pc, #572]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d112      	bne.n	800389a <HAL_RCC_OscConfig+0x5e>
 8003874:	4b8c      	ldr	r3, [pc, #560]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d10b      	bne.n	800389a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003882:	4b89      	ldr	r3, [pc, #548]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d06c      	beq.n	8003968 <HAL_RCC_OscConfig+0x12c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d168      	bne.n	8003968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e2de      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x76>
 80038a4:	4b80      	ldr	r3, [pc, #512]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a7f      	ldr	r2, [pc, #508]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e02e      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x98>
 80038ba:	4b7b      	ldr	r3, [pc, #492]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7a      	ldr	r2, [pc, #488]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a77      	ldr	r2, [pc, #476]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e01d      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0xbc>
 80038de:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a71      	ldr	r2, [pc, #452]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b6f      	ldr	r3, [pc, #444]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a6e      	ldr	r2, [pc, #440]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e00b      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038f8:	4b6b      	ldr	r3, [pc, #428]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6a      	ldr	r2, [pc, #424]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800390a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7ff fb5c 	bl	8002fd4 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7ff fb58 	bl	8002fd4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e292      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0xe4>
 800393e:	e014      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7ff fb48 	bl	8002fd4 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003948:	f7ff fb44 	bl	8002fd4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e27e      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x10c>
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d063      	beq.n	8003a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003982:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b08      	cmp	r3, #8
 800398c:	d11c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x18c>
 800398e:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d116      	bne.n	80039c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_OscConfig+0x176>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e252      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4939      	ldr	r1, [pc, #228]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	e03a      	b.n	8003a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d0:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7ff fafd 	bl	8002fd4 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039de:	f7ff faf9 	bl	8002fd4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e233      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4927      	ldr	r1, [pc, #156]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	e015      	b.n	8003a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7ff fadc 	bl	8002fd4 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a20:	f7ff fad8 	bl	8002fd4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e212      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d03a      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a52:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_RCC_OscConfig+0x274>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7ff fabc 	bl	8002fd4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7ff fab8 	bl	8002fd4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1f2      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f000 fc04 	bl	800428c <RCC_Delay>
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_RCC_OscConfig+0x274>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8c:	f7ff faa2 	bl	8002fd4 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a92:	e00f      	b.n	8003ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a94:	f7ff fa9e 	bl	8002fd4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d908      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e1d8      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	42420000 	.word	0x42420000
 8003ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b9b      	ldr	r3, [pc, #620]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e9      	bne.n	8003a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a6 	beq.w	8003c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b94      	ldr	r3, [pc, #592]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10d      	bne.n	8003afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	4b91      	ldr	r3, [pc, #580]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4a90      	ldr	r2, [pc, #576]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	61d3      	str	r3, [r2, #28]
 8003aea:	4b8e      	ldr	r3, [pc, #568]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4b8b      	ldr	r3, [pc, #556]	; (8003d28 <HAL_RCC_OscConfig+0x4ec>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d118      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b06:	4b88      	ldr	r3, [pc, #544]	; (8003d28 <HAL_RCC_OscConfig+0x4ec>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a87      	ldr	r2, [pc, #540]	; (8003d28 <HAL_RCC_OscConfig+0x4ec>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b12:	f7ff fa5f 	bl	8002fd4 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1a:	f7ff fa5b 	bl	8002fd4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	; 0x64
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e195      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	4b7e      	ldr	r3, [pc, #504]	; (8003d28 <HAL_RCC_OscConfig+0x4ec>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x312>
 8003b40:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	4a77      	ldr	r2, [pc, #476]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6213      	str	r3, [r2, #32]
 8003b4c:	e02d      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x334>
 8003b56:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6213      	str	r3, [r2, #32]
 8003b62:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	4a6f      	ldr	r2, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	6213      	str	r3, [r2, #32]
 8003b6e:	e01c      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d10c      	bne.n	8003b92 <HAL_RCC_OscConfig+0x356>
 8003b78:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4a69      	ldr	r2, [pc, #420]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b7e:	f043 0304 	orr.w	r3, r3, #4
 8003b82:	6213      	str	r3, [r2, #32]
 8003b84:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4a66      	ldr	r2, [pc, #408]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6213      	str	r3, [r2, #32]
 8003b90:	e00b      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b92:	4b64      	ldr	r3, [pc, #400]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4a63      	ldr	r2, [pc, #396]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6213      	str	r3, [r2, #32]
 8003b9e:	4b61      	ldr	r3, [pc, #388]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	4a60      	ldr	r2, [pc, #384]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	f023 0304 	bic.w	r3, r3, #4
 8003ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d015      	beq.n	8003bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7ff fa0f 	bl	8002fd4 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7ff fa0b 	bl	8002fd4 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e143      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ee      	beq.n	8003bba <HAL_RCC_OscConfig+0x37e>
 8003bdc:	e014      	b.n	8003c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7ff f9f9 	bl	8002fd4 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7ff f9f5 	bl	8002fd4 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e12d      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	4b49      	ldr	r3, [pc, #292]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ee      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0e:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4a44      	ldr	r2, [pc, #272]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c18:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 808c 	beq.w	8003d3c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003c24:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c30:	d10e      	bne.n	8003c50 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003c32:	4b3c      	ldr	r3, [pc, #240]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d108      	bne.n	8003c50 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003c3e:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e103      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d14e      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003c58:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003c64:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0ef      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003c78:	4b2c      	ldr	r3, [pc, #176]	; (8003d2c <HAL_RCC_OscConfig+0x4f0>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7ff f9a9 	bl	8002fd4 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c86:	f7ff f9a5 	bl	8002fd4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b64      	cmp	r3, #100	; 0x64
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e0df      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003c98:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	491c      	ldr	r1, [pc, #112]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4918      	ldr	r1, [pc, #96]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003cc8:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <HAL_RCC_OscConfig+0x4f0>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cce:	f7ff f981 	bl	8002fd4 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cd6:	f7ff f97d 	bl	8002fd4 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b64      	cmp	r3, #100	; 0x64
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0b7      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x49a>
 8003cf4:	e022      	b.n	8003d3c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_RCC_OscConfig+0x4f0>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7ff f964 	bl	8002fd4 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003d0e:	e00f      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d10:	f7ff f960 	bl	8002fd4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d908      	bls.n	8003d30 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e09a      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003d30:	4b4b      	ldr	r3, [pc, #300]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e9      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8088 	beq.w	8003e56 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d46:	4b46      	ldr	r3, [pc, #280]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d068      	beq.n	8003e24 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d14d      	bne.n	8003df6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b42      	ldr	r3, [pc, #264]	; (8003e64 <HAL_RCC_OscConfig+0x628>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7ff f938 	bl	8002fd4 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7ff f934 	bl	8002fd4 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e06e      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7a:	4b39      	ldr	r3, [pc, #228]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8e:	d10f      	bne.n	8003db0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4931      	ldr	r1, [pc, #196]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f023 020f 	bic.w	r2, r3, #15
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	492d      	ldr	r1, [pc, #180]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db0:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	4927      	ldr	r1, [pc, #156]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <HAL_RCC_OscConfig+0x628>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7ff f901 	bl	8002fd4 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7ff f8fd 	bl	8002fd4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e037      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x59a>
 8003df4:	e02f      	b.n	8003e56 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCC_OscConfig+0x628>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7ff f8ea 	bl	8002fd4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7ff f8e6 	bl	8002fd4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e020      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x5c8>
 8003e22:	e018      	b.n	8003e56 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e013      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_OscConfig+0x624>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	42420060 	.word	0x42420060

08003e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d0      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	4965      	ldr	r1, [pc, #404]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d040      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e073      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4936      	ldr	r1, [pc, #216]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7ff f83c 	bl	8002fd4 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7ff f838 	bl	8002fd4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e053      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d210      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0207 	bic.w	r2, r3, #7
 8003f9e:	4922      	ldr	r1, [pc, #136]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1cc>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe ff9a 	bl	8002f50 <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000
 800402c:	40021000 	.word	0x40021000
 8004030:	08008ff4 	.word	0x08008ff4
 8004034:	20000004 	.word	0x20000004
 8004038:	20000008 	.word	0x20000008

0800403c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b092      	sub	sp, #72	; 0x48
 8004042:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004048:	2300      	movs	r3, #0
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
 800404c:	2300      	movs	r3, #0
 800404e:	647b      	str	r3, [r7, #68]	; 0x44
 8004050:	2300      	movs	r3, #0
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	633b      	str	r3, [r7, #48]	; 0x30
 800405c:	2300      	movs	r3, #0
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004060:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b04      	cmp	r3, #4
 800406e:	d002      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x3a>
 8004070:	2b08      	cmp	r3, #8
 8004072:	d003      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x40>
 8004074:	e0c3      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004076:	4b67      	ldr	r3, [pc, #412]	; (8004214 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004078:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800407a:	e0c3      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800407c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407e:	0c9b      	lsrs	r3, r3, #18
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	4b64      	ldr	r3, [pc, #400]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004086:	5c9b      	ldrb	r3, [r3, r2]
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80ac 	beq.w	80041ee <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004096:	4b5e      	ldr	r3, [pc, #376]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f003 020f 	and.w	r2, r3, #15
 800409e:	4b5f      	ldr	r3, [pc, #380]	; (800421c <HAL_RCC_GetSysClockFreq+0x1e0>)
 80040a0:	5c9b      	ldrb	r3, [r3, r2]
 80040a2:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80040a4:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 808c 	beq.w	80041ca <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80040b2:	4b57      	ldr	r3, [pc, #348]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	3301      	adds	r3, #1
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80040c0:	4b53      	ldr	r3, [pc, #332]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	3302      	adds	r3, #2
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	2200      	movs	r2, #0
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	627a      	str	r2, [r7, #36]	; 0x24
 80040d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d8:	2200      	movs	r2, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	4611      	mov	r1, r2
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	fb00 f203 	mul.w	r2, r0, r3
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	fb03 f301 	mul.w	r3, r3, r1
 80040ea:	4413      	add	r3, r2
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	fba2 4500 	umull	r4, r5, r2, r0
 80040f2:	442b      	add	r3, r5
 80040f4:	461d      	mov	r5, r3
 80040f6:	4622      	mov	r2, r4
 80040f8:	462b      	mov	r3, r5
 80040fa:	f04f 0000 	mov.w	r0, #0
 80040fe:	f04f 0100 	mov.w	r1, #0
 8004102:	0159      	lsls	r1, r3, #5
 8004104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004108:	0150      	lsls	r0, r2, #5
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	ebb2 0a04 	subs.w	sl, r2, r4
 8004112:	eb63 0b05 	sbc.w	fp, r3, r5
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004122:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004126:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800412a:	ebb2 080a 	subs.w	r8, r2, sl
 800412e:	eb63 090b 	sbc.w	r9, r3, fp
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	eb18 0304 	adds.w	r3, r8, r4
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	eb49 0305 	adc.w	r3, r9, r5
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004162:	4629      	mov	r1, r5
 8004164:	028b      	lsls	r3, r1, #10
 8004166:	4620      	mov	r0, r4
 8004168:	4629      	mov	r1, r5
 800416a:	4604      	mov	r4, r0
 800416c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004170:	4601      	mov	r1, r0
 8004172:	028a      	lsls	r2, r1, #10
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	2200      	movs	r2, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	617a      	str	r2, [r7, #20]
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	2200      	movs	r2, #0
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	60fa      	str	r2, [r7, #12]
 8004188:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800418c:	4622      	mov	r2, r4
 800418e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004192:	4645      	mov	r5, r8
 8004194:	fb05 f202 	mul.w	r2, r5, r2
 8004198:	46cc      	mov	ip, r9
 800419a:	4625      	mov	r5, r4
 800419c:	461c      	mov	r4, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	fb03 f30c 	mul.w	r3, r3, ip
 80041a4:	4413      	add	r3, r2
 80041a6:	4622      	mov	r2, r4
 80041a8:	4644      	mov	r4, r8
 80041aa:	fba2 2404 	umull	r2, r4, r2, r4
 80041ae:	61fc      	str	r4, [r7, #28]
 80041b0:	61ba      	str	r2, [r7, #24]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041bc:	f7fc feb8 	bl	8000f30 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4613      	mov	r3, r2
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
 80041c8:	e007      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041cc:	4a11      	ldr	r2, [pc, #68]	; (8004214 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80041ce:	fb03 f202 	mul.w	r2, r3, r2
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80041dc:	7b5b      	ldrb	r3, [r3, #13]
 80041de:	461a      	mov	r2, r3
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 80041e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	647b      	str	r3, [r7, #68]	; 0x44
 80041ec:	e004      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 80041f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041fa:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80041fc:	e002      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8004200:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004206:	4618      	mov	r0, r3
 8004208:	3748      	adds	r7, #72	; 0x48
 800420a:	46bd      	mov	sp, r7
 800420c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004210:	40021000 	.word	0x40021000
 8004214:	00f42400 	.word	0x00f42400
 8004218:	0800900c 	.word	0x0800900c
 800421c:	0800901c 	.word	0x0800901c
 8004220:	003d0900 	.word	0x003d0900
 8004224:	007a1200 	.word	0x007a1200

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b02      	ldr	r3, [pc, #8]	; (8004238 <HAL_RCC_GetHCLKFreq+0x10>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	20000004 	.word	0x20000004

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004240:	f7ff fff2 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4903      	ldr	r1, [pc, #12]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	08009004 	.word	0x08009004

08004264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004268:	f7ff ffde 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	0adb      	lsrs	r3, r3, #11
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	4903      	ldr	r1, [pc, #12]	; (8004288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	08009004 	.word	0x08009004

0800428c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <RCC_Delay+0x34>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <RCC_Delay+0x38>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0a5b      	lsrs	r3, r3, #9
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042a8:	bf00      	nop
  }
  while (Delay --);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	60fa      	str	r2, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f9      	bne.n	80042a8 <RCC_Delay+0x1c>
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	20000004 	.word	0x20000004
 80042c4:	10624dd3 	.word	0x10624dd3

080042c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e076      	b.n	80043c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ea:	d009      	beq.n	8004300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
 80042f2:	e005      	b.n	8004300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fe f972 	bl	8002604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004336:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004384:	ea42 0103 	orr.w	r1, r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	0c1a      	lsrs	r2, r3, #16
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f002 0204 	and.w	r2, r2, #4
 80043a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_SPI_Transmit+0x22>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e12d      	b.n	800464e <HAL_SPI_Transmit+0x27e>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043fa:	f7fe fdeb 	bl	8002fd4 <HAL_GetTick>
 80043fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d002      	beq.n	8004416 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004410:	2302      	movs	r3, #2
 8004412:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004414:	e116      	b.n	8004644 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_SPI_Transmit+0x52>
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004426:	e10d      	b.n	8004644 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2203      	movs	r2, #3
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	88fa      	ldrh	r2, [r7, #6]
 8004446:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446e:	d10f      	bne.n	8004490 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d007      	beq.n	80044ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b6:	d14f      	bne.n	8004558 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_SPI_Transmit+0xf6>
 80044c0:	8afb      	ldrh	r3, [r7, #22]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d142      	bne.n	800454c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	881a      	ldrh	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	1c9a      	adds	r2, r3, #2
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044ea:	e02f      	b.n	800454c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d112      	bne.n	8004520 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	881a      	ldrh	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	1c9a      	adds	r2, r3, #2
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	86da      	strh	r2, [r3, #54]	; 0x36
 800451e:	e015      	b.n	800454c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004520:	f7fe fd58 	bl	8002fd4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d803      	bhi.n	8004538 <HAL_SPI_Transmit+0x168>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d102      	bne.n	800453e <HAL_SPI_Transmit+0x16e>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800454a:	e07b      	b.n	8004644 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ca      	bne.n	80044ec <HAL_SPI_Transmit+0x11c>
 8004556:	e050      	b.n	80045fa <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_Transmit+0x196>
 8004560:	8afb      	ldrh	r3, [r7, #22]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d144      	bne.n	80045f0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800458c:	e030      	b.n	80045f0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d113      	bne.n	80045c4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80045c2:	e015      	b.n	80045f0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c4:	f7fe fd06 	bl	8002fd4 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d803      	bhi.n	80045dc <HAL_SPI_Transmit+0x20c>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d102      	bne.n	80045e2 <HAL_SPI_Transmit+0x212>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80045ee:	e029      	b.n	8004644 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1c9      	bne.n	800458e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fbcc 	bl	8004d9c <SPI_EndRxTxTransaction>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e003      	b.n	8004644 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800464c:	7ffb      	ldrb	r3, [r7, #31]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b088      	sub	sp, #32
 800465a:	af02      	add	r7, sp, #8
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b01      	cmp	r3, #1
 8004674:	d002      	beq.n	800467c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004676:	2302      	movs	r3, #2
 8004678:	75fb      	strb	r3, [r7, #23]
    goto error;
 800467a:	e0fb      	b.n	8004874 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004684:	d112      	bne.n	80046ac <HAL_SPI_Receive+0x56>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10e      	bne.n	80046ac <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2204      	movs	r2, #4
 8004692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f8ef 	bl	8004886 <HAL_SPI_TransmitReceive>
 80046a8:	4603      	mov	r3, r0
 80046aa:	e0e8      	b.n	800487e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_SPI_Receive+0x64>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e0e1      	b.n	800487e <HAL_SPI_Receive+0x228>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046c2:	f7fe fc87 	bl	8002fd4 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Receive+0x7e>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046d8:	e0cc      	b.n	8004874 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2204      	movs	r2, #4
 80046de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004720:	d10f      	bne.n	8004742 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004730:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004740:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d007      	beq.n	8004760 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800475e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d16a      	bne.n	800483e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004768:	e032      	b.n	80047d0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d115      	bne.n	80047a4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f103 020c 	add.w	r2, r3, #12
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	7812      	ldrb	r2, [r2, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047a2:	e015      	b.n	80047d0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047a4:	f7fe fc16 	bl	8002fd4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d803      	bhi.n	80047bc <HAL_SPI_Receive+0x166>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_Receive+0x16c>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80047ce:	e051      	b.n	8004874 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1c7      	bne.n	800476a <HAL_SPI_Receive+0x114>
 80047da:	e035      	b.n	8004848 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d113      	bne.n	8004812 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	b292      	uxth	r2, r2
 80047f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	1c9a      	adds	r2, r3, #2
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004810:	e015      	b.n	800483e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004812:	f7fe fbdf 	bl	8002fd4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d803      	bhi.n	800482a <HAL_SPI_Receive+0x1d4>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d102      	bne.n	8004830 <HAL_SPI_Receive+0x1da>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800483c:	e01a      	b.n	8004874 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1c9      	bne.n	80047dc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fa53 	bl	8004cf8 <SPI_EndRxTransaction>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
 800486a:	e003      	b.n	8004874 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800487c:	7dfb      	ldrb	r3, [r7, #23]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b08c      	sub	sp, #48	; 0x30
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004894:	2301      	movs	r3, #1
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x26>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e198      	b.n	8004bde <HAL_SPI_TransmitReceive+0x358>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b4:	f7fe fb8e 	bl	8002fd4 <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048ca:	887b      	ldrh	r3, [r7, #2]
 80048cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d00f      	beq.n	80048f6 <HAL_SPI_TransmitReceive+0x70>
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048dc:	d107      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d103      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x68>
 80048e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d003      	beq.n	80048f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048f4:	e16d      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_SPI_TransmitReceive+0x82>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_SPI_TransmitReceive+0x82>
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800490e:	e160      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b04      	cmp	r3, #4
 800491a:	d003      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2205      	movs	r2, #5
 8004920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	887a      	ldrh	r2, [r7, #2]
 800493a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	887a      	ldrh	r2, [r7, #2]
 8004946:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d007      	beq.n	8004978 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004980:	d17c      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x10a>
 800498a:	8b7b      	ldrh	r3, [r7, #26]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d16a      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b4:	e057      	b.n	8004a66 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d11b      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x176>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <HAL_SPI_TransmitReceive+0x176>
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d113      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	1c9a      	adds	r2, r3, #2
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d119      	bne.n	8004a3e <HAL_SPI_TransmitReceive+0x1b8>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d014      	beq.n	8004a3e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	1c9a      	adds	r2, r3, #2
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a3e:	f7fe fac9 	bl	8002fd4 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d80b      	bhi.n	8004a66 <HAL_SPI_TransmitReceive+0x1e0>
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d007      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a64:	e0b5      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1a2      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x130>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d19d      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x130>
 8004a7a:	e080      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x204>
 8004a84:	8b7b      	ldrh	r3, [r7, #26]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d16f      	bne.n	8004b6a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab0:	e05b      	b.n	8004b6a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d11c      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x274>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d017      	beq.n	8004afa <HAL_SPI_TransmitReceive+0x274>
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d114      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	7812      	ldrb	r2, [r2, #0]
 8004adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d119      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x2b6>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d014      	beq.n	8004b3c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b3c:	f7fe fa4a 	bl	8002fd4 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d803      	bhi.n	8004b54 <HAL_SPI_TransmitReceive+0x2ce>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d102      	bne.n	8004b5a <HAL_SPI_TransmitReceive+0x2d4>
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004b68:	e033      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d19e      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x22c>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d199      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f90a 	bl	8004d9c <SPI_EndRxTxTransaction>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d006      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b9a:	e01a      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc8:	e003      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3730      	adds	r7, #48	; 0x30
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bf8:	f7fe f9ec 	bl	8002fd4 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c08:	f7fe f9e4 	bl	8002fd4 <HAL_GetTick>
 8004c0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c0e:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	015b      	lsls	r3, r3, #5
 8004c14:	0d1b      	lsrs	r3, r3, #20
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
 8004c1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c1e:	e054      	b.n	8004cca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d050      	beq.n	8004cca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c28:	f7fe f9d4 	bl	8002fd4 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d902      	bls.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d13d      	bne.n	8004cba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c56:	d111      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c60:	d004      	beq.n	8004c6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6a:	d107      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c84:	d10f      	bne.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e017      	b.n	8004cea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d19b      	bne.n	8004c20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000004 	.word	0x20000004

08004cf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0c:	d111      	bne.n	8004d32 <SPI_EndRxTransaction+0x3a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d16:	d004      	beq.n	8004d22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d107      	bne.n	8004d32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d30:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3a:	d117      	bne.n	8004d6c <SPI_EndRxTransaction+0x74>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	d112      	bne.n	8004d6c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2101      	movs	r1, #1
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff ff49 	bl	8004be8 <SPI_WaitFlagStateUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01a      	beq.n	8004d92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e013      	b.n	8004d94 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2200      	movs	r2, #0
 8004d74:	2180      	movs	r1, #128	; 0x80
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f7ff ff36 	bl	8004be8 <SPI_WaitFlagStateUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e000      	b.n	8004d94 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2180      	movs	r1, #128	; 0x80
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff ff18 	bl	8004be8 <SPI_WaitFlagStateUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	f043 0220 	orr.w	r2, r3, #32
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e000      	b.n	8004dd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e041      	b.n	8004e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fd ff74 	bl	8002cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f000 fd70 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d001      	beq.n	8004e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e03f      	b.n	8004f10 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1b      	ldr	r2, [pc, #108]	; (8004f1c <HAL_TIM_Base_Start_IT+0xa4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x62>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eba:	d00e      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x62>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <HAL_TIM_Base_Start_IT+0xa8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x62>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a16      	ldr	r2, [pc, #88]	; (8004f24 <HAL_TIM_Base_Start_IT+0xac>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_TIM_Base_Start_IT+0x62>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d111      	bne.n	8004efe <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d010      	beq.n	8004f0e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efc:	e007      	b.n	8004f0e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00

08004f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e041      	b.n	8004fc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f839 	bl	8004fca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f000 fcc6 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <HAL_TIM_PWM_Start+0x24>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	e022      	b.n	8005046 <HAL_TIM_PWM_Start+0x6a>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b04      	cmp	r3, #4
 8005004:	d109      	bne.n	800501a <HAL_TIM_PWM_Start+0x3e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b01      	cmp	r3, #1
 8005010:	bf14      	ite	ne
 8005012:	2301      	movne	r3, #1
 8005014:	2300      	moveq	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e015      	b.n	8005046 <HAL_TIM_PWM_Start+0x6a>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d109      	bne.n	8005034 <HAL_TIM_PWM_Start+0x58>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	e008      	b.n	8005046 <HAL_TIM_PWM_Start+0x6a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e063      	b.n	8005116 <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d104      	bne.n	800505e <HAL_TIM_PWM_Start+0x82>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800505c:	e013      	b.n	8005086 <HAL_TIM_PWM_Start+0xaa>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d104      	bne.n	800506e <HAL_TIM_PWM_Start+0x92>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800506c:	e00b      	b.n	8005086 <HAL_TIM_PWM_Start+0xaa>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d104      	bne.n	800507e <HAL_TIM_PWM_Start+0xa2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800507c:	e003      	b.n	8005086 <HAL_TIM_PWM_Start+0xaa>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2201      	movs	r2, #1
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 febe 	bl	8005e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a21      	ldr	r2, [pc, #132]	; (8005120 <HAL_TIM_PWM_Start+0x144>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d107      	bne.n	80050ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_TIM_PWM_Start+0x144>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_TIM_PWM_Start+0x104>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIM_PWM_Start+0x104>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a17      	ldr	r2, [pc, #92]	; (8005124 <HAL_TIM_PWM_Start+0x148>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_TIM_PWM_Start+0x104>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_TIM_PWM_Start+0x14c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIM_PWM_Start+0x104>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a14      	ldr	r2, [pc, #80]	; (800512c <HAL_TIM_PWM_Start+0x150>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d111      	bne.n	8005104 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d010      	beq.n	8005114 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005102:	e007      	b.n	8005114 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00

08005130 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e093      	b.n	800526c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fd fd59 	bl	8002c10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3304      	adds	r3, #4
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 fbb9 	bl	80058fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	4313      	orrs	r3, r2
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051d0:	f023 030c 	bic.w	r3, r3, #12
 80051d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	4313      	orrs	r3, r2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	011a      	lsls	r2, r3, #4
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	031b      	lsls	r3, r3, #12
 8005200:	4313      	orrs	r3, r2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	4313      	orrs	r3, r2
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005284:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800528c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005294:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800529c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d110      	bne.n	80052c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d102      	bne.n	80052b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052aa:	7b7b      	ldrb	r3, [r7, #13]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e069      	b.n	8005388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c4:	e031      	b.n	800532a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d110      	bne.n	80052ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052cc:	7bbb      	ldrb	r3, [r7, #14]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d102      	bne.n	80052d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052d2:	7b3b      	ldrb	r3, [r7, #12]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d001      	beq.n	80052dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e055      	b.n	8005388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ec:	e01d      	b.n	800532a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d108      	bne.n	8005306 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052f4:	7bbb      	ldrb	r3, [r7, #14]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052fa:	7b7b      	ldrb	r3, [r7, #13]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d102      	bne.n	8005306 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005300:	7b3b      	ldrb	r3, [r7, #12]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d001      	beq.n	800530a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e03e      	b.n	8005388 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_TIM_Encoder_Start+0xc4>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d008      	beq.n	8005348 <HAL_TIM_Encoder_Start+0xd4>
 8005336:	e00f      	b.n	8005358 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2201      	movs	r2, #1
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd65 	bl	8005e10 <TIM_CCxChannelCmd>
      break;
 8005346:	e016      	b.n	8005376 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2201      	movs	r2, #1
 800534e:	2104      	movs	r1, #4
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fd5d 	bl	8005e10 <TIM_CCxChannelCmd>
      break;
 8005356:	e00e      	b.n	8005376 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2201      	movs	r2, #1
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fd55 	bl	8005e10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	2104      	movs	r1, #4
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fd4e 	bl	8005e10 <TIM_CCxChannelCmd>
      break;
 8005374:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0202 	mvn.w	r2, #2
 80053bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa76 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa69 	bl	80058b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa78 	bl	80058d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0204 	mvn.w	r2, #4
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa4c 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa3f 	bl	80058b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa4e 	bl	80058d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b08      	cmp	r3, #8
 800544c:	d122      	bne.n	8005494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b08      	cmp	r3, #8
 800545a:	d11b      	bne.n	8005494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0208 	mvn.w	r2, #8
 8005464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2204      	movs	r2, #4
 800546a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa22 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa15 	bl	80058b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fa24 	bl	80058d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d122      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d11b      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0210 	mvn.w	r2, #16
 80054b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2208      	movs	r2, #8
 80054be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f9f8 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 80054d4:	e005      	b.n	80054e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f9eb 	bl	80058b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f9fa 	bl	80058d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d10e      	bne.n	8005514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d107      	bne.n	8005514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0201 	mvn.w	r2, #1
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fc04 	bl	8001d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551e:	2b80      	cmp	r3, #128	; 0x80
 8005520:	d10e      	bne.n	8005540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	2b80      	cmp	r3, #128	; 0x80
 800552e:	d107      	bne.n	8005540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fcfb 	bl	8005f36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d10e      	bne.n	800556c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d107      	bne.n	800556c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9be 	bl	80058e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b20      	cmp	r3, #32
 8005578:	d10e      	bne.n	8005598 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b20      	cmp	r3, #32
 8005586:	d107      	bne.n	8005598 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0220 	mvn.w	r2, #32
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fcc6 	bl	8005f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e0ae      	b.n	800571c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	f200 809f 	bhi.w	800570c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005609 	.word	0x08005609
 80055d8:	0800570d 	.word	0x0800570d
 80055dc:	0800570d 	.word	0x0800570d
 80055e0:	0800570d 	.word	0x0800570d
 80055e4:	08005649 	.word	0x08005649
 80055e8:	0800570d 	.word	0x0800570d
 80055ec:	0800570d 	.word	0x0800570d
 80055f0:	0800570d 	.word	0x0800570d
 80055f4:	0800568b 	.word	0x0800568b
 80055f8:	0800570d 	.word	0x0800570d
 80055fc:	0800570d 	.word	0x0800570d
 8005600:	0800570d 	.word	0x0800570d
 8005604:	080056cb 	.word	0x080056cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f9e0 	bl	80059d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0208 	orr.w	r2, r2, #8
 8005622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0204 	bic.w	r2, r2, #4
 8005632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6999      	ldr	r1, [r3, #24]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	619a      	str	r2, [r3, #24]
      break;
 8005646:	e064      	b.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fa26 	bl	8005aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6999      	ldr	r1, [r3, #24]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	619a      	str	r2, [r3, #24]
      break;
 8005688:	e043      	b.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fa6f 	bl	8005b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0208 	orr.w	r2, r2, #8
 80056a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0204 	bic.w	r2, r2, #4
 80056b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69d9      	ldr	r1, [r3, #28]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	61da      	str	r2, [r3, #28]
      break;
 80056c8:	e023      	b.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fab9 	bl	8005c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69d9      	ldr	r1, [r3, #28]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	021a      	lsls	r2, r3, #8
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	61da      	str	r2, [r3, #28]
      break;
 800570a:	e002      	b.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	75fb      	strb	r3, [r7, #23]
      break;
 8005710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIM_ConfigClockSource+0x1c>
 800573c:	2302      	movs	r3, #2
 800573e:	e0b4      	b.n	80058aa <HAL_TIM_ConfigClockSource+0x186>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800575e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005778:	d03e      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0xd4>
 800577a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577e:	f200 8087 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	f000 8086 	beq.w	8005896 <HAL_TIM_ConfigClockSource+0x172>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578e:	d87f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 8005790:	2b70      	cmp	r3, #112	; 0x70
 8005792:	d01a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0xa6>
 8005794:	2b70      	cmp	r3, #112	; 0x70
 8005796:	d87b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 8005798:	2b60      	cmp	r3, #96	; 0x60
 800579a:	d050      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x11a>
 800579c:	2b60      	cmp	r3, #96	; 0x60
 800579e:	d877      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b50      	cmp	r3, #80	; 0x50
 80057a2:	d03c      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xfa>
 80057a4:	2b50      	cmp	r3, #80	; 0x50
 80057a6:	d873      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d058      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x13a>
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d86f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d064      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x15a>
 80057b4:	2b30      	cmp	r3, #48	; 0x30
 80057b6:	d86b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d060      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x15a>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d867      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d05c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x15a>
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d05a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x15a>
 80057c8:	e062      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057da:	f000 fafa 	bl	8005dd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	609a      	str	r2, [r3, #8]
      break;
 80057f6:	e04f      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005808:	f000 fae3 	bl	8005dd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800581a:	609a      	str	r2, [r3, #8]
      break;
 800581c:	e03c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800582a:	461a      	mov	r2, r3
 800582c:	f000 fa5a 	bl	8005ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2150      	movs	r1, #80	; 0x50
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fab1 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 800583c:	e02c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800584a:	461a      	mov	r2, r3
 800584c:	f000 fa78 	bl	8005d40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2160      	movs	r1, #96	; 0x60
 8005856:	4618      	mov	r0, r3
 8005858:	f000 faa1 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 800585c:	e01c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	461a      	mov	r2, r3
 800586c:	f000 fa3a 	bl	8005ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2140      	movs	r1, #64	; 0x40
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fa91 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 800587c:	e00c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f000 fa88 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 800588e:	e003      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      break;
 8005894:	e000      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr

080058c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
	...

080058fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <TIM_Base_SetConfig+0xc8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00f      	beq.n	8005934 <TIM_Base_SetConfig+0x38>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d00b      	beq.n	8005934 <TIM_Base_SetConfig+0x38>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a2a      	ldr	r2, [pc, #168]	; (80059c8 <TIM_Base_SetConfig+0xcc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_Base_SetConfig+0x38>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a29      	ldr	r2, [pc, #164]	; (80059cc <TIM_Base_SetConfig+0xd0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0x38>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a28      	ldr	r2, [pc, #160]	; (80059d0 <TIM_Base_SetConfig+0xd4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <TIM_Base_SetConfig+0xc8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <TIM_Base_SetConfig+0x72>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0x72>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <TIM_Base_SetConfig+0xcc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0x72>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <TIM_Base_SetConfig+0xd0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0x72>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <TIM_Base_SetConfig+0xd4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <TIM_Base_SetConfig+0xc8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00

080059d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f023 0201 	bic.w	r2, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f023 0302 	bic.w	r3, r3, #2
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <TIM_OC1_SetConfig+0xc8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d10c      	bne.n	8005a4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f023 0308 	bic.w	r3, r3, #8
 8005a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 0304 	bic.w	r3, r3, #4
 8005a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <TIM_OC1_SetConfig+0xc8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d111      	bne.n	8005a76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40012c00 	.word	0x40012c00

08005aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f023 0210 	bic.w	r2, r3, #16
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0320 	bic.w	r3, r3, #32
 8005aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a1d      	ldr	r2, [pc, #116]	; (8005b70 <TIM_OC2_SetConfig+0xd0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10d      	bne.n	8005b1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <TIM_OC2_SetConfig+0xd0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d113      	bne.n	8005b4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	40012c00 	.word	0x40012c00

08005b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <TIM_OC3_SetConfig+0xd0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d10d      	bne.n	8005bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a14      	ldr	r2, [pc, #80]	; (8005c44 <TIM_OC3_SetConfig+0xd0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d113      	bne.n	8005c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	621a      	str	r2, [r3, #32]
}
 8005c38:	bf00      	nop
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00

08005c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	031b      	lsls	r3, r3, #12
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a0f      	ldr	r2, [pc, #60]	; (8005ce0 <TIM_OC4_SetConfig+0x98>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d109      	bne.n	8005cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr
 8005ce0:	40012c00 	.word	0x40012c00

08005ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f023 0201 	bic.w	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f023 030a 	bic.w	r3, r3, #10
 8005d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0210 	bic.w	r2, r3, #16
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	031b      	lsls	r3, r3, #12
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	621a      	str	r2, [r3, #32]
}
 8005d94:	bf00      	nop
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f043 0307 	orr.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr

08005dd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	021a      	lsls	r2, r3, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	609a      	str	r2, [r3, #8]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr

08005e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	2201      	movs	r2, #1
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1a      	ldr	r2, [r3, #32]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	401a      	ands	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e04b      	b.n	8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d00e      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10c      	bne.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00

08005f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr

08005f36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e042      	b.n	8005fe0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fc ff68 	bl	8002e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2224      	movs	r2, #36	; 0x24
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f91d 	bl	80061cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b20      	cmp	r3, #32
 8006006:	d16d      	bne.n	80060e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_UART_Transmit+0x2c>
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e066      	b.n	80060e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2221      	movs	r2, #33	; 0x21
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006026:	f7fc ffd5 	bl	8002fd4 <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	88fa      	ldrh	r2, [r7, #6]
 8006036:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006040:	d108      	bne.n	8006054 <HAL_UART_Transmit+0x6c>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d104      	bne.n	8006054 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	e003      	b.n	800605c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006058:	2300      	movs	r3, #0
 800605a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800605c:	e02a      	b.n	80060b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2200      	movs	r2, #0
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f840 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e036      	b.n	80060e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10b      	bne.n	8006096 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800608c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	3302      	adds	r3, #2
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	e007      	b.n	80060a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	3301      	adds	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1cf      	bne.n	800605e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2140      	movs	r1, #64	; 0x40
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f810 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e006      	b.n	80060e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e000      	b.n	80060e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80060e4:	2302      	movs	r3, #2
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b090      	sub	sp, #64	; 0x40
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fe:	e050      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d04c      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0x30>
 800610e:	f7fc ff61 	bl	8002fd4 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800611a:	429a      	cmp	r2, r3
 800611c:	d241      	bcs.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800613e:	637a      	str	r2, [r7, #52]	; 0x34
 8006140:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3314      	adds	r3, #20
 8006158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	613b      	str	r3, [r7, #16]
   return(result);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	63bb      	str	r3, [r7, #56]	; 0x38
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3314      	adds	r3, #20
 8006170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006172:	623a      	str	r2, [r7, #32]
 8006174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	69f9      	ldr	r1, [r7, #28]
 8006178:	6a3a      	ldr	r2, [r7, #32]
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e00f      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4013      	ands	r3, r2
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d09f      	beq.n	8006100 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3740      	adds	r7, #64	; 0x40
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006206:	f023 030c 	bic.w	r3, r3, #12
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	430b      	orrs	r3, r1
 8006212:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2c      	ldr	r2, [pc, #176]	; (80062e0 <UART_SetConfig+0x114>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d103      	bne.n	800623c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006234:	f7fe f816 	bl	8004264 <HAL_RCC_GetPCLK2Freq>
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	e002      	b.n	8006242 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800623c:	f7fd fffe 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8006240:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009a      	lsls	r2, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	fbb2 f3f3 	udiv	r3, r2, r3
 8006258:	4a22      	ldr	r2, [pc, #136]	; (80062e4 <UART_SetConfig+0x118>)
 800625a:	fba2 2303 	umull	r2, r3, r2, r3
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	0119      	lsls	r1, r3, #4
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	009a      	lsls	r2, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	fbb2 f2f3 	udiv	r2, r2, r3
 8006278:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <UART_SetConfig+0x118>)
 800627a:	fba3 0302 	umull	r0, r3, r3, r2
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	2064      	movs	r0, #100	; 0x64
 8006282:	fb00 f303 	mul.w	r3, r0, r3
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	3332      	adds	r3, #50	; 0x32
 800628c:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <UART_SetConfig+0x118>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006298:	4419      	add	r1, r3
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	009a      	lsls	r2, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <UART_SetConfig+0x118>)
 80062b2:	fba3 0302 	umull	r0, r3, r3, r2
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	2064      	movs	r0, #100	; 0x64
 80062ba:	fb00 f303 	mul.w	r3, r0, r3
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	3332      	adds	r3, #50	; 0x32
 80062c4:	4a07      	ldr	r2, [pc, #28]	; (80062e4 <UART_SetConfig+0x118>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	f003 020f 	and.w	r2, r3, #15
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	440a      	add	r2, r1
 80062d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40013800 	.word	0x40013800
 80062e4:	51eb851f 	.word	0x51eb851f

080062e8 <__cvt>:
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ee:	461f      	mov	r7, r3
 80062f0:	bfbb      	ittet	lt
 80062f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80062f6:	461f      	movlt	r7, r3
 80062f8:	2300      	movge	r3, #0
 80062fa:	232d      	movlt	r3, #45	; 0x2d
 80062fc:	b088      	sub	sp, #32
 80062fe:	4614      	mov	r4, r2
 8006300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006302:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006304:	7013      	strb	r3, [r2, #0]
 8006306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006308:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800630c:	f023 0820 	bic.w	r8, r3, #32
 8006310:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006314:	d005      	beq.n	8006322 <__cvt+0x3a>
 8006316:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800631a:	d100      	bne.n	800631e <__cvt+0x36>
 800631c:	3501      	adds	r5, #1
 800631e:	2302      	movs	r3, #2
 8006320:	e000      	b.n	8006324 <__cvt+0x3c>
 8006322:	2303      	movs	r3, #3
 8006324:	aa07      	add	r2, sp, #28
 8006326:	9204      	str	r2, [sp, #16]
 8006328:	aa06      	add	r2, sp, #24
 800632a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800632e:	e9cd 3500 	strd	r3, r5, [sp]
 8006332:	4622      	mov	r2, r4
 8006334:	463b      	mov	r3, r7
 8006336:	f000 fe73 	bl	8007020 <_dtoa_r>
 800633a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800633e:	4606      	mov	r6, r0
 8006340:	d102      	bne.n	8006348 <__cvt+0x60>
 8006342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006344:	07db      	lsls	r3, r3, #31
 8006346:	d522      	bpl.n	800638e <__cvt+0xa6>
 8006348:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800634c:	eb06 0905 	add.w	r9, r6, r5
 8006350:	d110      	bne.n	8006374 <__cvt+0x8c>
 8006352:	7833      	ldrb	r3, [r6, #0]
 8006354:	2b30      	cmp	r3, #48	; 0x30
 8006356:	d10a      	bne.n	800636e <__cvt+0x86>
 8006358:	2200      	movs	r2, #0
 800635a:	2300      	movs	r3, #0
 800635c:	4620      	mov	r0, r4
 800635e:	4639      	mov	r1, r7
 8006360:	f7fa fc42 	bl	8000be8 <__aeabi_dcmpeq>
 8006364:	b918      	cbnz	r0, 800636e <__cvt+0x86>
 8006366:	f1c5 0501 	rsb	r5, r5, #1
 800636a:	f8ca 5000 	str.w	r5, [sl]
 800636e:	f8da 3000 	ldr.w	r3, [sl]
 8006372:	4499      	add	r9, r3
 8006374:	2200      	movs	r2, #0
 8006376:	2300      	movs	r3, #0
 8006378:	4620      	mov	r0, r4
 800637a:	4639      	mov	r1, r7
 800637c:	f7fa fc34 	bl	8000be8 <__aeabi_dcmpeq>
 8006380:	b108      	cbz	r0, 8006386 <__cvt+0x9e>
 8006382:	f8cd 901c 	str.w	r9, [sp, #28]
 8006386:	2230      	movs	r2, #48	; 0x30
 8006388:	9b07      	ldr	r3, [sp, #28]
 800638a:	454b      	cmp	r3, r9
 800638c:	d307      	bcc.n	800639e <__cvt+0xb6>
 800638e:	4630      	mov	r0, r6
 8006390:	9b07      	ldr	r3, [sp, #28]
 8006392:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006394:	1b9b      	subs	r3, r3, r6
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	b008      	add	sp, #32
 800639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639e:	1c59      	adds	r1, r3, #1
 80063a0:	9107      	str	r1, [sp, #28]
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	e7f0      	b.n	8006388 <__cvt+0xa0>

080063a6 <__exponent>:
 80063a6:	4603      	mov	r3, r0
 80063a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063aa:	2900      	cmp	r1, #0
 80063ac:	f803 2b02 	strb.w	r2, [r3], #2
 80063b0:	bfb6      	itet	lt
 80063b2:	222d      	movlt	r2, #45	; 0x2d
 80063b4:	222b      	movge	r2, #43	; 0x2b
 80063b6:	4249      	neglt	r1, r1
 80063b8:	2909      	cmp	r1, #9
 80063ba:	7042      	strb	r2, [r0, #1]
 80063bc:	dd2a      	ble.n	8006414 <__exponent+0x6e>
 80063be:	f10d 0207 	add.w	r2, sp, #7
 80063c2:	4617      	mov	r7, r2
 80063c4:	260a      	movs	r6, #10
 80063c6:	fb91 f5f6 	sdiv	r5, r1, r6
 80063ca:	4694      	mov	ip, r2
 80063cc:	fb06 1415 	mls	r4, r6, r5, r1
 80063d0:	3430      	adds	r4, #48	; 0x30
 80063d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80063d6:	460c      	mov	r4, r1
 80063d8:	2c63      	cmp	r4, #99	; 0x63
 80063da:	4629      	mov	r1, r5
 80063dc:	f102 32ff 	add.w	r2, r2, #4294967295
 80063e0:	dcf1      	bgt.n	80063c6 <__exponent+0x20>
 80063e2:	3130      	adds	r1, #48	; 0x30
 80063e4:	f1ac 0402 	sub.w	r4, ip, #2
 80063e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063ec:	4622      	mov	r2, r4
 80063ee:	1c41      	adds	r1, r0, #1
 80063f0:	42ba      	cmp	r2, r7
 80063f2:	d30a      	bcc.n	800640a <__exponent+0x64>
 80063f4:	f10d 0209 	add.w	r2, sp, #9
 80063f8:	eba2 020c 	sub.w	r2, r2, ip
 80063fc:	42bc      	cmp	r4, r7
 80063fe:	bf88      	it	hi
 8006400:	2200      	movhi	r2, #0
 8006402:	4413      	add	r3, r2
 8006404:	1a18      	subs	r0, r3, r0
 8006406:	b003      	add	sp, #12
 8006408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800640e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006412:	e7ed      	b.n	80063f0 <__exponent+0x4a>
 8006414:	2330      	movs	r3, #48	; 0x30
 8006416:	3130      	adds	r1, #48	; 0x30
 8006418:	7083      	strb	r3, [r0, #2]
 800641a:	70c1      	strb	r1, [r0, #3]
 800641c:	1d03      	adds	r3, r0, #4
 800641e:	e7f1      	b.n	8006404 <__exponent+0x5e>

08006420 <_printf_float>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	b091      	sub	sp, #68	; 0x44
 8006426:	460c      	mov	r4, r1
 8006428:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800642c:	4616      	mov	r6, r2
 800642e:	461f      	mov	r7, r3
 8006430:	4605      	mov	r5, r0
 8006432:	f000 fce5 	bl	8006e00 <_localeconv_r>
 8006436:	6803      	ldr	r3, [r0, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	9309      	str	r3, [sp, #36]	; 0x24
 800643c:	f7f9 fef4 	bl	8000228 <strlen>
 8006440:	2300      	movs	r3, #0
 8006442:	930e      	str	r3, [sp, #56]	; 0x38
 8006444:	f8d8 3000 	ldr.w	r3, [r8]
 8006448:	900a      	str	r0, [sp, #40]	; 0x28
 800644a:	3307      	adds	r3, #7
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	f103 0208 	add.w	r2, r3, #8
 8006454:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006458:	f8d4 b000 	ldr.w	fp, [r4]
 800645c:	f8c8 2000 	str.w	r2, [r8]
 8006460:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006464:	4652      	mov	r2, sl
 8006466:	4643      	mov	r3, r8
 8006468:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800646c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006470:	930b      	str	r3, [sp, #44]	; 0x2c
 8006472:	f04f 32ff 	mov.w	r2, #4294967295
 8006476:	4650      	mov	r0, sl
 8006478:	4b9c      	ldr	r3, [pc, #624]	; (80066ec <_printf_float+0x2cc>)
 800647a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800647c:	f7fa fbe6 	bl	8000c4c <__aeabi_dcmpun>
 8006480:	bb70      	cbnz	r0, 80064e0 <_printf_float+0xc0>
 8006482:	f04f 32ff 	mov.w	r2, #4294967295
 8006486:	4650      	mov	r0, sl
 8006488:	4b98      	ldr	r3, [pc, #608]	; (80066ec <_printf_float+0x2cc>)
 800648a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800648c:	f7fa fbc0 	bl	8000c10 <__aeabi_dcmple>
 8006490:	bb30      	cbnz	r0, 80064e0 <_printf_float+0xc0>
 8006492:	2200      	movs	r2, #0
 8006494:	2300      	movs	r3, #0
 8006496:	4650      	mov	r0, sl
 8006498:	4641      	mov	r1, r8
 800649a:	f7fa fbaf 	bl	8000bfc <__aeabi_dcmplt>
 800649e:	b110      	cbz	r0, 80064a6 <_printf_float+0x86>
 80064a0:	232d      	movs	r3, #45	; 0x2d
 80064a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a6:	4a92      	ldr	r2, [pc, #584]	; (80066f0 <_printf_float+0x2d0>)
 80064a8:	4b92      	ldr	r3, [pc, #584]	; (80066f4 <_printf_float+0x2d4>)
 80064aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80064ae:	bf94      	ite	ls
 80064b0:	4690      	movls	r8, r2
 80064b2:	4698      	movhi	r8, r3
 80064b4:	2303      	movs	r3, #3
 80064b6:	f04f 0a00 	mov.w	sl, #0
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	f02b 0304 	bic.w	r3, fp, #4
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	4633      	mov	r3, r6
 80064c4:	4621      	mov	r1, r4
 80064c6:	4628      	mov	r0, r5
 80064c8:	9700      	str	r7, [sp, #0]
 80064ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80064cc:	f000 f9d6 	bl	800687c <_printf_common>
 80064d0:	3001      	adds	r0, #1
 80064d2:	f040 8090 	bne.w	80065f6 <_printf_float+0x1d6>
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	b011      	add	sp, #68	; 0x44
 80064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e0:	4652      	mov	r2, sl
 80064e2:	4643      	mov	r3, r8
 80064e4:	4650      	mov	r0, sl
 80064e6:	4641      	mov	r1, r8
 80064e8:	f7fa fbb0 	bl	8000c4c <__aeabi_dcmpun>
 80064ec:	b148      	cbz	r0, 8006502 <_printf_float+0xe2>
 80064ee:	f1b8 0f00 	cmp.w	r8, #0
 80064f2:	bfb8      	it	lt
 80064f4:	232d      	movlt	r3, #45	; 0x2d
 80064f6:	4a80      	ldr	r2, [pc, #512]	; (80066f8 <_printf_float+0x2d8>)
 80064f8:	bfb8      	it	lt
 80064fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064fe:	4b7f      	ldr	r3, [pc, #508]	; (80066fc <_printf_float+0x2dc>)
 8006500:	e7d3      	b.n	80064aa <_printf_float+0x8a>
 8006502:	6863      	ldr	r3, [r4, #4]
 8006504:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	d142      	bne.n	8006592 <_printf_float+0x172>
 800650c:	2306      	movs	r3, #6
 800650e:	6063      	str	r3, [r4, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	9206      	str	r2, [sp, #24]
 8006514:	aa0e      	add	r2, sp, #56	; 0x38
 8006516:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800651a:	aa0d      	add	r2, sp, #52	; 0x34
 800651c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006520:	9203      	str	r2, [sp, #12]
 8006522:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006526:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800652a:	6023      	str	r3, [r4, #0]
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	4652      	mov	r2, sl
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4628      	mov	r0, r5
 8006534:	4643      	mov	r3, r8
 8006536:	910b      	str	r1, [sp, #44]	; 0x2c
 8006538:	f7ff fed6 	bl	80062e8 <__cvt>
 800653c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800653e:	4680      	mov	r8, r0
 8006540:	2947      	cmp	r1, #71	; 0x47
 8006542:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006544:	d108      	bne.n	8006558 <_printf_float+0x138>
 8006546:	1cc8      	adds	r0, r1, #3
 8006548:	db02      	blt.n	8006550 <_printf_float+0x130>
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	4299      	cmp	r1, r3
 800654e:	dd40      	ble.n	80065d2 <_printf_float+0x1b2>
 8006550:	f1a9 0902 	sub.w	r9, r9, #2
 8006554:	fa5f f989 	uxtb.w	r9, r9
 8006558:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800655c:	d81f      	bhi.n	800659e <_printf_float+0x17e>
 800655e:	464a      	mov	r2, r9
 8006560:	3901      	subs	r1, #1
 8006562:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006566:	910d      	str	r1, [sp, #52]	; 0x34
 8006568:	f7ff ff1d 	bl	80063a6 <__exponent>
 800656c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800656e:	4682      	mov	sl, r0
 8006570:	1813      	adds	r3, r2, r0
 8006572:	2a01      	cmp	r2, #1
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	dc02      	bgt.n	800657e <_printf_float+0x15e>
 8006578:	6822      	ldr	r2, [r4, #0]
 800657a:	07d2      	lsls	r2, r2, #31
 800657c:	d501      	bpl.n	8006582 <_printf_float+0x162>
 800657e:	3301      	adds	r3, #1
 8006580:	6123      	str	r3, [r4, #16]
 8006582:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006586:	2b00      	cmp	r3, #0
 8006588:	d09b      	beq.n	80064c2 <_printf_float+0xa2>
 800658a:	232d      	movs	r3, #45	; 0x2d
 800658c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006590:	e797      	b.n	80064c2 <_printf_float+0xa2>
 8006592:	2947      	cmp	r1, #71	; 0x47
 8006594:	d1bc      	bne.n	8006510 <_printf_float+0xf0>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1ba      	bne.n	8006510 <_printf_float+0xf0>
 800659a:	2301      	movs	r3, #1
 800659c:	e7b7      	b.n	800650e <_printf_float+0xee>
 800659e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80065a2:	d118      	bne.n	80065d6 <_printf_float+0x1b6>
 80065a4:	2900      	cmp	r1, #0
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	dd0b      	ble.n	80065c2 <_printf_float+0x1a2>
 80065aa:	6121      	str	r1, [r4, #16]
 80065ac:	b913      	cbnz	r3, 80065b4 <_printf_float+0x194>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	07d0      	lsls	r0, r2, #31
 80065b2:	d502      	bpl.n	80065ba <_printf_float+0x19a>
 80065b4:	3301      	adds	r3, #1
 80065b6:	440b      	add	r3, r1
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	f04f 0a00 	mov.w	sl, #0
 80065be:	65a1      	str	r1, [r4, #88]	; 0x58
 80065c0:	e7df      	b.n	8006582 <_printf_float+0x162>
 80065c2:	b913      	cbnz	r3, 80065ca <_printf_float+0x1aa>
 80065c4:	6822      	ldr	r2, [r4, #0]
 80065c6:	07d2      	lsls	r2, r2, #31
 80065c8:	d501      	bpl.n	80065ce <_printf_float+0x1ae>
 80065ca:	3302      	adds	r3, #2
 80065cc:	e7f4      	b.n	80065b8 <_printf_float+0x198>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7f2      	b.n	80065b8 <_printf_float+0x198>
 80065d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80065d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d8:	4299      	cmp	r1, r3
 80065da:	db05      	blt.n	80065e8 <_printf_float+0x1c8>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	6121      	str	r1, [r4, #16]
 80065e0:	07d8      	lsls	r0, r3, #31
 80065e2:	d5ea      	bpl.n	80065ba <_printf_float+0x19a>
 80065e4:	1c4b      	adds	r3, r1, #1
 80065e6:	e7e7      	b.n	80065b8 <_printf_float+0x198>
 80065e8:	2900      	cmp	r1, #0
 80065ea:	bfcc      	ite	gt
 80065ec:	2201      	movgt	r2, #1
 80065ee:	f1c1 0202 	rsble	r2, r1, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	e7e0      	b.n	80065b8 <_printf_float+0x198>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	055a      	lsls	r2, r3, #21
 80065fa:	d407      	bmi.n	800660c <_printf_float+0x1ec>
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	4642      	mov	r2, r8
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	d12b      	bne.n	8006662 <_printf_float+0x242>
 800660a:	e764      	b.n	80064d6 <_printf_float+0xb6>
 800660c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006610:	f240 80dd 	bls.w	80067ce <_printf_float+0x3ae>
 8006614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	f7fa fae4 	bl	8000be8 <__aeabi_dcmpeq>
 8006620:	2800      	cmp	r0, #0
 8006622:	d033      	beq.n	800668c <_printf_float+0x26c>
 8006624:	2301      	movs	r3, #1
 8006626:	4631      	mov	r1, r6
 8006628:	4628      	mov	r0, r5
 800662a:	4a35      	ldr	r2, [pc, #212]	; (8006700 <_printf_float+0x2e0>)
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	f43f af51 	beq.w	80064d6 <_printf_float+0xb6>
 8006634:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006638:	429a      	cmp	r2, r3
 800663a:	db02      	blt.n	8006642 <_printf_float+0x222>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	07d8      	lsls	r0, r3, #31
 8006640:	d50f      	bpl.n	8006662 <_printf_float+0x242>
 8006642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f af42 	beq.w	80064d6 <_printf_float+0xb6>
 8006652:	f04f 0800 	mov.w	r8, #0
 8006656:	f104 091a 	add.w	r9, r4, #26
 800665a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665c:	3b01      	subs	r3, #1
 800665e:	4543      	cmp	r3, r8
 8006660:	dc09      	bgt.n	8006676 <_printf_float+0x256>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	079b      	lsls	r3, r3, #30
 8006666:	f100 8104 	bmi.w	8006872 <_printf_float+0x452>
 800666a:	68e0      	ldr	r0, [r4, #12]
 800666c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800666e:	4298      	cmp	r0, r3
 8006670:	bfb8      	it	lt
 8006672:	4618      	movlt	r0, r3
 8006674:	e731      	b.n	80064da <_printf_float+0xba>
 8006676:	2301      	movs	r3, #1
 8006678:	464a      	mov	r2, r9
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f af28 	beq.w	80064d6 <_printf_float+0xb6>
 8006686:	f108 0801 	add.w	r8, r8, #1
 800668a:	e7e6      	b.n	800665a <_printf_float+0x23a>
 800668c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc38      	bgt.n	8006704 <_printf_float+0x2e4>
 8006692:	2301      	movs	r3, #1
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	4a19      	ldr	r2, [pc, #100]	; (8006700 <_printf_float+0x2e0>)
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f af1a 	beq.w	80064d6 <_printf_float+0xb6>
 80066a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80066a6:	4313      	orrs	r3, r2
 80066a8:	d102      	bne.n	80066b0 <_printf_float+0x290>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	07d9      	lsls	r1, r3, #31
 80066ae:	d5d8      	bpl.n	8006662 <_printf_float+0x242>
 80066b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	f43f af0b 	beq.w	80064d6 <_printf_float+0xb6>
 80066c0:	f04f 0900 	mov.w	r9, #0
 80066c4:	f104 0a1a 	add.w	sl, r4, #26
 80066c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ca:	425b      	negs	r3, r3
 80066cc:	454b      	cmp	r3, r9
 80066ce:	dc01      	bgt.n	80066d4 <_printf_float+0x2b4>
 80066d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066d2:	e794      	b.n	80065fe <_printf_float+0x1de>
 80066d4:	2301      	movs	r3, #1
 80066d6:	4652      	mov	r2, sl
 80066d8:	4631      	mov	r1, r6
 80066da:	4628      	mov	r0, r5
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	f43f aef9 	beq.w	80064d6 <_printf_float+0xb6>
 80066e4:	f109 0901 	add.w	r9, r9, #1
 80066e8:	e7ee      	b.n	80066c8 <_printf_float+0x2a8>
 80066ea:	bf00      	nop
 80066ec:	7fefffff 	.word	0x7fefffff
 80066f0:	0800902c 	.word	0x0800902c
 80066f4:	08009030 	.word	0x08009030
 80066f8:	08009034 	.word	0x08009034
 80066fc:	08009038 	.word	0x08009038
 8006700:	0800903c 	.word	0x0800903c
 8006704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006706:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006708:	429a      	cmp	r2, r3
 800670a:	bfa8      	it	ge
 800670c:	461a      	movge	r2, r3
 800670e:	2a00      	cmp	r2, #0
 8006710:	4691      	mov	r9, r2
 8006712:	dc37      	bgt.n	8006784 <_printf_float+0x364>
 8006714:	f04f 0b00 	mov.w	fp, #0
 8006718:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800671c:	f104 021a 	add.w	r2, r4, #26
 8006720:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006724:	ebaa 0309 	sub.w	r3, sl, r9
 8006728:	455b      	cmp	r3, fp
 800672a:	dc33      	bgt.n	8006794 <_printf_float+0x374>
 800672c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006730:	429a      	cmp	r2, r3
 8006732:	db3b      	blt.n	80067ac <_printf_float+0x38c>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	07da      	lsls	r2, r3, #31
 8006738:	d438      	bmi.n	80067ac <_printf_float+0x38c>
 800673a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800673e:	eba2 0903 	sub.w	r9, r2, r3
 8006742:	eba2 020a 	sub.w	r2, r2, sl
 8006746:	4591      	cmp	r9, r2
 8006748:	bfa8      	it	ge
 800674a:	4691      	movge	r9, r2
 800674c:	f1b9 0f00 	cmp.w	r9, #0
 8006750:	dc34      	bgt.n	80067bc <_printf_float+0x39c>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800675a:	f104 0a1a 	add.w	sl, r4, #26
 800675e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	eba3 0309 	sub.w	r3, r3, r9
 8006768:	4543      	cmp	r3, r8
 800676a:	f77f af7a 	ble.w	8006662 <_printf_float+0x242>
 800676e:	2301      	movs	r3, #1
 8006770:	4652      	mov	r2, sl
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	f43f aeac 	beq.w	80064d6 <_printf_float+0xb6>
 800677e:	f108 0801 	add.w	r8, r8, #1
 8006782:	e7ec      	b.n	800675e <_printf_float+0x33e>
 8006784:	4613      	mov	r3, r2
 8006786:	4631      	mov	r1, r6
 8006788:	4642      	mov	r2, r8
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	d1c0      	bne.n	8006714 <_printf_float+0x2f4>
 8006792:	e6a0      	b.n	80064d6 <_printf_float+0xb6>
 8006794:	2301      	movs	r3, #1
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	920b      	str	r2, [sp, #44]	; 0x2c
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f ae99 	beq.w	80064d6 <_printf_float+0xb6>
 80067a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067a6:	f10b 0b01 	add.w	fp, fp, #1
 80067aa:	e7b9      	b.n	8006720 <_printf_float+0x300>
 80067ac:	4631      	mov	r1, r6
 80067ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	d1bf      	bne.n	800673a <_printf_float+0x31a>
 80067ba:	e68c      	b.n	80064d6 <_printf_float+0xb6>
 80067bc:	464b      	mov	r3, r9
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	eb08 020a 	add.w	r2, r8, sl
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	d1c2      	bne.n	8006752 <_printf_float+0x332>
 80067cc:	e683      	b.n	80064d6 <_printf_float+0xb6>
 80067ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d0:	2a01      	cmp	r2, #1
 80067d2:	dc01      	bgt.n	80067d8 <_printf_float+0x3b8>
 80067d4:	07db      	lsls	r3, r3, #31
 80067d6:	d539      	bpl.n	800684c <_printf_float+0x42c>
 80067d8:	2301      	movs	r3, #1
 80067da:	4642      	mov	r2, r8
 80067dc:	4631      	mov	r1, r6
 80067de:	4628      	mov	r0, r5
 80067e0:	47b8      	blx	r7
 80067e2:	3001      	adds	r0, #1
 80067e4:	f43f ae77 	beq.w	80064d6 <_printf_float+0xb6>
 80067e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f ae6f 	beq.w	80064d6 <_printf_float+0xb6>
 80067f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006804:	f7fa f9f0 	bl	8000be8 <__aeabi_dcmpeq>
 8006808:	b9d8      	cbnz	r0, 8006842 <_printf_float+0x422>
 800680a:	f109 33ff 	add.w	r3, r9, #4294967295
 800680e:	f108 0201 	add.w	r2, r8, #1
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	d10e      	bne.n	800683a <_printf_float+0x41a>
 800681c:	e65b      	b.n	80064d6 <_printf_float+0xb6>
 800681e:	2301      	movs	r3, #1
 8006820:	464a      	mov	r2, r9
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	f43f ae54 	beq.w	80064d6 <_printf_float+0xb6>
 800682e:	f108 0801 	add.w	r8, r8, #1
 8006832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006834:	3b01      	subs	r3, #1
 8006836:	4543      	cmp	r3, r8
 8006838:	dcf1      	bgt.n	800681e <_printf_float+0x3fe>
 800683a:	4653      	mov	r3, sl
 800683c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006840:	e6de      	b.n	8006600 <_printf_float+0x1e0>
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	f104 091a 	add.w	r9, r4, #26
 800684a:	e7f2      	b.n	8006832 <_printf_float+0x412>
 800684c:	2301      	movs	r3, #1
 800684e:	4642      	mov	r2, r8
 8006850:	e7df      	b.n	8006812 <_printf_float+0x3f2>
 8006852:	2301      	movs	r3, #1
 8006854:	464a      	mov	r2, r9
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	47b8      	blx	r7
 800685c:	3001      	adds	r0, #1
 800685e:	f43f ae3a 	beq.w	80064d6 <_printf_float+0xb6>
 8006862:	f108 0801 	add.w	r8, r8, #1
 8006866:	68e3      	ldr	r3, [r4, #12]
 8006868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800686a:	1a5b      	subs	r3, r3, r1
 800686c:	4543      	cmp	r3, r8
 800686e:	dcf0      	bgt.n	8006852 <_printf_float+0x432>
 8006870:	e6fb      	b.n	800666a <_printf_float+0x24a>
 8006872:	f04f 0800 	mov.w	r8, #0
 8006876:	f104 0919 	add.w	r9, r4, #25
 800687a:	e7f4      	b.n	8006866 <_printf_float+0x446>

0800687c <_printf_common>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	4616      	mov	r6, r2
 8006882:	4699      	mov	r9, r3
 8006884:	688a      	ldr	r2, [r1, #8]
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	4607      	mov	r7, r0
 800688a:	4293      	cmp	r3, r2
 800688c:	bfb8      	it	lt
 800688e:	4613      	movlt	r3, r2
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006896:	460c      	mov	r4, r1
 8006898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800689c:	b10a      	cbz	r2, 80068a2 <_printf_common+0x26>
 800689e:	3301      	adds	r3, #1
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	0699      	lsls	r1, r3, #26
 80068a6:	bf42      	ittt	mi
 80068a8:	6833      	ldrmi	r3, [r6, #0]
 80068aa:	3302      	addmi	r3, #2
 80068ac:	6033      	strmi	r3, [r6, #0]
 80068ae:	6825      	ldr	r5, [r4, #0]
 80068b0:	f015 0506 	ands.w	r5, r5, #6
 80068b4:	d106      	bne.n	80068c4 <_printf_common+0x48>
 80068b6:	f104 0a19 	add.w	sl, r4, #25
 80068ba:	68e3      	ldr	r3, [r4, #12]
 80068bc:	6832      	ldr	r2, [r6, #0]
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	dc2b      	bgt.n	800691c <_printf_common+0xa0>
 80068c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068c8:	1e13      	subs	r3, r2, #0
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	bf18      	it	ne
 80068ce:	2301      	movne	r3, #1
 80068d0:	0692      	lsls	r2, r2, #26
 80068d2:	d430      	bmi.n	8006936 <_printf_common+0xba>
 80068d4:	4649      	mov	r1, r9
 80068d6:	4638      	mov	r0, r7
 80068d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068dc:	47c0      	blx	r8
 80068de:	3001      	adds	r0, #1
 80068e0:	d023      	beq.n	800692a <_printf_common+0xae>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	6922      	ldr	r2, [r4, #16]
 80068e6:	f003 0306 	and.w	r3, r3, #6
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	bf14      	ite	ne
 80068ee:	2500      	movne	r5, #0
 80068f0:	6833      	ldreq	r3, [r6, #0]
 80068f2:	f04f 0600 	mov.w	r6, #0
 80068f6:	bf08      	it	eq
 80068f8:	68e5      	ldreq	r5, [r4, #12]
 80068fa:	f104 041a 	add.w	r4, r4, #26
 80068fe:	bf08      	it	eq
 8006900:	1aed      	subeq	r5, r5, r3
 8006902:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006906:	bf08      	it	eq
 8006908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800690c:	4293      	cmp	r3, r2
 800690e:	bfc4      	itt	gt
 8006910:	1a9b      	subgt	r3, r3, r2
 8006912:	18ed      	addgt	r5, r5, r3
 8006914:	42b5      	cmp	r5, r6
 8006916:	d11a      	bne.n	800694e <_printf_common+0xd2>
 8006918:	2000      	movs	r0, #0
 800691a:	e008      	b.n	800692e <_printf_common+0xb2>
 800691c:	2301      	movs	r3, #1
 800691e:	4652      	mov	r2, sl
 8006920:	4649      	mov	r1, r9
 8006922:	4638      	mov	r0, r7
 8006924:	47c0      	blx	r8
 8006926:	3001      	adds	r0, #1
 8006928:	d103      	bne.n	8006932 <_printf_common+0xb6>
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	3501      	adds	r5, #1
 8006934:	e7c1      	b.n	80068ba <_printf_common+0x3e>
 8006936:	2030      	movs	r0, #48	; 0x30
 8006938:	18e1      	adds	r1, r4, r3
 800693a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006944:	4422      	add	r2, r4
 8006946:	3302      	adds	r3, #2
 8006948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800694c:	e7c2      	b.n	80068d4 <_printf_common+0x58>
 800694e:	2301      	movs	r3, #1
 8006950:	4622      	mov	r2, r4
 8006952:	4649      	mov	r1, r9
 8006954:	4638      	mov	r0, r7
 8006956:	47c0      	blx	r8
 8006958:	3001      	adds	r0, #1
 800695a:	d0e6      	beq.n	800692a <_printf_common+0xae>
 800695c:	3601      	adds	r6, #1
 800695e:	e7d9      	b.n	8006914 <_printf_common+0x98>

08006960 <_printf_i>:
 8006960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	7e0f      	ldrb	r7, [r1, #24]
 8006966:	4691      	mov	r9, r2
 8006968:	2f78      	cmp	r7, #120	; 0x78
 800696a:	4680      	mov	r8, r0
 800696c:	460c      	mov	r4, r1
 800696e:	469a      	mov	sl, r3
 8006970:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006976:	d807      	bhi.n	8006988 <_printf_i+0x28>
 8006978:	2f62      	cmp	r7, #98	; 0x62
 800697a:	d80a      	bhi.n	8006992 <_printf_i+0x32>
 800697c:	2f00      	cmp	r7, #0
 800697e:	f000 80d5 	beq.w	8006b2c <_printf_i+0x1cc>
 8006982:	2f58      	cmp	r7, #88	; 0x58
 8006984:	f000 80c1 	beq.w	8006b0a <_printf_i+0x1aa>
 8006988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800698c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006990:	e03a      	b.n	8006a08 <_printf_i+0xa8>
 8006992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006996:	2b15      	cmp	r3, #21
 8006998:	d8f6      	bhi.n	8006988 <_printf_i+0x28>
 800699a:	a101      	add	r1, pc, #4	; (adr r1, 80069a0 <_printf_i+0x40>)
 800699c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a0:	080069f9 	.word	0x080069f9
 80069a4:	08006a0d 	.word	0x08006a0d
 80069a8:	08006989 	.word	0x08006989
 80069ac:	08006989 	.word	0x08006989
 80069b0:	08006989 	.word	0x08006989
 80069b4:	08006989 	.word	0x08006989
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006989 	.word	0x08006989
 80069c0:	08006989 	.word	0x08006989
 80069c4:	08006989 	.word	0x08006989
 80069c8:	08006989 	.word	0x08006989
 80069cc:	08006b13 	.word	0x08006b13
 80069d0:	08006a39 	.word	0x08006a39
 80069d4:	08006acd 	.word	0x08006acd
 80069d8:	08006989 	.word	0x08006989
 80069dc:	08006989 	.word	0x08006989
 80069e0:	08006b35 	.word	0x08006b35
 80069e4:	08006989 	.word	0x08006989
 80069e8:	08006a39 	.word	0x08006a39
 80069ec:	08006989 	.word	0x08006989
 80069f0:	08006989 	.word	0x08006989
 80069f4:	08006ad5 	.word	0x08006ad5
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	1d1a      	adds	r2, r3, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	602a      	str	r2, [r5, #0]
 8006a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0a0      	b.n	8006b4e <_printf_i+0x1ee>
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	0607      	lsls	r7, r0, #24
 8006a12:	f103 0104 	add.w	r1, r3, #4
 8006a16:	6029      	str	r1, [r5, #0]
 8006a18:	d501      	bpl.n	8006a1e <_printf_i+0xbe>
 8006a1a:	681e      	ldr	r6, [r3, #0]
 8006a1c:	e003      	b.n	8006a26 <_printf_i+0xc6>
 8006a1e:	0646      	lsls	r6, r0, #25
 8006a20:	d5fb      	bpl.n	8006a1a <_printf_i+0xba>
 8006a22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a26:	2e00      	cmp	r6, #0
 8006a28:	da03      	bge.n	8006a32 <_printf_i+0xd2>
 8006a2a:	232d      	movs	r3, #45	; 0x2d
 8006a2c:	4276      	negs	r6, r6
 8006a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a32:	230a      	movs	r3, #10
 8006a34:	4859      	ldr	r0, [pc, #356]	; (8006b9c <_printf_i+0x23c>)
 8006a36:	e012      	b.n	8006a5e <_printf_i+0xfe>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	6820      	ldr	r0, [r4, #0]
 8006a3c:	1d19      	adds	r1, r3, #4
 8006a3e:	6029      	str	r1, [r5, #0]
 8006a40:	0605      	lsls	r5, r0, #24
 8006a42:	d501      	bpl.n	8006a48 <_printf_i+0xe8>
 8006a44:	681e      	ldr	r6, [r3, #0]
 8006a46:	e002      	b.n	8006a4e <_printf_i+0xee>
 8006a48:	0641      	lsls	r1, r0, #25
 8006a4a:	d5fb      	bpl.n	8006a44 <_printf_i+0xe4>
 8006a4c:	881e      	ldrh	r6, [r3, #0]
 8006a4e:	2f6f      	cmp	r7, #111	; 0x6f
 8006a50:	bf0c      	ite	eq
 8006a52:	2308      	moveq	r3, #8
 8006a54:	230a      	movne	r3, #10
 8006a56:	4851      	ldr	r0, [pc, #324]	; (8006b9c <_printf_i+0x23c>)
 8006a58:	2100      	movs	r1, #0
 8006a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a5e:	6865      	ldr	r5, [r4, #4]
 8006a60:	2d00      	cmp	r5, #0
 8006a62:	bfa8      	it	ge
 8006a64:	6821      	ldrge	r1, [r4, #0]
 8006a66:	60a5      	str	r5, [r4, #8]
 8006a68:	bfa4      	itt	ge
 8006a6a:	f021 0104 	bicge.w	r1, r1, #4
 8006a6e:	6021      	strge	r1, [r4, #0]
 8006a70:	b90e      	cbnz	r6, 8006a76 <_printf_i+0x116>
 8006a72:	2d00      	cmp	r5, #0
 8006a74:	d04b      	beq.n	8006b0e <_printf_i+0x1ae>
 8006a76:	4615      	mov	r5, r2
 8006a78:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a7c:	fb03 6711 	mls	r7, r3, r1, r6
 8006a80:	5dc7      	ldrb	r7, [r0, r7]
 8006a82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a86:	4637      	mov	r7, r6
 8006a88:	42bb      	cmp	r3, r7
 8006a8a:	460e      	mov	r6, r1
 8006a8c:	d9f4      	bls.n	8006a78 <_printf_i+0x118>
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d10b      	bne.n	8006aaa <_printf_i+0x14a>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	07de      	lsls	r6, r3, #31
 8006a96:	d508      	bpl.n	8006aaa <_printf_i+0x14a>
 8006a98:	6923      	ldr	r3, [r4, #16]
 8006a9a:	6861      	ldr	r1, [r4, #4]
 8006a9c:	4299      	cmp	r1, r3
 8006a9e:	bfde      	ittt	le
 8006aa0:	2330      	movle	r3, #48	; 0x30
 8006aa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006aa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aaa:	1b52      	subs	r2, r2, r5
 8006aac:	6122      	str	r2, [r4, #16]
 8006aae:	464b      	mov	r3, r9
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f8cd a000 	str.w	sl, [sp]
 8006ab8:	aa03      	add	r2, sp, #12
 8006aba:	f7ff fedf 	bl	800687c <_printf_common>
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d14a      	bne.n	8006b58 <_printf_i+0x1f8>
 8006ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac6:	b004      	add	sp, #16
 8006ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	f043 0320 	orr.w	r3, r3, #32
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	2778      	movs	r7, #120	; 0x78
 8006ad6:	4832      	ldr	r0, [pc, #200]	; (8006ba0 <_printf_i+0x240>)
 8006ad8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	6829      	ldr	r1, [r5, #0]
 8006ae0:	061f      	lsls	r7, r3, #24
 8006ae2:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ae6:	d402      	bmi.n	8006aee <_printf_i+0x18e>
 8006ae8:	065f      	lsls	r7, r3, #25
 8006aea:	bf48      	it	mi
 8006aec:	b2b6      	uxthmi	r6, r6
 8006aee:	07df      	lsls	r7, r3, #31
 8006af0:	bf48      	it	mi
 8006af2:	f043 0320 	orrmi.w	r3, r3, #32
 8006af6:	6029      	str	r1, [r5, #0]
 8006af8:	bf48      	it	mi
 8006afa:	6023      	strmi	r3, [r4, #0]
 8006afc:	b91e      	cbnz	r6, 8006b06 <_printf_i+0x1a6>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	f023 0320 	bic.w	r3, r3, #32
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	2310      	movs	r3, #16
 8006b08:	e7a6      	b.n	8006a58 <_printf_i+0xf8>
 8006b0a:	4824      	ldr	r0, [pc, #144]	; (8006b9c <_printf_i+0x23c>)
 8006b0c:	e7e4      	b.n	8006ad8 <_printf_i+0x178>
 8006b0e:	4615      	mov	r5, r2
 8006b10:	e7bd      	b.n	8006a8e <_printf_i+0x12e>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	6826      	ldr	r6, [r4, #0]
 8006b16:	1d18      	adds	r0, r3, #4
 8006b18:	6961      	ldr	r1, [r4, #20]
 8006b1a:	6028      	str	r0, [r5, #0]
 8006b1c:	0635      	lsls	r5, r6, #24
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	d501      	bpl.n	8006b26 <_printf_i+0x1c6>
 8006b22:	6019      	str	r1, [r3, #0]
 8006b24:	e002      	b.n	8006b2c <_printf_i+0x1cc>
 8006b26:	0670      	lsls	r0, r6, #25
 8006b28:	d5fb      	bpl.n	8006b22 <_printf_i+0x1c2>
 8006b2a:	8019      	strh	r1, [r3, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4615      	mov	r5, r2
 8006b30:	6123      	str	r3, [r4, #16]
 8006b32:	e7bc      	b.n	8006aae <_printf_i+0x14e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	2100      	movs	r1, #0
 8006b38:	1d1a      	adds	r2, r3, #4
 8006b3a:	602a      	str	r2, [r5, #0]
 8006b3c:	681d      	ldr	r5, [r3, #0]
 8006b3e:	6862      	ldr	r2, [r4, #4]
 8006b40:	4628      	mov	r0, r5
 8006b42:	f000 f9d4 	bl	8006eee <memchr>
 8006b46:	b108      	cbz	r0, 8006b4c <_printf_i+0x1ec>
 8006b48:	1b40      	subs	r0, r0, r5
 8006b4a:	6060      	str	r0, [r4, #4]
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	6123      	str	r3, [r4, #16]
 8006b50:	2300      	movs	r3, #0
 8006b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b56:	e7aa      	b.n	8006aae <_printf_i+0x14e>
 8006b58:	462a      	mov	r2, r5
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	47d0      	blx	sl
 8006b62:	3001      	adds	r0, #1
 8006b64:	d0ad      	beq.n	8006ac2 <_printf_i+0x162>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	079b      	lsls	r3, r3, #30
 8006b6a:	d413      	bmi.n	8006b94 <_printf_i+0x234>
 8006b6c:	68e0      	ldr	r0, [r4, #12]
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	4298      	cmp	r0, r3
 8006b72:	bfb8      	it	lt
 8006b74:	4618      	movlt	r0, r3
 8006b76:	e7a6      	b.n	8006ac6 <_printf_i+0x166>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	4640      	mov	r0, r8
 8006b80:	47d0      	blx	sl
 8006b82:	3001      	adds	r0, #1
 8006b84:	d09d      	beq.n	8006ac2 <_printf_i+0x162>
 8006b86:	3501      	adds	r5, #1
 8006b88:	68e3      	ldr	r3, [r4, #12]
 8006b8a:	9903      	ldr	r1, [sp, #12]
 8006b8c:	1a5b      	subs	r3, r3, r1
 8006b8e:	42ab      	cmp	r3, r5
 8006b90:	dcf2      	bgt.n	8006b78 <_printf_i+0x218>
 8006b92:	e7eb      	b.n	8006b6c <_printf_i+0x20c>
 8006b94:	2500      	movs	r5, #0
 8006b96:	f104 0619 	add.w	r6, r4, #25
 8006b9a:	e7f5      	b.n	8006b88 <_printf_i+0x228>
 8006b9c:	0800903e 	.word	0x0800903e
 8006ba0:	0800904f 	.word	0x0800904f

08006ba4 <std>:
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	4604      	mov	r4, r0
 8006baa:	e9c0 3300 	strd	r3, r3, [r0]
 8006bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bb2:	6083      	str	r3, [r0, #8]
 8006bb4:	8181      	strh	r1, [r0, #12]
 8006bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8006bb8:	81c2      	strh	r2, [r0, #14]
 8006bba:	6183      	str	r3, [r0, #24]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	305c      	adds	r0, #92	; 0x5c
 8006bc2:	f000 f914 	bl	8006dee <memset>
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <std+0x58>)
 8006bc8:	6224      	str	r4, [r4, #32]
 8006bca:	6263      	str	r3, [r4, #36]	; 0x24
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <std+0x5c>)
 8006bce:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <std+0x60>)
 8006bd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <std+0x64>)
 8006bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <std+0x68>)
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d006      	beq.n	8006bec <std+0x48>
 8006bde:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006be2:	4294      	cmp	r4, r2
 8006be4:	d002      	beq.n	8006bec <std+0x48>
 8006be6:	33d0      	adds	r3, #208	; 0xd0
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d105      	bne.n	8006bf8 <std+0x54>
 8006bec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf4:	f000 b978 	b.w	8006ee8 <__retarget_lock_init_recursive>
 8006bf8:	bd10      	pop	{r4, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08006d69 	.word	0x08006d69
 8006c00:	08006d8b 	.word	0x08006d8b
 8006c04:	08006dc3 	.word	0x08006dc3
 8006c08:	08006de7 	.word	0x08006de7
 8006c0c:	20000464 	.word	0x20000464

08006c10 <stdio_exit_handler>:
 8006c10:	4a02      	ldr	r2, [pc, #8]	; (8006c1c <stdio_exit_handler+0xc>)
 8006c12:	4903      	ldr	r1, [pc, #12]	; (8006c20 <stdio_exit_handler+0x10>)
 8006c14:	4803      	ldr	r0, [pc, #12]	; (8006c24 <stdio_exit_handler+0x14>)
 8006c16:	f000 b869 	b.w	8006cec <_fwalk_sglue>
 8006c1a:	bf00      	nop
 8006c1c:	20000010 	.word	0x20000010
 8006c20:	08008885 	.word	0x08008885
 8006c24:	2000001c 	.word	0x2000001c

08006c28 <cleanup_stdio>:
 8006c28:	6841      	ldr	r1, [r0, #4]
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <cleanup_stdio+0x34>)
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4299      	cmp	r1, r3
 8006c30:	4604      	mov	r4, r0
 8006c32:	d001      	beq.n	8006c38 <cleanup_stdio+0x10>
 8006c34:	f001 fe26 	bl	8008884 <_fflush_r>
 8006c38:	68a1      	ldr	r1, [r4, #8]
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <cleanup_stdio+0x38>)
 8006c3c:	4299      	cmp	r1, r3
 8006c3e:	d002      	beq.n	8006c46 <cleanup_stdio+0x1e>
 8006c40:	4620      	mov	r0, r4
 8006c42:	f001 fe1f 	bl	8008884 <_fflush_r>
 8006c46:	68e1      	ldr	r1, [r4, #12]
 8006c48:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <cleanup_stdio+0x3c>)
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	d004      	beq.n	8006c58 <cleanup_stdio+0x30>
 8006c4e:	4620      	mov	r0, r4
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c54:	f001 be16 	b.w	8008884 <_fflush_r>
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000464 	.word	0x20000464
 8006c60:	200004cc 	.word	0x200004cc
 8006c64:	20000534 	.word	0x20000534

08006c68 <global_stdio_init.part.0>:
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <global_stdio_init.part.0+0x30>)
 8006c6c:	4c0b      	ldr	r4, [pc, #44]	; (8006c9c <global_stdio_init.part.0+0x34>)
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ca0 <global_stdio_init.part.0+0x38>)
 8006c70:	4620      	mov	r0, r4
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	2104      	movs	r1, #4
 8006c76:	2200      	movs	r2, #0
 8006c78:	f7ff ff94 	bl	8006ba4 <std>
 8006c7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c80:	2201      	movs	r2, #1
 8006c82:	2109      	movs	r1, #9
 8006c84:	f7ff ff8e 	bl	8006ba4 <std>
 8006c88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c92:	2112      	movs	r1, #18
 8006c94:	f7ff bf86 	b.w	8006ba4 <std>
 8006c98:	2000059c 	.word	0x2000059c
 8006c9c:	20000464 	.word	0x20000464
 8006ca0:	08006c11 	.word	0x08006c11

08006ca4 <__sfp_lock_acquire>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	; (8006cac <__sfp_lock_acquire+0x8>)
 8006ca6:	f000 b920 	b.w	8006eea <__retarget_lock_acquire_recursive>
 8006caa:	bf00      	nop
 8006cac:	200005a5 	.word	0x200005a5

08006cb0 <__sfp_lock_release>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	; (8006cb8 <__sfp_lock_release+0x8>)
 8006cb2:	f000 b91b 	b.w	8006eec <__retarget_lock_release_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	200005a5 	.word	0x200005a5

08006cbc <__sinit>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	f7ff fff0 	bl	8006ca4 <__sfp_lock_acquire>
 8006cc4:	6a23      	ldr	r3, [r4, #32]
 8006cc6:	b11b      	cbz	r3, 8006cd0 <__sinit+0x14>
 8006cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ccc:	f7ff bff0 	b.w	8006cb0 <__sfp_lock_release>
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <__sinit+0x28>)
 8006cd2:	6223      	str	r3, [r4, #32]
 8006cd4:	4b04      	ldr	r3, [pc, #16]	; (8006ce8 <__sinit+0x2c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f5      	bne.n	8006cc8 <__sinit+0xc>
 8006cdc:	f7ff ffc4 	bl	8006c68 <global_stdio_init.part.0>
 8006ce0:	e7f2      	b.n	8006cc8 <__sinit+0xc>
 8006ce2:	bf00      	nop
 8006ce4:	08006c29 	.word	0x08006c29
 8006ce8:	2000059c 	.word	0x2000059c

08006cec <_fwalk_sglue>:
 8006cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	4688      	mov	r8, r1
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8006d00:	d505      	bpl.n	8006d0e <_fwalk_sglue+0x22>
 8006d02:	6824      	ldr	r4, [r4, #0]
 8006d04:	2c00      	cmp	r4, #0
 8006d06:	d1f7      	bne.n	8006cf8 <_fwalk_sglue+0xc>
 8006d08:	4630      	mov	r0, r6
 8006d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	89ab      	ldrh	r3, [r5, #12]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d907      	bls.n	8006d24 <_fwalk_sglue+0x38>
 8006d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	d003      	beq.n	8006d24 <_fwalk_sglue+0x38>
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4638      	mov	r0, r7
 8006d20:	47c0      	blx	r8
 8006d22:	4306      	orrs	r6, r0
 8006d24:	3568      	adds	r5, #104	; 0x68
 8006d26:	e7e9      	b.n	8006cfc <_fwalk_sglue+0x10>

08006d28 <siprintf>:
 8006d28:	b40e      	push	{r1, r2, r3}
 8006d2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d2e:	b500      	push	{lr}
 8006d30:	b09c      	sub	sp, #112	; 0x70
 8006d32:	ab1d      	add	r3, sp, #116	; 0x74
 8006d34:	9002      	str	r0, [sp, #8]
 8006d36:	9006      	str	r0, [sp, #24]
 8006d38:	9107      	str	r1, [sp, #28]
 8006d3a:	9104      	str	r1, [sp, #16]
 8006d3c:	4808      	ldr	r0, [pc, #32]	; (8006d60 <siprintf+0x38>)
 8006d3e:	4909      	ldr	r1, [pc, #36]	; (8006d64 <siprintf+0x3c>)
 8006d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d44:	9105      	str	r1, [sp, #20]
 8006d46:	6800      	ldr	r0, [r0, #0]
 8006d48:	a902      	add	r1, sp, #8
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	f001 fc1a 	bl	8008584 <_svfiprintf_r>
 8006d50:	2200      	movs	r2, #0
 8006d52:	9b02      	ldr	r3, [sp, #8]
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	b01c      	add	sp, #112	; 0x70
 8006d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d5c:	b003      	add	sp, #12
 8006d5e:	4770      	bx	lr
 8006d60:	20000068 	.word	0x20000068
 8006d64:	ffff0208 	.word	0xffff0208

08006d68 <__sread>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d70:	f000 f86c 	bl	8006e4c <_read_r>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	bfab      	itete	ge
 8006d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d7c:	181b      	addge	r3, r3, r0
 8006d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d82:	bfac      	ite	ge
 8006d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d86:	81a3      	strhlt	r3, [r4, #12]
 8006d88:	bd10      	pop	{r4, pc}

08006d8a <__swrite>:
 8006d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8e:	461f      	mov	r7, r3
 8006d90:	898b      	ldrh	r3, [r1, #12]
 8006d92:	4605      	mov	r5, r0
 8006d94:	05db      	lsls	r3, r3, #23
 8006d96:	460c      	mov	r4, r1
 8006d98:	4616      	mov	r6, r2
 8006d9a:	d505      	bpl.n	8006da8 <__swrite+0x1e>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da4:	f000 f840 	bl	8006e28 <_lseek_r>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	4632      	mov	r2, r6
 8006dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	4628      	mov	r0, r5
 8006db4:	463b      	mov	r3, r7
 8006db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	f000 b857 	b.w	8006e70 <_write_r>

08006dc2 <__sseek>:
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dca:	f000 f82d 	bl	8006e28 <_lseek_r>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	bf15      	itete	ne
 8006dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dde:	81a3      	strheq	r3, [r4, #12]
 8006de0:	bf18      	it	ne
 8006de2:	81a3      	strhne	r3, [r4, #12]
 8006de4:	bd10      	pop	{r4, pc}

08006de6 <__sclose>:
 8006de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dea:	f000 b80d 	b.w	8006e08 <_close_r>

08006dee <memset>:
 8006dee:	4603      	mov	r3, r0
 8006df0:	4402      	add	r2, r0
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d100      	bne.n	8006df8 <memset+0xa>
 8006df6:	4770      	bx	lr
 8006df8:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfc:	e7f9      	b.n	8006df2 <memset+0x4>
	...

08006e00 <_localeconv_r>:
 8006e00:	4800      	ldr	r0, [pc, #0]	; (8006e04 <_localeconv_r+0x4>)
 8006e02:	4770      	bx	lr
 8006e04:	2000015c 	.word	0x2000015c

08006e08 <_close_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4d05      	ldr	r5, [pc, #20]	; (8006e24 <_close_r+0x1c>)
 8006e0e:	4604      	mov	r4, r0
 8006e10:	4608      	mov	r0, r1
 8006e12:	602b      	str	r3, [r5, #0]
 8006e14:	f7fb fd18 	bl	8002848 <_close>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_close_r+0x1a>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_close_r+0x1a>
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	200005a0 	.word	0x200005a0

08006e28 <_lseek_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	2200      	movs	r2, #0
 8006e32:	4d05      	ldr	r5, [pc, #20]	; (8006e48 <_lseek_r+0x20>)
 8006e34:	602a      	str	r2, [r5, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f7fb fd2a 	bl	8002890 <_lseek>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_lseek_r+0x1e>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_lseek_r+0x1e>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	200005a0 	.word	0x200005a0

08006e4c <_read_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	4611      	mov	r1, r2
 8006e54:	2200      	movs	r2, #0
 8006e56:	4d05      	ldr	r5, [pc, #20]	; (8006e6c <_read_r+0x20>)
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fb fcbb 	bl	80027d6 <_read>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_read_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_read_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	200005a0 	.word	0x200005a0

08006e70 <_write_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	4611      	mov	r1, r2
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4d05      	ldr	r5, [pc, #20]	; (8006e90 <_write_r+0x20>)
 8006e7c:	602a      	str	r2, [r5, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f7fb fcc6 	bl	8002810 <_write>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_write_r+0x1e>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_write_r+0x1e>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	200005a0 	.word	0x200005a0

08006e94 <__errno>:
 8006e94:	4b01      	ldr	r3, [pc, #4]	; (8006e9c <__errno+0x8>)
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000068 	.word	0x20000068

08006ea0 <__libc_init_array>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	4d0c      	ldr	r5, [pc, #48]	; (8006ed8 <__libc_init_array+0x38>)
 8006ea6:	4c0d      	ldr	r4, [pc, #52]	; (8006edc <__libc_init_array+0x3c>)
 8006ea8:	1b64      	subs	r4, r4, r5
 8006eaa:	10a4      	asrs	r4, r4, #2
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	d109      	bne.n	8006ec4 <__libc_init_array+0x24>
 8006eb0:	f002 f888 	bl	8008fc4 <_init>
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	4d0a      	ldr	r5, [pc, #40]	; (8006ee0 <__libc_init_array+0x40>)
 8006eb8:	4c0a      	ldr	r4, [pc, #40]	; (8006ee4 <__libc_init_array+0x44>)
 8006eba:	1b64      	subs	r4, r4, r5
 8006ebc:	10a4      	asrs	r4, r4, #2
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	d105      	bne.n	8006ece <__libc_init_array+0x2e>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec8:	4798      	blx	r3
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7ee      	b.n	8006eac <__libc_init_array+0xc>
 8006ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed2:	4798      	blx	r3
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7f2      	b.n	8006ebe <__libc_init_array+0x1e>
 8006ed8:	080093a4 	.word	0x080093a4
 8006edc:	080093a4 	.word	0x080093a4
 8006ee0:	080093a4 	.word	0x080093a4
 8006ee4:	080093a8 	.word	0x080093a8

08006ee8 <__retarget_lock_init_recursive>:
 8006ee8:	4770      	bx	lr

08006eea <__retarget_lock_acquire_recursive>:
 8006eea:	4770      	bx	lr

08006eec <__retarget_lock_release_recursive>:
 8006eec:	4770      	bx	lr

08006eee <memchr>:
 8006eee:	4603      	mov	r3, r0
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	b2c9      	uxtb	r1, r1
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	d101      	bne.n	8006f00 <memchr+0x12>
 8006efc:	2000      	movs	r0, #0
 8006efe:	e003      	b.n	8006f08 <memchr+0x1a>
 8006f00:	7804      	ldrb	r4, [r0, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	428c      	cmp	r4, r1
 8006f06:	d1f6      	bne.n	8006ef6 <memchr+0x8>
 8006f08:	bd10      	pop	{r4, pc}

08006f0a <quorem>:
 8006f0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0e:	6903      	ldr	r3, [r0, #16]
 8006f10:	690c      	ldr	r4, [r1, #16]
 8006f12:	4607      	mov	r7, r0
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	db7f      	blt.n	8007018 <quorem+0x10e>
 8006f18:	3c01      	subs	r4, #1
 8006f1a:	f100 0514 	add.w	r5, r0, #20
 8006f1e:	f101 0814 	add.w	r8, r1, #20
 8006f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f30:	3301      	adds	r3, #1
 8006f32:	429a      	cmp	r2, r3
 8006f34:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f40:	d331      	bcc.n	8006fa6 <quorem+0x9c>
 8006f42:	f04f 0e00 	mov.w	lr, #0
 8006f46:	4640      	mov	r0, r8
 8006f48:	46ac      	mov	ip, r5
 8006f4a:	46f2      	mov	sl, lr
 8006f4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f50:	b293      	uxth	r3, r2
 8006f52:	fb06 e303 	mla	r3, r6, r3, lr
 8006f56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f5a:	0c1a      	lsrs	r2, r3, #16
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	fb06 220e 	mla	r2, r6, lr, r2
 8006f62:	ebaa 0303 	sub.w	r3, sl, r3
 8006f66:	f8dc a000 	ldr.w	sl, [ip]
 8006f6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f6e:	fa1f fa8a 	uxth.w	sl, sl
 8006f72:	4453      	add	r3, sl
 8006f74:	f8dc a000 	ldr.w	sl, [ip]
 8006f78:	b292      	uxth	r2, r2
 8006f7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f88:	4581      	cmp	r9, r0
 8006f8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f8e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f92:	d2db      	bcs.n	8006f4c <quorem+0x42>
 8006f94:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f98:	b92b      	cbnz	r3, 8006fa6 <quorem+0x9c>
 8006f9a:	9b01      	ldr	r3, [sp, #4]
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	d32d      	bcc.n	8007000 <quorem+0xf6>
 8006fa4:	613c      	str	r4, [r7, #16]
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f001 f994 	bl	80082d4 <__mcmp>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	db23      	blt.n	8006ff8 <quorem+0xee>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	3601      	adds	r6, #1
 8006fb6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fba:	f8d1 c000 	ldr.w	ip, [r1]
 8006fbe:	b293      	uxth	r3, r2
 8006fc0:	1ac3      	subs	r3, r0, r3
 8006fc2:	0c12      	lsrs	r2, r2, #16
 8006fc4:	fa1f f08c 	uxth.w	r0, ip
 8006fc8:	4403      	add	r3, r0
 8006fca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006fce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fd8:	45c1      	cmp	r9, r8
 8006fda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fde:	f841 3b04 	str.w	r3, [r1], #4
 8006fe2:	d2e8      	bcs.n	8006fb6 <quorem+0xac>
 8006fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fe8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fec:	b922      	cbnz	r2, 8006ff8 <quorem+0xee>
 8006fee:	3b04      	subs	r3, #4
 8006ff0:	429d      	cmp	r5, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	d30a      	bcc.n	800700c <quorem+0x102>
 8006ff6:	613c      	str	r4, [r7, #16]
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	b003      	add	sp, #12
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	3b04      	subs	r3, #4
 8007004:	2a00      	cmp	r2, #0
 8007006:	d1cd      	bne.n	8006fa4 <quorem+0x9a>
 8007008:	3c01      	subs	r4, #1
 800700a:	e7c8      	b.n	8006f9e <quorem+0x94>
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	3b04      	subs	r3, #4
 8007010:	2a00      	cmp	r2, #0
 8007012:	d1f0      	bne.n	8006ff6 <quorem+0xec>
 8007014:	3c01      	subs	r4, #1
 8007016:	e7eb      	b.n	8006ff0 <quorem+0xe6>
 8007018:	2000      	movs	r0, #0
 800701a:	e7ee      	b.n	8006ffa <quorem+0xf0>
 800701c:	0000      	movs	r0, r0
	...

08007020 <_dtoa_r>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	4616      	mov	r6, r2
 8007026:	461f      	mov	r7, r3
 8007028:	69c4      	ldr	r4, [r0, #28]
 800702a:	b099      	sub	sp, #100	; 0x64
 800702c:	4605      	mov	r5, r0
 800702e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007032:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007036:	b974      	cbnz	r4, 8007056 <_dtoa_r+0x36>
 8007038:	2010      	movs	r0, #16
 800703a:	f000 fe1d 	bl	8007c78 <malloc>
 800703e:	4602      	mov	r2, r0
 8007040:	61e8      	str	r0, [r5, #28]
 8007042:	b920      	cbnz	r0, 800704e <_dtoa_r+0x2e>
 8007044:	21ef      	movs	r1, #239	; 0xef
 8007046:	4bac      	ldr	r3, [pc, #688]	; (80072f8 <_dtoa_r+0x2d8>)
 8007048:	48ac      	ldr	r0, [pc, #688]	; (80072fc <_dtoa_r+0x2dc>)
 800704a:	f001 fc7b 	bl	8008944 <__assert_func>
 800704e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007052:	6004      	str	r4, [r0, #0]
 8007054:	60c4      	str	r4, [r0, #12]
 8007056:	69eb      	ldr	r3, [r5, #28]
 8007058:	6819      	ldr	r1, [r3, #0]
 800705a:	b151      	cbz	r1, 8007072 <_dtoa_r+0x52>
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	2301      	movs	r3, #1
 8007060:	4093      	lsls	r3, r2
 8007062:	604a      	str	r2, [r1, #4]
 8007064:	608b      	str	r3, [r1, #8]
 8007066:	4628      	mov	r0, r5
 8007068:	f000 fefa 	bl	8007e60 <_Bfree>
 800706c:	2200      	movs	r2, #0
 800706e:	69eb      	ldr	r3, [r5, #28]
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	1e3b      	subs	r3, r7, #0
 8007074:	bfaf      	iteee	ge
 8007076:	2300      	movge	r3, #0
 8007078:	2201      	movlt	r2, #1
 800707a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800707e:	9305      	strlt	r3, [sp, #20]
 8007080:	bfa8      	it	ge
 8007082:	f8c8 3000 	strge.w	r3, [r8]
 8007086:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800708a:	4b9d      	ldr	r3, [pc, #628]	; (8007300 <_dtoa_r+0x2e0>)
 800708c:	bfb8      	it	lt
 800708e:	f8c8 2000 	strlt.w	r2, [r8]
 8007092:	ea33 0309 	bics.w	r3, r3, r9
 8007096:	d119      	bne.n	80070cc <_dtoa_r+0xac>
 8007098:	f242 730f 	movw	r3, #9999	; 0x270f
 800709c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070a4:	4333      	orrs	r3, r6
 80070a6:	f000 8589 	beq.w	8007bbc <_dtoa_r+0xb9c>
 80070aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070ac:	b953      	cbnz	r3, 80070c4 <_dtoa_r+0xa4>
 80070ae:	4b95      	ldr	r3, [pc, #596]	; (8007304 <_dtoa_r+0x2e4>)
 80070b0:	e023      	b.n	80070fa <_dtoa_r+0xda>
 80070b2:	4b95      	ldr	r3, [pc, #596]	; (8007308 <_dtoa_r+0x2e8>)
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	3308      	adds	r3, #8
 80070b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	9803      	ldr	r0, [sp, #12]
 80070be:	b019      	add	sp, #100	; 0x64
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c4:	4b8f      	ldr	r3, [pc, #572]	; (8007304 <_dtoa_r+0x2e4>)
 80070c6:	9303      	str	r3, [sp, #12]
 80070c8:	3303      	adds	r3, #3
 80070ca:	e7f5      	b.n	80070b8 <_dtoa_r+0x98>
 80070cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80070d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070d8:	2200      	movs	r2, #0
 80070da:	2300      	movs	r3, #0
 80070dc:	f7f9 fd84 	bl	8000be8 <__aeabi_dcmpeq>
 80070e0:	4680      	mov	r8, r0
 80070e2:	b160      	cbz	r0, 80070fe <_dtoa_r+0xde>
 80070e4:	2301      	movs	r3, #1
 80070e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8562 	beq.w	8007bb6 <_dtoa_r+0xb96>
 80070f2:	4b86      	ldr	r3, [pc, #536]	; (800730c <_dtoa_r+0x2ec>)
 80070f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	9303      	str	r3, [sp, #12]
 80070fc:	e7de      	b.n	80070bc <_dtoa_r+0x9c>
 80070fe:	ab16      	add	r3, sp, #88	; 0x58
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	ab17      	add	r3, sp, #92	; 0x5c
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4628      	mov	r0, r5
 8007108:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800710c:	f001 f98a 	bl	8008424 <__d2b>
 8007110:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007114:	4682      	mov	sl, r0
 8007116:	2c00      	cmp	r4, #0
 8007118:	d07e      	beq.n	8007218 <_dtoa_r+0x1f8>
 800711a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800711e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007120:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007128:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800712c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007130:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007134:	4619      	mov	r1, r3
 8007136:	2200      	movs	r2, #0
 8007138:	4b75      	ldr	r3, [pc, #468]	; (8007310 <_dtoa_r+0x2f0>)
 800713a:	f7f9 f935 	bl	80003a8 <__aeabi_dsub>
 800713e:	a368      	add	r3, pc, #416	; (adr r3, 80072e0 <_dtoa_r+0x2c0>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f7f9 fae8 	bl	8000718 <__aeabi_dmul>
 8007148:	a367      	add	r3, pc, #412	; (adr r3, 80072e8 <_dtoa_r+0x2c8>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f92d 	bl	80003ac <__adddf3>
 8007152:	4606      	mov	r6, r0
 8007154:	4620      	mov	r0, r4
 8007156:	460f      	mov	r7, r1
 8007158:	f7f9 fa74 	bl	8000644 <__aeabi_i2d>
 800715c:	a364      	add	r3, pc, #400	; (adr r3, 80072f0 <_dtoa_r+0x2d0>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	f7f9 fad9 	bl	8000718 <__aeabi_dmul>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	f7f9 f91d 	bl	80003ac <__adddf3>
 8007172:	4606      	mov	r6, r0
 8007174:	460f      	mov	r7, r1
 8007176:	f7f9 fd7f 	bl	8000c78 <__aeabi_d2iz>
 800717a:	2200      	movs	r2, #0
 800717c:	4683      	mov	fp, r0
 800717e:	2300      	movs	r3, #0
 8007180:	4630      	mov	r0, r6
 8007182:	4639      	mov	r1, r7
 8007184:	f7f9 fd3a 	bl	8000bfc <__aeabi_dcmplt>
 8007188:	b148      	cbz	r0, 800719e <_dtoa_r+0x17e>
 800718a:	4658      	mov	r0, fp
 800718c:	f7f9 fa5a 	bl	8000644 <__aeabi_i2d>
 8007190:	4632      	mov	r2, r6
 8007192:	463b      	mov	r3, r7
 8007194:	f7f9 fd28 	bl	8000be8 <__aeabi_dcmpeq>
 8007198:	b908      	cbnz	r0, 800719e <_dtoa_r+0x17e>
 800719a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800719e:	f1bb 0f16 	cmp.w	fp, #22
 80071a2:	d857      	bhi.n	8007254 <_dtoa_r+0x234>
 80071a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071a8:	4b5a      	ldr	r3, [pc, #360]	; (8007314 <_dtoa_r+0x2f4>)
 80071aa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 fd23 	bl	8000bfc <__aeabi_dcmplt>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d04e      	beq.n	8007258 <_dtoa_r+0x238>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071c4:	1b1b      	subs	r3, r3, r4
 80071c6:	1e5a      	subs	r2, r3, #1
 80071c8:	bf46      	itte	mi
 80071ca:	f1c3 0901 	rsbmi	r9, r3, #1
 80071ce:	2300      	movmi	r3, #0
 80071d0:	f04f 0900 	movpl.w	r9, #0
 80071d4:	9209      	str	r2, [sp, #36]	; 0x24
 80071d6:	bf48      	it	mi
 80071d8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80071da:	f1bb 0f00 	cmp.w	fp, #0
 80071de:	db3d      	blt.n	800725c <_dtoa_r+0x23c>
 80071e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80071e6:	445b      	add	r3, fp
 80071e8:	9309      	str	r3, [sp, #36]	; 0x24
 80071ea:	2300      	movs	r3, #0
 80071ec:	930a      	str	r3, [sp, #40]	; 0x28
 80071ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071f0:	2b09      	cmp	r3, #9
 80071f2:	d867      	bhi.n	80072c4 <_dtoa_r+0x2a4>
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	bfc4      	itt	gt
 80071f8:	3b04      	subgt	r3, #4
 80071fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80071fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071fe:	bfc8      	it	gt
 8007200:	2400      	movgt	r4, #0
 8007202:	f1a3 0302 	sub.w	r3, r3, #2
 8007206:	bfd8      	it	le
 8007208:	2401      	movle	r4, #1
 800720a:	2b03      	cmp	r3, #3
 800720c:	f200 8086 	bhi.w	800731c <_dtoa_r+0x2fc>
 8007210:	e8df f003 	tbb	[pc, r3]
 8007214:	5637392c 	.word	0x5637392c
 8007218:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800721c:	441c      	add	r4, r3
 800721e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007222:	2b20      	cmp	r3, #32
 8007224:	bfc1      	itttt	gt
 8007226:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800722a:	fa09 f903 	lslgt.w	r9, r9, r3
 800722e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007232:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007236:	bfd6      	itet	le
 8007238:	f1c3 0320 	rsble	r3, r3, #32
 800723c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007240:	fa06 f003 	lslle.w	r0, r6, r3
 8007244:	f7f9 f9ee 	bl	8000624 <__aeabi_ui2d>
 8007248:	2201      	movs	r2, #1
 800724a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800724e:	3c01      	subs	r4, #1
 8007250:	9213      	str	r2, [sp, #76]	; 0x4c
 8007252:	e76f      	b.n	8007134 <_dtoa_r+0x114>
 8007254:	2301      	movs	r3, #1
 8007256:	e7b3      	b.n	80071c0 <_dtoa_r+0x1a0>
 8007258:	900f      	str	r0, [sp, #60]	; 0x3c
 800725a:	e7b2      	b.n	80071c2 <_dtoa_r+0x1a2>
 800725c:	f1cb 0300 	rsb	r3, fp, #0
 8007260:	930a      	str	r3, [sp, #40]	; 0x28
 8007262:	2300      	movs	r3, #0
 8007264:	eba9 090b 	sub.w	r9, r9, fp
 8007268:	930e      	str	r3, [sp, #56]	; 0x38
 800726a:	e7c0      	b.n	80071ee <_dtoa_r+0x1ce>
 800726c:	2300      	movs	r3, #0
 800726e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007270:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007272:	2b00      	cmp	r3, #0
 8007274:	dc55      	bgt.n	8007322 <_dtoa_r+0x302>
 8007276:	2301      	movs	r3, #1
 8007278:	461a      	mov	r2, r3
 800727a:	9306      	str	r3, [sp, #24]
 800727c:	9308      	str	r3, [sp, #32]
 800727e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007280:	e00b      	b.n	800729a <_dtoa_r+0x27a>
 8007282:	2301      	movs	r3, #1
 8007284:	e7f3      	b.n	800726e <_dtoa_r+0x24e>
 8007286:	2300      	movs	r3, #0
 8007288:	930b      	str	r3, [sp, #44]	; 0x2c
 800728a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800728c:	445b      	add	r3, fp
 800728e:	9306      	str	r3, [sp, #24]
 8007290:	3301      	adds	r3, #1
 8007292:	2b01      	cmp	r3, #1
 8007294:	9308      	str	r3, [sp, #32]
 8007296:	bfb8      	it	lt
 8007298:	2301      	movlt	r3, #1
 800729a:	2100      	movs	r1, #0
 800729c:	2204      	movs	r2, #4
 800729e:	69e8      	ldr	r0, [r5, #28]
 80072a0:	f102 0614 	add.w	r6, r2, #20
 80072a4:	429e      	cmp	r6, r3
 80072a6:	d940      	bls.n	800732a <_dtoa_r+0x30a>
 80072a8:	6041      	str	r1, [r0, #4]
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 fd98 	bl	8007de0 <_Balloc>
 80072b0:	9003      	str	r0, [sp, #12]
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d13c      	bne.n	8007330 <_dtoa_r+0x310>
 80072b6:	4602      	mov	r2, r0
 80072b8:	f240 11af 	movw	r1, #431	; 0x1af
 80072bc:	4b16      	ldr	r3, [pc, #88]	; (8007318 <_dtoa_r+0x2f8>)
 80072be:	e6c3      	b.n	8007048 <_dtoa_r+0x28>
 80072c0:	2301      	movs	r3, #1
 80072c2:	e7e1      	b.n	8007288 <_dtoa_r+0x268>
 80072c4:	2401      	movs	r4, #1
 80072c6:	2300      	movs	r3, #0
 80072c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80072ca:	9322      	str	r3, [sp, #136]	; 0x88
 80072cc:	f04f 33ff 	mov.w	r3, #4294967295
 80072d0:	2200      	movs	r2, #0
 80072d2:	9306      	str	r3, [sp, #24]
 80072d4:	9308      	str	r3, [sp, #32]
 80072d6:	2312      	movs	r3, #18
 80072d8:	e7d1      	b.n	800727e <_dtoa_r+0x25e>
 80072da:	bf00      	nop
 80072dc:	f3af 8000 	nop.w
 80072e0:	636f4361 	.word	0x636f4361
 80072e4:	3fd287a7 	.word	0x3fd287a7
 80072e8:	8b60c8b3 	.word	0x8b60c8b3
 80072ec:	3fc68a28 	.word	0x3fc68a28
 80072f0:	509f79fb 	.word	0x509f79fb
 80072f4:	3fd34413 	.word	0x3fd34413
 80072f8:	0800906d 	.word	0x0800906d
 80072fc:	08009084 	.word	0x08009084
 8007300:	7ff00000 	.word	0x7ff00000
 8007304:	08009069 	.word	0x08009069
 8007308:	08009060 	.word	0x08009060
 800730c:	0800903d 	.word	0x0800903d
 8007310:	3ff80000 	.word	0x3ff80000
 8007314:	08009170 	.word	0x08009170
 8007318:	080090dc 	.word	0x080090dc
 800731c:	2301      	movs	r3, #1
 800731e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007320:	e7d4      	b.n	80072cc <_dtoa_r+0x2ac>
 8007322:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007324:	9306      	str	r3, [sp, #24]
 8007326:	9308      	str	r3, [sp, #32]
 8007328:	e7b7      	b.n	800729a <_dtoa_r+0x27a>
 800732a:	3101      	adds	r1, #1
 800732c:	0052      	lsls	r2, r2, #1
 800732e:	e7b7      	b.n	80072a0 <_dtoa_r+0x280>
 8007330:	69eb      	ldr	r3, [r5, #28]
 8007332:	9a03      	ldr	r2, [sp, #12]
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	9b08      	ldr	r3, [sp, #32]
 8007338:	2b0e      	cmp	r3, #14
 800733a:	f200 80a8 	bhi.w	800748e <_dtoa_r+0x46e>
 800733e:	2c00      	cmp	r4, #0
 8007340:	f000 80a5 	beq.w	800748e <_dtoa_r+0x46e>
 8007344:	f1bb 0f00 	cmp.w	fp, #0
 8007348:	dd34      	ble.n	80073b4 <_dtoa_r+0x394>
 800734a:	4b9a      	ldr	r3, [pc, #616]	; (80075b4 <_dtoa_r+0x594>)
 800734c:	f00b 020f 	and.w	r2, fp, #15
 8007350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007354:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007358:	e9d3 3400 	ldrd	r3, r4, [r3]
 800735c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007360:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007364:	d016      	beq.n	8007394 <_dtoa_r+0x374>
 8007366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800736a:	4b93      	ldr	r3, [pc, #588]	; (80075b8 <_dtoa_r+0x598>)
 800736c:	2703      	movs	r7, #3
 800736e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007372:	f7f9 fafb 	bl	800096c <__aeabi_ddiv>
 8007376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800737a:	f004 040f 	and.w	r4, r4, #15
 800737e:	4e8e      	ldr	r6, [pc, #568]	; (80075b8 <_dtoa_r+0x598>)
 8007380:	b954      	cbnz	r4, 8007398 <_dtoa_r+0x378>
 8007382:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800738a:	f7f9 faef 	bl	800096c <__aeabi_ddiv>
 800738e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007392:	e029      	b.n	80073e8 <_dtoa_r+0x3c8>
 8007394:	2702      	movs	r7, #2
 8007396:	e7f2      	b.n	800737e <_dtoa_r+0x35e>
 8007398:	07e1      	lsls	r1, r4, #31
 800739a:	d508      	bpl.n	80073ae <_dtoa_r+0x38e>
 800739c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073a4:	f7f9 f9b8 	bl	8000718 <__aeabi_dmul>
 80073a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073ac:	3701      	adds	r7, #1
 80073ae:	1064      	asrs	r4, r4, #1
 80073b0:	3608      	adds	r6, #8
 80073b2:	e7e5      	b.n	8007380 <_dtoa_r+0x360>
 80073b4:	f000 80a5 	beq.w	8007502 <_dtoa_r+0x4e2>
 80073b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073bc:	f1cb 0400 	rsb	r4, fp, #0
 80073c0:	4b7c      	ldr	r3, [pc, #496]	; (80075b4 <_dtoa_r+0x594>)
 80073c2:	f004 020f 	and.w	r2, r4, #15
 80073c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f9 f9a3 	bl	8000718 <__aeabi_dmul>
 80073d2:	2702      	movs	r7, #2
 80073d4:	2300      	movs	r3, #0
 80073d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073da:	4e77      	ldr	r6, [pc, #476]	; (80075b8 <_dtoa_r+0x598>)
 80073dc:	1124      	asrs	r4, r4, #4
 80073de:	2c00      	cmp	r4, #0
 80073e0:	f040 8084 	bne.w	80074ec <_dtoa_r+0x4cc>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1d2      	bne.n	800738e <_dtoa_r+0x36e>
 80073e8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80073ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80073f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8087 	beq.w	8007506 <_dtoa_r+0x4e6>
 80073f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073fc:	2200      	movs	r2, #0
 80073fe:	4b6f      	ldr	r3, [pc, #444]	; (80075bc <_dtoa_r+0x59c>)
 8007400:	f7f9 fbfc 	bl	8000bfc <__aeabi_dcmplt>
 8007404:	2800      	cmp	r0, #0
 8007406:	d07e      	beq.n	8007506 <_dtoa_r+0x4e6>
 8007408:	9b08      	ldr	r3, [sp, #32]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d07b      	beq.n	8007506 <_dtoa_r+0x4e6>
 800740e:	9b06      	ldr	r3, [sp, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	dd38      	ble.n	8007486 <_dtoa_r+0x466>
 8007414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007418:	2200      	movs	r2, #0
 800741a:	4b69      	ldr	r3, [pc, #420]	; (80075c0 <_dtoa_r+0x5a0>)
 800741c:	f7f9 f97c 	bl	8000718 <__aeabi_dmul>
 8007420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007424:	9c06      	ldr	r4, [sp, #24]
 8007426:	f10b 38ff 	add.w	r8, fp, #4294967295
 800742a:	3701      	adds	r7, #1
 800742c:	4638      	mov	r0, r7
 800742e:	f7f9 f909 	bl	8000644 <__aeabi_i2d>
 8007432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007436:	f7f9 f96f 	bl	8000718 <__aeabi_dmul>
 800743a:	2200      	movs	r2, #0
 800743c:	4b61      	ldr	r3, [pc, #388]	; (80075c4 <_dtoa_r+0x5a4>)
 800743e:	f7f8 ffb5 	bl	80003ac <__adddf3>
 8007442:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007446:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800744a:	9611      	str	r6, [sp, #68]	; 0x44
 800744c:	2c00      	cmp	r4, #0
 800744e:	d15d      	bne.n	800750c <_dtoa_r+0x4ec>
 8007450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007454:	2200      	movs	r2, #0
 8007456:	4b5c      	ldr	r3, [pc, #368]	; (80075c8 <_dtoa_r+0x5a8>)
 8007458:	f7f8 ffa6 	bl	80003a8 <__aeabi_dsub>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007464:	4633      	mov	r3, r6
 8007466:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007468:	f7f9 fbe6 	bl	8000c38 <__aeabi_dcmpgt>
 800746c:	2800      	cmp	r0, #0
 800746e:	f040 8295 	bne.w	800799c <_dtoa_r+0x97c>
 8007472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007476:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007478:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800747c:	f7f9 fbbe 	bl	8000bfc <__aeabi_dcmplt>
 8007480:	2800      	cmp	r0, #0
 8007482:	f040 8289 	bne.w	8007998 <_dtoa_r+0x978>
 8007486:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800748a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800748e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007490:	2b00      	cmp	r3, #0
 8007492:	f2c0 8151 	blt.w	8007738 <_dtoa_r+0x718>
 8007496:	f1bb 0f0e 	cmp.w	fp, #14
 800749a:	f300 814d 	bgt.w	8007738 <_dtoa_r+0x718>
 800749e:	4b45      	ldr	r3, [pc, #276]	; (80075b4 <_dtoa_r+0x594>)
 80074a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80074ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f280 80da 	bge.w	8007668 <_dtoa_r+0x648>
 80074b4:	9b08      	ldr	r3, [sp, #32]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f300 80d6 	bgt.w	8007668 <_dtoa_r+0x648>
 80074bc:	f040 826b 	bne.w	8007996 <_dtoa_r+0x976>
 80074c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074c4:	2200      	movs	r2, #0
 80074c6:	4b40      	ldr	r3, [pc, #256]	; (80075c8 <_dtoa_r+0x5a8>)
 80074c8:	f7f9 f926 	bl	8000718 <__aeabi_dmul>
 80074cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074d0:	f7f9 fba8 	bl	8000c24 <__aeabi_dcmpge>
 80074d4:	9c08      	ldr	r4, [sp, #32]
 80074d6:	4626      	mov	r6, r4
 80074d8:	2800      	cmp	r0, #0
 80074da:	f040 8241 	bne.w	8007960 <_dtoa_r+0x940>
 80074de:	2331      	movs	r3, #49	; 0x31
 80074e0:	9f03      	ldr	r7, [sp, #12]
 80074e2:	f10b 0b01 	add.w	fp, fp, #1
 80074e6:	f807 3b01 	strb.w	r3, [r7], #1
 80074ea:	e23d      	b.n	8007968 <_dtoa_r+0x948>
 80074ec:	07e2      	lsls	r2, r4, #31
 80074ee:	d505      	bpl.n	80074fc <_dtoa_r+0x4dc>
 80074f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074f4:	f7f9 f910 	bl	8000718 <__aeabi_dmul>
 80074f8:	2301      	movs	r3, #1
 80074fa:	3701      	adds	r7, #1
 80074fc:	1064      	asrs	r4, r4, #1
 80074fe:	3608      	adds	r6, #8
 8007500:	e76d      	b.n	80073de <_dtoa_r+0x3be>
 8007502:	2702      	movs	r7, #2
 8007504:	e770      	b.n	80073e8 <_dtoa_r+0x3c8>
 8007506:	46d8      	mov	r8, fp
 8007508:	9c08      	ldr	r4, [sp, #32]
 800750a:	e78f      	b.n	800742c <_dtoa_r+0x40c>
 800750c:	9903      	ldr	r1, [sp, #12]
 800750e:	4b29      	ldr	r3, [pc, #164]	; (80075b4 <_dtoa_r+0x594>)
 8007510:	4421      	add	r1, r4
 8007512:	9112      	str	r1, [sp, #72]	; 0x48
 8007514:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007516:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800751a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800751e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007522:	2900      	cmp	r1, #0
 8007524:	d054      	beq.n	80075d0 <_dtoa_r+0x5b0>
 8007526:	2000      	movs	r0, #0
 8007528:	4928      	ldr	r1, [pc, #160]	; (80075cc <_dtoa_r+0x5ac>)
 800752a:	f7f9 fa1f 	bl	800096c <__aeabi_ddiv>
 800752e:	463b      	mov	r3, r7
 8007530:	4632      	mov	r2, r6
 8007532:	f7f8 ff39 	bl	80003a8 <__aeabi_dsub>
 8007536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800753a:	9f03      	ldr	r7, [sp, #12]
 800753c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007540:	f7f9 fb9a 	bl	8000c78 <__aeabi_d2iz>
 8007544:	4604      	mov	r4, r0
 8007546:	f7f9 f87d 	bl	8000644 <__aeabi_i2d>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007552:	f7f8 ff29 	bl	80003a8 <__aeabi_dsub>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	3430      	adds	r4, #48	; 0x30
 800755c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007560:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007564:	f807 4b01 	strb.w	r4, [r7], #1
 8007568:	f7f9 fb48 	bl	8000bfc <__aeabi_dcmplt>
 800756c:	2800      	cmp	r0, #0
 800756e:	d173      	bne.n	8007658 <_dtoa_r+0x638>
 8007570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007574:	2000      	movs	r0, #0
 8007576:	4911      	ldr	r1, [pc, #68]	; (80075bc <_dtoa_r+0x59c>)
 8007578:	f7f8 ff16 	bl	80003a8 <__aeabi_dsub>
 800757c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007580:	f7f9 fb3c 	bl	8000bfc <__aeabi_dcmplt>
 8007584:	2800      	cmp	r0, #0
 8007586:	f040 80b6 	bne.w	80076f6 <_dtoa_r+0x6d6>
 800758a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800758c:	429f      	cmp	r7, r3
 800758e:	f43f af7a 	beq.w	8007486 <_dtoa_r+0x466>
 8007592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007596:	2200      	movs	r2, #0
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <_dtoa_r+0x5a0>)
 800759a:	f7f9 f8bd 	bl	8000718 <__aeabi_dmul>
 800759e:	2200      	movs	r2, #0
 80075a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <_dtoa_r+0x5a0>)
 80075aa:	f7f9 f8b5 	bl	8000718 <__aeabi_dmul>
 80075ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075b2:	e7c3      	b.n	800753c <_dtoa_r+0x51c>
 80075b4:	08009170 	.word	0x08009170
 80075b8:	08009148 	.word	0x08009148
 80075bc:	3ff00000 	.word	0x3ff00000
 80075c0:	40240000 	.word	0x40240000
 80075c4:	401c0000 	.word	0x401c0000
 80075c8:	40140000 	.word	0x40140000
 80075cc:	3fe00000 	.word	0x3fe00000
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f9 f8a0 	bl	8000718 <__aeabi_dmul>
 80075d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075de:	9c03      	ldr	r4, [sp, #12]
 80075e0:	9314      	str	r3, [sp, #80]	; 0x50
 80075e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e6:	f7f9 fb47 	bl	8000c78 <__aeabi_d2iz>
 80075ea:	9015      	str	r0, [sp, #84]	; 0x54
 80075ec:	f7f9 f82a 	bl	8000644 <__aeabi_i2d>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f8:	f7f8 fed6 	bl	80003a8 <__aeabi_dsub>
 80075fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075fe:	4606      	mov	r6, r0
 8007600:	3330      	adds	r3, #48	; 0x30
 8007602:	f804 3b01 	strb.w	r3, [r4], #1
 8007606:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007608:	460f      	mov	r7, r1
 800760a:	429c      	cmp	r4, r3
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	d124      	bne.n	800765c <_dtoa_r+0x63c>
 8007612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007616:	4baf      	ldr	r3, [pc, #700]	; (80078d4 <_dtoa_r+0x8b4>)
 8007618:	f7f8 fec8 	bl	80003ac <__adddf3>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	f7f9 fb08 	bl	8000c38 <__aeabi_dcmpgt>
 8007628:	2800      	cmp	r0, #0
 800762a:	d163      	bne.n	80076f4 <_dtoa_r+0x6d4>
 800762c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007630:	2000      	movs	r0, #0
 8007632:	49a8      	ldr	r1, [pc, #672]	; (80078d4 <_dtoa_r+0x8b4>)
 8007634:	f7f8 feb8 	bl	80003a8 <__aeabi_dsub>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4630      	mov	r0, r6
 800763e:	4639      	mov	r1, r7
 8007640:	f7f9 fadc 	bl	8000bfc <__aeabi_dcmplt>
 8007644:	2800      	cmp	r0, #0
 8007646:	f43f af1e 	beq.w	8007486 <_dtoa_r+0x466>
 800764a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800764c:	1e7b      	subs	r3, r7, #1
 800764e:	9314      	str	r3, [sp, #80]	; 0x50
 8007650:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007654:	2b30      	cmp	r3, #48	; 0x30
 8007656:	d0f8      	beq.n	800764a <_dtoa_r+0x62a>
 8007658:	46c3      	mov	fp, r8
 800765a:	e03b      	b.n	80076d4 <_dtoa_r+0x6b4>
 800765c:	4b9e      	ldr	r3, [pc, #632]	; (80078d8 <_dtoa_r+0x8b8>)
 800765e:	f7f9 f85b 	bl	8000718 <__aeabi_dmul>
 8007662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007666:	e7bc      	b.n	80075e2 <_dtoa_r+0x5c2>
 8007668:	9f03      	ldr	r7, [sp, #12]
 800766a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800766e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f9 f979 	bl	800096c <__aeabi_ddiv>
 800767a:	f7f9 fafd 	bl	8000c78 <__aeabi_d2iz>
 800767e:	4604      	mov	r4, r0
 8007680:	f7f8 ffe0 	bl	8000644 <__aeabi_i2d>
 8007684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007688:	f7f9 f846 	bl	8000718 <__aeabi_dmul>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4640      	mov	r0, r8
 8007692:	4649      	mov	r1, r9
 8007694:	f7f8 fe88 	bl	80003a8 <__aeabi_dsub>
 8007698:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800769c:	f807 6b01 	strb.w	r6, [r7], #1
 80076a0:	9e03      	ldr	r6, [sp, #12]
 80076a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80076a6:	1bbe      	subs	r6, r7, r6
 80076a8:	45b4      	cmp	ip, r6
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	d136      	bne.n	800771e <_dtoa_r+0x6fe>
 80076b0:	f7f8 fe7c 	bl	80003ac <__adddf3>
 80076b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076b8:	4680      	mov	r8, r0
 80076ba:	4689      	mov	r9, r1
 80076bc:	f7f9 fabc 	bl	8000c38 <__aeabi_dcmpgt>
 80076c0:	bb58      	cbnz	r0, 800771a <_dtoa_r+0x6fa>
 80076c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076c6:	4640      	mov	r0, r8
 80076c8:	4649      	mov	r1, r9
 80076ca:	f7f9 fa8d 	bl	8000be8 <__aeabi_dcmpeq>
 80076ce:	b108      	cbz	r0, 80076d4 <_dtoa_r+0x6b4>
 80076d0:	07e3      	lsls	r3, r4, #31
 80076d2:	d422      	bmi.n	800771a <_dtoa_r+0x6fa>
 80076d4:	4651      	mov	r1, sl
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 fbc2 	bl	8007e60 <_Bfree>
 80076dc:	2300      	movs	r3, #0
 80076de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076e0:	703b      	strb	r3, [r7, #0]
 80076e2:	f10b 0301 	add.w	r3, fp, #1
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f43f ace6 	beq.w	80070bc <_dtoa_r+0x9c>
 80076f0:	601f      	str	r7, [r3, #0]
 80076f2:	e4e3      	b.n	80070bc <_dtoa_r+0x9c>
 80076f4:	4627      	mov	r7, r4
 80076f6:	463b      	mov	r3, r7
 80076f8:	461f      	mov	r7, r3
 80076fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076fe:	2a39      	cmp	r2, #57	; 0x39
 8007700:	d107      	bne.n	8007712 <_dtoa_r+0x6f2>
 8007702:	9a03      	ldr	r2, [sp, #12]
 8007704:	429a      	cmp	r2, r3
 8007706:	d1f7      	bne.n	80076f8 <_dtoa_r+0x6d8>
 8007708:	2230      	movs	r2, #48	; 0x30
 800770a:	9903      	ldr	r1, [sp, #12]
 800770c:	f108 0801 	add.w	r8, r8, #1
 8007710:	700a      	strb	r2, [r1, #0]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	3201      	adds	r2, #1
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	e79e      	b.n	8007658 <_dtoa_r+0x638>
 800771a:	46d8      	mov	r8, fp
 800771c:	e7eb      	b.n	80076f6 <_dtoa_r+0x6d6>
 800771e:	2200      	movs	r2, #0
 8007720:	4b6d      	ldr	r3, [pc, #436]	; (80078d8 <_dtoa_r+0x8b8>)
 8007722:	f7f8 fff9 	bl	8000718 <__aeabi_dmul>
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	4680      	mov	r8, r0
 800772c:	4689      	mov	r9, r1
 800772e:	f7f9 fa5b 	bl	8000be8 <__aeabi_dcmpeq>
 8007732:	2800      	cmp	r0, #0
 8007734:	d09b      	beq.n	800766e <_dtoa_r+0x64e>
 8007736:	e7cd      	b.n	80076d4 <_dtoa_r+0x6b4>
 8007738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800773a:	2a00      	cmp	r2, #0
 800773c:	f000 80c4 	beq.w	80078c8 <_dtoa_r+0x8a8>
 8007740:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007742:	2a01      	cmp	r2, #1
 8007744:	f300 80a8 	bgt.w	8007898 <_dtoa_r+0x878>
 8007748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800774a:	2a00      	cmp	r2, #0
 800774c:	f000 80a0 	beq.w	8007890 <_dtoa_r+0x870>
 8007750:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007754:	464f      	mov	r7, r9
 8007756:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800775a:	2101      	movs	r1, #1
 800775c:	441a      	add	r2, r3
 800775e:	4628      	mov	r0, r5
 8007760:	4499      	add	r9, r3
 8007762:	9209      	str	r2, [sp, #36]	; 0x24
 8007764:	f000 fc32 	bl	8007fcc <__i2b>
 8007768:	4606      	mov	r6, r0
 800776a:	b15f      	cbz	r7, 8007784 <_dtoa_r+0x764>
 800776c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	dd08      	ble.n	8007784 <_dtoa_r+0x764>
 8007772:	42bb      	cmp	r3, r7
 8007774:	bfa8      	it	ge
 8007776:	463b      	movge	r3, r7
 8007778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800777a:	eba9 0903 	sub.w	r9, r9, r3
 800777e:	1aff      	subs	r7, r7, r3
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	9309      	str	r3, [sp, #36]	; 0x24
 8007784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007786:	b1f3      	cbz	r3, 80077c6 <_dtoa_r+0x7a6>
 8007788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80a0 	beq.w	80078d0 <_dtoa_r+0x8b0>
 8007790:	2c00      	cmp	r4, #0
 8007792:	dd10      	ble.n	80077b6 <_dtoa_r+0x796>
 8007794:	4631      	mov	r1, r6
 8007796:	4622      	mov	r2, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f000 fcd5 	bl	8008148 <__pow5mult>
 800779e:	4652      	mov	r2, sl
 80077a0:	4601      	mov	r1, r0
 80077a2:	4606      	mov	r6, r0
 80077a4:	4628      	mov	r0, r5
 80077a6:	f000 fc27 	bl	8007ff8 <__multiply>
 80077aa:	4680      	mov	r8, r0
 80077ac:	4651      	mov	r1, sl
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 fb56 	bl	8007e60 <_Bfree>
 80077b4:	46c2      	mov	sl, r8
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	1b1a      	subs	r2, r3, r4
 80077ba:	d004      	beq.n	80077c6 <_dtoa_r+0x7a6>
 80077bc:	4651      	mov	r1, sl
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 fcc2 	bl	8008148 <__pow5mult>
 80077c4:	4682      	mov	sl, r0
 80077c6:	2101      	movs	r1, #1
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 fbff 	bl	8007fcc <__i2b>
 80077ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077d0:	4604      	mov	r4, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f340 8082 	ble.w	80078dc <_dtoa_r+0x8bc>
 80077d8:	461a      	mov	r2, r3
 80077da:	4601      	mov	r1, r0
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 fcb3 	bl	8008148 <__pow5mult>
 80077e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077e4:	4604      	mov	r4, r0
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	dd7b      	ble.n	80078e2 <_dtoa_r+0x8c2>
 80077ea:	f04f 0800 	mov.w	r8, #0
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077f4:	6918      	ldr	r0, [r3, #16]
 80077f6:	f000 fb9b 	bl	8007f30 <__hi0bits>
 80077fa:	f1c0 0020 	rsb	r0, r0, #32
 80077fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007800:	4418      	add	r0, r3
 8007802:	f010 001f 	ands.w	r0, r0, #31
 8007806:	f000 8092 	beq.w	800792e <_dtoa_r+0x90e>
 800780a:	f1c0 0320 	rsb	r3, r0, #32
 800780e:	2b04      	cmp	r3, #4
 8007810:	f340 8085 	ble.w	800791e <_dtoa_r+0x8fe>
 8007814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007816:	f1c0 001c 	rsb	r0, r0, #28
 800781a:	4403      	add	r3, r0
 800781c:	4481      	add	r9, r0
 800781e:	4407      	add	r7, r0
 8007820:	9309      	str	r3, [sp, #36]	; 0x24
 8007822:	f1b9 0f00 	cmp.w	r9, #0
 8007826:	dd05      	ble.n	8007834 <_dtoa_r+0x814>
 8007828:	4651      	mov	r1, sl
 800782a:	464a      	mov	r2, r9
 800782c:	4628      	mov	r0, r5
 800782e:	f000 fce5 	bl	80081fc <__lshift>
 8007832:	4682      	mov	sl, r0
 8007834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	dd05      	ble.n	8007846 <_dtoa_r+0x826>
 800783a:	4621      	mov	r1, r4
 800783c:	461a      	mov	r2, r3
 800783e:	4628      	mov	r0, r5
 8007840:	f000 fcdc 	bl	80081fc <__lshift>
 8007844:	4604      	mov	r4, r0
 8007846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d072      	beq.n	8007932 <_dtoa_r+0x912>
 800784c:	4621      	mov	r1, r4
 800784e:	4650      	mov	r0, sl
 8007850:	f000 fd40 	bl	80082d4 <__mcmp>
 8007854:	2800      	cmp	r0, #0
 8007856:	da6c      	bge.n	8007932 <_dtoa_r+0x912>
 8007858:	2300      	movs	r3, #0
 800785a:	4651      	mov	r1, sl
 800785c:	220a      	movs	r2, #10
 800785e:	4628      	mov	r0, r5
 8007860:	f000 fb20 	bl	8007ea4 <__multadd>
 8007864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007866:	4682      	mov	sl, r0
 8007868:	f10b 3bff 	add.w	fp, fp, #4294967295
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 81ac 	beq.w	8007bca <_dtoa_r+0xbaa>
 8007872:	2300      	movs	r3, #0
 8007874:	4631      	mov	r1, r6
 8007876:	220a      	movs	r2, #10
 8007878:	4628      	mov	r0, r5
 800787a:	f000 fb13 	bl	8007ea4 <__multadd>
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	4606      	mov	r6, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	f300 8093 	bgt.w	80079ae <_dtoa_r+0x98e>
 8007888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800788a:	2b02      	cmp	r3, #2
 800788c:	dc59      	bgt.n	8007942 <_dtoa_r+0x922>
 800788e:	e08e      	b.n	80079ae <_dtoa_r+0x98e>
 8007890:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007892:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007896:	e75d      	b.n	8007754 <_dtoa_r+0x734>
 8007898:	9b08      	ldr	r3, [sp, #32]
 800789a:	1e5c      	subs	r4, r3, #1
 800789c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789e:	42a3      	cmp	r3, r4
 80078a0:	bfbf      	itttt	lt
 80078a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80078a6:	1ae3      	sublt	r3, r4, r3
 80078a8:	18d2      	addlt	r2, r2, r3
 80078aa:	bfa8      	it	ge
 80078ac:	1b1c      	subge	r4, r3, r4
 80078ae:	9b08      	ldr	r3, [sp, #32]
 80078b0:	bfbe      	ittt	lt
 80078b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80078b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80078b6:	2400      	movlt	r4, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bfb5      	itete	lt
 80078bc:	eba9 0703 	sublt.w	r7, r9, r3
 80078c0:	464f      	movge	r7, r9
 80078c2:	2300      	movlt	r3, #0
 80078c4:	9b08      	ldrge	r3, [sp, #32]
 80078c6:	e747      	b.n	8007758 <_dtoa_r+0x738>
 80078c8:	464f      	mov	r7, r9
 80078ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80078ce:	e74c      	b.n	800776a <_dtoa_r+0x74a>
 80078d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d2:	e773      	b.n	80077bc <_dtoa_r+0x79c>
 80078d4:	3fe00000 	.word	0x3fe00000
 80078d8:	40240000 	.word	0x40240000
 80078dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078de:	2b01      	cmp	r3, #1
 80078e0:	dc18      	bgt.n	8007914 <_dtoa_r+0x8f4>
 80078e2:	9b04      	ldr	r3, [sp, #16]
 80078e4:	b9b3      	cbnz	r3, 8007914 <_dtoa_r+0x8f4>
 80078e6:	9b05      	ldr	r3, [sp, #20]
 80078e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078ec:	b993      	cbnz	r3, 8007914 <_dtoa_r+0x8f4>
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	0d1b      	lsrs	r3, r3, #20
 80078f6:	051b      	lsls	r3, r3, #20
 80078f8:	b17b      	cbz	r3, 800791a <_dtoa_r+0x8fa>
 80078fa:	f04f 0801 	mov.w	r8, #1
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	f109 0901 	add.w	r9, r9, #1
 8007904:	3301      	adds	r3, #1
 8007906:	9309      	str	r3, [sp, #36]	; 0x24
 8007908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800790a:	2b00      	cmp	r3, #0
 800790c:	f47f af6f 	bne.w	80077ee <_dtoa_r+0x7ce>
 8007910:	2001      	movs	r0, #1
 8007912:	e774      	b.n	80077fe <_dtoa_r+0x7de>
 8007914:	f04f 0800 	mov.w	r8, #0
 8007918:	e7f6      	b.n	8007908 <_dtoa_r+0x8e8>
 800791a:	4698      	mov	r8, r3
 800791c:	e7f4      	b.n	8007908 <_dtoa_r+0x8e8>
 800791e:	d080      	beq.n	8007822 <_dtoa_r+0x802>
 8007920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007922:	331c      	adds	r3, #28
 8007924:	441a      	add	r2, r3
 8007926:	4499      	add	r9, r3
 8007928:	441f      	add	r7, r3
 800792a:	9209      	str	r2, [sp, #36]	; 0x24
 800792c:	e779      	b.n	8007822 <_dtoa_r+0x802>
 800792e:	4603      	mov	r3, r0
 8007930:	e7f6      	b.n	8007920 <_dtoa_r+0x900>
 8007932:	9b08      	ldr	r3, [sp, #32]
 8007934:	2b00      	cmp	r3, #0
 8007936:	dc34      	bgt.n	80079a2 <_dtoa_r+0x982>
 8007938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800793a:	2b02      	cmp	r3, #2
 800793c:	dd31      	ble.n	80079a2 <_dtoa_r+0x982>
 800793e:	9b08      	ldr	r3, [sp, #32]
 8007940:	9306      	str	r3, [sp, #24]
 8007942:	9b06      	ldr	r3, [sp, #24]
 8007944:	b963      	cbnz	r3, 8007960 <_dtoa_r+0x940>
 8007946:	4621      	mov	r1, r4
 8007948:	2205      	movs	r2, #5
 800794a:	4628      	mov	r0, r5
 800794c:	f000 faaa 	bl	8007ea4 <__multadd>
 8007950:	4601      	mov	r1, r0
 8007952:	4604      	mov	r4, r0
 8007954:	4650      	mov	r0, sl
 8007956:	f000 fcbd 	bl	80082d4 <__mcmp>
 800795a:	2800      	cmp	r0, #0
 800795c:	f73f adbf 	bgt.w	80074de <_dtoa_r+0x4be>
 8007960:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007962:	9f03      	ldr	r7, [sp, #12]
 8007964:	ea6f 0b03 	mvn.w	fp, r3
 8007968:	f04f 0800 	mov.w	r8, #0
 800796c:	4621      	mov	r1, r4
 800796e:	4628      	mov	r0, r5
 8007970:	f000 fa76 	bl	8007e60 <_Bfree>
 8007974:	2e00      	cmp	r6, #0
 8007976:	f43f aead 	beq.w	80076d4 <_dtoa_r+0x6b4>
 800797a:	f1b8 0f00 	cmp.w	r8, #0
 800797e:	d005      	beq.n	800798c <_dtoa_r+0x96c>
 8007980:	45b0      	cmp	r8, r6
 8007982:	d003      	beq.n	800798c <_dtoa_r+0x96c>
 8007984:	4641      	mov	r1, r8
 8007986:	4628      	mov	r0, r5
 8007988:	f000 fa6a 	bl	8007e60 <_Bfree>
 800798c:	4631      	mov	r1, r6
 800798e:	4628      	mov	r0, r5
 8007990:	f000 fa66 	bl	8007e60 <_Bfree>
 8007994:	e69e      	b.n	80076d4 <_dtoa_r+0x6b4>
 8007996:	2400      	movs	r4, #0
 8007998:	4626      	mov	r6, r4
 800799a:	e7e1      	b.n	8007960 <_dtoa_r+0x940>
 800799c:	46c3      	mov	fp, r8
 800799e:	4626      	mov	r6, r4
 80079a0:	e59d      	b.n	80074de <_dtoa_r+0x4be>
 80079a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80c8 	beq.w	8007b3a <_dtoa_r+0xb1a>
 80079aa:	9b08      	ldr	r3, [sp, #32]
 80079ac:	9306      	str	r3, [sp, #24]
 80079ae:	2f00      	cmp	r7, #0
 80079b0:	dd05      	ble.n	80079be <_dtoa_r+0x99e>
 80079b2:	4631      	mov	r1, r6
 80079b4:	463a      	mov	r2, r7
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fc20 	bl	80081fc <__lshift>
 80079bc:	4606      	mov	r6, r0
 80079be:	f1b8 0f00 	cmp.w	r8, #0
 80079c2:	d05b      	beq.n	8007a7c <_dtoa_r+0xa5c>
 80079c4:	4628      	mov	r0, r5
 80079c6:	6871      	ldr	r1, [r6, #4]
 80079c8:	f000 fa0a 	bl	8007de0 <_Balloc>
 80079cc:	4607      	mov	r7, r0
 80079ce:	b928      	cbnz	r0, 80079dc <_dtoa_r+0x9bc>
 80079d0:	4602      	mov	r2, r0
 80079d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079d6:	4b81      	ldr	r3, [pc, #516]	; (8007bdc <_dtoa_r+0xbbc>)
 80079d8:	f7ff bb36 	b.w	8007048 <_dtoa_r+0x28>
 80079dc:	6932      	ldr	r2, [r6, #16]
 80079de:	f106 010c 	add.w	r1, r6, #12
 80079e2:	3202      	adds	r2, #2
 80079e4:	0092      	lsls	r2, r2, #2
 80079e6:	300c      	adds	r0, #12
 80079e8:	f000 ff9e 	bl	8008928 <memcpy>
 80079ec:	2201      	movs	r2, #1
 80079ee:	4639      	mov	r1, r7
 80079f0:	4628      	mov	r0, r5
 80079f2:	f000 fc03 	bl	80081fc <__lshift>
 80079f6:	46b0      	mov	r8, r6
 80079f8:	4606      	mov	r6, r0
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	9a03      	ldr	r2, [sp, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	9308      	str	r3, [sp, #32]
 8007a02:	9b06      	ldr	r3, [sp, #24]
 8007a04:	4413      	add	r3, r2
 8007a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a10:	9b08      	ldr	r3, [sp, #32]
 8007a12:	4621      	mov	r1, r4
 8007a14:	3b01      	subs	r3, #1
 8007a16:	4650      	mov	r0, sl
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	f7ff fa76 	bl	8006f0a <quorem>
 8007a1e:	4641      	mov	r1, r8
 8007a20:	9006      	str	r0, [sp, #24]
 8007a22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a26:	4650      	mov	r0, sl
 8007a28:	f000 fc54 	bl	80082d4 <__mcmp>
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	9009      	str	r0, [sp, #36]	; 0x24
 8007a30:	4621      	mov	r1, r4
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 fc6a 	bl	800830c <__mdiff>
 8007a38:	68c2      	ldr	r2, [r0, #12]
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	bb02      	cbnz	r2, 8007a80 <_dtoa_r+0xa60>
 8007a3e:	4601      	mov	r1, r0
 8007a40:	4650      	mov	r0, sl
 8007a42:	f000 fc47 	bl	80082d4 <__mcmp>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4639      	mov	r1, r7
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	920c      	str	r2, [sp, #48]	; 0x30
 8007a4e:	f000 fa07 	bl	8007e60 <_Bfree>
 8007a52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a56:	9f08      	ldr	r7, [sp, #32]
 8007a58:	ea43 0102 	orr.w	r1, r3, r2
 8007a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a5e:	4319      	orrs	r1, r3
 8007a60:	d110      	bne.n	8007a84 <_dtoa_r+0xa64>
 8007a62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a66:	d029      	beq.n	8007abc <_dtoa_r+0xa9c>
 8007a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	dd02      	ble.n	8007a74 <_dtoa_r+0xa54>
 8007a6e:	9b06      	ldr	r3, [sp, #24]
 8007a70:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007a74:	9b04      	ldr	r3, [sp, #16]
 8007a76:	f883 9000 	strb.w	r9, [r3]
 8007a7a:	e777      	b.n	800796c <_dtoa_r+0x94c>
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	e7ba      	b.n	80079f6 <_dtoa_r+0x9d6>
 8007a80:	2201      	movs	r2, #1
 8007a82:	e7e1      	b.n	8007a48 <_dtoa_r+0xa28>
 8007a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	db04      	blt.n	8007a94 <_dtoa_r+0xa74>
 8007a8a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a90:	430b      	orrs	r3, r1
 8007a92:	d120      	bne.n	8007ad6 <_dtoa_r+0xab6>
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	dded      	ble.n	8007a74 <_dtoa_r+0xa54>
 8007a98:	4651      	mov	r1, sl
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 fbad 	bl	80081fc <__lshift>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4682      	mov	sl, r0
 8007aa6:	f000 fc15 	bl	80082d4 <__mcmp>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	dc03      	bgt.n	8007ab6 <_dtoa_r+0xa96>
 8007aae:	d1e1      	bne.n	8007a74 <_dtoa_r+0xa54>
 8007ab0:	f019 0f01 	tst.w	r9, #1
 8007ab4:	d0de      	beq.n	8007a74 <_dtoa_r+0xa54>
 8007ab6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007aba:	d1d8      	bne.n	8007a6e <_dtoa_r+0xa4e>
 8007abc:	2339      	movs	r3, #57	; 0x39
 8007abe:	9a04      	ldr	r2, [sp, #16]
 8007ac0:	7013      	strb	r3, [r2, #0]
 8007ac2:	463b      	mov	r3, r7
 8007ac4:	461f      	mov	r7, r3
 8007ac6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	2a39      	cmp	r2, #57	; 0x39
 8007ace:	d06b      	beq.n	8007ba8 <_dtoa_r+0xb88>
 8007ad0:	3201      	adds	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e74a      	b.n	800796c <_dtoa_r+0x94c>
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	dd07      	ble.n	8007aea <_dtoa_r+0xaca>
 8007ada:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ade:	d0ed      	beq.n	8007abc <_dtoa_r+0xa9c>
 8007ae0:	9a04      	ldr	r2, [sp, #16]
 8007ae2:	f109 0301 	add.w	r3, r9, #1
 8007ae6:	7013      	strb	r3, [r2, #0]
 8007ae8:	e740      	b.n	800796c <_dtoa_r+0x94c>
 8007aea:	9b08      	ldr	r3, [sp, #32]
 8007aec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aee:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d042      	beq.n	8007b7c <_dtoa_r+0xb5c>
 8007af6:	4651      	mov	r1, sl
 8007af8:	2300      	movs	r3, #0
 8007afa:	220a      	movs	r2, #10
 8007afc:	4628      	mov	r0, r5
 8007afe:	f000 f9d1 	bl	8007ea4 <__multadd>
 8007b02:	45b0      	cmp	r8, r6
 8007b04:	4682      	mov	sl, r0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	f04f 020a 	mov.w	r2, #10
 8007b0e:	4641      	mov	r1, r8
 8007b10:	4628      	mov	r0, r5
 8007b12:	d107      	bne.n	8007b24 <_dtoa_r+0xb04>
 8007b14:	f000 f9c6 	bl	8007ea4 <__multadd>
 8007b18:	4680      	mov	r8, r0
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	9b08      	ldr	r3, [sp, #32]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	9308      	str	r3, [sp, #32]
 8007b22:	e775      	b.n	8007a10 <_dtoa_r+0x9f0>
 8007b24:	f000 f9be 	bl	8007ea4 <__multadd>
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	220a      	movs	r2, #10
 8007b30:	4628      	mov	r0, r5
 8007b32:	f000 f9b7 	bl	8007ea4 <__multadd>
 8007b36:	4606      	mov	r6, r0
 8007b38:	e7f0      	b.n	8007b1c <_dtoa_r+0xafc>
 8007b3a:	9b08      	ldr	r3, [sp, #32]
 8007b3c:	9306      	str	r3, [sp, #24]
 8007b3e:	9f03      	ldr	r7, [sp, #12]
 8007b40:	4621      	mov	r1, r4
 8007b42:	4650      	mov	r0, sl
 8007b44:	f7ff f9e1 	bl	8006f0a <quorem>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b4e:	f807 9b01 	strb.w	r9, [r7], #1
 8007b52:	1afa      	subs	r2, r7, r3
 8007b54:	9b06      	ldr	r3, [sp, #24]
 8007b56:	4293      	cmp	r3, r2
 8007b58:	dd07      	ble.n	8007b6a <_dtoa_r+0xb4a>
 8007b5a:	4651      	mov	r1, sl
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	220a      	movs	r2, #10
 8007b60:	4628      	mov	r0, r5
 8007b62:	f000 f99f 	bl	8007ea4 <__multadd>
 8007b66:	4682      	mov	sl, r0
 8007b68:	e7ea      	b.n	8007b40 <_dtoa_r+0xb20>
 8007b6a:	9b06      	ldr	r3, [sp, #24]
 8007b6c:	f04f 0800 	mov.w	r8, #0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfcc      	ite	gt
 8007b74:	461f      	movgt	r7, r3
 8007b76:	2701      	movle	r7, #1
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	441f      	add	r7, r3
 8007b7c:	4651      	mov	r1, sl
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 fb3b 	bl	80081fc <__lshift>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4682      	mov	sl, r0
 8007b8a:	f000 fba3 	bl	80082d4 <__mcmp>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	dc97      	bgt.n	8007ac2 <_dtoa_r+0xaa2>
 8007b92:	d102      	bne.n	8007b9a <_dtoa_r+0xb7a>
 8007b94:	f019 0f01 	tst.w	r9, #1
 8007b98:	d193      	bne.n	8007ac2 <_dtoa_r+0xaa2>
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	461f      	mov	r7, r3
 8007b9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ba2:	2a30      	cmp	r2, #48	; 0x30
 8007ba4:	d0fa      	beq.n	8007b9c <_dtoa_r+0xb7c>
 8007ba6:	e6e1      	b.n	800796c <_dtoa_r+0x94c>
 8007ba8:	9a03      	ldr	r2, [sp, #12]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d18a      	bne.n	8007ac4 <_dtoa_r+0xaa4>
 8007bae:	2331      	movs	r3, #49	; 0x31
 8007bb0:	f10b 0b01 	add.w	fp, fp, #1
 8007bb4:	e797      	b.n	8007ae6 <_dtoa_r+0xac6>
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <_dtoa_r+0xbc0>)
 8007bb8:	f7ff ba9f 	b.w	80070fa <_dtoa_r+0xda>
 8007bbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f47f aa77 	bne.w	80070b2 <_dtoa_r+0x92>
 8007bc4:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <_dtoa_r+0xbc4>)
 8007bc6:	f7ff ba98 	b.w	80070fa <_dtoa_r+0xda>
 8007bca:	9b06      	ldr	r3, [sp, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dcb6      	bgt.n	8007b3e <_dtoa_r+0xb1e>
 8007bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	f73f aeb5 	bgt.w	8007942 <_dtoa_r+0x922>
 8007bd8:	e7b1      	b.n	8007b3e <_dtoa_r+0xb1e>
 8007bda:	bf00      	nop
 8007bdc:	080090dc 	.word	0x080090dc
 8007be0:	0800903c 	.word	0x0800903c
 8007be4:	08009060 	.word	0x08009060

08007be8 <_free_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4605      	mov	r5, r0
 8007bec:	2900      	cmp	r1, #0
 8007bee:	d040      	beq.n	8007c72 <_free_r+0x8a>
 8007bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf4:	1f0c      	subs	r4, r1, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfb8      	it	lt
 8007bfa:	18e4      	addlt	r4, r4, r3
 8007bfc:	f000 f8e4 	bl	8007dc8 <__malloc_lock>
 8007c00:	4a1c      	ldr	r2, [pc, #112]	; (8007c74 <_free_r+0x8c>)
 8007c02:	6813      	ldr	r3, [r2, #0]
 8007c04:	b933      	cbnz	r3, 8007c14 <_free_r+0x2c>
 8007c06:	6063      	str	r3, [r4, #4]
 8007c08:	6014      	str	r4, [r2, #0]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c10:	f000 b8e0 	b.w	8007dd4 <__malloc_unlock>
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d908      	bls.n	8007c2a <_free_r+0x42>
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	1821      	adds	r1, r4, r0
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	bf01      	itttt	eq
 8007c20:	6819      	ldreq	r1, [r3, #0]
 8007c22:	685b      	ldreq	r3, [r3, #4]
 8007c24:	1809      	addeq	r1, r1, r0
 8007c26:	6021      	streq	r1, [r4, #0]
 8007c28:	e7ed      	b.n	8007c06 <_free_r+0x1e>
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b10b      	cbz	r3, 8007c34 <_free_r+0x4c>
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d9fa      	bls.n	8007c2a <_free_r+0x42>
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	1850      	adds	r0, r2, r1
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d10b      	bne.n	8007c54 <_free_r+0x6c>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	4401      	add	r1, r0
 8007c40:	1850      	adds	r0, r2, r1
 8007c42:	4283      	cmp	r3, r0
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	d1e0      	bne.n	8007c0a <_free_r+0x22>
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4408      	add	r0, r1
 8007c4e:	6010      	str	r0, [r2, #0]
 8007c50:	6053      	str	r3, [r2, #4]
 8007c52:	e7da      	b.n	8007c0a <_free_r+0x22>
 8007c54:	d902      	bls.n	8007c5c <_free_r+0x74>
 8007c56:	230c      	movs	r3, #12
 8007c58:	602b      	str	r3, [r5, #0]
 8007c5a:	e7d6      	b.n	8007c0a <_free_r+0x22>
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	1821      	adds	r1, r4, r0
 8007c60:	428b      	cmp	r3, r1
 8007c62:	bf01      	itttt	eq
 8007c64:	6819      	ldreq	r1, [r3, #0]
 8007c66:	685b      	ldreq	r3, [r3, #4]
 8007c68:	1809      	addeq	r1, r1, r0
 8007c6a:	6021      	streq	r1, [r4, #0]
 8007c6c:	6063      	str	r3, [r4, #4]
 8007c6e:	6054      	str	r4, [r2, #4]
 8007c70:	e7cb      	b.n	8007c0a <_free_r+0x22>
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	200005a8 	.word	0x200005a8

08007c78 <malloc>:
 8007c78:	4b02      	ldr	r3, [pc, #8]	; (8007c84 <malloc+0xc>)
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	f000 b823 	b.w	8007cc8 <_malloc_r>
 8007c82:	bf00      	nop
 8007c84:	20000068 	.word	0x20000068

08007c88 <sbrk_aligned>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	4e0e      	ldr	r6, [pc, #56]	; (8007cc4 <sbrk_aligned+0x3c>)
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	6831      	ldr	r1, [r6, #0]
 8007c90:	4605      	mov	r5, r0
 8007c92:	b911      	cbnz	r1, 8007c9a <sbrk_aligned+0x12>
 8007c94:	f000 fe38 	bl	8008908 <_sbrk_r>
 8007c98:	6030      	str	r0, [r6, #0]
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 fe33 	bl	8008908 <_sbrk_r>
 8007ca2:	1c43      	adds	r3, r0, #1
 8007ca4:	d00a      	beq.n	8007cbc <sbrk_aligned+0x34>
 8007ca6:	1cc4      	adds	r4, r0, #3
 8007ca8:	f024 0403 	bic.w	r4, r4, #3
 8007cac:	42a0      	cmp	r0, r4
 8007cae:	d007      	beq.n	8007cc0 <sbrk_aligned+0x38>
 8007cb0:	1a21      	subs	r1, r4, r0
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 fe28 	bl	8008908 <_sbrk_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d101      	bne.n	8007cc0 <sbrk_aligned+0x38>
 8007cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	200005ac 	.word	0x200005ac

08007cc8 <_malloc_r>:
 8007cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ccc:	1ccd      	adds	r5, r1, #3
 8007cce:	f025 0503 	bic.w	r5, r5, #3
 8007cd2:	3508      	adds	r5, #8
 8007cd4:	2d0c      	cmp	r5, #12
 8007cd6:	bf38      	it	cc
 8007cd8:	250c      	movcc	r5, #12
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	4607      	mov	r7, r0
 8007cde:	db01      	blt.n	8007ce4 <_malloc_r+0x1c>
 8007ce0:	42a9      	cmp	r1, r5
 8007ce2:	d905      	bls.n	8007cf0 <_malloc_r+0x28>
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	2600      	movs	r6, #0
 8007ce8:	603b      	str	r3, [r7, #0]
 8007cea:	4630      	mov	r0, r6
 8007cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007dc4 <_malloc_r+0xfc>
 8007cf4:	f000 f868 	bl	8007dc8 <__malloc_lock>
 8007cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cfc:	461c      	mov	r4, r3
 8007cfe:	bb5c      	cbnz	r4, 8007d58 <_malloc_r+0x90>
 8007d00:	4629      	mov	r1, r5
 8007d02:	4638      	mov	r0, r7
 8007d04:	f7ff ffc0 	bl	8007c88 <sbrk_aligned>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	d155      	bne.n	8007dba <_malloc_r+0xf2>
 8007d0e:	f8d8 4000 	ldr.w	r4, [r8]
 8007d12:	4626      	mov	r6, r4
 8007d14:	2e00      	cmp	r6, #0
 8007d16:	d145      	bne.n	8007da4 <_malloc_r+0xdc>
 8007d18:	2c00      	cmp	r4, #0
 8007d1a:	d048      	beq.n	8007dae <_malloc_r+0xe6>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4638      	mov	r0, r7
 8007d22:	eb04 0903 	add.w	r9, r4, r3
 8007d26:	f000 fdef 	bl	8008908 <_sbrk_r>
 8007d2a:	4581      	cmp	r9, r0
 8007d2c:	d13f      	bne.n	8007dae <_malloc_r+0xe6>
 8007d2e:	6821      	ldr	r1, [r4, #0]
 8007d30:	4638      	mov	r0, r7
 8007d32:	1a6d      	subs	r5, r5, r1
 8007d34:	4629      	mov	r1, r5
 8007d36:	f7ff ffa7 	bl	8007c88 <sbrk_aligned>
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d037      	beq.n	8007dae <_malloc_r+0xe6>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	442b      	add	r3, r5
 8007d42:	6023      	str	r3, [r4, #0]
 8007d44:	f8d8 3000 	ldr.w	r3, [r8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d038      	beq.n	8007dbe <_malloc_r+0xf6>
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	42a2      	cmp	r2, r4
 8007d50:	d12b      	bne.n	8007daa <_malloc_r+0xe2>
 8007d52:	2200      	movs	r2, #0
 8007d54:	605a      	str	r2, [r3, #4]
 8007d56:	e00f      	b.n	8007d78 <_malloc_r+0xb0>
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	1b52      	subs	r2, r2, r5
 8007d5c:	d41f      	bmi.n	8007d9e <_malloc_r+0xd6>
 8007d5e:	2a0b      	cmp	r2, #11
 8007d60:	d917      	bls.n	8007d92 <_malloc_r+0xca>
 8007d62:	1961      	adds	r1, r4, r5
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	6025      	str	r5, [r4, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	6059      	strne	r1, [r3, #4]
 8007d6c:	6863      	ldr	r3, [r4, #4]
 8007d6e:	bf08      	it	eq
 8007d70:	f8c8 1000 	streq.w	r1, [r8]
 8007d74:	5162      	str	r2, [r4, r5]
 8007d76:	604b      	str	r3, [r1, #4]
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f104 060b 	add.w	r6, r4, #11
 8007d7e:	f000 f829 	bl	8007dd4 <__malloc_unlock>
 8007d82:	f026 0607 	bic.w	r6, r6, #7
 8007d86:	1d23      	adds	r3, r4, #4
 8007d88:	1af2      	subs	r2, r6, r3
 8007d8a:	d0ae      	beq.n	8007cea <_malloc_r+0x22>
 8007d8c:	1b9b      	subs	r3, r3, r6
 8007d8e:	50a3      	str	r3, [r4, r2]
 8007d90:	e7ab      	b.n	8007cea <_malloc_r+0x22>
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	6862      	ldr	r2, [r4, #4]
 8007d96:	d1dd      	bne.n	8007d54 <_malloc_r+0x8c>
 8007d98:	f8c8 2000 	str.w	r2, [r8]
 8007d9c:	e7ec      	b.n	8007d78 <_malloc_r+0xb0>
 8007d9e:	4623      	mov	r3, r4
 8007da0:	6864      	ldr	r4, [r4, #4]
 8007da2:	e7ac      	b.n	8007cfe <_malloc_r+0x36>
 8007da4:	4634      	mov	r4, r6
 8007da6:	6876      	ldr	r6, [r6, #4]
 8007da8:	e7b4      	b.n	8007d14 <_malloc_r+0x4c>
 8007daa:	4613      	mov	r3, r2
 8007dac:	e7cc      	b.n	8007d48 <_malloc_r+0x80>
 8007dae:	230c      	movs	r3, #12
 8007db0:	4638      	mov	r0, r7
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	f000 f80e 	bl	8007dd4 <__malloc_unlock>
 8007db8:	e797      	b.n	8007cea <_malloc_r+0x22>
 8007dba:	6025      	str	r5, [r4, #0]
 8007dbc:	e7dc      	b.n	8007d78 <_malloc_r+0xb0>
 8007dbe:	605b      	str	r3, [r3, #4]
 8007dc0:	deff      	udf	#255	; 0xff
 8007dc2:	bf00      	nop
 8007dc4:	200005a8 	.word	0x200005a8

08007dc8 <__malloc_lock>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <__malloc_lock+0x8>)
 8007dca:	f7ff b88e 	b.w	8006eea <__retarget_lock_acquire_recursive>
 8007dce:	bf00      	nop
 8007dd0:	200005a4 	.word	0x200005a4

08007dd4 <__malloc_unlock>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <__malloc_unlock+0x8>)
 8007dd6:	f7ff b889 	b.w	8006eec <__retarget_lock_release_recursive>
 8007dda:	bf00      	nop
 8007ddc:	200005a4 	.word	0x200005a4

08007de0 <_Balloc>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	69c6      	ldr	r6, [r0, #28]
 8007de4:	4604      	mov	r4, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	b976      	cbnz	r6, 8007e08 <_Balloc+0x28>
 8007dea:	2010      	movs	r0, #16
 8007dec:	f7ff ff44 	bl	8007c78 <malloc>
 8007df0:	4602      	mov	r2, r0
 8007df2:	61e0      	str	r0, [r4, #28]
 8007df4:	b920      	cbnz	r0, 8007e00 <_Balloc+0x20>
 8007df6:	216b      	movs	r1, #107	; 0x6b
 8007df8:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <_Balloc+0x78>)
 8007dfa:	4818      	ldr	r0, [pc, #96]	; (8007e5c <_Balloc+0x7c>)
 8007dfc:	f000 fda2 	bl	8008944 <__assert_func>
 8007e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e04:	6006      	str	r6, [r0, #0]
 8007e06:	60c6      	str	r6, [r0, #12]
 8007e08:	69e6      	ldr	r6, [r4, #28]
 8007e0a:	68f3      	ldr	r3, [r6, #12]
 8007e0c:	b183      	cbz	r3, 8007e30 <_Balloc+0x50>
 8007e0e:	69e3      	ldr	r3, [r4, #28]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e16:	b9b8      	cbnz	r0, 8007e48 <_Balloc+0x68>
 8007e18:	2101      	movs	r1, #1
 8007e1a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e1e:	1d72      	adds	r2, r6, #5
 8007e20:	4620      	mov	r0, r4
 8007e22:	0092      	lsls	r2, r2, #2
 8007e24:	f000 fdac 	bl	8008980 <_calloc_r>
 8007e28:	b160      	cbz	r0, 8007e44 <_Balloc+0x64>
 8007e2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e2e:	e00e      	b.n	8007e4e <_Balloc+0x6e>
 8007e30:	2221      	movs	r2, #33	; 0x21
 8007e32:	2104      	movs	r1, #4
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 fda3 	bl	8008980 <_calloc_r>
 8007e3a:	69e3      	ldr	r3, [r4, #28]
 8007e3c:	60f0      	str	r0, [r6, #12]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e4      	bne.n	8007e0e <_Balloc+0x2e>
 8007e44:	2000      	movs	r0, #0
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	6802      	ldr	r2, [r0, #0]
 8007e4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e54:	e7f7      	b.n	8007e46 <_Balloc+0x66>
 8007e56:	bf00      	nop
 8007e58:	0800906d 	.word	0x0800906d
 8007e5c:	080090ed 	.word	0x080090ed

08007e60 <_Bfree>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	69c6      	ldr	r6, [r0, #28]
 8007e64:	4605      	mov	r5, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	b976      	cbnz	r6, 8007e88 <_Bfree+0x28>
 8007e6a:	2010      	movs	r0, #16
 8007e6c:	f7ff ff04 	bl	8007c78 <malloc>
 8007e70:	4602      	mov	r2, r0
 8007e72:	61e8      	str	r0, [r5, #28]
 8007e74:	b920      	cbnz	r0, 8007e80 <_Bfree+0x20>
 8007e76:	218f      	movs	r1, #143	; 0x8f
 8007e78:	4b08      	ldr	r3, [pc, #32]	; (8007e9c <_Bfree+0x3c>)
 8007e7a:	4809      	ldr	r0, [pc, #36]	; (8007ea0 <_Bfree+0x40>)
 8007e7c:	f000 fd62 	bl	8008944 <__assert_func>
 8007e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e84:	6006      	str	r6, [r0, #0]
 8007e86:	60c6      	str	r6, [r0, #12]
 8007e88:	b13c      	cbz	r4, 8007e9a <_Bfree+0x3a>
 8007e8a:	69eb      	ldr	r3, [r5, #28]
 8007e8c:	6862      	ldr	r2, [r4, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e94:	6021      	str	r1, [r4, #0]
 8007e96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	0800906d 	.word	0x0800906d
 8007ea0:	080090ed 	.word	0x080090ed

08007ea4 <__multadd>:
 8007ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	461e      	mov	r6, r3
 8007eae:	2000      	movs	r0, #0
 8007eb0:	690d      	ldr	r5, [r1, #16]
 8007eb2:	f101 0c14 	add.w	ip, r1, #20
 8007eb6:	f8dc 3000 	ldr.w	r3, [ip]
 8007eba:	3001      	adds	r0, #1
 8007ebc:	b299      	uxth	r1, r3
 8007ebe:	fb02 6101 	mla	r1, r2, r1, r6
 8007ec2:	0c1e      	lsrs	r6, r3, #16
 8007ec4:	0c0b      	lsrs	r3, r1, #16
 8007ec6:	fb02 3306 	mla	r3, r2, r6, r3
 8007eca:	b289      	uxth	r1, r1
 8007ecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ed0:	4285      	cmp	r5, r0
 8007ed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ed6:	f84c 1b04 	str.w	r1, [ip], #4
 8007eda:	dcec      	bgt.n	8007eb6 <__multadd+0x12>
 8007edc:	b30e      	cbz	r6, 8007f22 <__multadd+0x7e>
 8007ede:	68a3      	ldr	r3, [r4, #8]
 8007ee0:	42ab      	cmp	r3, r5
 8007ee2:	dc19      	bgt.n	8007f18 <__multadd+0x74>
 8007ee4:	6861      	ldr	r1, [r4, #4]
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	3101      	adds	r1, #1
 8007eea:	f7ff ff79 	bl	8007de0 <_Balloc>
 8007eee:	4680      	mov	r8, r0
 8007ef0:	b928      	cbnz	r0, 8007efe <__multadd+0x5a>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	21ba      	movs	r1, #186	; 0xba
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <__multadd+0x84>)
 8007ef8:	480c      	ldr	r0, [pc, #48]	; (8007f2c <__multadd+0x88>)
 8007efa:	f000 fd23 	bl	8008944 <__assert_func>
 8007efe:	6922      	ldr	r2, [r4, #16]
 8007f00:	f104 010c 	add.w	r1, r4, #12
 8007f04:	3202      	adds	r2, #2
 8007f06:	0092      	lsls	r2, r2, #2
 8007f08:	300c      	adds	r0, #12
 8007f0a:	f000 fd0d 	bl	8008928 <memcpy>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ffa5 	bl	8007e60 <_Bfree>
 8007f16:	4644      	mov	r4, r8
 8007f18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f1c:	3501      	adds	r5, #1
 8007f1e:	615e      	str	r6, [r3, #20]
 8007f20:	6125      	str	r5, [r4, #16]
 8007f22:	4620      	mov	r0, r4
 8007f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f28:	080090dc 	.word	0x080090dc
 8007f2c:	080090ed 	.word	0x080090ed

08007f30 <__hi0bits>:
 8007f30:	0c02      	lsrs	r2, r0, #16
 8007f32:	0412      	lsls	r2, r2, #16
 8007f34:	4603      	mov	r3, r0
 8007f36:	b9ca      	cbnz	r2, 8007f6c <__hi0bits+0x3c>
 8007f38:	0403      	lsls	r3, r0, #16
 8007f3a:	2010      	movs	r0, #16
 8007f3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f40:	bf04      	itt	eq
 8007f42:	021b      	lsleq	r3, r3, #8
 8007f44:	3008      	addeq	r0, #8
 8007f46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007f4a:	bf04      	itt	eq
 8007f4c:	011b      	lsleq	r3, r3, #4
 8007f4e:	3004      	addeq	r0, #4
 8007f50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007f54:	bf04      	itt	eq
 8007f56:	009b      	lsleq	r3, r3, #2
 8007f58:	3002      	addeq	r0, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	db05      	blt.n	8007f6a <__hi0bits+0x3a>
 8007f5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007f62:	f100 0001 	add.w	r0, r0, #1
 8007f66:	bf08      	it	eq
 8007f68:	2020      	moveq	r0, #32
 8007f6a:	4770      	bx	lr
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	e7e5      	b.n	8007f3c <__hi0bits+0xc>

08007f70 <__lo0bits>:
 8007f70:	6803      	ldr	r3, [r0, #0]
 8007f72:	4602      	mov	r2, r0
 8007f74:	f013 0007 	ands.w	r0, r3, #7
 8007f78:	d00b      	beq.n	8007f92 <__lo0bits+0x22>
 8007f7a:	07d9      	lsls	r1, r3, #31
 8007f7c:	d421      	bmi.n	8007fc2 <__lo0bits+0x52>
 8007f7e:	0798      	lsls	r0, r3, #30
 8007f80:	bf49      	itett	mi
 8007f82:	085b      	lsrmi	r3, r3, #1
 8007f84:	089b      	lsrpl	r3, r3, #2
 8007f86:	2001      	movmi	r0, #1
 8007f88:	6013      	strmi	r3, [r2, #0]
 8007f8a:	bf5c      	itt	pl
 8007f8c:	2002      	movpl	r0, #2
 8007f8e:	6013      	strpl	r3, [r2, #0]
 8007f90:	4770      	bx	lr
 8007f92:	b299      	uxth	r1, r3
 8007f94:	b909      	cbnz	r1, 8007f9a <__lo0bits+0x2a>
 8007f96:	2010      	movs	r0, #16
 8007f98:	0c1b      	lsrs	r3, r3, #16
 8007f9a:	b2d9      	uxtb	r1, r3
 8007f9c:	b909      	cbnz	r1, 8007fa2 <__lo0bits+0x32>
 8007f9e:	3008      	adds	r0, #8
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	0719      	lsls	r1, r3, #28
 8007fa4:	bf04      	itt	eq
 8007fa6:	091b      	lsreq	r3, r3, #4
 8007fa8:	3004      	addeq	r0, #4
 8007faa:	0799      	lsls	r1, r3, #30
 8007fac:	bf04      	itt	eq
 8007fae:	089b      	lsreq	r3, r3, #2
 8007fb0:	3002      	addeq	r0, #2
 8007fb2:	07d9      	lsls	r1, r3, #31
 8007fb4:	d403      	bmi.n	8007fbe <__lo0bits+0x4e>
 8007fb6:	085b      	lsrs	r3, r3, #1
 8007fb8:	f100 0001 	add.w	r0, r0, #1
 8007fbc:	d003      	beq.n	8007fc6 <__lo0bits+0x56>
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	4770      	bx	lr
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	4770      	bx	lr
 8007fc6:	2020      	movs	r0, #32
 8007fc8:	4770      	bx	lr
	...

08007fcc <__i2b>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	460c      	mov	r4, r1
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	f7ff ff05 	bl	8007de0 <_Balloc>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	b928      	cbnz	r0, 8007fe6 <__i2b+0x1a>
 8007fda:	f240 1145 	movw	r1, #325	; 0x145
 8007fde:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <__i2b+0x24>)
 8007fe0:	4804      	ldr	r0, [pc, #16]	; (8007ff4 <__i2b+0x28>)
 8007fe2:	f000 fcaf 	bl	8008944 <__assert_func>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	6144      	str	r4, [r0, #20]
 8007fea:	6103      	str	r3, [r0, #16]
 8007fec:	bd10      	pop	{r4, pc}
 8007fee:	bf00      	nop
 8007ff0:	080090dc 	.word	0x080090dc
 8007ff4:	080090ed 	.word	0x080090ed

08007ff8 <__multiply>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	4691      	mov	r9, r2
 8007ffe:	690a      	ldr	r2, [r1, #16]
 8008000:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008004:	460c      	mov	r4, r1
 8008006:	429a      	cmp	r2, r3
 8008008:	bfbe      	ittt	lt
 800800a:	460b      	movlt	r3, r1
 800800c:	464c      	movlt	r4, r9
 800800e:	4699      	movlt	r9, r3
 8008010:	6927      	ldr	r7, [r4, #16]
 8008012:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	eb07 060a 	add.w	r6, r7, sl
 800801e:	42b3      	cmp	r3, r6
 8008020:	b085      	sub	sp, #20
 8008022:	bfb8      	it	lt
 8008024:	3101      	addlt	r1, #1
 8008026:	f7ff fedb 	bl	8007de0 <_Balloc>
 800802a:	b930      	cbnz	r0, 800803a <__multiply+0x42>
 800802c:	4602      	mov	r2, r0
 800802e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008032:	4b43      	ldr	r3, [pc, #268]	; (8008140 <__multiply+0x148>)
 8008034:	4843      	ldr	r0, [pc, #268]	; (8008144 <__multiply+0x14c>)
 8008036:	f000 fc85 	bl	8008944 <__assert_func>
 800803a:	f100 0514 	add.w	r5, r0, #20
 800803e:	462b      	mov	r3, r5
 8008040:	2200      	movs	r2, #0
 8008042:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008046:	4543      	cmp	r3, r8
 8008048:	d321      	bcc.n	800808e <__multiply+0x96>
 800804a:	f104 0314 	add.w	r3, r4, #20
 800804e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008052:	f109 0314 	add.w	r3, r9, #20
 8008056:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800805a:	9202      	str	r2, [sp, #8]
 800805c:	1b3a      	subs	r2, r7, r4
 800805e:	3a15      	subs	r2, #21
 8008060:	f022 0203 	bic.w	r2, r2, #3
 8008064:	3204      	adds	r2, #4
 8008066:	f104 0115 	add.w	r1, r4, #21
 800806a:	428f      	cmp	r7, r1
 800806c:	bf38      	it	cc
 800806e:	2204      	movcc	r2, #4
 8008070:	9201      	str	r2, [sp, #4]
 8008072:	9a02      	ldr	r2, [sp, #8]
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	429a      	cmp	r2, r3
 8008078:	d80c      	bhi.n	8008094 <__multiply+0x9c>
 800807a:	2e00      	cmp	r6, #0
 800807c:	dd03      	ble.n	8008086 <__multiply+0x8e>
 800807e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008082:	2b00      	cmp	r3, #0
 8008084:	d05a      	beq.n	800813c <__multiply+0x144>
 8008086:	6106      	str	r6, [r0, #16]
 8008088:	b005      	add	sp, #20
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	f843 2b04 	str.w	r2, [r3], #4
 8008092:	e7d8      	b.n	8008046 <__multiply+0x4e>
 8008094:	f8b3 a000 	ldrh.w	sl, [r3]
 8008098:	f1ba 0f00 	cmp.w	sl, #0
 800809c:	d023      	beq.n	80080e6 <__multiply+0xee>
 800809e:	46a9      	mov	r9, r5
 80080a0:	f04f 0c00 	mov.w	ip, #0
 80080a4:	f104 0e14 	add.w	lr, r4, #20
 80080a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080ac:	f8d9 1000 	ldr.w	r1, [r9]
 80080b0:	fa1f fb82 	uxth.w	fp, r2
 80080b4:	b289      	uxth	r1, r1
 80080b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80080ba:	4461      	add	r1, ip
 80080bc:	f8d9 c000 	ldr.w	ip, [r9]
 80080c0:	0c12      	lsrs	r2, r2, #16
 80080c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80080c6:	fb0a c202 	mla	r2, sl, r2, ip
 80080ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080ce:	b289      	uxth	r1, r1
 80080d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080d4:	4577      	cmp	r7, lr
 80080d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080da:	f849 1b04 	str.w	r1, [r9], #4
 80080de:	d8e3      	bhi.n	80080a8 <__multiply+0xb0>
 80080e0:	9a01      	ldr	r2, [sp, #4]
 80080e2:	f845 c002 	str.w	ip, [r5, r2]
 80080e6:	9a03      	ldr	r2, [sp, #12]
 80080e8:	3304      	adds	r3, #4
 80080ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080ee:	f1b9 0f00 	cmp.w	r9, #0
 80080f2:	d021      	beq.n	8008138 <__multiply+0x140>
 80080f4:	46ae      	mov	lr, r5
 80080f6:	f04f 0a00 	mov.w	sl, #0
 80080fa:	6829      	ldr	r1, [r5, #0]
 80080fc:	f104 0c14 	add.w	ip, r4, #20
 8008100:	f8bc b000 	ldrh.w	fp, [ip]
 8008104:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008108:	b289      	uxth	r1, r1
 800810a:	fb09 220b 	mla	r2, r9, fp, r2
 800810e:	4452      	add	r2, sl
 8008110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008114:	f84e 1b04 	str.w	r1, [lr], #4
 8008118:	f85c 1b04 	ldr.w	r1, [ip], #4
 800811c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008120:	f8be 1000 	ldrh.w	r1, [lr]
 8008124:	4567      	cmp	r7, ip
 8008126:	fb09 110a 	mla	r1, r9, sl, r1
 800812a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800812e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008132:	d8e5      	bhi.n	8008100 <__multiply+0x108>
 8008134:	9a01      	ldr	r2, [sp, #4]
 8008136:	50a9      	str	r1, [r5, r2]
 8008138:	3504      	adds	r5, #4
 800813a:	e79a      	b.n	8008072 <__multiply+0x7a>
 800813c:	3e01      	subs	r6, #1
 800813e:	e79c      	b.n	800807a <__multiply+0x82>
 8008140:	080090dc 	.word	0x080090dc
 8008144:	080090ed 	.word	0x080090ed

08008148 <__pow5mult>:
 8008148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800814c:	4615      	mov	r5, r2
 800814e:	f012 0203 	ands.w	r2, r2, #3
 8008152:	4606      	mov	r6, r0
 8008154:	460f      	mov	r7, r1
 8008156:	d007      	beq.n	8008168 <__pow5mult+0x20>
 8008158:	4c25      	ldr	r4, [pc, #148]	; (80081f0 <__pow5mult+0xa8>)
 800815a:	3a01      	subs	r2, #1
 800815c:	2300      	movs	r3, #0
 800815e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008162:	f7ff fe9f 	bl	8007ea4 <__multadd>
 8008166:	4607      	mov	r7, r0
 8008168:	10ad      	asrs	r5, r5, #2
 800816a:	d03d      	beq.n	80081e8 <__pow5mult+0xa0>
 800816c:	69f4      	ldr	r4, [r6, #28]
 800816e:	b97c      	cbnz	r4, 8008190 <__pow5mult+0x48>
 8008170:	2010      	movs	r0, #16
 8008172:	f7ff fd81 	bl	8007c78 <malloc>
 8008176:	4602      	mov	r2, r0
 8008178:	61f0      	str	r0, [r6, #28]
 800817a:	b928      	cbnz	r0, 8008188 <__pow5mult+0x40>
 800817c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008180:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <__pow5mult+0xac>)
 8008182:	481d      	ldr	r0, [pc, #116]	; (80081f8 <__pow5mult+0xb0>)
 8008184:	f000 fbde 	bl	8008944 <__assert_func>
 8008188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800818c:	6004      	str	r4, [r0, #0]
 800818e:	60c4      	str	r4, [r0, #12]
 8008190:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008198:	b94c      	cbnz	r4, 80081ae <__pow5mult+0x66>
 800819a:	f240 2171 	movw	r1, #625	; 0x271
 800819e:	4630      	mov	r0, r6
 80081a0:	f7ff ff14 	bl	8007fcc <__i2b>
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80081ac:	6003      	str	r3, [r0, #0]
 80081ae:	f04f 0900 	mov.w	r9, #0
 80081b2:	07eb      	lsls	r3, r5, #31
 80081b4:	d50a      	bpl.n	80081cc <__pow5mult+0x84>
 80081b6:	4639      	mov	r1, r7
 80081b8:	4622      	mov	r2, r4
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff ff1c 	bl	8007ff8 <__multiply>
 80081c0:	4680      	mov	r8, r0
 80081c2:	4639      	mov	r1, r7
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff fe4b 	bl	8007e60 <_Bfree>
 80081ca:	4647      	mov	r7, r8
 80081cc:	106d      	asrs	r5, r5, #1
 80081ce:	d00b      	beq.n	80081e8 <__pow5mult+0xa0>
 80081d0:	6820      	ldr	r0, [r4, #0]
 80081d2:	b938      	cbnz	r0, 80081e4 <__pow5mult+0x9c>
 80081d4:	4622      	mov	r2, r4
 80081d6:	4621      	mov	r1, r4
 80081d8:	4630      	mov	r0, r6
 80081da:	f7ff ff0d 	bl	8007ff8 <__multiply>
 80081de:	6020      	str	r0, [r4, #0]
 80081e0:	f8c0 9000 	str.w	r9, [r0]
 80081e4:	4604      	mov	r4, r0
 80081e6:	e7e4      	b.n	80081b2 <__pow5mult+0x6a>
 80081e8:	4638      	mov	r0, r7
 80081ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ee:	bf00      	nop
 80081f0:	08009238 	.word	0x08009238
 80081f4:	0800906d 	.word	0x0800906d
 80081f8:	080090ed 	.word	0x080090ed

080081fc <__lshift>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	4607      	mov	r7, r0
 8008204:	4691      	mov	r9, r2
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	6849      	ldr	r1, [r1, #4]
 800820a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800820e:	68a3      	ldr	r3, [r4, #8]
 8008210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008214:	f108 0601 	add.w	r6, r8, #1
 8008218:	42b3      	cmp	r3, r6
 800821a:	db0b      	blt.n	8008234 <__lshift+0x38>
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff fddf 	bl	8007de0 <_Balloc>
 8008222:	4605      	mov	r5, r0
 8008224:	b948      	cbnz	r0, 800823a <__lshift+0x3e>
 8008226:	4602      	mov	r2, r0
 8008228:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800822c:	4b27      	ldr	r3, [pc, #156]	; (80082cc <__lshift+0xd0>)
 800822e:	4828      	ldr	r0, [pc, #160]	; (80082d0 <__lshift+0xd4>)
 8008230:	f000 fb88 	bl	8008944 <__assert_func>
 8008234:	3101      	adds	r1, #1
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	e7ee      	b.n	8008218 <__lshift+0x1c>
 800823a:	2300      	movs	r3, #0
 800823c:	f100 0114 	add.w	r1, r0, #20
 8008240:	f100 0210 	add.w	r2, r0, #16
 8008244:	4618      	mov	r0, r3
 8008246:	4553      	cmp	r3, sl
 8008248:	db33      	blt.n	80082b2 <__lshift+0xb6>
 800824a:	6920      	ldr	r0, [r4, #16]
 800824c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008250:	f104 0314 	add.w	r3, r4, #20
 8008254:	f019 091f 	ands.w	r9, r9, #31
 8008258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800825c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008260:	d02b      	beq.n	80082ba <__lshift+0xbe>
 8008262:	468a      	mov	sl, r1
 8008264:	2200      	movs	r2, #0
 8008266:	f1c9 0e20 	rsb	lr, r9, #32
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	fa00 f009 	lsl.w	r0, r0, r9
 8008270:	4310      	orrs	r0, r2
 8008272:	f84a 0b04 	str.w	r0, [sl], #4
 8008276:	f853 2b04 	ldr.w	r2, [r3], #4
 800827a:	459c      	cmp	ip, r3
 800827c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008280:	d8f3      	bhi.n	800826a <__lshift+0x6e>
 8008282:	ebac 0304 	sub.w	r3, ip, r4
 8008286:	3b15      	subs	r3, #21
 8008288:	f023 0303 	bic.w	r3, r3, #3
 800828c:	3304      	adds	r3, #4
 800828e:	f104 0015 	add.w	r0, r4, #21
 8008292:	4584      	cmp	ip, r0
 8008294:	bf38      	it	cc
 8008296:	2304      	movcc	r3, #4
 8008298:	50ca      	str	r2, [r1, r3]
 800829a:	b10a      	cbz	r2, 80082a0 <__lshift+0xa4>
 800829c:	f108 0602 	add.w	r6, r8, #2
 80082a0:	3e01      	subs	r6, #1
 80082a2:	4638      	mov	r0, r7
 80082a4:	4621      	mov	r1, r4
 80082a6:	612e      	str	r6, [r5, #16]
 80082a8:	f7ff fdda 	bl	8007e60 <_Bfree>
 80082ac:	4628      	mov	r0, r5
 80082ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082b6:	3301      	adds	r3, #1
 80082b8:	e7c5      	b.n	8008246 <__lshift+0x4a>
 80082ba:	3904      	subs	r1, #4
 80082bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c0:	459c      	cmp	ip, r3
 80082c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80082c6:	d8f9      	bhi.n	80082bc <__lshift+0xc0>
 80082c8:	e7ea      	b.n	80082a0 <__lshift+0xa4>
 80082ca:	bf00      	nop
 80082cc:	080090dc 	.word	0x080090dc
 80082d0:	080090ed 	.word	0x080090ed

080082d4 <__mcmp>:
 80082d4:	4603      	mov	r3, r0
 80082d6:	690a      	ldr	r2, [r1, #16]
 80082d8:	6900      	ldr	r0, [r0, #16]
 80082da:	b530      	push	{r4, r5, lr}
 80082dc:	1a80      	subs	r0, r0, r2
 80082de:	d10d      	bne.n	80082fc <__mcmp+0x28>
 80082e0:	3314      	adds	r3, #20
 80082e2:	3114      	adds	r1, #20
 80082e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80082e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80082ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082f4:	4295      	cmp	r5, r2
 80082f6:	d002      	beq.n	80082fe <__mcmp+0x2a>
 80082f8:	d304      	bcc.n	8008304 <__mcmp+0x30>
 80082fa:	2001      	movs	r0, #1
 80082fc:	bd30      	pop	{r4, r5, pc}
 80082fe:	42a3      	cmp	r3, r4
 8008300:	d3f4      	bcc.n	80082ec <__mcmp+0x18>
 8008302:	e7fb      	b.n	80082fc <__mcmp+0x28>
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	e7f8      	b.n	80082fc <__mcmp+0x28>
	...

0800830c <__mdiff>:
 800830c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	460d      	mov	r5, r1
 8008312:	4607      	mov	r7, r0
 8008314:	4611      	mov	r1, r2
 8008316:	4628      	mov	r0, r5
 8008318:	4614      	mov	r4, r2
 800831a:	f7ff ffdb 	bl	80082d4 <__mcmp>
 800831e:	1e06      	subs	r6, r0, #0
 8008320:	d111      	bne.n	8008346 <__mdiff+0x3a>
 8008322:	4631      	mov	r1, r6
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff fd5b 	bl	8007de0 <_Balloc>
 800832a:	4602      	mov	r2, r0
 800832c:	b928      	cbnz	r0, 800833a <__mdiff+0x2e>
 800832e:	f240 2137 	movw	r1, #567	; 0x237
 8008332:	4b3a      	ldr	r3, [pc, #232]	; (800841c <__mdiff+0x110>)
 8008334:	483a      	ldr	r0, [pc, #232]	; (8008420 <__mdiff+0x114>)
 8008336:	f000 fb05 	bl	8008944 <__assert_func>
 800833a:	2301      	movs	r3, #1
 800833c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008340:	4610      	mov	r0, r2
 8008342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	bfa4      	itt	ge
 8008348:	4623      	movge	r3, r4
 800834a:	462c      	movge	r4, r5
 800834c:	4638      	mov	r0, r7
 800834e:	6861      	ldr	r1, [r4, #4]
 8008350:	bfa6      	itte	ge
 8008352:	461d      	movge	r5, r3
 8008354:	2600      	movge	r6, #0
 8008356:	2601      	movlt	r6, #1
 8008358:	f7ff fd42 	bl	8007de0 <_Balloc>
 800835c:	4602      	mov	r2, r0
 800835e:	b918      	cbnz	r0, 8008368 <__mdiff+0x5c>
 8008360:	f240 2145 	movw	r1, #581	; 0x245
 8008364:	4b2d      	ldr	r3, [pc, #180]	; (800841c <__mdiff+0x110>)
 8008366:	e7e5      	b.n	8008334 <__mdiff+0x28>
 8008368:	f102 0814 	add.w	r8, r2, #20
 800836c:	46c2      	mov	sl, r8
 800836e:	f04f 0c00 	mov.w	ip, #0
 8008372:	6927      	ldr	r7, [r4, #16]
 8008374:	60c6      	str	r6, [r0, #12]
 8008376:	692e      	ldr	r6, [r5, #16]
 8008378:	f104 0014 	add.w	r0, r4, #20
 800837c:	f105 0914 	add.w	r9, r5, #20
 8008380:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008384:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008388:	3410      	adds	r4, #16
 800838a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800838e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008392:	fa1f f18b 	uxth.w	r1, fp
 8008396:	4461      	add	r1, ip
 8008398:	fa1f fc83 	uxth.w	ip, r3
 800839c:	0c1b      	lsrs	r3, r3, #16
 800839e:	eba1 010c 	sub.w	r1, r1, ip
 80083a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80083aa:	b289      	uxth	r1, r1
 80083ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80083b0:	454e      	cmp	r6, r9
 80083b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80083b6:	f84a 1b04 	str.w	r1, [sl], #4
 80083ba:	d8e6      	bhi.n	800838a <__mdiff+0x7e>
 80083bc:	1b73      	subs	r3, r6, r5
 80083be:	3b15      	subs	r3, #21
 80083c0:	f023 0303 	bic.w	r3, r3, #3
 80083c4:	3515      	adds	r5, #21
 80083c6:	3304      	adds	r3, #4
 80083c8:	42ae      	cmp	r6, r5
 80083ca:	bf38      	it	cc
 80083cc:	2304      	movcc	r3, #4
 80083ce:	4418      	add	r0, r3
 80083d0:	4443      	add	r3, r8
 80083d2:	461e      	mov	r6, r3
 80083d4:	4605      	mov	r5, r0
 80083d6:	4575      	cmp	r5, lr
 80083d8:	d30e      	bcc.n	80083f8 <__mdiff+0xec>
 80083da:	f10e 0103 	add.w	r1, lr, #3
 80083de:	1a09      	subs	r1, r1, r0
 80083e0:	f021 0103 	bic.w	r1, r1, #3
 80083e4:	3803      	subs	r0, #3
 80083e6:	4586      	cmp	lr, r0
 80083e8:	bf38      	it	cc
 80083ea:	2100      	movcc	r1, #0
 80083ec:	440b      	add	r3, r1
 80083ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083f2:	b189      	cbz	r1, 8008418 <__mdiff+0x10c>
 80083f4:	6117      	str	r7, [r2, #16]
 80083f6:	e7a3      	b.n	8008340 <__mdiff+0x34>
 80083f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80083fc:	fa1f f188 	uxth.w	r1, r8
 8008400:	4461      	add	r1, ip
 8008402:	140c      	asrs	r4, r1, #16
 8008404:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008408:	b289      	uxth	r1, r1
 800840a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800840e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008412:	f846 1b04 	str.w	r1, [r6], #4
 8008416:	e7de      	b.n	80083d6 <__mdiff+0xca>
 8008418:	3f01      	subs	r7, #1
 800841a:	e7e8      	b.n	80083ee <__mdiff+0xe2>
 800841c:	080090dc 	.word	0x080090dc
 8008420:	080090ed 	.word	0x080090ed

08008424 <__d2b>:
 8008424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008426:	2101      	movs	r1, #1
 8008428:	4617      	mov	r7, r2
 800842a:	461c      	mov	r4, r3
 800842c:	9e08      	ldr	r6, [sp, #32]
 800842e:	f7ff fcd7 	bl	8007de0 <_Balloc>
 8008432:	4605      	mov	r5, r0
 8008434:	b930      	cbnz	r0, 8008444 <__d2b+0x20>
 8008436:	4602      	mov	r2, r0
 8008438:	f240 310f 	movw	r1, #783	; 0x30f
 800843c:	4b22      	ldr	r3, [pc, #136]	; (80084c8 <__d2b+0xa4>)
 800843e:	4823      	ldr	r0, [pc, #140]	; (80084cc <__d2b+0xa8>)
 8008440:	f000 fa80 	bl	8008944 <__assert_func>
 8008444:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008448:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800844c:	bb24      	cbnz	r4, 8008498 <__d2b+0x74>
 800844e:	2f00      	cmp	r7, #0
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	d026      	beq.n	80084a2 <__d2b+0x7e>
 8008454:	4668      	mov	r0, sp
 8008456:	9700      	str	r7, [sp, #0]
 8008458:	f7ff fd8a 	bl	8007f70 <__lo0bits>
 800845c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008460:	b1e8      	cbz	r0, 800849e <__d2b+0x7a>
 8008462:	f1c0 0320 	rsb	r3, r0, #32
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	430b      	orrs	r3, r1
 800846c:	40c2      	lsrs	r2, r0
 800846e:	616b      	str	r3, [r5, #20]
 8008470:	9201      	str	r2, [sp, #4]
 8008472:	9b01      	ldr	r3, [sp, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	bf14      	ite	ne
 8008478:	2102      	movne	r1, #2
 800847a:	2101      	moveq	r1, #1
 800847c:	61ab      	str	r3, [r5, #24]
 800847e:	6129      	str	r1, [r5, #16]
 8008480:	b1bc      	cbz	r4, 80084b2 <__d2b+0x8e>
 8008482:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008486:	4404      	add	r4, r0
 8008488:	6034      	str	r4, [r6, #0]
 800848a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008490:	6018      	str	r0, [r3, #0]
 8008492:	4628      	mov	r0, r5
 8008494:	b003      	add	sp, #12
 8008496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800849c:	e7d7      	b.n	800844e <__d2b+0x2a>
 800849e:	6169      	str	r1, [r5, #20]
 80084a0:	e7e7      	b.n	8008472 <__d2b+0x4e>
 80084a2:	a801      	add	r0, sp, #4
 80084a4:	f7ff fd64 	bl	8007f70 <__lo0bits>
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	2101      	movs	r1, #1
 80084ac:	616b      	str	r3, [r5, #20]
 80084ae:	3020      	adds	r0, #32
 80084b0:	e7e5      	b.n	800847e <__d2b+0x5a>
 80084b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084b6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80084ba:	6030      	str	r0, [r6, #0]
 80084bc:	6918      	ldr	r0, [r3, #16]
 80084be:	f7ff fd37 	bl	8007f30 <__hi0bits>
 80084c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80084c6:	e7e2      	b.n	800848e <__d2b+0x6a>
 80084c8:	080090dc 	.word	0x080090dc
 80084cc:	080090ed 	.word	0x080090ed

080084d0 <__ssputs_r>:
 80084d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	461f      	mov	r7, r3
 80084d6:	688e      	ldr	r6, [r1, #8]
 80084d8:	4682      	mov	sl, r0
 80084da:	42be      	cmp	r6, r7
 80084dc:	460c      	mov	r4, r1
 80084de:	4690      	mov	r8, r2
 80084e0:	680b      	ldr	r3, [r1, #0]
 80084e2:	d82c      	bhi.n	800853e <__ssputs_r+0x6e>
 80084e4:	898a      	ldrh	r2, [r1, #12]
 80084e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084ea:	d026      	beq.n	800853a <__ssputs_r+0x6a>
 80084ec:	6965      	ldr	r5, [r4, #20]
 80084ee:	6909      	ldr	r1, [r1, #16]
 80084f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084f4:	eba3 0901 	sub.w	r9, r3, r1
 80084f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084fc:	1c7b      	adds	r3, r7, #1
 80084fe:	444b      	add	r3, r9
 8008500:	106d      	asrs	r5, r5, #1
 8008502:	429d      	cmp	r5, r3
 8008504:	bf38      	it	cc
 8008506:	461d      	movcc	r5, r3
 8008508:	0553      	lsls	r3, r2, #21
 800850a:	d527      	bpl.n	800855c <__ssputs_r+0x8c>
 800850c:	4629      	mov	r1, r5
 800850e:	f7ff fbdb 	bl	8007cc8 <_malloc_r>
 8008512:	4606      	mov	r6, r0
 8008514:	b360      	cbz	r0, 8008570 <__ssputs_r+0xa0>
 8008516:	464a      	mov	r2, r9
 8008518:	6921      	ldr	r1, [r4, #16]
 800851a:	f000 fa05 	bl	8008928 <memcpy>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	6126      	str	r6, [r4, #16]
 800852c:	444e      	add	r6, r9
 800852e:	6026      	str	r6, [r4, #0]
 8008530:	463e      	mov	r6, r7
 8008532:	6165      	str	r5, [r4, #20]
 8008534:	eba5 0509 	sub.w	r5, r5, r9
 8008538:	60a5      	str	r5, [r4, #8]
 800853a:	42be      	cmp	r6, r7
 800853c:	d900      	bls.n	8008540 <__ssputs_r+0x70>
 800853e:	463e      	mov	r6, r7
 8008540:	4632      	mov	r2, r6
 8008542:	4641      	mov	r1, r8
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	f000 f9c5 	bl	80088d4 <memmove>
 800854a:	2000      	movs	r0, #0
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	1b9b      	subs	r3, r3, r6
 8008550:	60a3      	str	r3, [r4, #8]
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	4433      	add	r3, r6
 8008556:	6023      	str	r3, [r4, #0]
 8008558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855c:	462a      	mov	r2, r5
 800855e:	f000 fa35 	bl	80089cc <_realloc_r>
 8008562:	4606      	mov	r6, r0
 8008564:	2800      	cmp	r0, #0
 8008566:	d1e0      	bne.n	800852a <__ssputs_r+0x5a>
 8008568:	4650      	mov	r0, sl
 800856a:	6921      	ldr	r1, [r4, #16]
 800856c:	f7ff fb3c 	bl	8007be8 <_free_r>
 8008570:	230c      	movs	r3, #12
 8008572:	f8ca 3000 	str.w	r3, [sl]
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	e7e9      	b.n	8008558 <__ssputs_r+0x88>

08008584 <_svfiprintf_r>:
 8008584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	4698      	mov	r8, r3
 800858a:	898b      	ldrh	r3, [r1, #12]
 800858c:	4607      	mov	r7, r0
 800858e:	061b      	lsls	r3, r3, #24
 8008590:	460d      	mov	r5, r1
 8008592:	4614      	mov	r4, r2
 8008594:	b09d      	sub	sp, #116	; 0x74
 8008596:	d50e      	bpl.n	80085b6 <_svfiprintf_r+0x32>
 8008598:	690b      	ldr	r3, [r1, #16]
 800859a:	b963      	cbnz	r3, 80085b6 <_svfiprintf_r+0x32>
 800859c:	2140      	movs	r1, #64	; 0x40
 800859e:	f7ff fb93 	bl	8007cc8 <_malloc_r>
 80085a2:	6028      	str	r0, [r5, #0]
 80085a4:	6128      	str	r0, [r5, #16]
 80085a6:	b920      	cbnz	r0, 80085b2 <_svfiprintf_r+0x2e>
 80085a8:	230c      	movs	r3, #12
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	e0d0      	b.n	8008754 <_svfiprintf_r+0x1d0>
 80085b2:	2340      	movs	r3, #64	; 0x40
 80085b4:	616b      	str	r3, [r5, #20]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ba:	2320      	movs	r3, #32
 80085bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085c0:	2330      	movs	r3, #48	; 0x30
 80085c2:	f04f 0901 	mov.w	r9, #1
 80085c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800876c <_svfiprintf_r+0x1e8>
 80085ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085d2:	4623      	mov	r3, r4
 80085d4:	469a      	mov	sl, r3
 80085d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085da:	b10a      	cbz	r2, 80085e0 <_svfiprintf_r+0x5c>
 80085dc:	2a25      	cmp	r2, #37	; 0x25
 80085de:	d1f9      	bne.n	80085d4 <_svfiprintf_r+0x50>
 80085e0:	ebba 0b04 	subs.w	fp, sl, r4
 80085e4:	d00b      	beq.n	80085fe <_svfiprintf_r+0x7a>
 80085e6:	465b      	mov	r3, fp
 80085e8:	4622      	mov	r2, r4
 80085ea:	4629      	mov	r1, r5
 80085ec:	4638      	mov	r0, r7
 80085ee:	f7ff ff6f 	bl	80084d0 <__ssputs_r>
 80085f2:	3001      	adds	r0, #1
 80085f4:	f000 80a9 	beq.w	800874a <_svfiprintf_r+0x1c6>
 80085f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085fa:	445a      	add	r2, fp
 80085fc:	9209      	str	r2, [sp, #36]	; 0x24
 80085fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 80a1 	beq.w	800874a <_svfiprintf_r+0x1c6>
 8008608:	2300      	movs	r3, #0
 800860a:	f04f 32ff 	mov.w	r2, #4294967295
 800860e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008612:	f10a 0a01 	add.w	sl, sl, #1
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	9307      	str	r3, [sp, #28]
 800861a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800861e:	931a      	str	r3, [sp, #104]	; 0x68
 8008620:	4654      	mov	r4, sl
 8008622:	2205      	movs	r2, #5
 8008624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008628:	4850      	ldr	r0, [pc, #320]	; (800876c <_svfiprintf_r+0x1e8>)
 800862a:	f7fe fc60 	bl	8006eee <memchr>
 800862e:	9a04      	ldr	r2, [sp, #16]
 8008630:	b9d8      	cbnz	r0, 800866a <_svfiprintf_r+0xe6>
 8008632:	06d0      	lsls	r0, r2, #27
 8008634:	bf44      	itt	mi
 8008636:	2320      	movmi	r3, #32
 8008638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800863c:	0711      	lsls	r1, r2, #28
 800863e:	bf44      	itt	mi
 8008640:	232b      	movmi	r3, #43	; 0x2b
 8008642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008646:	f89a 3000 	ldrb.w	r3, [sl]
 800864a:	2b2a      	cmp	r3, #42	; 0x2a
 800864c:	d015      	beq.n	800867a <_svfiprintf_r+0xf6>
 800864e:	4654      	mov	r4, sl
 8008650:	2000      	movs	r0, #0
 8008652:	f04f 0c0a 	mov.w	ip, #10
 8008656:	9a07      	ldr	r2, [sp, #28]
 8008658:	4621      	mov	r1, r4
 800865a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865e:	3b30      	subs	r3, #48	; 0x30
 8008660:	2b09      	cmp	r3, #9
 8008662:	d94d      	bls.n	8008700 <_svfiprintf_r+0x17c>
 8008664:	b1b0      	cbz	r0, 8008694 <_svfiprintf_r+0x110>
 8008666:	9207      	str	r2, [sp, #28]
 8008668:	e014      	b.n	8008694 <_svfiprintf_r+0x110>
 800866a:	eba0 0308 	sub.w	r3, r0, r8
 800866e:	fa09 f303 	lsl.w	r3, r9, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	46a2      	mov	sl, r4
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	e7d2      	b.n	8008620 <_svfiprintf_r+0x9c>
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	1d19      	adds	r1, r3, #4
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	9103      	str	r1, [sp, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	bfbb      	ittet	lt
 8008686:	425b      	neglt	r3, r3
 8008688:	f042 0202 	orrlt.w	r2, r2, #2
 800868c:	9307      	strge	r3, [sp, #28]
 800868e:	9307      	strlt	r3, [sp, #28]
 8008690:	bfb8      	it	lt
 8008692:	9204      	strlt	r2, [sp, #16]
 8008694:	7823      	ldrb	r3, [r4, #0]
 8008696:	2b2e      	cmp	r3, #46	; 0x2e
 8008698:	d10c      	bne.n	80086b4 <_svfiprintf_r+0x130>
 800869a:	7863      	ldrb	r3, [r4, #1]
 800869c:	2b2a      	cmp	r3, #42	; 0x2a
 800869e:	d134      	bne.n	800870a <_svfiprintf_r+0x186>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	3402      	adds	r4, #2
 80086a4:	1d1a      	adds	r2, r3, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	9203      	str	r2, [sp, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfb8      	it	lt
 80086ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80086b2:	9305      	str	r3, [sp, #20]
 80086b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008770 <_svfiprintf_r+0x1ec>
 80086b8:	2203      	movs	r2, #3
 80086ba:	4650      	mov	r0, sl
 80086bc:	7821      	ldrb	r1, [r4, #0]
 80086be:	f7fe fc16 	bl	8006eee <memchr>
 80086c2:	b138      	cbz	r0, 80086d4 <_svfiprintf_r+0x150>
 80086c4:	2240      	movs	r2, #64	; 0x40
 80086c6:	9b04      	ldr	r3, [sp, #16]
 80086c8:	eba0 000a 	sub.w	r0, r0, sl
 80086cc:	4082      	lsls	r2, r0
 80086ce:	4313      	orrs	r3, r2
 80086d0:	3401      	adds	r4, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d8:	2206      	movs	r2, #6
 80086da:	4826      	ldr	r0, [pc, #152]	; (8008774 <_svfiprintf_r+0x1f0>)
 80086dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086e0:	f7fe fc05 	bl	8006eee <memchr>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d038      	beq.n	800875a <_svfiprintf_r+0x1d6>
 80086e8:	4b23      	ldr	r3, [pc, #140]	; (8008778 <_svfiprintf_r+0x1f4>)
 80086ea:	bb1b      	cbnz	r3, 8008734 <_svfiprintf_r+0x1b0>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	3307      	adds	r3, #7
 80086f0:	f023 0307 	bic.w	r3, r3, #7
 80086f4:	3308      	adds	r3, #8
 80086f6:	9303      	str	r3, [sp, #12]
 80086f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fa:	4433      	add	r3, r6
 80086fc:	9309      	str	r3, [sp, #36]	; 0x24
 80086fe:	e768      	b.n	80085d2 <_svfiprintf_r+0x4e>
 8008700:	460c      	mov	r4, r1
 8008702:	2001      	movs	r0, #1
 8008704:	fb0c 3202 	mla	r2, ip, r2, r3
 8008708:	e7a6      	b.n	8008658 <_svfiprintf_r+0xd4>
 800870a:	2300      	movs	r3, #0
 800870c:	f04f 0c0a 	mov.w	ip, #10
 8008710:	4619      	mov	r1, r3
 8008712:	3401      	adds	r4, #1
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	4620      	mov	r0, r4
 8008718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871c:	3a30      	subs	r2, #48	; 0x30
 800871e:	2a09      	cmp	r2, #9
 8008720:	d903      	bls.n	800872a <_svfiprintf_r+0x1a6>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c6      	beq.n	80086b4 <_svfiprintf_r+0x130>
 8008726:	9105      	str	r1, [sp, #20]
 8008728:	e7c4      	b.n	80086b4 <_svfiprintf_r+0x130>
 800872a:	4604      	mov	r4, r0
 800872c:	2301      	movs	r3, #1
 800872e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008732:	e7f0      	b.n	8008716 <_svfiprintf_r+0x192>
 8008734:	ab03      	add	r3, sp, #12
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	462a      	mov	r2, r5
 800873a:	4638      	mov	r0, r7
 800873c:	4b0f      	ldr	r3, [pc, #60]	; (800877c <_svfiprintf_r+0x1f8>)
 800873e:	a904      	add	r1, sp, #16
 8008740:	f7fd fe6e 	bl	8006420 <_printf_float>
 8008744:	1c42      	adds	r2, r0, #1
 8008746:	4606      	mov	r6, r0
 8008748:	d1d6      	bne.n	80086f8 <_svfiprintf_r+0x174>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	065b      	lsls	r3, r3, #25
 800874e:	f53f af2d 	bmi.w	80085ac <_svfiprintf_r+0x28>
 8008752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008754:	b01d      	add	sp, #116	; 0x74
 8008756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875a:	ab03      	add	r3, sp, #12
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	462a      	mov	r2, r5
 8008760:	4638      	mov	r0, r7
 8008762:	4b06      	ldr	r3, [pc, #24]	; (800877c <_svfiprintf_r+0x1f8>)
 8008764:	a904      	add	r1, sp, #16
 8008766:	f7fe f8fb 	bl	8006960 <_printf_i>
 800876a:	e7eb      	b.n	8008744 <_svfiprintf_r+0x1c0>
 800876c:	08009244 	.word	0x08009244
 8008770:	0800924a 	.word	0x0800924a
 8008774:	0800924e 	.word	0x0800924e
 8008778:	08006421 	.word	0x08006421
 800877c:	080084d1 	.word	0x080084d1

08008780 <__sflush_r>:
 8008780:	898a      	ldrh	r2, [r1, #12]
 8008782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008784:	4605      	mov	r5, r0
 8008786:	0710      	lsls	r0, r2, #28
 8008788:	460c      	mov	r4, r1
 800878a:	d457      	bmi.n	800883c <__sflush_r+0xbc>
 800878c:	684b      	ldr	r3, [r1, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	dc04      	bgt.n	800879c <__sflush_r+0x1c>
 8008792:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	dc01      	bgt.n	800879c <__sflush_r+0x1c>
 8008798:	2000      	movs	r0, #0
 800879a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800879c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800879e:	2e00      	cmp	r6, #0
 80087a0:	d0fa      	beq.n	8008798 <__sflush_r+0x18>
 80087a2:	2300      	movs	r3, #0
 80087a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087a8:	682f      	ldr	r7, [r5, #0]
 80087aa:	6a21      	ldr	r1, [r4, #32]
 80087ac:	602b      	str	r3, [r5, #0]
 80087ae:	d032      	beq.n	8008816 <__sflush_r+0x96>
 80087b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	075a      	lsls	r2, r3, #29
 80087b6:	d505      	bpl.n	80087c4 <__sflush_r+0x44>
 80087b8:	6863      	ldr	r3, [r4, #4]
 80087ba:	1ac0      	subs	r0, r0, r3
 80087bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087be:	b10b      	cbz	r3, 80087c4 <__sflush_r+0x44>
 80087c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087c2:	1ac0      	subs	r0, r0, r3
 80087c4:	2300      	movs	r3, #0
 80087c6:	4602      	mov	r2, r0
 80087c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ca:	4628      	mov	r0, r5
 80087cc:	6a21      	ldr	r1, [r4, #32]
 80087ce:	47b0      	blx	r6
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	d106      	bne.n	80087e4 <__sflush_r+0x64>
 80087d6:	6829      	ldr	r1, [r5, #0]
 80087d8:	291d      	cmp	r1, #29
 80087da:	d82b      	bhi.n	8008834 <__sflush_r+0xb4>
 80087dc:	4a28      	ldr	r2, [pc, #160]	; (8008880 <__sflush_r+0x100>)
 80087de:	410a      	asrs	r2, r1
 80087e0:	07d6      	lsls	r6, r2, #31
 80087e2:	d427      	bmi.n	8008834 <__sflush_r+0xb4>
 80087e4:	2200      	movs	r2, #0
 80087e6:	6062      	str	r2, [r4, #4]
 80087e8:	6922      	ldr	r2, [r4, #16]
 80087ea:	04d9      	lsls	r1, r3, #19
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	d504      	bpl.n	80087fa <__sflush_r+0x7a>
 80087f0:	1c42      	adds	r2, r0, #1
 80087f2:	d101      	bne.n	80087f8 <__sflush_r+0x78>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b903      	cbnz	r3, 80087fa <__sflush_r+0x7a>
 80087f8:	6560      	str	r0, [r4, #84]	; 0x54
 80087fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087fc:	602f      	str	r7, [r5, #0]
 80087fe:	2900      	cmp	r1, #0
 8008800:	d0ca      	beq.n	8008798 <__sflush_r+0x18>
 8008802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008806:	4299      	cmp	r1, r3
 8008808:	d002      	beq.n	8008810 <__sflush_r+0x90>
 800880a:	4628      	mov	r0, r5
 800880c:	f7ff f9ec 	bl	8007be8 <_free_r>
 8008810:	2000      	movs	r0, #0
 8008812:	6360      	str	r0, [r4, #52]	; 0x34
 8008814:	e7c1      	b.n	800879a <__sflush_r+0x1a>
 8008816:	2301      	movs	r3, #1
 8008818:	4628      	mov	r0, r5
 800881a:	47b0      	blx	r6
 800881c:	1c41      	adds	r1, r0, #1
 800881e:	d1c8      	bne.n	80087b2 <__sflush_r+0x32>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0c5      	beq.n	80087b2 <__sflush_r+0x32>
 8008826:	2b1d      	cmp	r3, #29
 8008828:	d001      	beq.n	800882e <__sflush_r+0xae>
 800882a:	2b16      	cmp	r3, #22
 800882c:	d101      	bne.n	8008832 <__sflush_r+0xb2>
 800882e:	602f      	str	r7, [r5, #0]
 8008830:	e7b2      	b.n	8008798 <__sflush_r+0x18>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	e7ae      	b.n	800879a <__sflush_r+0x1a>
 800883c:	690f      	ldr	r7, [r1, #16]
 800883e:	2f00      	cmp	r7, #0
 8008840:	d0aa      	beq.n	8008798 <__sflush_r+0x18>
 8008842:	0793      	lsls	r3, r2, #30
 8008844:	bf18      	it	ne
 8008846:	2300      	movne	r3, #0
 8008848:	680e      	ldr	r6, [r1, #0]
 800884a:	bf08      	it	eq
 800884c:	694b      	ldreq	r3, [r1, #20]
 800884e:	1bf6      	subs	r6, r6, r7
 8008850:	600f      	str	r7, [r1, #0]
 8008852:	608b      	str	r3, [r1, #8]
 8008854:	2e00      	cmp	r6, #0
 8008856:	dd9f      	ble.n	8008798 <__sflush_r+0x18>
 8008858:	4633      	mov	r3, r6
 800885a:	463a      	mov	r2, r7
 800885c:	4628      	mov	r0, r5
 800885e:	6a21      	ldr	r1, [r4, #32]
 8008860:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008864:	47e0      	blx	ip
 8008866:	2800      	cmp	r0, #0
 8008868:	dc06      	bgt.n	8008878 <__sflush_r+0xf8>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	e790      	b.n	800879a <__sflush_r+0x1a>
 8008878:	4407      	add	r7, r0
 800887a:	1a36      	subs	r6, r6, r0
 800887c:	e7ea      	b.n	8008854 <__sflush_r+0xd4>
 800887e:	bf00      	nop
 8008880:	dfbffffe 	.word	0xdfbffffe

08008884 <_fflush_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	690b      	ldr	r3, [r1, #16]
 8008888:	4605      	mov	r5, r0
 800888a:	460c      	mov	r4, r1
 800888c:	b913      	cbnz	r3, 8008894 <_fflush_r+0x10>
 800888e:	2500      	movs	r5, #0
 8008890:	4628      	mov	r0, r5
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	b118      	cbz	r0, 800889e <_fflush_r+0x1a>
 8008896:	6a03      	ldr	r3, [r0, #32]
 8008898:	b90b      	cbnz	r3, 800889e <_fflush_r+0x1a>
 800889a:	f7fe fa0f 	bl	8006cbc <__sinit>
 800889e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f3      	beq.n	800888e <_fflush_r+0xa>
 80088a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088a8:	07d0      	lsls	r0, r2, #31
 80088aa:	d404      	bmi.n	80088b6 <_fflush_r+0x32>
 80088ac:	0599      	lsls	r1, r3, #22
 80088ae:	d402      	bmi.n	80088b6 <_fflush_r+0x32>
 80088b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b2:	f7fe fb1a 	bl	8006eea <__retarget_lock_acquire_recursive>
 80088b6:	4628      	mov	r0, r5
 80088b8:	4621      	mov	r1, r4
 80088ba:	f7ff ff61 	bl	8008780 <__sflush_r>
 80088be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088c0:	4605      	mov	r5, r0
 80088c2:	07da      	lsls	r2, r3, #31
 80088c4:	d4e4      	bmi.n	8008890 <_fflush_r+0xc>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	059b      	lsls	r3, r3, #22
 80088ca:	d4e1      	bmi.n	8008890 <_fflush_r+0xc>
 80088cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ce:	f7fe fb0d 	bl	8006eec <__retarget_lock_release_recursive>
 80088d2:	e7dd      	b.n	8008890 <_fflush_r+0xc>

080088d4 <memmove>:
 80088d4:	4288      	cmp	r0, r1
 80088d6:	b510      	push	{r4, lr}
 80088d8:	eb01 0402 	add.w	r4, r1, r2
 80088dc:	d902      	bls.n	80088e4 <memmove+0x10>
 80088de:	4284      	cmp	r4, r0
 80088e0:	4623      	mov	r3, r4
 80088e2:	d807      	bhi.n	80088f4 <memmove+0x20>
 80088e4:	1e43      	subs	r3, r0, #1
 80088e6:	42a1      	cmp	r1, r4
 80088e8:	d008      	beq.n	80088fc <memmove+0x28>
 80088ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088f2:	e7f8      	b.n	80088e6 <memmove+0x12>
 80088f4:	4601      	mov	r1, r0
 80088f6:	4402      	add	r2, r0
 80088f8:	428a      	cmp	r2, r1
 80088fa:	d100      	bne.n	80088fe <memmove+0x2a>
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008906:	e7f7      	b.n	80088f8 <memmove+0x24>

08008908 <_sbrk_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	2300      	movs	r3, #0
 800890c:	4d05      	ldr	r5, [pc, #20]	; (8008924 <_sbrk_r+0x1c>)
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	602b      	str	r3, [r5, #0]
 8008914:	f7f9 ffc8 	bl	80028a8 <_sbrk>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_sbrk_r+0x1a>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b103      	cbz	r3, 8008922 <_sbrk_r+0x1a>
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	200005a0 	.word	0x200005a0

08008928 <memcpy>:
 8008928:	440a      	add	r2, r1
 800892a:	4291      	cmp	r1, r2
 800892c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008930:	d100      	bne.n	8008934 <memcpy+0xc>
 8008932:	4770      	bx	lr
 8008934:	b510      	push	{r4, lr}
 8008936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893a:	4291      	cmp	r1, r2
 800893c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008940:	d1f9      	bne.n	8008936 <memcpy+0xe>
 8008942:	bd10      	pop	{r4, pc}

08008944 <__assert_func>:
 8008944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008946:	4614      	mov	r4, r2
 8008948:	461a      	mov	r2, r3
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <__assert_func+0x2c>)
 800894c:	4605      	mov	r5, r0
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68d8      	ldr	r0, [r3, #12]
 8008952:	b14c      	cbz	r4, 8008968 <__assert_func+0x24>
 8008954:	4b07      	ldr	r3, [pc, #28]	; (8008974 <__assert_func+0x30>)
 8008956:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800895a:	9100      	str	r1, [sp, #0]
 800895c:	462b      	mov	r3, r5
 800895e:	4906      	ldr	r1, [pc, #24]	; (8008978 <__assert_func+0x34>)
 8008960:	f000 f870 	bl	8008a44 <fiprintf>
 8008964:	f000 f880 	bl	8008a68 <abort>
 8008968:	4b04      	ldr	r3, [pc, #16]	; (800897c <__assert_func+0x38>)
 800896a:	461c      	mov	r4, r3
 800896c:	e7f3      	b.n	8008956 <__assert_func+0x12>
 800896e:	bf00      	nop
 8008970:	20000068 	.word	0x20000068
 8008974:	0800925f 	.word	0x0800925f
 8008978:	0800926c 	.word	0x0800926c
 800897c:	0800929a 	.word	0x0800929a

08008980 <_calloc_r>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	fba1 5402 	umull	r5, r4, r1, r2
 8008986:	b934      	cbnz	r4, 8008996 <_calloc_r+0x16>
 8008988:	4629      	mov	r1, r5
 800898a:	f7ff f99d 	bl	8007cc8 <_malloc_r>
 800898e:	4606      	mov	r6, r0
 8008990:	b928      	cbnz	r0, 800899e <_calloc_r+0x1e>
 8008992:	4630      	mov	r0, r6
 8008994:	bd70      	pop	{r4, r5, r6, pc}
 8008996:	220c      	movs	r2, #12
 8008998:	2600      	movs	r6, #0
 800899a:	6002      	str	r2, [r0, #0]
 800899c:	e7f9      	b.n	8008992 <_calloc_r+0x12>
 800899e:	462a      	mov	r2, r5
 80089a0:	4621      	mov	r1, r4
 80089a2:	f7fe fa24 	bl	8006dee <memset>
 80089a6:	e7f4      	b.n	8008992 <_calloc_r+0x12>

080089a8 <__ascii_mbtowc>:
 80089a8:	b082      	sub	sp, #8
 80089aa:	b901      	cbnz	r1, 80089ae <__ascii_mbtowc+0x6>
 80089ac:	a901      	add	r1, sp, #4
 80089ae:	b142      	cbz	r2, 80089c2 <__ascii_mbtowc+0x1a>
 80089b0:	b14b      	cbz	r3, 80089c6 <__ascii_mbtowc+0x1e>
 80089b2:	7813      	ldrb	r3, [r2, #0]
 80089b4:	600b      	str	r3, [r1, #0]
 80089b6:	7812      	ldrb	r2, [r2, #0]
 80089b8:	1e10      	subs	r0, r2, #0
 80089ba:	bf18      	it	ne
 80089bc:	2001      	movne	r0, #1
 80089be:	b002      	add	sp, #8
 80089c0:	4770      	bx	lr
 80089c2:	4610      	mov	r0, r2
 80089c4:	e7fb      	b.n	80089be <__ascii_mbtowc+0x16>
 80089c6:	f06f 0001 	mvn.w	r0, #1
 80089ca:	e7f8      	b.n	80089be <__ascii_mbtowc+0x16>

080089cc <_realloc_r>:
 80089cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d0:	4680      	mov	r8, r0
 80089d2:	4614      	mov	r4, r2
 80089d4:	460e      	mov	r6, r1
 80089d6:	b921      	cbnz	r1, 80089e2 <_realloc_r+0x16>
 80089d8:	4611      	mov	r1, r2
 80089da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089de:	f7ff b973 	b.w	8007cc8 <_malloc_r>
 80089e2:	b92a      	cbnz	r2, 80089f0 <_realloc_r+0x24>
 80089e4:	f7ff f900 	bl	8007be8 <_free_r>
 80089e8:	4625      	mov	r5, r4
 80089ea:	4628      	mov	r0, r5
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	f000 f841 	bl	8008a76 <_malloc_usable_size_r>
 80089f4:	4284      	cmp	r4, r0
 80089f6:	4607      	mov	r7, r0
 80089f8:	d802      	bhi.n	8008a00 <_realloc_r+0x34>
 80089fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089fe:	d812      	bhi.n	8008a26 <_realloc_r+0x5a>
 8008a00:	4621      	mov	r1, r4
 8008a02:	4640      	mov	r0, r8
 8008a04:	f7ff f960 	bl	8007cc8 <_malloc_r>
 8008a08:	4605      	mov	r5, r0
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d0ed      	beq.n	80089ea <_realloc_r+0x1e>
 8008a0e:	42bc      	cmp	r4, r7
 8008a10:	4622      	mov	r2, r4
 8008a12:	4631      	mov	r1, r6
 8008a14:	bf28      	it	cs
 8008a16:	463a      	movcs	r2, r7
 8008a18:	f7ff ff86 	bl	8008928 <memcpy>
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4640      	mov	r0, r8
 8008a20:	f7ff f8e2 	bl	8007be8 <_free_r>
 8008a24:	e7e1      	b.n	80089ea <_realloc_r+0x1e>
 8008a26:	4635      	mov	r5, r6
 8008a28:	e7df      	b.n	80089ea <_realloc_r+0x1e>

08008a2a <__ascii_wctomb>:
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	b141      	cbz	r1, 8008a42 <__ascii_wctomb+0x18>
 8008a30:	2aff      	cmp	r2, #255	; 0xff
 8008a32:	d904      	bls.n	8008a3e <__ascii_wctomb+0x14>
 8008a34:	228a      	movs	r2, #138	; 0x8a
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	4770      	bx	lr
 8008a3e:	2001      	movs	r0, #1
 8008a40:	700a      	strb	r2, [r1, #0]
 8008a42:	4770      	bx	lr

08008a44 <fiprintf>:
 8008a44:	b40e      	push	{r1, r2, r3}
 8008a46:	b503      	push	{r0, r1, lr}
 8008a48:	4601      	mov	r1, r0
 8008a4a:	ab03      	add	r3, sp, #12
 8008a4c:	4805      	ldr	r0, [pc, #20]	; (8008a64 <fiprintf+0x20>)
 8008a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a52:	6800      	ldr	r0, [r0, #0]
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	f000 f83d 	bl	8008ad4 <_vfiprintf_r>
 8008a5a:	b002      	add	sp, #8
 8008a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a60:	b003      	add	sp, #12
 8008a62:	4770      	bx	lr
 8008a64:	20000068 	.word	0x20000068

08008a68 <abort>:
 8008a68:	2006      	movs	r0, #6
 8008a6a:	b508      	push	{r3, lr}
 8008a6c:	f000 fa0a 	bl	8008e84 <raise>
 8008a70:	2001      	movs	r0, #1
 8008a72:	f7f9 fea6 	bl	80027c2 <_exit>

08008a76 <_malloc_usable_size_r>:
 8008a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7a:	1f18      	subs	r0, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bfbc      	itt	lt
 8008a80:	580b      	ldrlt	r3, [r1, r0]
 8008a82:	18c0      	addlt	r0, r0, r3
 8008a84:	4770      	bx	lr

08008a86 <__sfputc_r>:
 8008a86:	6893      	ldr	r3, [r2, #8]
 8008a88:	b410      	push	{r4}
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	6093      	str	r3, [r2, #8]
 8008a90:	da07      	bge.n	8008aa2 <__sfputc_r+0x1c>
 8008a92:	6994      	ldr	r4, [r2, #24]
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	db01      	blt.n	8008a9c <__sfputc_r+0x16>
 8008a98:	290a      	cmp	r1, #10
 8008a9a:	d102      	bne.n	8008aa2 <__sfputc_r+0x1c>
 8008a9c:	bc10      	pop	{r4}
 8008a9e:	f000 b933 	b.w	8008d08 <__swbuf_r>
 8008aa2:	6813      	ldr	r3, [r2, #0]
 8008aa4:	1c58      	adds	r0, r3, #1
 8008aa6:	6010      	str	r0, [r2, #0]
 8008aa8:	7019      	strb	r1, [r3, #0]
 8008aaa:	4608      	mov	r0, r1
 8008aac:	bc10      	pop	{r4}
 8008aae:	4770      	bx	lr

08008ab0 <__sfputs_r>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	4614      	mov	r4, r2
 8008ab8:	18d5      	adds	r5, r2, r3
 8008aba:	42ac      	cmp	r4, r5
 8008abc:	d101      	bne.n	8008ac2 <__sfputs_r+0x12>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e007      	b.n	8008ad2 <__sfputs_r+0x22>
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aca:	f7ff ffdc 	bl	8008a86 <__sfputc_r>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d1f3      	bne.n	8008aba <__sfputs_r+0xa>
 8008ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ad4 <_vfiprintf_r>:
 8008ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	460d      	mov	r5, r1
 8008ada:	4614      	mov	r4, r2
 8008adc:	4698      	mov	r8, r3
 8008ade:	4606      	mov	r6, r0
 8008ae0:	b09d      	sub	sp, #116	; 0x74
 8008ae2:	b118      	cbz	r0, 8008aec <_vfiprintf_r+0x18>
 8008ae4:	6a03      	ldr	r3, [r0, #32]
 8008ae6:	b90b      	cbnz	r3, 8008aec <_vfiprintf_r+0x18>
 8008ae8:	f7fe f8e8 	bl	8006cbc <__sinit>
 8008aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aee:	07d9      	lsls	r1, r3, #31
 8008af0:	d405      	bmi.n	8008afe <_vfiprintf_r+0x2a>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	059a      	lsls	r2, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_vfiprintf_r+0x2a>
 8008af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008afa:	f7fe f9f6 	bl	8006eea <__retarget_lock_acquire_recursive>
 8008afe:	89ab      	ldrh	r3, [r5, #12]
 8008b00:	071b      	lsls	r3, r3, #28
 8008b02:	d501      	bpl.n	8008b08 <_vfiprintf_r+0x34>
 8008b04:	692b      	ldr	r3, [r5, #16]
 8008b06:	b99b      	cbnz	r3, 8008b30 <_vfiprintf_r+0x5c>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f000 f93a 	bl	8008d84 <__swsetup_r>
 8008b10:	b170      	cbz	r0, 8008b30 <_vfiprintf_r+0x5c>
 8008b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b14:	07dc      	lsls	r4, r3, #31
 8008b16:	d504      	bpl.n	8008b22 <_vfiprintf_r+0x4e>
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1c:	b01d      	add	sp, #116	; 0x74
 8008b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	0598      	lsls	r0, r3, #22
 8008b26:	d4f7      	bmi.n	8008b18 <_vfiprintf_r+0x44>
 8008b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b2a:	f7fe f9df 	bl	8006eec <__retarget_lock_release_recursive>
 8008b2e:	e7f3      	b.n	8008b18 <_vfiprintf_r+0x44>
 8008b30:	2300      	movs	r3, #0
 8008b32:	9309      	str	r3, [sp, #36]	; 0x24
 8008b34:	2320      	movs	r3, #32
 8008b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b3a:	2330      	movs	r3, #48	; 0x30
 8008b3c:	f04f 0901 	mov.w	r9, #1
 8008b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008cf4 <_vfiprintf_r+0x220>
 8008b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	469a      	mov	sl, r3
 8008b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b54:	b10a      	cbz	r2, 8008b5a <_vfiprintf_r+0x86>
 8008b56:	2a25      	cmp	r2, #37	; 0x25
 8008b58:	d1f9      	bne.n	8008b4e <_vfiprintf_r+0x7a>
 8008b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b5e:	d00b      	beq.n	8008b78 <_vfiprintf_r+0xa4>
 8008b60:	465b      	mov	r3, fp
 8008b62:	4622      	mov	r2, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7ff ffa2 	bl	8008ab0 <__sfputs_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f000 80a9 	beq.w	8008cc4 <_vfiprintf_r+0x1f0>
 8008b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b74:	445a      	add	r2, fp
 8008b76:	9209      	str	r2, [sp, #36]	; 0x24
 8008b78:	f89a 3000 	ldrb.w	r3, [sl]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80a1 	beq.w	8008cc4 <_vfiprintf_r+0x1f0>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295
 8008b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b8c:	f10a 0a01 	add.w	sl, sl, #1
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	9307      	str	r3, [sp, #28]
 8008b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b98:	931a      	str	r3, [sp, #104]	; 0x68
 8008b9a:	4654      	mov	r4, sl
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	4854      	ldr	r0, [pc, #336]	; (8008cf4 <_vfiprintf_r+0x220>)
 8008ba4:	f7fe f9a3 	bl	8006eee <memchr>
 8008ba8:	9a04      	ldr	r2, [sp, #16]
 8008baa:	b9d8      	cbnz	r0, 8008be4 <_vfiprintf_r+0x110>
 8008bac:	06d1      	lsls	r1, r2, #27
 8008bae:	bf44      	itt	mi
 8008bb0:	2320      	movmi	r3, #32
 8008bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb6:	0713      	lsls	r3, r2, #28
 8008bb8:	bf44      	itt	mi
 8008bba:	232b      	movmi	r3, #43	; 0x2b
 8008bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc6:	d015      	beq.n	8008bf4 <_vfiprintf_r+0x120>
 8008bc8:	4654      	mov	r4, sl
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f04f 0c0a 	mov.w	ip, #10
 8008bd0:	9a07      	ldr	r2, [sp, #28]
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd8:	3b30      	subs	r3, #48	; 0x30
 8008bda:	2b09      	cmp	r3, #9
 8008bdc:	d94d      	bls.n	8008c7a <_vfiprintf_r+0x1a6>
 8008bde:	b1b0      	cbz	r0, 8008c0e <_vfiprintf_r+0x13a>
 8008be0:	9207      	str	r2, [sp, #28]
 8008be2:	e014      	b.n	8008c0e <_vfiprintf_r+0x13a>
 8008be4:	eba0 0308 	sub.w	r3, r0, r8
 8008be8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bec:	4313      	orrs	r3, r2
 8008bee:	46a2      	mov	sl, r4
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	e7d2      	b.n	8008b9a <_vfiprintf_r+0xc6>
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	1d19      	adds	r1, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	9103      	str	r1, [sp, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfbb      	ittet	lt
 8008c00:	425b      	neglt	r3, r3
 8008c02:	f042 0202 	orrlt.w	r2, r2, #2
 8008c06:	9307      	strge	r3, [sp, #28]
 8008c08:	9307      	strlt	r3, [sp, #28]
 8008c0a:	bfb8      	it	lt
 8008c0c:	9204      	strlt	r2, [sp, #16]
 8008c0e:	7823      	ldrb	r3, [r4, #0]
 8008c10:	2b2e      	cmp	r3, #46	; 0x2e
 8008c12:	d10c      	bne.n	8008c2e <_vfiprintf_r+0x15a>
 8008c14:	7863      	ldrb	r3, [r4, #1]
 8008c16:	2b2a      	cmp	r3, #42	; 0x2a
 8008c18:	d134      	bne.n	8008c84 <_vfiprintf_r+0x1b0>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	3402      	adds	r4, #2
 8008c1e:	1d1a      	adds	r2, r3, #4
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	9203      	str	r2, [sp, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	bfb8      	it	lt
 8008c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c2c:	9305      	str	r3, [sp, #20]
 8008c2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cf8 <_vfiprintf_r+0x224>
 8008c32:	2203      	movs	r2, #3
 8008c34:	4650      	mov	r0, sl
 8008c36:	7821      	ldrb	r1, [r4, #0]
 8008c38:	f7fe f959 	bl	8006eee <memchr>
 8008c3c:	b138      	cbz	r0, 8008c4e <_vfiprintf_r+0x17a>
 8008c3e:	2240      	movs	r2, #64	; 0x40
 8008c40:	9b04      	ldr	r3, [sp, #16]
 8008c42:	eba0 000a 	sub.w	r0, r0, sl
 8008c46:	4082      	lsls	r2, r0
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	3401      	adds	r4, #1
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c52:	2206      	movs	r2, #6
 8008c54:	4829      	ldr	r0, [pc, #164]	; (8008cfc <_vfiprintf_r+0x228>)
 8008c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c5a:	f7fe f948 	bl	8006eee <memchr>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d03f      	beq.n	8008ce2 <_vfiprintf_r+0x20e>
 8008c62:	4b27      	ldr	r3, [pc, #156]	; (8008d00 <_vfiprintf_r+0x22c>)
 8008c64:	bb1b      	cbnz	r3, 8008cae <_vfiprintf_r+0x1da>
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	3307      	adds	r3, #7
 8008c6a:	f023 0307 	bic.w	r3, r3, #7
 8008c6e:	3308      	adds	r3, #8
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c74:	443b      	add	r3, r7
 8008c76:	9309      	str	r3, [sp, #36]	; 0x24
 8008c78:	e768      	b.n	8008b4c <_vfiprintf_r+0x78>
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c82:	e7a6      	b.n	8008bd2 <_vfiprintf_r+0xfe>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f04f 0c0a 	mov.w	ip, #10
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	3401      	adds	r4, #1
 8008c8e:	9305      	str	r3, [sp, #20]
 8008c90:	4620      	mov	r0, r4
 8008c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c96:	3a30      	subs	r2, #48	; 0x30
 8008c98:	2a09      	cmp	r2, #9
 8008c9a:	d903      	bls.n	8008ca4 <_vfiprintf_r+0x1d0>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d0c6      	beq.n	8008c2e <_vfiprintf_r+0x15a>
 8008ca0:	9105      	str	r1, [sp, #20]
 8008ca2:	e7c4      	b.n	8008c2e <_vfiprintf_r+0x15a>
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cac:	e7f0      	b.n	8008c90 <_vfiprintf_r+0x1bc>
 8008cae:	ab03      	add	r3, sp, #12
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	462a      	mov	r2, r5
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <_vfiprintf_r+0x230>)
 8008cb8:	a904      	add	r1, sp, #16
 8008cba:	f7fd fbb1 	bl	8006420 <_printf_float>
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	1c78      	adds	r0, r7, #1
 8008cc2:	d1d6      	bne.n	8008c72 <_vfiprintf_r+0x19e>
 8008cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cc6:	07d9      	lsls	r1, r3, #31
 8008cc8:	d405      	bmi.n	8008cd6 <_vfiprintf_r+0x202>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	059a      	lsls	r2, r3, #22
 8008cce:	d402      	bmi.n	8008cd6 <_vfiprintf_r+0x202>
 8008cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cd2:	f7fe f90b 	bl	8006eec <__retarget_lock_release_recursive>
 8008cd6:	89ab      	ldrh	r3, [r5, #12]
 8008cd8:	065b      	lsls	r3, r3, #25
 8008cda:	f53f af1d 	bmi.w	8008b18 <_vfiprintf_r+0x44>
 8008cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce0:	e71c      	b.n	8008b1c <_vfiprintf_r+0x48>
 8008ce2:	ab03      	add	r3, sp, #12
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	462a      	mov	r2, r5
 8008ce8:	4630      	mov	r0, r6
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <_vfiprintf_r+0x230>)
 8008cec:	a904      	add	r1, sp, #16
 8008cee:	f7fd fe37 	bl	8006960 <_printf_i>
 8008cf2:	e7e4      	b.n	8008cbe <_vfiprintf_r+0x1ea>
 8008cf4:	08009244 	.word	0x08009244
 8008cf8:	0800924a 	.word	0x0800924a
 8008cfc:	0800924e 	.word	0x0800924e
 8008d00:	08006421 	.word	0x08006421
 8008d04:	08008ab1 	.word	0x08008ab1

08008d08 <__swbuf_r>:
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0a:	460e      	mov	r6, r1
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	4605      	mov	r5, r0
 8008d10:	b118      	cbz	r0, 8008d1a <__swbuf_r+0x12>
 8008d12:	6a03      	ldr	r3, [r0, #32]
 8008d14:	b90b      	cbnz	r3, 8008d1a <__swbuf_r+0x12>
 8008d16:	f7fd ffd1 	bl	8006cbc <__sinit>
 8008d1a:	69a3      	ldr	r3, [r4, #24]
 8008d1c:	60a3      	str	r3, [r4, #8]
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	071a      	lsls	r2, r3, #28
 8008d22:	d525      	bpl.n	8008d70 <__swbuf_r+0x68>
 8008d24:	6923      	ldr	r3, [r4, #16]
 8008d26:	b31b      	cbz	r3, 8008d70 <__swbuf_r+0x68>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	6922      	ldr	r2, [r4, #16]
 8008d2c:	b2f6      	uxtb	r6, r6
 8008d2e:	1a98      	subs	r0, r3, r2
 8008d30:	6963      	ldr	r3, [r4, #20]
 8008d32:	4637      	mov	r7, r6
 8008d34:	4283      	cmp	r3, r0
 8008d36:	dc04      	bgt.n	8008d42 <__swbuf_r+0x3a>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f7ff fda2 	bl	8008884 <_fflush_r>
 8008d40:	b9e0      	cbnz	r0, 8008d7c <__swbuf_r+0x74>
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	701e      	strb	r6, [r3, #0]
 8008d50:	6962      	ldr	r2, [r4, #20]
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d004      	beq.n	8008d62 <__swbuf_r+0x5a>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	07db      	lsls	r3, r3, #31
 8008d5c:	d506      	bpl.n	8008d6c <__swbuf_r+0x64>
 8008d5e:	2e0a      	cmp	r6, #10
 8008d60:	d104      	bne.n	8008d6c <__swbuf_r+0x64>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f7ff fd8d 	bl	8008884 <_fflush_r>
 8008d6a:	b938      	cbnz	r0, 8008d7c <__swbuf_r+0x74>
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d70:	4621      	mov	r1, r4
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 f806 	bl	8008d84 <__swsetup_r>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d0d5      	beq.n	8008d28 <__swbuf_r+0x20>
 8008d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d80:	e7f4      	b.n	8008d6c <__swbuf_r+0x64>
	...

08008d84 <__swsetup_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4b2a      	ldr	r3, [pc, #168]	; (8008e30 <__swsetup_r+0xac>)
 8008d88:	4605      	mov	r5, r0
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	b118      	cbz	r0, 8008d98 <__swsetup_r+0x14>
 8008d90:	6a03      	ldr	r3, [r0, #32]
 8008d92:	b90b      	cbnz	r3, 8008d98 <__swsetup_r+0x14>
 8008d94:	f7fd ff92 	bl	8006cbc <__sinit>
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d9e:	0718      	lsls	r0, r3, #28
 8008da0:	d422      	bmi.n	8008de8 <__swsetup_r+0x64>
 8008da2:	06d9      	lsls	r1, r3, #27
 8008da4:	d407      	bmi.n	8008db6 <__swsetup_r+0x32>
 8008da6:	2309      	movs	r3, #9
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dae:	f04f 30ff 	mov.w	r0, #4294967295
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	e034      	b.n	8008e20 <__swsetup_r+0x9c>
 8008db6:	0758      	lsls	r0, r3, #29
 8008db8:	d512      	bpl.n	8008de0 <__swsetup_r+0x5c>
 8008dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dbc:	b141      	cbz	r1, 8008dd0 <__swsetup_r+0x4c>
 8008dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	d002      	beq.n	8008dcc <__swsetup_r+0x48>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f7fe ff0e 	bl	8007be8 <_free_r>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6363      	str	r3, [r4, #52]	; 0x34
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dd6:	81a3      	strh	r3, [r4, #12]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	6063      	str	r3, [r4, #4]
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	f043 0308 	orr.w	r3, r3, #8
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	b94b      	cbnz	r3, 8008e00 <__swsetup_r+0x7c>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df6:	d003      	beq.n	8008e00 <__swsetup_r+0x7c>
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 f883 	bl	8008f06 <__smakebuf_r>
 8008e00:	89a0      	ldrh	r0, [r4, #12]
 8008e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e06:	f010 0301 	ands.w	r3, r0, #1
 8008e0a:	d00a      	beq.n	8008e22 <__swsetup_r+0x9e>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60a3      	str	r3, [r4, #8]
 8008e10:	6963      	ldr	r3, [r4, #20]
 8008e12:	425b      	negs	r3, r3
 8008e14:	61a3      	str	r3, [r4, #24]
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	b943      	cbnz	r3, 8008e2c <__swsetup_r+0xa8>
 8008e1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e1e:	d1c4      	bne.n	8008daa <__swsetup_r+0x26>
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	0781      	lsls	r1, r0, #30
 8008e24:	bf58      	it	pl
 8008e26:	6963      	ldrpl	r3, [r4, #20]
 8008e28:	60a3      	str	r3, [r4, #8]
 8008e2a:	e7f4      	b.n	8008e16 <__swsetup_r+0x92>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e7f7      	b.n	8008e20 <__swsetup_r+0x9c>
 8008e30:	20000068 	.word	0x20000068

08008e34 <_raise_r>:
 8008e34:	291f      	cmp	r1, #31
 8008e36:	b538      	push	{r3, r4, r5, lr}
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	d904      	bls.n	8008e48 <_raise_r+0x14>
 8008e3e:	2316      	movs	r3, #22
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e4a:	b112      	cbz	r2, 8008e52 <_raise_r+0x1e>
 8008e4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e50:	b94b      	cbnz	r3, 8008e66 <_raise_r+0x32>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f830 	bl	8008eb8 <_getpid_r>
 8008e58:	462a      	mov	r2, r5
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e62:	f000 b817 	b.w	8008e94 <_kill_r>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d00a      	beq.n	8008e80 <_raise_r+0x4c>
 8008e6a:	1c59      	adds	r1, r3, #1
 8008e6c:	d103      	bne.n	8008e76 <_raise_r+0x42>
 8008e6e:	2316      	movs	r3, #22
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	2001      	movs	r0, #1
 8008e74:	e7e7      	b.n	8008e46 <_raise_r+0x12>
 8008e76:	2400      	movs	r4, #0
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e7e:	4798      	blx	r3
 8008e80:	2000      	movs	r0, #0
 8008e82:	e7e0      	b.n	8008e46 <_raise_r+0x12>

08008e84 <raise>:
 8008e84:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <raise+0xc>)
 8008e86:	4601      	mov	r1, r0
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	f7ff bfd3 	b.w	8008e34 <_raise_r>
 8008e8e:	bf00      	nop
 8008e90:	20000068 	.word	0x20000068

08008e94 <_kill_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	2300      	movs	r3, #0
 8008e98:	4d06      	ldr	r5, [pc, #24]	; (8008eb4 <_kill_r+0x20>)
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f7f9 fc7e 	bl	80027a2 <_kill>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d102      	bne.n	8008eb0 <_kill_r+0x1c>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b103      	cbz	r3, 8008eb0 <_kill_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd38      	pop	{r3, r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200005a0 	.word	0x200005a0

08008eb8 <_getpid_r>:
 8008eb8:	f7f9 bc6c 	b.w	8002794 <_getpid>

08008ebc <__swhatbuf_r>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec4:	4615      	mov	r5, r2
 8008ec6:	2900      	cmp	r1, #0
 8008ec8:	461e      	mov	r6, r3
 8008eca:	b096      	sub	sp, #88	; 0x58
 8008ecc:	da0c      	bge.n	8008ee8 <__swhatbuf_r+0x2c>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ed6:	bf0c      	ite	eq
 8008ed8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008edc:	2340      	movne	r3, #64	; 0x40
 8008ede:	2000      	movs	r0, #0
 8008ee0:	6031      	str	r1, [r6, #0]
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	b016      	add	sp, #88	; 0x58
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	466a      	mov	r2, sp
 8008eea:	f000 f849 	bl	8008f80 <_fstat_r>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	dbed      	blt.n	8008ece <__swhatbuf_r+0x12>
 8008ef2:	9901      	ldr	r1, [sp, #4]
 8008ef4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ef8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008efc:	4259      	negs	r1, r3
 8008efe:	4159      	adcs	r1, r3
 8008f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f04:	e7eb      	b.n	8008ede <__swhatbuf_r+0x22>

08008f06 <__smakebuf_r>:
 8008f06:	898b      	ldrh	r3, [r1, #12]
 8008f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f0a:	079d      	lsls	r5, r3, #30
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d507      	bpl.n	8008f22 <__smakebuf_r+0x1c>
 8008f12:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	6163      	str	r3, [r4, #20]
 8008f1e:	b002      	add	sp, #8
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
 8008f22:	466a      	mov	r2, sp
 8008f24:	ab01      	add	r3, sp, #4
 8008f26:	f7ff ffc9 	bl	8008ebc <__swhatbuf_r>
 8008f2a:	9900      	ldr	r1, [sp, #0]
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f7fe feca 	bl	8007cc8 <_malloc_r>
 8008f34:	b948      	cbnz	r0, 8008f4a <__smakebuf_r+0x44>
 8008f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3a:	059a      	lsls	r2, r3, #22
 8008f3c:	d4ef      	bmi.n	8008f1e <__smakebuf_r+0x18>
 8008f3e:	f023 0303 	bic.w	r3, r3, #3
 8008f42:	f043 0302 	orr.w	r3, r3, #2
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	e7e3      	b.n	8008f12 <__smakebuf_r+0xc>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	6020      	str	r0, [r4, #0]
 8008f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f52:	81a3      	strh	r3, [r4, #12]
 8008f54:	9b00      	ldr	r3, [sp, #0]
 8008f56:	6120      	str	r0, [r4, #16]
 8008f58:	6163      	str	r3, [r4, #20]
 8008f5a:	9b01      	ldr	r3, [sp, #4]
 8008f5c:	b15b      	cbz	r3, 8008f76 <__smakebuf_r+0x70>
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f64:	f000 f81e 	bl	8008fa4 <_isatty_r>
 8008f68:	b128      	cbz	r0, 8008f76 <__smakebuf_r+0x70>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f023 0303 	bic.w	r3, r3, #3
 8008f70:	f043 0301 	orr.w	r3, r3, #1
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	431d      	orrs	r5, r3
 8008f7a:	81a5      	strh	r5, [r4, #12]
 8008f7c:	e7cf      	b.n	8008f1e <__smakebuf_r+0x18>
	...

08008f80 <_fstat_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	2300      	movs	r3, #0
 8008f84:	4d06      	ldr	r5, [pc, #24]	; (8008fa0 <_fstat_r+0x20>)
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	f7f9 fc66 	bl	800285e <_fstat>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	d102      	bne.n	8008f9c <_fstat_r+0x1c>
 8008f96:	682b      	ldr	r3, [r5, #0]
 8008f98:	b103      	cbz	r3, 8008f9c <_fstat_r+0x1c>
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	200005a0 	.word	0x200005a0

08008fa4 <_isatty_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4d05      	ldr	r5, [pc, #20]	; (8008fc0 <_isatty_r+0x1c>)
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	f7f9 fc64 	bl	800287c <_isatty>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_isatty_r+0x1a>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_isatty_r+0x1a>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	200005a0 	.word	0x200005a0

08008fc4 <_init>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	bf00      	nop
 8008fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fca:	bc08      	pop	{r3}
 8008fcc:	469e      	mov	lr, r3
 8008fce:	4770      	bx	lr

08008fd0 <_fini>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	bf00      	nop
 8008fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd6:	bc08      	pop	{r3}
 8008fd8:	469e      	mov	lr, r3
 8008fda:	4770      	bx	lr
