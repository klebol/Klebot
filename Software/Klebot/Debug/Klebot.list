
Klebot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004800  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a24  08004a24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a2c  08004a2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  08004a40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004a40  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f30a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002868  00000000  00000000  0002f382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00031bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d22  00000000  00000000  00032ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f739  00000000  00000000  00033a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bad  00000000  00000000  00053143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9ae5  00000000  00000000  00068cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004688  00000000  00000000  001227d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00126e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080049cc 	.word	0x080049cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080049cc 	.word	0x080049cc

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b972 	b.w	8000520 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14c      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d967      	bls.n	800033a <__udivmoddi4+0xe6>
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	b153      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000270:	fa02 fc03 	lsl.w	ip, r2, r3
 8000274:	f1c3 0220 	rsb	r2, r3, #32
 8000278:	fa01 fe03 	lsl.w	lr, r1, r3
 800027c:	fa20 f202 	lsr.w	r2, r0, r2
 8000280:	ea42 0e0e 	orr.w	lr, r2, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fbbe f1f7 	udiv	r1, lr, r7
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fb07 ee11 	mls	lr, r7, r1, lr
 8000296:	fb01 f005 	mul.w	r0, r1, r5
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002ac:	f080 8119 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8116 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002c0:	fb07 2210 	mls	r2, r7, r0, r2
 80002c4:	fb00 f505 	mul.w	r5, r0, r5
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8104 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8101 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xc0>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ea 	beq.w	80004dc <__udivmoddi4+0x288>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d148      	bne.n	80003ae <__udivmoddi4+0x15a>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xd2>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2c2>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4696      	mov	lr, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa6>
 8000334:	e9c6 4e00 	strd	r4, lr, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa6>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xea>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 808e 	bne.w	8000464 <__udivmoddi4+0x210>
 8000348:	1a88      	subs	r0, r1, r2
 800034a:	2101      	movs	r1, #1
 800034c:	0c17      	lsrs	r7, r2, #16
 800034e:	fa1f fe82 	uxth.w	lr, r2
 8000352:	fbb0 f5f7 	udiv	r5, r0, r7
 8000356:	fb07 0015 	mls	r0, r7, r5, r0
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb0e f005 	mul.w	r0, lr, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x126>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4290      	cmp	r0, r2
 8000374:	f200 80cc 	bhi.w	8000510 <__udivmoddi4+0x2bc>
 8000378:	4645      	mov	r5, r8
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000380:	fb07 2210 	mls	r2, r7, r0, r2
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x150>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14e>
 800039c:	45a6      	cmp	lr, r4
 800039e:	f200 80b4 	bhi.w	800050a <__udivmoddi4+0x2b6>
 80003a2:	4610      	mov	r0, r2
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ac:	e7a0      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	408b      	lsls	r3, r1
 80003b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003bc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	fbba f8f9 	udiv	r8, sl, r9
 80003c8:	408d      	lsls	r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	432b      	orrs	r3, r5
 80003d8:	fa00 f501 	lsl.w	r5, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	0c1c      	lsrs	r4, r3, #16
 80003e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e6:	42a0      	cmp	r0, r4
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	d90b      	bls.n	8000406 <__udivmoddi4+0x1b2>
 80003ee:	eb1c 0404 	adds.w	r4, ip, r4
 80003f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f6:	f080 8086 	bcs.w	8000506 <__udivmoddi4+0x2b2>
 80003fa:	42a0      	cmp	r0, r4
 80003fc:	f240 8083 	bls.w	8000506 <__udivmoddi4+0x2b2>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4464      	add	r4, ip
 8000406:	1a24      	subs	r4, r4, r0
 8000408:	b298      	uxth	r0, r3
 800040a:	fbb4 f3f9 	udiv	r3, r4, r9
 800040e:	fb09 4413 	mls	r4, r9, r3, r4
 8000412:	fb03 fe0e 	mul.w	lr, r3, lr
 8000416:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d26a      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d968      	bls.n	80004fe <__udivmoddi4+0x2aa>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 9302 	umull	r9, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c8      	mov	r8, r9
 8000440:	469e      	mov	lr, r3
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d067      	beq.n	800051a <__udivmoddi4+0x2c6>
 800044a:	ebb5 0308 	subs.w	r3, r5, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	40cb      	lsrs	r3, r1
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	431f      	orrs	r7, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	2100      	movs	r1, #0
 8000462:	e74a      	b.n	80002fa <__udivmoddi4+0xa6>
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	f1c3 0020 	rsb	r0, r3, #32
 800046c:	40c1      	lsrs	r1, r0
 800046e:	409d      	lsls	r5, r3
 8000470:	fa24 f000 	lsr.w	r0, r4, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	4328      	orrs	r0, r5
 800047a:	fbb1 f5f7 	udiv	r5, r1, r7
 800047e:	fb07 1115 	mls	r1, r7, r5, r1
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	0c02      	lsrs	r2, r0, #16
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	fa04 f403 	lsl.w	r4, r4, r3
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x256>
 8000498:	eb1c 0202 	adds.w	r2, ip, r2
 800049c:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a0:	d22f      	bcs.n	8000502 <__udivmoddi4+0x2ae>
 80004a2:	4291      	cmp	r1, r2
 80004a4:	d92d      	bls.n	8000502 <__udivmoddi4+0x2ae>
 80004a6:	3d02      	subs	r5, #2
 80004a8:	4462      	add	r2, ip
 80004aa:	1a52      	subs	r2, r2, r1
 80004ac:	fbb2 f1f7 	udiv	r1, r2, r7
 80004b0:	fb07 2211 	mls	r2, r7, r1, r2
 80004b4:	b280      	uxth	r0, r0
 80004b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ba:	fb01 f20e 	mul.w	r2, r1, lr
 80004be:	4282      	cmp	r2, r0
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x280>
 80004c2:	eb1c 0000 	adds.w	r0, ip, r0
 80004c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ca:	d216      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d914      	bls.n	80004fa <__udivmoddi4+0x2a6>
 80004d0:	3902      	subs	r1, #2
 80004d2:	4460      	add	r0, ip
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70b      	b.n	80002fa <__udivmoddi4+0xa6>
 80004e2:	4671      	mov	r1, lr
 80004e4:	e6e9      	b.n	80002ba <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6fe      	b.n	80002e8 <__udivmoddi4+0x94>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb9 0802 	subs.w	r8, r9, r2
 80004f2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a5      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fa:	4641      	mov	r1, r8
 80004fc:	e7ea      	b.n	80004d4 <__udivmoddi4+0x280>
 80004fe:	4603      	mov	r3, r0
 8000500:	e796      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000502:	4645      	mov	r5, r8
 8000504:	e7d1      	b.n	80004aa <__udivmoddi4+0x256>
 8000506:	46d0      	mov	r8, sl
 8000508:	e77d      	b.n	8000406 <__udivmoddi4+0x1b2>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e749      	b.n	80003a4 <__udivmoddi4+0x150>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e731      	b.n	800037a <__udivmoddi4+0x126>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xdc>
 800051a:	4631      	mov	r1, r6
 800051c:	e6ed      	b.n	80002fa <__udivmoddi4+0xa6>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <RBuffer_Write>:
#include "main.h"
#include "RingBuffer.h"
#include "stm32f1xx_hal.h"

RBuffer_Status_t RBuffer_Write(RBuffer_t *Buffer,uint8_t Data)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead;
	TmpHead = (Buffer->Head + 1) % RBUFFER_SIZE;	//Modulo for looping buffer (from max to 0)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000536:	3301      	adds	r3, #1
 8000538:	425a      	negs	r2, r3
 800053a:	f003 031f 	and.w	r3, r3, #31
 800053e:	f002 021f 	and.w	r2, r2, #31
 8000542:	bf58      	it	pl
 8000544:	4253      	negpl	r3, r2
 8000546:	73fb      	strb	r3, [r7, #15]
	if(TmpHead == Buffer->Tail)						//Check if buffer is full
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	429a      	cmp	r2, r3
 8000552:	d101      	bne.n	8000558 <RBuffer_Write+0x34>
	{
		return RBUFFER_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	e00b      	b.n	8000570 <RBuffer_Write+0x4c>
	}
	Buffer->RingBuffer[Buffer->Head] = Data;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800055e:	4619      	mov	r1, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	78fa      	ldrb	r2, [r7, #3]
 8000564:	545a      	strb	r2, [r3, r1]
	Buffer->Head = TmpHead;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	7bfa      	ldrb	r2, [r7, #15]
 800056a:	f883 2020 	strb.w	r2, [r3, #32]
	return RBUFFER_OK;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <RBuffer_Read>:

RBuffer_Status_t RBuffer_Read(RBuffer_t *Buffer, uint8_t *Destination)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
	uint8_t TmpTail;
	TmpTail = (Buffer->Tail + 1) % RBUFFER_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800058a:	3301      	adds	r3, #1
 800058c:	425a      	negs	r2, r3
 800058e:	f003 031f 	and.w	r3, r3, #31
 8000592:	f002 021f 	and.w	r2, r2, #31
 8000596:	bf58      	it	pl
 8000598:	4253      	negpl	r3, r2
 800059a:	73fb      	strb	r3, [r7, #15]
	if(Buffer->Tail == Buffer->Head)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d101      	bne.n	80005b0 <RBuffer_Read+0x36>
	{
		return RBUFFER_ERROR;		//no data to read
 80005ac:	2301      	movs	r3, #1
 80005ae:	e00c      	b.n	80005ca <RBuffer_Read+0x50>
	}
	*Destination = Buffer->RingBuffer[Buffer->Tail];
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	5c9a      	ldrb	r2, [r3, r2]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	701a      	strb	r2, [r3, #0]
	Buffer->Tail = TmpTail;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7bfa      	ldrb	r2, [r7, #15]
 80005c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return RBUFFER_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <DRV8836_Init>:
 *      Author: Michal Klebokowski
 */
#include "drv8836.h"

void DRV8836_Init(DRV8836_t *ic, TIM_HandleTypeDef *htim, uint16_t a_forward_channel, uint16_t a_reverse_channel, uint16_t b_forward_channel, uint16_t b_reverse_channel)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	4611      	mov	r1, r2
 80005e0:	461a      	mov	r2, r3
 80005e2:	460b      	mov	r3, r1
 80005e4:	80fb      	strh	r3, [r7, #6]
 80005e6:	4613      	mov	r3, r2
 80005e8:	80bb      	strh	r3, [r7, #4]
	ic->drv_htim = htim;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	605a      	str	r2, [r3, #4]
	ic->a_forward_channel = a_forward_channel;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	811a      	strh	r2, [r3, #8]
	ic->a_reverse_channel = a_reverse_channel;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	88ba      	ldrh	r2, [r7, #4]
 80005fa:	815a      	strh	r2, [r3, #10]
	ic->b_forward_channel = b_forward_channel;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	8b3a      	ldrh	r2, [r7, #24]
 8000600:	819a      	strh	r2, [r3, #12]
	ic->b_reverse_channel = b_reverse_channel;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	8bba      	ldrh	r2, [r7, #28]
 8000606:	81da      	strh	r2, [r3, #14]
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_forward_channel);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	891b      	ldrh	r3, [r3, #8]
 8000610:	4619      	mov	r1, r3
 8000612:	4610      	mov	r0, r2
 8000614:	f003 fbc4 	bl	8003da0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->a_reverse_channel);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	895b      	ldrh	r3, [r3, #10]
 8000620:	4619      	mov	r1, r3
 8000622:	4610      	mov	r0, r2
 8000624:	f003 fbbc 	bl	8003da0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_forward_channel);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	899b      	ldrh	r3, [r3, #12]
 8000630:	4619      	mov	r1, r3
 8000632:	4610      	mov	r0, r2
 8000634:	f003 fbb4 	bl	8003da0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(ic->drv_htim, ic->b_reverse_channel);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	89db      	ldrh	r3, [r3, #14]
 8000640:	4619      	mov	r1, r3
 8000642:	4610      	mov	r0, r2
 8000644:	f003 fbac 	bl	8003da0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_forward_channel, 0);
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d105      	bne.n	800065a <DRV8836_Init+0x86>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
 8000658:	e016      	b.n	8000688 <DRV8836_Init+0xb4>
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d105      	bne.n	800066c <DRV8836_Init+0x98>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	6393      	str	r3, [r2, #56]	; 0x38
 800066a:	e00d      	b.n	8000688 <DRV8836_Init+0xb4>
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	2b08      	cmp	r3, #8
 8000670:	d105      	bne.n	800067e <DRV8836_Init+0xaa>
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800067c:	e004      	b.n	8000688 <DRV8836_Init+0xb4>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, a_reverse_channel, 0);
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d105      	bne.n	800069a <DRV8836_Init+0xc6>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
 8000698:	e016      	b.n	80006c8 <DRV8836_Init+0xf4>
 800069a:	88bb      	ldrh	r3, [r7, #4]
 800069c:	2b04      	cmp	r3, #4
 800069e:	d105      	bne.n	80006ac <DRV8836_Init+0xd8>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	6393      	str	r3, [r2, #56]	; 0x38
 80006aa:	e00d      	b.n	80006c8 <DRV8836_Init+0xf4>
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	2b08      	cmp	r3, #8
 80006b0:	d105      	bne.n	80006be <DRV8836_Init+0xea>
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006bc:	e004      	b.n	80006c8 <DRV8836_Init+0xf4>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_forward_channel, 0);
 80006c8:	8b3b      	ldrh	r3, [r7, #24]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d105      	bne.n	80006da <DRV8836_Init+0x106>
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2200      	movs	r2, #0
 80006d6:	635a      	str	r2, [r3, #52]	; 0x34
 80006d8:	e016      	b.n	8000708 <DRV8836_Init+0x134>
 80006da:	8b3b      	ldrh	r3, [r7, #24]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d105      	bne.n	80006ec <DRV8836_Init+0x118>
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	6393      	str	r3, [r2, #56]	; 0x38
 80006ea:	e00d      	b.n	8000708 <DRV8836_Init+0x134>
 80006ec:	8b3b      	ldrh	r3, [r7, #24]
 80006ee:	2b08      	cmp	r3, #8
 80006f0:	d105      	bne.n	80006fe <DRV8836_Init+0x12a>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006fc:	e004      	b.n	8000708 <DRV8836_Init+0x134>
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 8000708:	8bbb      	ldrh	r3, [r7, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d105      	bne.n	800071a <DRV8836_Init+0x146>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000718:	e016      	b.n	8000748 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800071a:	8bbb      	ldrh	r3, [r7, #28]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d105      	bne.n	800072c <DRV8836_Init+0x158>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	6393      	str	r3, [r2, #56]	; 0x38
}
 800072a:	e00d      	b.n	8000748 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800072c:	8bbb      	ldrh	r3, [r7, #28]
 800072e:	2b08      	cmp	r3, #8
 8000730:	d105      	bne.n	800073e <DRV8836_Init+0x16a>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800073c:	e004      	b.n	8000748 <DRV8836_Init+0x174>
	__HAL_TIM_SET_COMPARE(ic->drv_htim, b_reverse_channel, 0);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000764:	4b4f      	ldr	r3, [pc, #316]	; (80008a4 <MX_GPIO_Init+0x154>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a4e      	ldr	r2, [pc, #312]	; (80008a4 <MX_GPIO_Init+0x154>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <MX_GPIO_Init+0x154>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0310 	and.w	r3, r3, #16
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077c:	4b49      	ldr	r3, [pc, #292]	; (80008a4 <MX_GPIO_Init+0x154>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a48      	ldr	r2, [pc, #288]	; (80008a4 <MX_GPIO_Init+0x154>)
 8000782:	f043 0320 	orr.w	r3, r3, #32
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b46      	ldr	r3, [pc, #280]	; (80008a4 <MX_GPIO_Init+0x154>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0320 	and.w	r3, r3, #32
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <MX_GPIO_Init+0x154>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <MX_GPIO_Init+0x154>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <MX_GPIO_Init+0x154>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <MX_GPIO_Init+0x154>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <MX_GPIO_Init+0x154>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b3a      	ldr	r3, [pc, #232]	; (80008a4 <MX_GPIO_Init+0x154>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV_MODE_Pin|DRV_NSLEEP_Pin|LED_Pin|KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f246 0103 	movw	r1, #24579	; 0x6003
 80007ca:	4837      	ldr	r0, [pc, #220]	; (80008a8 <MX_GPIO_Init+0x158>)
 80007cc:	f001 fe12 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	4835      	ldr	r0, [pc, #212]	; (80008ac <MX_GPIO_Init+0x15c>)
 80007d6:	f001 fe0d 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2110      	movs	r1, #16
 80007de:	4834      	ldr	r0, [pc, #208]	; (80008b0 <MX_GPIO_Init+0x160>)
 80007e0:	f001 fe08 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DRV_MODE_Pin|DRV_NSLEEP_Pin|KEEP_ALIVE_Pin;
 80007e4:	f246 0302 	movw	r3, #24578	; 0x6002
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	482a      	ldr	r0, [pc, #168]	; (80008a8 <MX_GPIO_Init+0x158>)
 80007fe:	f001 fc75 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000802:	2301      	movs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MX_GPIO_Init+0x158>)
 800081a:	f001 fc67 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	4820      	ldr	r0, [pc, #128]	; (80008b4 <MX_GPIO_Init+0x164>)
 8000834:	f001 fc5a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_GPIO_Init+0x168>)
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4619      	mov	r1, r3
 800084c:	4819      	ldr	r0, [pc, #100]	; (80008b4 <MX_GPIO_Init+0x164>)
 800084e:	f001 fc4d 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8000852:	2304      	movs	r3, #4
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <MX_GPIO_Init+0x15c>)
 800086a:	f001 fc3f 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 800086e:	2310      	movs	r3, #16
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2302      	movs	r3, #2
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <MX_GPIO_Init+0x160>)
 8000886:	f001 fc31 	bl	80020ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2028      	movs	r0, #40	; 0x28
 8000890:	f001 fbf5 	bl	800207e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000894:	2028      	movs	r0, #40	; 0x28
 8000896:	f001 fc0e 	bl	80020b6 <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40011000 	.word	0x40011000
 80008ac:	40011400 	.word	0x40011400
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	40010800 	.word	0x40010800
 80008b8:	10210000 	.word	0x10210000

080008bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2C1_Init+0x50>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <MX_I2C1_Init+0x54>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_I2C1_Init+0x50>)
 80008c8:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_I2C1_Init+0x58>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_I2C1_Init+0x50>)
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_I2C1_Init+0x50>)
 80008fa:	f001 fdab 	bl	8002454 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000904:	f000 fa4d 	bl	8000da2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000028 	.word	0x20000028
 8000910:	40005400 	.word	0x40005400
 8000914:	00061a80 	.word	0x00061a80

08000918 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_I2C_MspInit+0x90>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d132      	bne.n	800099e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_I2C_MspInit+0x94>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <HAL_I2C_MspInit+0x94>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_I2C_MspInit+0x94>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000950:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <HAL_I2C_MspInit+0x98>)
 8000966:	f001 fbc1 	bl	80020ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_I2C_MspInit+0x9c>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
 8000980:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <HAL_I2C_MspInit+0x9c>)
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_I2C_MspInit+0x94>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_I2C_MspInit+0x94>)
 800098c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_I2C_MspInit+0x94>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40005400 	.word	0x40005400
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	40010000 	.word	0x40010000

080009b8 <Radio_Init>:

//
// -- INIT --
//
void Radio_Init(SPI_HandleTypeDef *hspi)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	nRF24_Init(hspi);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fe61 	bl	8001688 <nRF24_Init>
	nRF24_SetTXAddress( (uint8_t*) "Con");
	nRF24_RX_Mode();
#endif

#ifdef CONTROLLER
	nRF24_SetRXAddress(0, (uint8_t*) "Con");
 80009c6:	4906      	ldr	r1, [pc, #24]	; (80009e0 <Radio_Init+0x28>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fc7a 	bl	80012c2 <nRF24_SetRXAddress>
	nRF24_SetTXAddress( (uint8_t*) "Bot");
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <Radio_Init+0x2c>)
 80009d0:	f000 fcb0 	bl	8001334 <nRF24_SetTXAddress>
	nRF24_TX_Mode();
 80009d4:	f000 faba 	bl	8000f4c <nRF24_TX_Mode>
#endif
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	080049e4 	.word	0x080049e4
 80009e4:	080049e8 	.word	0x080049e8

080009e8 <Radio_RxBufferPut>:

//
// -- RX --
//
Klebot_Radio_Status Radio_RxBufferPut(uint8_t *ReceivedCommand, uint8_t ReceivedLength)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	Klebot_Radio_Status Status = RADIO_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 80009f8:	2300      	movs	r3, #0
 80009fa:	73bb      	strb	r3, [r7, #14]
 80009fc:	e010      	b.n	8000a20 <Radio_RxBufferPut+0x38>
	{
		Status |= RBuffer_Write(&RxBuffer, *ReceivedCommand);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <Radio_RxBufferPut+0x4c>)
 8000a06:	f7ff fd8d 	bl	8000524 <RBuffer_Write>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	73fb      	strb	r3, [r7, #15]
		ReceivedCommand++;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3301      	adds	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < ReceivedLength; i++)						//Put Command to a buffer
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	73bb      	strb	r3, [r7, #14]
 8000a20:	7bba      	ldrb	r2, [r7, #14]
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d3ea      	bcc.n	80009fe <Radio_RxBufferPut+0x16>
	}
	return Status;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000a4 	.word	0x200000a4

08000a38 <Radio_RxBufferGet>:

Klebot_Radio_Status Radio_RxBufferGet(uint8_t *CommandDestination, uint8_t *LengthDestination)		//get one command from buffer (FIFO)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	uint8_t Length = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
	Klebot_Radio_Status Status = RADIO_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73bb      	strb	r3, [r7, #14]
	uint8_t Data;

	Status |= RBuffer_Read(&RxBuffer,&Data);			//Get first byte
 8000a4a:	f107 030d 	add.w	r3, r7, #13
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <Radio_RxBufferGet+0x6c>)
 8000a52:	f7ff fd92 	bl	800057a <RBuffer_Read>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )	//Check if this is end-of-command or if there is nothing in buffer(status)
 8000a60:	e012      	b.n	8000a88 <Radio_RxBufferGet+0x50>
	{
		*(CommandDestination+Length) = Data;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	7b7a      	ldrb	r2, [r7, #13]
 8000a6a:	701a      	strb	r2, [r3, #0]
		Length++;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
		Status |= RBuffer_Read(&RxBuffer,&Data);
 8000a72:	f107 030d 	add.w	r3, r7, #13
 8000a76:	4619      	mov	r1, r3
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <Radio_RxBufferGet+0x6c>)
 8000a7a:	f7ff fd7e 	bl	800057a <RBuffer_Read>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	73bb      	strb	r3, [r7, #14]
	while( (Data != COMM_END) && (Status == RADIO_OK) )	//Check if this is end-of-command or if there is nothing in buffer(status)
 8000a88:	7b7b      	ldrb	r3, [r7, #13]
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	d002      	beq.n	8000a94 <Radio_RxBufferGet+0x5c>
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0e6      	beq.n	8000a62 <Radio_RxBufferGet+0x2a>
	}
	*LengthDestination = Length;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	701a      	strb	r2, [r3, #0]
	return Status;
 8000a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000a4 	.word	0x200000a4

08000aa8 <Radio_TxBufferSend>:
	Status |= RBuffer_Write(&TxBuffer, COMM_END);			//Add end-of-command identifier
	return Status;
}

Klebot_Radio_Status Radio_TxBufferSend(void)		//Send one command from buffer (FIFO)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
	Klebot_Radio_Status Status = RADIO_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t Length = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DataToSend[MAX_COMMAND_LENGTH];

	do
	{
		Status |= RBuffer_Read(&TxBuffer,&DataToSend[Length]);
 8000aba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000abe:	1d3a      	adds	r2, r7, #4
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4819      	ldr	r0, [pc, #100]	; (8000b2c <Radio_TxBufferSend+0x84>)
 8000ac6:	f7ff fd58 	bl	800057a <RBuffer_Read>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}while((DataToSend[Length++] != COMM_END) && Status == RADIO_OK);
 8000ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8000ae2:	3328      	adds	r3, #40	; 0x28
 8000ae4:	443b      	add	r3, r7
 8000ae6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d003      	beq.n	8000af6 <Radio_TxBufferSend+0x4e>
 8000aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0e1      	beq.n	8000aba <Radio_TxBufferSend+0x12>

#ifdef CONTROLLER
	if(Status == RADIO_OK)
 8000af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d110      	bne.n	8000b20 <Radio_TxBufferSend+0x78>
	{
		Status |= nRF24_SendPacket(DataToSend, Length);
 8000afe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fd2c 	bl	8001564 <nRF24_SendPacket>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b14:	4313      	orrs	r3, r2
 8000b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		TxStatus = RADIO_BUSY;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <Radio_TxBufferSend+0x88>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	701a      	strb	r2, [r3, #0]
		nRF24_WriteAckPayload(0, DataToSend, Length);
		TxStatus = RADIO_BUSY;
	}
#endif

	return Status;
 8000b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000080 	.word	0x20000080
 8000b30:	2000007d 	.word	0x2000007d

08000b34 <Radio_SendConnectionCheck>:

Klebot_Radio_Status Radio_SendConnectionCheck(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	uint8_t Command [2] = {CONNECTION_HOLD, COMM_END};
 8000b3a:	f240 4305 	movw	r3, #1029	; 0x405
 8000b3e:	80bb      	strh	r3, [r7, #4]
	TxStatus = RADIO_BUSY;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <Radio_SendConnectionCheck+0x28>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	701a      	strb	r2, [r3, #0]
	return nRF24_SendPacket(Command, 2);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fd0a 	bl	8001564 <nRF24_SendPacket>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000007d 	.word	0x2000007d

08000b60 <Radio_Process>:

	nRF24_WriteAckPayload(0, Buffer, Length+1);
}

void Radio_Process( void (*UserParser)(uint8_t *command, uint8_t length) )			//Process to put in main loop
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	nRF24_Event();											//check for irq's
 8000b68:	f000 fd66 	bl	8001638 <nRF24_Event>

#ifdef CONTROLLER
	static uint32_t LastTick;

	if((HAL_GetTick() - LastTick) > PACKET_SEND_DELAY)		//connection freqency
 8000b6c:	f001 f982 	bl	8001e74 <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <Radio_Process+0x90>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b32      	cmp	r3, #50	; 0x32
 8000b7a:	d91c      	bls.n	8000bb6 <Radio_Process+0x56>
	{
		if(TxStatus == RADIO_OK)							//If Tx is free, send message
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <Radio_Process+0x94>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d107      	bne.n	8000b94 <Radio_Process+0x34>
		{
			if(Radio_TxBufferSend() == RADIO_ERROR)			//send message or send connection hold if buffer is empty
 8000b84:	f7ff ff90 	bl	8000aa8 <Radio_TxBufferSend>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10e      	bne.n	8000bac <Radio_Process+0x4c>
			{
				Radio_SendConnectionCheck();
 8000b8e:	f7ff ffd1 	bl	8000b34 <Radio_SendConnectionCheck>
 8000b92:	e00b      	b.n	8000bac <Radio_Process+0x4c>
			}
		}
		else if(TxStatus != RADIO_OK && ConnectionStatus == RADIO_ERROR)	//if no connection (max retransmitt IRQ),
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <Radio_Process+0x94>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d007      	beq.n	8000bac <Radio_Process+0x4c>
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <Radio_Process+0x98>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d103      	bne.n	8000bac <Radio_Process+0x4c>
		{
			Radio_NoConnectionCallback();									//callback for no connection
 8000ba4:	f000 f862 	bl	8000c6c <Radio_NoConnectionCallback>
			Radio_SendConnectionCheck();									//try to reconnect
 8000ba8:	f7ff ffc4 	bl	8000b34 <Radio_SendConnectionCheck>
		}
		LastTick = HAL_GetTick();
 8000bac:	f001 f962 	bl	8001e74 <HAL_GetTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <Radio_Process+0x90>)
 8000bb4:	6013      	str	r3, [r2, #0]
	{
		Radio_TxBufferSend();	//send ack payload
	}
#endif

	if(RxStatus == RADIO_NEW_RX)				//If there is new message, get it and pass it to parser
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <Radio_Process+0x9c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d114      	bne.n	8000be8 <Radio_Process+0x88>
	{
		uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
		uint8_t ReceivedLength;
		Radio_RxBufferGet(ReceivedCommand, &ReceivedLength);
 8000bbe:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff35 	bl	8000a38 <Radio_RxBufferGet>
		if(UserParser != NULL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <Radio_Process+0x82>
		{
			UserParser(ReceivedCommand,ReceivedLength);
 8000bd4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000bd8:	f107 020c 	add.w	r2, r7, #12
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4610      	mov	r0, r2
 8000be0:	4798      	blx	r3
		}
		RxStatus = RADIO_OK;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <Radio_Process+0x9c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
	}
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000c8 	.word	0x200000c8
 8000bf4:	2000007d 	.word	0x2000007d
 8000bf8:	2000007c 	.word	0x2000007c
 8000bfc:	2000007e 	.word	0x2000007e

08000c00 <nRF24_EventTxCallback>:

//
// -- INTERRUPT --
//
void nRF24_EventTxCallback(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	TxStatus = RADIO_OK;
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <nRF24_EventTxCallback+0x18>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
	ConnectionStatus = RADIO_OK;
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <nRF24_EventTxCallback+0x1c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	2000007d 	.word	0x2000007d
 8000c1c:	2000007c 	.word	0x2000007c

08000c20 <nRF24_EventRxCallback>:

void nRF24_EventRxCallback(void)					// Received Packet or received ACK Payload
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
	RxStatus = RADIO_NEW_RX;
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <nRF24_EventRxCallback+0x30>)
 8000c28:	2203      	movs	r2, #3
 8000c2a:	701a      	strb	r2, [r3, #0]
	uint8_t ReceivedCommand[MAX_COMMAND_LENGTH];
	uint8_t ReceivedLength;
	nRF24_ReadRXPaylaod((uint8_t*)ReceivedCommand,&ReceivedLength);
 8000c2c:	1dfa      	adds	r2, r7, #7
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fc7f 	bl	8001538 <nRF24_ReadRXPaylaod>
	Radio_RxBufferPut(ReceivedCommand, ReceivedLength);
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fed0 	bl	80009e8 <Radio_RxBufferPut>
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000007e 	.word	0x2000007e

08000c54 <nRF24_EventMrCallback>:

void nRF24_EventMrCallback(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
	ConnectionStatus = RADIO_ERROR;		//Max retransmitt - no connection
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <nRF24_EventMrCallback+0x14>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000007c 	.word	0x2000007c

08000c6c <Radio_NoConnectionCallback>:

__weak void Radio_NoConnectionCallback(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f001 f8a1 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f831 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c86:	f7ff fd63 	bl	8000750 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c8a:	f7ff fe17 	bl	80008bc <MX_I2C1_Init>
  MX_SPI3_Init();
 8000c8e:	f000 fd63 	bl	8001758 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000c92:	f000 fe5b 	bl	800194c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c96:	f000 feb1 	bl	80019fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c9a:	f000 ff45 	bl	8001b28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  DRV8836_Init(&MotorDriver, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	490b      	ldr	r1, [pc, #44]	; (8000cd8 <main+0x60>)
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <main+0x64>)
 8000cae:	f7ff fc91 	bl	80005d4 <DRV8836_Init>
  HAL_GPIO_WritePin(DRV_NSLEEP_GPIO_Port, DRV_NSLEEP_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <main+0x68>)
 8000cba:	f001 fb9b 	bl	80023f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DRV_MODE_GPIO_Port, DRV_MODE_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <main+0x68>)
 8000cc6:	f001 fb95 	bl	80023f4 <HAL_GPIO_WritePin>



  Radio_Init(&hspi3);
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <main+0x6c>)
 8000ccc:	f7ff fe74 	bl	80009b8 <Radio_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Radio_Process(NULL);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff ff45 	bl	8000b60 <Radio_Process>
 8000cd6:	e7fb      	b.n	8000cd0 <main+0x58>
 8000cd8:	20000190 	.word	0x20000190
 8000cdc:	200000cc 	.word	0x200000cc
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	200000f0 	.word	0x200000f0

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	; 0x50
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	2238      	movs	r2, #56	; 0x38
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 fe3c 	bl	8004974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000d14:	2301      	movs	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2302      	movs	r3, #2
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fccf 	bl	80026dc <HAL_RCC_OscConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000d44:	f000 f82d 	bl	8000da2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d48:	230f      	movs	r3, #15
 8000d4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2102      	movs	r1, #2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 ffd0 	bl	8002d08 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d6e:	f000 f818 	bl	8000da2 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000d72:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <SystemClock_Config+0x98>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	3750      	adds	r7, #80	; 0x50
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	42420070 	.word	0x42420070

08000d84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24_IRQ_Pin)
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_EXTI_Callback+0x16>
	{
		nRF24_IRQ_Handler();
 8000d96:	f000 fbfd 	bl	8001594 <nRF24_IRQ_Handler>
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da6:	b672      	cpsid	i
}
 8000da8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000daa:	e7fe      	b.n	8000daa <Error_Handler+0x8>

08000dac <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 f865 	bl	8001e88 <HAL_Delay>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <nRF24_SendSpi+0x28>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	f002 fa31 	bl	8003248 <HAL_SPI_Transmit>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000e4 	.word	0x200000e4

08000df4 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <nRF24_ReadSpi+0x28>)
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	f002 fb5e 	bl	80034ce <HAL_SPI_Receive>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000e4 	.word	0x200000e4

08000e20 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2104      	movs	r1, #4
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <nRF24_ReadRegister+0x44>)
 8000e34:	f001 fade 	bl	80023f4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ffc3 	bl	8000dc8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000e42:	f107 030f 	add.w	r3, r7, #15
 8000e46:	2101      	movs	r1, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ffd3 	bl	8000df4 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2104      	movs	r1, #4
 8000e52:	4804      	ldr	r0, [pc, #16]	; (8000e64 <nRF24_ReadRegister+0x44>)
 8000e54:	f001 face 	bl	80023f4 <HAL_GPIO_WritePin>

	return result;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40011400 	.word	0x40011400

08000e68 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2104      	movs	r1, #4
 8000e80:	480a      	ldr	r0, [pc, #40]	; (8000eac <nRF24_ReadRegisters+0x44>)
 8000e82:	f001 fab7 	bl	80023f4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff9c 	bl	8000dc8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	4619      	mov	r1, r3
 8000e94:	6838      	ldr	r0, [r7, #0]
 8000e96:	f7ff ffad 	bl	8000df4 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <nRF24_ReadRegisters+0x44>)
 8000ea0:	f001 faa8 	bl	80023f4 <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40011400 	.word	0x40011400

08000eb0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f043 0320 	orr.w	r3, r3, #32
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <nRF24_WriteRegister+0x48>)
 8000ed4:	f001 fa8e 	bl	80023f4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2102      	movs	r1, #2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff72 	bl	8000dc8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <nRF24_WriteRegister+0x48>)
 8000eea:	f001 fa83 	bl	80023f4 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40011400 	.word	0x40011400

08000efc <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000f16:	2200      	movs	r2, #0
 8000f18:	2104      	movs	r1, #4
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <nRF24_WriteRegisters+0x4c>)
 8000f1c:	f001 fa6a 	bl	80023f4 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff4f 	bl	8000dc8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	6838      	ldr	r0, [r7, #0]
 8000f30:	f7ff ff4a 	bl	8000dc8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000f34:	2201      	movs	r2, #1
 8000f36:	2104      	movs	r1, #4
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <nRF24_WriteRegisters+0x4c>)
 8000f3a:	f001 fa5b 	bl	80023f4 <HAL_GPIO_WritePin>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40011400 	.word	0x40011400

08000f4c <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay_ms(1);
}

void nRF24_TX_Mode(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8000f52:	2200      	movs	r2, #0
 8000f54:	2110      	movs	r1, #16
 8000f56:	4810      	ldr	r0, [pc, #64]	; (8000f98 <nRF24_TX_Mode+0x4c>)
 8000f58:	f001 fa4c 	bl	80023f4 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8000f5c:	f000 f81e 	bl	8000f9c <nRF24_ReadConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f818 	bl	8000fac <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000f7c:	2070      	movs	r0, #112	; 0x70
 8000f7e:	f000 f870 	bl	8001062 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8000f82:	f000 f87d 	bl	8001080 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000f86:	f000 f895 	bl	80010b4 <nRF24_FlushTX>

	nRF24_Delay_ms(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f7ff ff0e 	bl	8000dac <nRF24_Delay_ms>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff ff3d 	bl	8000e20 <nRF24_ReadRegister>
 8000fa6:	4603      	mov	r3, r0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}

08000fac <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff ff78 	bl	8000eb0 <nRF24_WriteRegister>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f7ff ff24 	bl	8000e20 <nRF24_ReadRegister>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	f023 0307 	bic.w	r3, r3, #7
 8000fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	b25a      	sxtb	r2, r3
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2006      	movs	r0, #6
 8000ffa:	f7ff ff59 	bl	8000eb0 <nRF24_WriteRegister>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001010:	2006      	movs	r0, #6
 8001012:	f7ff ff05 	bl	8000e20 <nRF24_ReadRegister>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001020:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d104      	bne.n	8001032 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f043 0320 	orr.w	r3, r3, #32
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e006      	b.n	8001040 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d103      	bne.n	8001040 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4619      	mov	r1, r3
 8001044:	2006      	movs	r0, #6
 8001046:	f7ff ff33 	bl	8000eb0 <nRF24_WriteRegister>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8001056:	2007      	movs	r0, #7
 8001058:	f7ff fee2 	bl	8000e20 <nRF24_ReadRegister>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}

08001062 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4619      	mov	r1, r3
 8001070:	2007      	movs	r0, #7
 8001072:	f7ff ff1d 	bl	8000eb0 <nRF24_WriteRegister>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <nRF24_FlushRX>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
}

void nRF24_FlushRX(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001086:	23e2      	movs	r3, #226	; 0xe2
 8001088:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800108a:	2200      	movs	r2, #0
 800108c:	2104      	movs	r1, #4
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <nRF24_FlushRX+0x30>)
 8001090:	f001 f9b0 	bl	80023f4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	2101      	movs	r1, #1
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fe95 	bl	8000dc8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800109e:	2201      	movs	r2, #1
 80010a0:	2104      	movs	r1, #4
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <nRF24_FlushRX+0x30>)
 80010a4:	f001 f9a6 	bl	80023f4 <HAL_GPIO_WritePin>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40011400 	.word	0x40011400

080010b4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80010ba:	23e1      	movs	r3, #225	; 0xe1
 80010bc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80010be:	2200      	movs	r2, #0
 80010c0:	2104      	movs	r1, #4
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <nRF24_FlushTX+0x30>)
 80010c4:	f001 f996 	bl	80023f4 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fe7b 	bl	8000dc8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80010d2:	2201      	movs	r2, #1
 80010d4:	2104      	movs	r1, #4
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <nRF24_FlushTX+0x30>)
 80010d8:	f001 f98c 	bl	80023f4 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40011400 	.word	0x40011400

080010e8 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80010f2:	f7ff ff53 	bl	8000f9c <nRF24_ReadConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e003      	b.n	8001112 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	f023 0308 	bic.w	r3, r3, #8
 8001110:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff49 	bl	8000fac <nRF24_WriteConfig>
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800112c:	f7ff ff36 	bl	8000f9c <nRF24_ReadConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d104      	bne.n	8001144 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e003      	b.n	800114c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	f023 0304 	bic.w	r3, r3, #4
 800114a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff2c 	bl	8000fac <nRF24_WriteConfig>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	b25a      	sxtb	r2, r3
 8001172:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	b25b      	sxtb	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b25b      	sxtb	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4619      	mov	r1, r3
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff fe93 	bl	8000eb0 <nRF24_WriteRegister>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	2005      	movs	r0, #5
 80011a8:	f7ff fe82 	bl	8000eb0 <nRF24_WriteRegister>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d901      	bls.n	80011ce <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80011ca:	2305      	movs	r3, #5
 80011cc:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff fe26 	bl	8000e20 <nRF24_ReadRegister>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d10a      	bne.n	80011f4 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2201      	movs	r2, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e00b      	b.n	800120c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2201      	movs	r2, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	b25a      	sxtb	r2, r3
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4013      	ands	r3, r2
 8001208:	b25b      	sxtb	r3, r3
 800120a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	4619      	mov	r1, r3
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff fe4d 	bl	8000eb0 <nRF24_WriteRegister>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	460a      	mov	r2, r1
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	4613      	mov	r3, r2
 800122c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d901      	bls.n	8001238 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001234:	2305      	movs	r3, #5
 8001236:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fdf1 	bl	8000e20 <nRF24_ReadRegister>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d10a      	bne.n	800125e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2201      	movs	r2, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	b25a      	sxtb	r2, r3
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4313      	orrs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e00b      	b.n	8001276 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2201      	movs	r2, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	b25b      	sxtb	r3, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	b25a      	sxtb	r2, r3
 800126c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001270:	4013      	ands	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	4619      	mov	r1, r3
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff fe18 	bl	8000eb0 <nRF24_WriteRegister>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b05      	cmp	r3, #5
 8001296:	d901      	bls.n	800129c <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001298:	2305      	movs	r3, #5
 800129a:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d801      	bhi.n	80012a6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80012a2:	2303      	movs	r3, #3
 80012a4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	3b02      	subs	r3, #2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4619      	mov	r1, r3
 80012b4:	2003      	movs	r0, #3
 80012b6:	f7ff fdfb 	bl	8000eb0 <nRF24_WriteRegister>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	6039      	str	r1, [r7, #0]
 80012cc:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <nRF24_SetRXAddress+0x18>
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d11d      	bne.n	8001316 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e00d      	b.n	80012fc <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	441a      	add	r2, r3
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	f1c3 0302 	rsb	r3, r3, #2
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	3310      	adds	r3, #16
 80012f0:	443b      	add	r3, r7
 80012f2:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	3301      	adds	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d9ee      	bls.n	80012e0 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	330a      	adds	r3, #10
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f107 010c 	add.w	r1, r7, #12
 800130c:	2203      	movs	r2, #3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fdf4 	bl	8000efc <nRF24_WriteRegisters>
	{
 8001314:	e00a      	b.n	800132c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	330a      	adds	r3, #10
 800131a:	b2da      	uxtb	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3302      	adds	r3, #2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4610      	mov	r0, r2
 8001326:	f7ff fdc3 	bl	8000eb0 <nRF24_WriteRegister>
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2203      	movs	r2, #3
 8001342:	4619      	mov	r1, r3
 8001344:	200a      	movs	r0, #10
 8001346:	f7ff fd8f 	bl	8000e68 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e00c      	b.n	800136a <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	f1c3 0302 	rsb	r3, r3, #2
 8001358:	3210      	adds	r2, #16
 800135a:	443a      	add	r2, r7
 800135c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <nRF24_SetTXAddress+0x88>)
 8001362:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d9ef      	bls.n	8001350 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e00d      	b.n	8001392 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	441a      	add	r2, r3
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f1c3 0302 	rsb	r3, r3, #2
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	3310      	adds	r3, #16
 8001386:	443b      	add	r3, r7
 8001388:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3301      	adds	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d9ee      	bls.n	8001376 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2203      	movs	r2, #3
 800139e:	4619      	mov	r1, r3
 80013a0:	200a      	movs	r0, #10
 80013a2:	f7ff fdab 	bl	8000efc <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2203      	movs	r2, #3
 80013ac:	4619      	mov	r1, r3
 80013ae:	2010      	movs	r0, #16
 80013b0:	f7ff fda4 	bl	8000efc <nRF24_WriteRegisters>

}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200000e8 	.word	0x200000e8

080013c0 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80013c6:	f7ff fe44 	bl	8001052 <nRF24_ReadStatus>
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80013d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe42 	bl	8001062 <nRF24_WriteStatus>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	71fb      	strb	r3, [r7, #7]

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 80013f0:	2060      	movs	r0, #96	; 0x60
 80013f2:	f7ff fd15 	bl	8000e20 <nRF24_ReadRegister>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]

    if (result > 32) // Something went wrong :)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b20      	cmp	r3, #32
 80013fe:	d906      	bls.n	800140e <nRF24_GetDynamicPayloadSize+0x28>
    {
        nRF24_FlushRX();
 8001400:	f7ff fe3e 	bl	8001080 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8001404:	2002      	movs	r0, #2
 8001406:	f7ff fcd1 	bl	8000dac <nRF24_Delay_ms>
        return 0;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <nRF24_GetDynamicPayloadSize+0x2a>
    }
    return result;
 800140e:	79fb      	ldrb	r3, [r7, #7]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001422:	f7ff fdbb 	bl	8000f9c <nRF24_ReadConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d104      	bne.n	800143a <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e003      	b.n	8001442 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001440:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fdb1 	bl	8000fac <nRF24_WriteConfig>
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800145c:	f7ff fd9e 	bl	8000f9c <nRF24_ReadConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d104      	bne.n	8001474 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e003      	b.n	800147c <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f023 0320 	bic.w	r3, r3, #32
 800147a:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fd94 	bl	8000fac <nRF24_WriteConfig>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001496:	f7ff fd81 	bl	8000f9c <nRF24_ReadConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d104      	bne.n	80014ae <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e003      	b.n	80014b6 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	f023 0310 	bic.w	r3, r3, #16
 80014b4:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fd77 	bl	8000fac <nRF24_WriteConfig>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	460b      	mov	r3, r1
 80014d0:	70fb      	strb	r3, [r7, #3]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	461a      	mov	r2, r3
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	20a0      	movs	r0, #160	; 0xa0
 80014da:	f7ff fd0f 	bl	8000efc <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80014ee:	2201      	movs	r2, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <nRF24_WaitTX+0x4c>)
 80014f4:	f000 ff7e 	bl	80023f4 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fc57 	bl	8000dac <nRF24_Delay_ms>
	NRF24_CE_LOW;
 80014fe:	2200      	movs	r2, #0
 8001500:	2110      	movs	r1, #16
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <nRF24_WaitTX+0x4c>)
 8001504:	f000 ff76 	bl	80023f4 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay_ms(1);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fc4f 	bl	8000dac <nRF24_Delay_ms>
		status = nRF24_ReadStatus();
 800150e:	f7ff fda0 	bl	8001052 <nRF24_ReadStatus>
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d104      	bne.n	800152a <nRF24_WaitTX+0x42>
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0ee      	beq.n	8001508 <nRF24_WaitTX+0x20>

}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010c00 	.word	0x40010c00

08001538 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8001542:	f7ff ff50 	bl	80013e6 <nRF24_GetDynamicPayloadSize>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	701a      	strb	r2, [r3, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	2061      	movs	r0, #97	; 0x61
 8001558:	f7ff fc86 	bl	8000e68 <nRF24_ReadRegisters>
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
	if(Size > 32)
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2b20      	cmp	r3, #32
 8001574:	d901      	bls.n	800157a <nRF24_SendPacket+0x16>
		return NRF24_NO_TRANSMITTED_PACKET;
 8001576:	2301      	movs	r3, #1
 8001578:	e007      	b.n	800158a <nRF24_SendPacket+0x26>

	nRF24_WriteTXPayload(Data, Size);
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	4619      	mov	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa1 	bl	80014c6 <nRF24_WriteTXPayload>
	nRF24_WaitTX();
 8001584:	f7ff ffb0 	bl	80014e8 <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <nRF24_IRQ_Handler>:
	}
	return 0;
}

void nRF24_IRQ_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

	Nrf24InterruptFlag = 1;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <nRF24_IRQ_Handler+0x14>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200000ee 	.word	0x200000ee

080015ac <nRF24_IRQ_Read>:

void nRF24_IRQ_Read(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
	if(Nrf24InterruptFlag == 1)
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <nRF24_IRQ_Read+0x7c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d130      	bne.n	800161e <nRF24_IRQ_Read+0x72>
	{
		Nrf24InterruptFlag = 0;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <nRF24_IRQ_Read+0x7c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]

		uint8_t status = nRF24_ReadStatus();
 80015c2:	f7ff fd46 	bl	8001052 <nRF24_ReadStatus>
 80015c6:	4603      	mov	r3, r0
 80015c8:	71bb      	strb	r3, [r7, #6]
		uint8_t ClearIrq = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
		// RX FIFO Interrupt
		if ((status & (1 << NRF24_RX_DR)))
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <nRF24_IRQ_Read+0x3a>
		{
			nrf24_rx_flag = 1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <nRF24_IRQ_Read+0x80>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e4:	71fb      	strb	r3, [r7, #7]
		}
		// TX Data Sent interrupt
		if ((status & (1 << NRF24_TX_DS)))
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <nRF24_IRQ_Read+0x52>
		{
			nrf24_tx_flag = 1;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <nRF24_IRQ_Read+0x84>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	71fb      	strb	r3, [r7, #7]
		}
		// Max Retransmits interrupt
		if ((status & (1 << NRF24_MAX_RT)))
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <nRF24_IRQ_Read+0x6a>
		{
			nrf24_mr_flag = 1;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <nRF24_IRQ_Read+0x88>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	71fb      	strb	r3, [r7, #7]
		}

		nRF24_WriteStatus(ClearIrq);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fd22 	bl	8001062 <nRF24_WriteStatus>
	}
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000ee 	.word	0x200000ee
 800162c:	200000eb 	.word	0x200000eb
 8001630:	200000ec 	.word	0x200000ec
 8001634:	200000ed 	.word	0x200000ed

08001638 <nRF24_Event>:
{

}

void nRF24_Event(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	nRF24_IRQ_Read(); // Check if there was any interrupt
 800163c:	f7ff ffb6 	bl	80015ac <nRF24_IRQ_Read>

	if(nrf24_rx_flag)
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <nRF24_Event+0x44>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <nRF24_Event+0x1a>
	{
		nRF24_EventRxCallback();
 8001648:	f7ff faea 	bl	8000c20 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <nRF24_Event+0x44>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_tx_flag)
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <nRF24_Event+0x48>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <nRF24_Event+0x2c>
	{
		nRF24_EventTxCallback();
 800165a:	f7ff fad1 	bl	8000c00 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <nRF24_Event+0x48>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
	}

	if(nrf24_mr_flag)
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <nRF24_Event+0x4c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <nRF24_Event+0x3e>
	{
		nRF24_EventMrCallback();
 800166c:	f7ff faf2 	bl	8000c54 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <nRF24_Event+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
	}
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000eb 	.word	0x200000eb
 8001680:	200000ec 	.word	0x200000ec
 8001684:	200000ed 	.word	0x200000ed

08001688 <nRF24_Init>:

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001690:	4a2e      	ldr	r2, [pc, #184]	; (800174c <nRF24_Init+0xc4>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001696:	2200      	movs	r2, #0
 8001698:	2110      	movs	r1, #16
 800169a:	482d      	ldr	r0, [pc, #180]	; (8001750 <nRF24_Init+0xc8>)
 800169c:	f000 feaa 	bl	80023f4 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80016a0:	2201      	movs	r2, #1
 80016a2:	2104      	movs	r1, #4
 80016a4:	482b      	ldr	r0, [pc, #172]	; (8001754 <nRF24_Init+0xcc>)
 80016a6:	f000 fea5 	bl	80023f4 <HAL_GPIO_WritePin>

	nRF24_Delay_ms(5); // Wait for radio power up
 80016aa:	2005      	movs	r0, #5
 80016ac:	f7ff fb7e 	bl	8000dac <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80016b0:	2003      	movs	r0, #3
 80016b2:	f7ff fc89 	bl	8000fc8 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80016b6:	2002      	movs	r0, #2
 80016b8:	f7ff fca5 	bl	8001006 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80016bc:	2001      	movs	r0, #1
 80016be:	f7ff fd13 	bl	80010e8 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fd2d 	bl	8001122 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80016c8:	2107      	movs	r1, #7
 80016ca:	2004      	movs	r0, #4
 80016cc:	f7ff fd46 	bl	800115c <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80016d0:	201d      	movs	r0, #29
 80016d2:	f7ff fba5 	bl	8000e20 <nRF24_ReadRegister>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	4619      	mov	r1, r3
 80016e0:	201d      	movs	r0, #29
 80016e2:	f7ff fbe5 	bl	8000eb0 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80016e6:	213f      	movs	r1, #63	; 0x3f
 80016e8:	201c      	movs	r0, #28
 80016ea:	f7ff fbe1 	bl	8000eb0 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80016ee:	200a      	movs	r0, #10
 80016f0:	f7ff fd4f 	bl	8001192 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80016f4:	2101      	movs	r1, #1
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fd5c 	bl	80011b4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80016fc:	2101      	movs	r1, #1
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fd8d 	bl	800121e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8001704:	2003      	movs	r0, #3
 8001706:	f7ff fdbf 	bl	8001288 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff fb4e 	bl	8000dac <nRF24_Delay_ms>

	nRF24_EnableRXDataReadyIRQ(1);
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fe81 	bl	8001418 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fe9b 	bl	8001452 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(1);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff feb5 	bl	800148c <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff fb42 	bl	8000dac <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8001728:	f7ff fe4a 	bl	80013c0 <nRF24_ClearInterrupts>


	//
	//
	//
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<1));
 800172c:	201d      	movs	r0, #29
 800172e:	f7ff fb77 	bl	8000e20 <nRF24_ReadRegister>
 8001732:	4603      	mov	r3, r0
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	201d      	movs	r0, #29
 800173e:	f7ff fbb7 	bl	8000eb0 <nRF24_WriteRegister>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000e4 	.word	0x200000e4
 8001750:	40010c00 	.word	0x40010c00
 8001754:	40011400 	.word	0x40011400

08001758 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_SPI3_Init+0x64>)
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <MX_SPI3_Init+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_SPI3_Init+0x64>)
 8001764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001768:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI3_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_SPI3_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_SPI3_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI3_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_SPI3_Init+0x64>)
 8001784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001788:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI3_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_SPI3_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI3_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_SPI3_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI3_Init+0x64>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_SPI3_Init+0x64>)
 80017aa:	f001 fcc9 	bl	8003140 <HAL_SPI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80017b4:	f7ff faf5 	bl	8000da2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200000f0 	.word	0x200000f0
 80017c0:	40003c00 	.word	0x40003c00

080017c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <HAL_SPI_MspInit+0xa8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d13f      	bne.n	8001864 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_SPI_MspInit+0xac>)
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_SPI_MspInit+0xac>)
 80017ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ee:	61d3      	str	r3, [r2, #28]
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_SPI_MspInit+0xac>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_SPI_MspInit+0xac>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <HAL_SPI_MspInit+0xac>)
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_SPI_MspInit+0xac>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 8001814:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4812      	ldr	r0, [pc, #72]	; (8001874 <HAL_SPI_MspInit+0xb0>)
 800182a:	f000 fc5f 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 800182e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	480c      	ldr	r0, [pc, #48]	; (8001874 <HAL_SPI_MspInit+0xb0>)
 8001844:	f000 fc52 	bl	80020ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_SPI_MspInit+0xb4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_SPI_MspInit+0xb4>)
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40003c00 	.word	0x40003c00
 8001870:	40021000 	.word	0x40021000
 8001874:	40011000 	.word	0x40011000
 8001878:	40010000 	.word	0x40010000

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_MspInit+0x5c>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_MspInit+0x5c>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_MspInit+0x5c>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_MspInit+0x5c>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_MspInit+0x5c>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_MspInit+0x5c>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_MspInit+0x60>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_MspInit+0x60>)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001926:	f000 fa93 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}

0800192e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8001932:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001936:	f000 fd75 	bl	8002424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}

0800193e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2224      	movs	r2, #36	; 0x24
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f003 f80a 	bl	8004974 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <MX_TIM1_Init+0xa8>)
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <MX_TIM1_Init+0xac>)
 800196c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <MX_TIM1_Init+0xa8>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_TIM1_Init+0xa8>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <MX_TIM1_Init+0xa8>)
 800197c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_TIM1_Init+0xa8>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_TIM1_Init+0xa8>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_TIM1_Init+0xa8>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001994:	2301      	movs	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ac:	2301      	movs	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4619      	mov	r1, r3
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <MX_TIM1_Init+0xa8>)
 80019c0:	f002 fa98 	bl	8003ef4 <HAL_TIM_Encoder_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80019ca:	f7ff f9ea 	bl	8000da2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_TIM1_Init+0xa8>)
 80019dc:	f002 ff64 	bl	80048a8 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80019e6:	f7ff f9dc 	bl	8000da2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3730      	adds	r7, #48	; 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000148 	.word	0x20000148
 80019f8:	40012c00 	.word	0x40012c00

080019fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08e      	sub	sp, #56	; 0x38
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	f107 0320 	add.w	r3, r7, #32
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a2e:	4a3d      	ldr	r2, [pc, #244]	; (8001b24 <MX_TIM3_Init+0x128>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a40:	22ff      	movs	r2, #255	; 0xff
 8001a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a50:	4833      	ldr	r0, [pc, #204]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a52:	f002 f8fd 	bl	8003c50 <HAL_TIM_Base_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001a5c:	f7ff f9a1 	bl	8000da2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482c      	ldr	r0, [pc, #176]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a6e:	f002 fba5 	bl	80041bc <HAL_TIM_ConfigClockSource>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001a78:	f7ff f993 	bl	8000da2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a7c:	4828      	ldr	r0, [pc, #160]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a7e:	f002 f936 	bl	8003cee <HAL_TIM_PWM_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001a88:	f7ff f98b 	bl	8000da2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a94:	f107 0320 	add.w	r3, r7, #32
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4821      	ldr	r0, [pc, #132]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001a9c:	f002 ff04 	bl	80048a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001aa6:	f7ff f97c 	bl	8000da2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aaa:	2360      	movs	r3, #96	; 0x60
 8001aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001ac2:	f002 fab9 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001acc:	f7ff f969 	bl	8000da2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4812      	ldr	r0, [pc, #72]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001ad8:	f002 faae 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001ae2:	f7ff f95e 	bl	8000da2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2208      	movs	r2, #8
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001aee:	f002 faa3 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001af8:	f7ff f953 	bl	8000da2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	220c      	movs	r2, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001b04:	f002 fa98 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001b0e:	f7ff f948 	bl	8000da2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b12:	4803      	ldr	r0, [pc, #12]	; (8001b20 <MX_TIM3_Init+0x124>)
 8001b14:	f000 f8e8 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 8001b18:	bf00      	nop
 8001b1a:	3738      	adds	r7, #56	; 0x38
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000190 	.word	0x20000190
 8001b24:	40000400 	.word	0x40000400

08001b28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 ff1c 	bl	8004974 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <MX_TIM4_Init+0xa0>)
 8001b46:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <MX_TIM4_Init+0xa4>)
 8001b48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <MX_TIM4_Init+0xa0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <MX_TIM4_Init+0xa0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_TIM4_Init+0xa0>)
 8001b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_TIM4_Init+0xa0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_TIM4_Init+0xa0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b72:	2301      	movs	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b82:	2301      	movs	r3, #1
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	4619      	mov	r1, r3
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <MX_TIM4_Init+0xa0>)
 8001b96:	f002 f9ad 	bl	8003ef4 <HAL_TIM_Encoder_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ba0:	f7ff f8ff 	bl	8000da2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_TIM4_Init+0xa0>)
 8001bb2:	f002 fe79 	bl	80048a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001bbc:	f7ff f8f1 	bl	8000da2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3730      	adds	r7, #48	; 0x30
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200001d8 	.word	0x200001d8
 8001bcc:	40000800 	.word	0x40000800

08001bd0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d125      	bne.n	8001c3c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bf6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_1_Pin|ENC_A_2_Pin;
 8001c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0318 	add.w	r3, r7, #24
 8001c32:	4619      	mov	r1, r3
 8001c34:	481a      	ldr	r0, [pc, #104]	; (8001ca0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001c36:	f000 fa59 	bl	80020ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c3a:	e028      	b.n	8001c8e <HAL_TIM_Encoder_MspInit+0xbe>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d123      	bne.n	8001c8e <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_B_1_Pin|ENC_B_2_Pin;
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001c8a:	f000 fa2f 	bl	80020ec <HAL_GPIO_Init>
}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40000800 	.word	0x40000800
 8001ca8:	40010c00 	.word	0x40010c00

08001cac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_TIM_Base_MspInit+0x34>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_TIM_Base_MspInit+0x38>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_TIM_Base_MspInit+0x38>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_TIM_Base_MspInit+0x38>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_TIM_MspPostInit+0x80>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d12a      	bne.n	8001d5e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_TIM_MspPostInit+0x84>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_TIM_MspPostInit+0x84>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_TIM_MspPostInit+0x84>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = DRV_AIN1_Pin|DRV_AIN2_Pin|DRV_BIN1_Pin|DRV_BIN2_Pin;
 8001d20:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	4619      	mov	r1, r3
 8001d34:	480e      	ldr	r0, [pc, #56]	; (8001d70 <HAL_TIM_MspPostInit+0x88>)
 8001d36:	f000 f9d9 	bl	80020ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_TIM_MspPostInit+0x8c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_TIM_MspPostInit+0x8c>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40011000 	.word	0x40011000
 8001d74:	40010000 	.word	0x40010000

08001d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff fde1 	bl	800193e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d7e:	490c      	ldr	r1, [pc, #48]	; (8001db0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d94:	4c09      	ldr	r4, [pc, #36]	; (8001dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001da2:	f002 fdef 	bl	8004984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da6:	f7fe ff67 	bl	8000c78 <main>
  bx lr
 8001daa:	4770      	bx	lr
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001db4:	08004a34 	.word	0x08004a34
  ldr r2, =_sbss
 8001db8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dbc:	20000224 	.word	0x20000224

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x28>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x28>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f947 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fd4c 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f95f 	bl	80020d2 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 f927 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_IncTick+0x20>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000220 	.word	0x20000220

08001e74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_GetTick+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20000220 	.word	0x20000220

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffe0 	bl	8001e74 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4906      	ldr	r1, [pc, #24]	; (8001f68 <__NVIC_EnableIRQ+0x34>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff90 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff2d 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff42 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff90 	bl	8001fc0 <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5f 	bl	8001f6c <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff35 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b08b      	sub	sp, #44	; 0x2c
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	e169      	b.n	80023d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002100:	2201      	movs	r2, #1
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8158 	bne.w	80023ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a9a      	ldr	r2, [pc, #616]	; (800238c <HAL_GPIO_Init+0x2a0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d05e      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002128:	4a98      	ldr	r2, [pc, #608]	; (800238c <HAL_GPIO_Init+0x2a0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d875      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800212e:	4a98      	ldr	r2, [pc, #608]	; (8002390 <HAL_GPIO_Init+0x2a4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d058      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002134:	4a96      	ldr	r2, [pc, #600]	; (8002390 <HAL_GPIO_Init+0x2a4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d86f      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800213a:	4a96      	ldr	r2, [pc, #600]	; (8002394 <HAL_GPIO_Init+0x2a8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d052      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002140:	4a94      	ldr	r2, [pc, #592]	; (8002394 <HAL_GPIO_Init+0x2a8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d869      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002146:	4a94      	ldr	r2, [pc, #592]	; (8002398 <HAL_GPIO_Init+0x2ac>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d04c      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 800214c:	4a92      	ldr	r2, [pc, #584]	; (8002398 <HAL_GPIO_Init+0x2ac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d863      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002152:	4a92      	ldr	r2, [pc, #584]	; (800239c <HAL_GPIO_Init+0x2b0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d046      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002158:	4a90      	ldr	r2, [pc, #576]	; (800239c <HAL_GPIO_Init+0x2b0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d85d      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800215e:	2b12      	cmp	r3, #18
 8002160:	d82a      	bhi.n	80021b8 <HAL_GPIO_Init+0xcc>
 8002162:	2b12      	cmp	r3, #18
 8002164:	d859      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <HAL_GPIO_Init+0x80>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021c1 	.word	0x080021c1
 8002174:	080021d3 	.word	0x080021d3
 8002178:	08002215 	.word	0x08002215
 800217c:	0800221b 	.word	0x0800221b
 8002180:	0800221b 	.word	0x0800221b
 8002184:	0800221b 	.word	0x0800221b
 8002188:	0800221b 	.word	0x0800221b
 800218c:	0800221b 	.word	0x0800221b
 8002190:	0800221b 	.word	0x0800221b
 8002194:	0800221b 	.word	0x0800221b
 8002198:	0800221b 	.word	0x0800221b
 800219c:	0800221b 	.word	0x0800221b
 80021a0:	0800221b 	.word	0x0800221b
 80021a4:	0800221b 	.word	0x0800221b
 80021a8:	0800221b 	.word	0x0800221b
 80021ac:	0800221b 	.word	0x0800221b
 80021b0:	080021c9 	.word	0x080021c9
 80021b4:	080021dd 	.word	0x080021dd
 80021b8:	4a79      	ldr	r2, [pc, #484]	; (80023a0 <HAL_GPIO_Init+0x2b4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021be:	e02c      	b.n	800221a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	623b      	str	r3, [r7, #32]
          break;
 80021c6:	e029      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	3304      	adds	r3, #4
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e024      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	3308      	adds	r3, #8
 80021d8:	623b      	str	r3, [r7, #32]
          break;
 80021da:	e01f      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	330c      	adds	r3, #12
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e01a      	b.n	800221c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ee:	2304      	movs	r3, #4
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e013      	b.n	800221c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021fc:	2308      	movs	r3, #8
 80021fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	611a      	str	r2, [r3, #16]
          break;
 8002206:	e009      	b.n	800221c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	615a      	str	r2, [r3, #20]
          break;
 8002212:	e003      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
          break;
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x130>
          break;
 800221a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2bff      	cmp	r3, #255	; 0xff
 8002220:	d801      	bhi.n	8002226 <HAL_GPIO_Init+0x13a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	e001      	b.n	800222a <HAL_GPIO_Init+0x13e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2bff      	cmp	r3, #255	; 0xff
 8002230:	d802      	bhi.n	8002238 <HAL_GPIO_Init+0x14c>
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x152>
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3b08      	subs	r3, #8
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	210f      	movs	r1, #15
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	6a39      	ldr	r1, [r7, #32]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	431a      	orrs	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80b1 	beq.w	80023ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800226c:	4b4d      	ldr	r3, [pc, #308]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4a4c      	ldr	r2, [pc, #304]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6193      	str	r3, [r2, #24]
 8002278:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002284:	4a48      	ldr	r2, [pc, #288]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002290:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a40      	ldr	r2, [pc, #256]	; (80023ac <HAL_GPIO_Init+0x2c0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_GPIO_Init+0x1ec>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3f      	ldr	r2, [pc, #252]	; (80023b0 <HAL_GPIO_Init+0x2c4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00d      	beq.n	80022d4 <HAL_GPIO_Init+0x1e8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3e      	ldr	r2, [pc, #248]	; (80023b4 <HAL_GPIO_Init+0x2c8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d007      	beq.n	80022d0 <HAL_GPIO_Init+0x1e4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <HAL_GPIO_Init+0x2cc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d101      	bne.n	80022cc <HAL_GPIO_Init+0x1e0>
 80022c8:	2303      	movs	r3, #3
 80022ca:	e006      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e004      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e002      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d8:	2300      	movs	r3, #0
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	f002 0203 	and.w	r2, r2, #3
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	4093      	lsls	r3, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ea:	492f      	ldr	r1, [pc, #188]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	492c      	ldr	r1, [pc, #176]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	43db      	mvns	r3, r3
 800231a:	4928      	ldr	r1, [pc, #160]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800231c:	4013      	ands	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4922      	ldr	r1, [pc, #136]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	43db      	mvns	r3, r3
 8002342:	491e      	ldr	r1, [pc, #120]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002344:	4013      	ands	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4918      	ldr	r1, [pc, #96]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	43db      	mvns	r3, r3
 800236a:	4914      	ldr	r1, [pc, #80]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800236c:	4013      	ands	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d021      	beq.n	80023c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e021      	b.n	80023ce <HAL_GPIO_Init+0x2e2>
 800238a:	bf00      	nop
 800238c:	10320000 	.word	0x10320000
 8002390:	10310000 	.word	0x10310000
 8002394:	10220000 	.word	0x10220000
 8002398:	10210000 	.word	0x10210000
 800239c:	10120000 	.word	0x10120000
 80023a0:	10110000 	.word	0x10110000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40011400 	.word	0x40011400
 80023bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4909      	ldr	r1, [pc, #36]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3301      	adds	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f47f ae8e 	bne.w	8002100 <HAL_GPIO_Init+0x14>
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	372c      	adds	r7, #44	; 0x2c
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fc9e 	bl	8000d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e12b      	b.n	80026be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe fa4c 	bl	8000918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2224      	movs	r2, #36	; 0x24
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b8:	f000 fe10 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 80024bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a81      	ldr	r2, [pc, #516]	; (80026c8 <HAL_I2C_Init+0x274>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d807      	bhi.n	80024d8 <HAL_I2C_Init+0x84>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a80      	ldr	r2, [pc, #512]	; (80026cc <HAL_I2C_Init+0x278>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bf94      	ite	ls
 80024d0:	2301      	movls	r3, #1
 80024d2:	2300      	movhi	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e006      	b.n	80024e6 <HAL_I2C_Init+0x92>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a7d      	ldr	r2, [pc, #500]	; (80026d0 <HAL_I2C_Init+0x27c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	bf94      	ite	ls
 80024e0:	2301      	movls	r3, #1
 80024e2:	2300      	movhi	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0e7      	b.n	80026be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a78      	ldr	r2, [pc, #480]	; (80026d4 <HAL_I2C_Init+0x280>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0c9b      	lsrs	r3, r3, #18
 80024f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4a6a      	ldr	r2, [pc, #424]	; (80026c8 <HAL_I2C_Init+0x274>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d802      	bhi.n	8002528 <HAL_I2C_Init+0xd4>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3301      	adds	r3, #1
 8002526:	e009      	b.n	800253c <HAL_I2C_Init+0xe8>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <HAL_I2C_Init+0x284>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	3301      	adds	r3, #1
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	430b      	orrs	r3, r1
 8002542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800254e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	495c      	ldr	r1, [pc, #368]	; (80026c8 <HAL_I2C_Init+0x274>)
 8002558:	428b      	cmp	r3, r1
 800255a:	d819      	bhi.n	8002590 <HAL_I2C_Init+0x13c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e59      	subs	r1, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fbb1 f3f3 	udiv	r3, r1, r3
 800256a:	1c59      	adds	r1, r3, #1
 800256c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002570:	400b      	ands	r3, r1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_I2C_Init+0x138>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1e59      	subs	r1, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fbb1 f3f3 	udiv	r3, r1, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258a:	e051      	b.n	8002630 <HAL_I2C_Init+0x1dc>
 800258c:	2304      	movs	r3, #4
 800258e:	e04f      	b.n	8002630 <HAL_I2C_Init+0x1dc>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <HAL_I2C_Init+0x168>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e012      	b.n	80025e2 <HAL_I2C_Init+0x18e>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	0099      	lsls	r1, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Init+0x196>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e022      	b.n	8002630 <HAL_I2C_Init+0x1dc>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10e      	bne.n	8002610 <HAL_I2C_Init+0x1bc>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1e58      	subs	r0, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	440b      	add	r3, r1
 8002600:	fbb0 f3f3 	udiv	r3, r0, r3
 8002604:	3301      	adds	r3, #1
 8002606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260e:	e00f      	b.n	8002630 <HAL_I2C_Init+0x1dc>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	0099      	lsls	r1, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	fbb0 f3f3 	udiv	r3, r0, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	6809      	ldr	r1, [r1, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800265e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6911      	ldr	r1, [r2, #16]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68d2      	ldr	r2, [r2, #12]
 800266a:	4311      	orrs	r1, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	000186a0 	.word	0x000186a0
 80026cc:	001e847f 	.word	0x001e847f
 80026d0:	003d08ff 	.word	0x003d08ff
 80026d4:	431bde83 	.word	0x431bde83
 80026d8:	10624dd3 	.word	0x10624dd3

080026dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e304      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8087 	beq.w	800280a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026fc:	4b92      	ldr	r3, [pc, #584]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b04      	cmp	r3, #4
 8002706:	d00c      	beq.n	8002722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002708:	4b8f      	ldr	r3, [pc, #572]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d112      	bne.n	800273a <HAL_RCC_OscConfig+0x5e>
 8002714:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d10b      	bne.n	800273a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002722:	4b89      	ldr	r3, [pc, #548]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d06c      	beq.n	8002808 <HAL_RCC_OscConfig+0x12c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d168      	bne.n	8002808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e2de      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x76>
 8002744:	4b80      	ldr	r3, [pc, #512]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a7f      	ldr	r2, [pc, #508]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	e02e      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b7b      	ldr	r3, [pc, #492]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7a      	ldr	r2, [pc, #488]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b78      	ldr	r3, [pc, #480]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a77      	ldr	r2, [pc, #476]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e01d      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0xbc>
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a71      	ldr	r2, [pc, #452]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0xd4>
 8002798:	4b6b      	ldr	r3, [pc, #428]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6a      	ldr	r2, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a67      	ldr	r2, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff fb5c 	bl	8001e74 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7ff fb58 	bl	8001e74 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e292      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0xe4>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff fb48 	bl	8001e74 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff fb44 	bl	8001e74 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e27e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x10c>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d063      	beq.n	80028de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002816:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d11c      	bne.n	8002868 <HAL_RCC_OscConfig+0x18c>
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x176>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e252      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4939      	ldr	r1, [pc, #228]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	e03a      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x270>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7ff fafd 	bl	8001e74 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7ff faf9 	bl	8001e74 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e233      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4927      	ldr	r1, [pc, #156]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x270>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7ff fadc 	bl	8001e74 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7ff fad8 	bl	8001e74 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e212      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03a      	beq.n	8002960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d019      	beq.n	8002926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_RCC_OscConfig+0x274>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f8:	f7ff fabc 	bl	8001e74 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002900:	f7ff fab8 	bl	8001e74 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1f2      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCC_OscConfig+0x26c>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800291e:	2001      	movs	r0, #1
 8002920:	f000 fbf0 	bl	8003104 <RCC_Delay>
 8002924:	e01c      	b.n	8002960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RCC_OscConfig+0x274>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7ff faa2 	bl	8001e74 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002932:	e00f      	b.n	8002954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7ff fa9e 	bl	8001e74 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d908      	bls.n	8002954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1d8      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	42420000 	.word	0x42420000
 8002950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002954:	4b9b      	ldr	r3, [pc, #620]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e9      	bne.n	8002934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80a6 	beq.w	8002aba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002972:	4b94      	ldr	r3, [pc, #592]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4b91      	ldr	r3, [pc, #580]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a90      	ldr	r2, [pc, #576]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	61d3      	str	r3, [r2, #28]
 800298a:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b8b      	ldr	r3, [pc, #556]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d118      	bne.n	80029d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a6:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a87      	ldr	r2, [pc, #540]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b2:	f7ff fa5f 	bl	8001e74 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7ff fa5b 	bl	8001e74 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b64      	cmp	r3, #100	; 0x64
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e195      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b7e      	ldr	r3, [pc, #504]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x312>
 80029e0:	4b78      	ldr	r3, [pc, #480]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4a77      	ldr	r2, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	e02d      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x334>
 80029f6:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4a72      	ldr	r2, [pc, #456]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6213      	str	r3, [r2, #32]
 8002a02:	4b70      	ldr	r3, [pc, #448]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a6f      	ldr	r2, [pc, #444]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	6213      	str	r3, [r2, #32]
 8002a0e:	e01c      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x356>
 8002a18:	4b6a      	ldr	r3, [pc, #424]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4a69      	ldr	r2, [pc, #420]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6213      	str	r3, [r2, #32]
 8002a24:	4b67      	ldr	r3, [pc, #412]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a66      	ldr	r2, [pc, #408]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	e00b      	b.n	8002a4a <HAL_RCC_OscConfig+0x36e>
 8002a32:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a63      	ldr	r2, [pc, #396]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a60      	ldr	r2, [pc, #384]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7ff fa0f 	bl	8001e74 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7ff fa0b 	bl	8001e74 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e143      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	4b54      	ldr	r3, [pc, #336]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ee      	beq.n	8002a5a <HAL_RCC_OscConfig+0x37e>
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7ff f9f9 	bl	8001e74 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7ff f9f5 	bl	8001e74 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e12d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ee      	bne.n	8002a86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4a44      	ldr	r2, [pc, #272]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 808c 	beq.w	8002bdc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d10e      	bne.n	8002af0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002ad2:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d108      	bne.n	8002af0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e103      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d14e      	bne.n	8002b96 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002af8:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0ef      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002b18:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <HAL_RCC_OscConfig+0x4f0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7ff f9a9 	bl	8001e74 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b26:	f7ff f9a5 	bl	8001e74 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	; 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e0df      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	491c      	ldr	r1, [pc, #112]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4918      	ldr	r1, [pc, #96]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_RCC_OscConfig+0x4f0>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7ff f981 	bl	8001e74 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b76:	f7ff f97d 	bl	8001e74 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0b7      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x49a>
 8002b94:	e022      	b.n	8002bdc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_RCC_OscConfig+0x4e8>)
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_RCC_OscConfig+0x4f0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f964 	bl	8001e74 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002bae:	e00f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002bb0:	f7ff f960 	bl	8001e74 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d908      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e09a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e9      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8088 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be6:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d068      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d14d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCC_OscConfig+0x628>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff f938 	bl	8001e74 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7ff f934 	bl	8001e74 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e06e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2e:	d10f      	bne.n	8002c50 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002c30:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4931      	ldr	r1, [pc, #196]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	492d      	ldr	r1, [pc, #180]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	430b      	orrs	r3, r1
 8002c62:	4927      	ldr	r1, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <HAL_RCC_OscConfig+0x628>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7ff f901 	bl	8001e74 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7ff f8fd 	bl	8001e74 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e037      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x59a>
 8002c94:	e02f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x628>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f8ea 	bl	8001e74 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff f8e6 	bl	8001e74 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e020      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c8>
 8002cc2:	e018      	b.n	8002cf6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e013      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_OscConfig+0x624>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	42420060 	.word	0x42420060

08002d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0d0      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d910      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 0207 	bic.w	r2, r3, #7
 8002d32:	4965      	ldr	r1, [pc, #404]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0b8      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	494d      	ldr	r1, [pc, #308]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d040      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d115      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e07f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e073      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06b      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4936      	ldr	r1, [pc, #216]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df8:	f7ff f83c 	bl	8001e74 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7ff f838 	bl	8001e74 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e053      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d210      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 0207 	bic.w	r2, r3, #7
 8002e3e:	4922      	ldr	r1, [pc, #136]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e032      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4916      	ldr	r1, [pc, #88]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e96:	f000 f821 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	490a      	ldr	r1, [pc, #40]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	5ccb      	ldrb	r3, [r1, r3]
 8002eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8002eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe ff9a 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	080049ec 	.word	0x080049ec
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000004 	.word	0x20000004

08002edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee0:	b092      	sub	sp, #72	; 0x48
 8002ee2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee8:	2300      	movs	r3, #0
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eec:	2300      	movs	r3, #0
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f00:	4b6b      	ldr	r3, [pc, #428]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d002      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d003      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x40>
 8002f14:	e0c3      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002f18:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002f1a:	e0c3      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	f003 020f 	and.w	r2, r3, #15
 8002f24:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002f26:	5c9b      	ldrb	r3, [r3, r2]
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80ac 	beq.w	800308e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002f36:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	4b5f      	ldr	r3, [pc, #380]	; (80030bc <HAL_RCC_GetSysClockFreq+0x1e0>)
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002f44:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 808c 	beq.w	800306a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002f52:	4b57      	ldr	r3, [pc, #348]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	091b      	lsrs	r3, r3, #4
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	2200      	movs	r2, #0
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	627a      	str	r2, [r7, #36]	; 0x24
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	fb00 f203 	mul.w	r2, r0, r3
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	fb03 f301 	mul.w	r3, r3, r1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	6a3a      	ldr	r2, [r7, #32]
 8002f8e:	fba2 4500 	umull	r4, r5, r2, r0
 8002f92:	442b      	add	r3, r5
 8002f94:	461d      	mov	r5, r3
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0159      	lsls	r1, r3, #5
 8002fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa8:	0150      	lsls	r0, r2, #5
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	ebb2 0a04 	subs.w	sl, r2, r4
 8002fb2:	eb63 0b05 	sbc.w	fp, r3, r5
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fc6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fca:	ebb2 080a 	subs.w	r8, r2, sl
 8002fce:	eb63 090b 	sbc.w	r9, r3, fp
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	4699      	mov	r9, r3
 8002fea:	eb18 0304 	adds.w	r3, r8, r4
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	eb49 0305 	adc.w	r3, r9, r5
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003002:	4629      	mov	r1, r5
 8003004:	028b      	lsls	r3, r1, #10
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	4604      	mov	r4, r0
 800300c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003010:	4601      	mov	r1, r0
 8003012:	028a      	lsls	r2, r1, #10
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	2200      	movs	r2, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	617a      	str	r2, [r7, #20]
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	2200      	movs	r2, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	60fa      	str	r2, [r7, #12]
 8003028:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800302c:	4622      	mov	r2, r4
 800302e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003032:	4645      	mov	r5, r8
 8003034:	fb05 f202 	mul.w	r2, r5, r2
 8003038:	46cc      	mov	ip, r9
 800303a:	4625      	mov	r5, r4
 800303c:	461c      	mov	r4, r3
 800303e:	4623      	mov	r3, r4
 8003040:	fb03 f30c 	mul.w	r3, r3, ip
 8003044:	4413      	add	r3, r2
 8003046:	4622      	mov	r2, r4
 8003048:	4644      	mov	r4, r8
 800304a:	fba2 2404 	umull	r2, r4, r2, r4
 800304e:	61fc      	str	r4, [r7, #28]
 8003050:	61ba      	str	r2, [r7, #24]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800305c:	f7fd f8e2 	bl	8000224 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4613      	mov	r3, r2
 8003066:	647b      	str	r3, [r7, #68]	; 0x44
 8003068:	e007      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800306e:	fb03 f202 	mul.w	r2, r3, r2
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800307c:	7b5b      	ldrb	r3, [r3, #13]
 800307e:	461a      	mov	r2, r3
 8003080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8003086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
 800308c:	e004      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8003098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800309c:	e002      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80030a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3748      	adds	r7, #72	; 0x48
 80030aa:	46bd      	mov	sp, r7
 80030ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	08004a04 	.word	0x08004a04
 80030bc:	08004a14 	.word	0x08004a14
 80030c0:	003d0900 	.word	0x003d0900
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	20000000 	.word	0x20000000

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e0:	f7ff fff2 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	080049fc 	.word	0x080049fc

08003104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <RCC_Delay+0x34>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <RCC_Delay+0x38>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0a5b      	lsrs	r3, r3, #9
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003120:	bf00      	nop
  }
  while (Delay --);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1e5a      	subs	r2, r3, #1
 8003126:	60fa      	str	r2, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f9      	bne.n	8003120 <RCC_Delay+0x1c>
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	20000000 	.word	0x20000000
 800313c:	10624dd3 	.word	0x10624dd3

08003140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e076      	b.n	8003240 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003162:	d009      	beq.n	8003178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
 800316a:	e005      	b.n	8003178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe fb16 	bl	80017c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fc:	ea42 0103 	orr.w	r1, r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	0c1a      	lsrs	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f002 0204 	and.w	r2, r2, #4
 800321e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_SPI_Transmit+0x22>
 8003266:	2302      	movs	r3, #2
 8003268:	e12d      	b.n	80034c6 <HAL_SPI_Transmit+0x27e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003272:	f7fe fdff 	bl	8001e74 <HAL_GetTick>
 8003276:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d002      	beq.n	800328e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003288:	2302      	movs	r3, #2
 800328a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800328c:	e116      	b.n	80034bc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_SPI_Transmit+0x52>
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800329e:	e10d      	b.n	80034bc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	88fa      	ldrh	r2, [r7, #6]
 80032be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e6:	d10f      	bne.n	8003308 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003306:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d007      	beq.n	8003326 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332e:	d14f      	bne.n	80033d0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_SPI_Transmit+0xf6>
 8003338:	8afb      	ldrh	r3, [r7, #22]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d142      	bne.n	80033c4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	881a      	ldrh	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	1c9a      	adds	r2, r3, #2
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003362:	e02f      	b.n	80033c4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d112      	bne.n	8003398 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	1c9a      	adds	r2, r3, #2
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36
 8003396:	e015      	b.n	80033c4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003398:	f7fe fd6c 	bl	8001e74 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d803      	bhi.n	80033b0 <HAL_SPI_Transmit+0x168>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d102      	bne.n	80033b6 <HAL_SPI_Transmit+0x16e>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033c2:	e07b      	b.n	80034bc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ca      	bne.n	8003364 <HAL_SPI_Transmit+0x11c>
 80033ce:	e050      	b.n	8003472 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_Transmit+0x196>
 80033d8:	8afb      	ldrh	r3, [r7, #22]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d144      	bne.n	8003468 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003404:	e030      	b.n	8003468 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d113      	bne.n	800343c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	86da      	strh	r2, [r3, #54]	; 0x36
 800343a:	e015      	b.n	8003468 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800343c:	f7fe fd1a 	bl	8001e74 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d803      	bhi.n	8003454 <HAL_SPI_Transmit+0x20c>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d102      	bne.n	800345a <HAL_SPI_Transmit+0x212>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003466:	e029      	b.n	80034bc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1c9      	bne.n	8003406 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fbcc 	bl	8003c14 <SPI_EndRxTxTransaction>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e003      	b.n	80034bc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af02      	add	r7, sp, #8
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d002      	beq.n	80034f4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
 80034f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034f2:	e0fb      	b.n	80036ec <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fc:	d112      	bne.n	8003524 <HAL_SPI_Receive+0x56>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10e      	bne.n	8003524 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2204      	movs	r2, #4
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f8ef 	bl	80036fe <HAL_SPI_TransmitReceive>
 8003520:	4603      	mov	r3, r0
 8003522:	e0e8      	b.n	80036f6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_SPI_Receive+0x64>
 800352e:	2302      	movs	r3, #2
 8003530:	e0e1      	b.n	80036f6 <HAL_SPI_Receive+0x228>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800353a:	f7fe fc9b 	bl	8001e74 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_SPI_Receive+0x7e>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003550:	e0cc      	b.n	80036ec <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2204      	movs	r2, #4
 8003556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	88fa      	ldrh	r2, [r7, #6]
 800356a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003598:	d10f      	bne.n	80035ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d007      	beq.n	80035d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d16a      	bne.n	80036b6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035e0:	e032      	b.n	8003648 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d115      	bne.n	800361c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f103 020c 	add.w	r2, r3, #12
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	87da      	strh	r2, [r3, #62]	; 0x3e
 800361a:	e015      	b.n	8003648 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800361c:	f7fe fc2a 	bl	8001e74 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d803      	bhi.n	8003634 <HAL_SPI_Receive+0x166>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d102      	bne.n	800363a <HAL_SPI_Receive+0x16c>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003646:	e051      	b.n	80036ec <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1c7      	bne.n	80035e2 <HAL_SPI_Receive+0x114>
 8003652:	e035      	b.n	80036c0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d113      	bne.n	800368a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	b292      	uxth	r2, r2
 800366e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003688:	e015      	b.n	80036b6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368a:	f7fe fbf3 	bl	8001e74 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d803      	bhi.n	80036a2 <HAL_SPI_Receive+0x1d4>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_Receive+0x1da>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036b4:	e01a      	b.n	80036ec <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1c9      	bne.n	8003654 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fa53 	bl	8003b70 <SPI_EndRxTransaction>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
 80036e2:	e003      	b.n	80036ec <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08c      	sub	sp, #48	; 0x30
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800370c:	2301      	movs	r3, #1
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x26>
 8003720:	2302      	movs	r3, #2
 8003722:	e198      	b.n	8003a56 <HAL_SPI_TransmitReceive+0x358>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800372c:	f7fe fba2 	bl	8001e74 <HAL_GetTick>
 8003730:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800374a:	2b01      	cmp	r3, #1
 800374c:	d00f      	beq.n	800376e <HAL_SPI_TransmitReceive+0x70>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003754:	d107      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x68>
 800375e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003762:	2b04      	cmp	r3, #4
 8003764:	d003      	beq.n	800376e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003766:	2302      	movs	r3, #2
 8003768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800376c:	e16d      	b.n	8003a4a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x82>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x82>
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003786:	e160      	b.n	8003a4a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b04      	cmp	r3, #4
 8003792:	d003      	beq.n	800379c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2205      	movs	r2, #5
 8003798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	887a      	ldrh	r2, [r7, #2]
 80037ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	887a      	ldrh	r2, [r7, #2]
 80037b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	887a      	ldrh	r2, [r7, #2]
 80037be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d007      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f8:	d17c      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x10a>
 8003802:	8b7b      	ldrh	r3, [r7, #26]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d16a      	bne.n	80038de <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	881a      	ldrh	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	1c9a      	adds	r2, r3, #2
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382c:	e057      	b.n	80038de <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b02      	cmp	r3, #2
 800383a:	d11b      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x176>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_SPI_TransmitReceive+0x176>
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d113      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	1c9a      	adds	r2, r3, #2
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d119      	bne.n	80038b6 <HAL_SPI_TransmitReceive+0x1b8>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d014      	beq.n	80038b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	b292      	uxth	r2, r2
 8003898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	1c9a      	adds	r2, r3, #2
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038b2:	2301      	movs	r3, #1
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038b6:	f7fe fadd 	bl	8001e74 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d80b      	bhi.n	80038de <HAL_SPI_TransmitReceive+0x1e0>
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d007      	beq.n	80038de <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80038dc:	e0b5      	b.n	8003a4a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1a2      	bne.n	800382e <HAL_SPI_TransmitReceive+0x130>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d19d      	bne.n	800382e <HAL_SPI_TransmitReceive+0x130>
 80038f2:	e080      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x204>
 80038fc:	8b7b      	ldrh	r3, [r7, #26]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d16f      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	7812      	ldrb	r2, [r2, #0]
 800390e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003928:	e05b      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d11c      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x274>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d017      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x274>
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d114      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	7812      	ldrb	r2, [r2, #0]
 8003954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d119      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x2b6>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d014      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b0:	2301      	movs	r3, #1
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039b4:	f7fe fa5e 	bl	8001e74 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d803      	bhi.n	80039cc <HAL_SPI_TransmitReceive+0x2ce>
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d102      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x2d4>
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80039e0:	e033      	b.n	8003a4a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d19e      	bne.n	800392a <HAL_SPI_TransmitReceive+0x22c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d199      	bne.n	800392a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f90a 	bl	8003c14 <SPI_EndRxTxTransaction>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a12:	e01a      	b.n	8003a4a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a40:	e003      	b.n	8003a4a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3730      	adds	r7, #48	; 0x30
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a70:	f7fe fa00 	bl	8001e74 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a80:	f7fe f9f8 	bl	8001e74 <HAL_GetTick>
 8003a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a86:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	015b      	lsls	r3, r3, #5
 8003a8c:	0d1b      	lsrs	r3, r3, #20
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a96:	e054      	b.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d050      	beq.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aa0:	f7fe f9e8 	bl	8001e74 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d902      	bls.n	8003ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d13d      	bne.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ace:	d111      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad8:	d004      	beq.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae2:	d107      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afc:	d10f      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e017      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d19b      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000000 	.word	0x20000000

08003b70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b84:	d111      	bne.n	8003baa <SPI_EndRxTransaction+0x3a>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8e:	d004      	beq.n	8003b9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b98:	d107      	bne.n	8003baa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d117      	bne.n	8003be4 <SPI_EndRxTransaction+0x74>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbc:	d112      	bne.n	8003be4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff ff49 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01a      	beq.n	8003c0a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e013      	b.n	8003c0c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2180      	movs	r1, #128	; 0x80
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff ff36 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e000      	b.n	8003c0c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff ff18 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e000      	b.n	8003c48 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e041      	b.n	8003ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fe f818 	bl	8001cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f000 fb5c 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e041      	b.n	8003d84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f839 	bl	8003d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f000 fb0d 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_TIM_PWM_Start+0x24>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e022      	b.n	8003e0a <HAL_TIM_PWM_Start+0x6a>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d109      	bne.n	8003dde <HAL_TIM_PWM_Start+0x3e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e015      	b.n	8003e0a <HAL_TIM_PWM_Start+0x6a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d109      	bne.n	8003df8 <HAL_TIM_PWM_Start+0x58>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e008      	b.n	8003e0a <HAL_TIM_PWM_Start+0x6a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e063      	b.n	8003eda <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <HAL_TIM_PWM_Start+0x82>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e20:	e013      	b.n	8003e4a <HAL_TIM_PWM_Start+0xaa>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d104      	bne.n	8003e32 <HAL_TIM_PWM_Start+0x92>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e30:	e00b      	b.n	8003e4a <HAL_TIM_PWM_Start+0xaa>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d104      	bne.n	8003e42 <HAL_TIM_PWM_Start+0xa2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e40:	e003      	b.n	8003e4a <HAL_TIM_PWM_Start+0xaa>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	6839      	ldr	r1, [r7, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fd04 	bl	8004860 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <HAL_TIM_PWM_Start+0x144>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_TIM_PWM_Start+0x144>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x104>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e84:	d00e      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x104>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <HAL_TIM_PWM_Start+0x148>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x104>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <HAL_TIM_PWM_Start+0x14c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x104>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <HAL_TIM_PWM_Start+0x150>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d010      	beq.n	8003ed8 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	e007      	b.n	8003ed8 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00

08003ef4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e093      	b.n	8004030 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fd fe57 	bl	8001bd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f38:	f023 0307 	bic.w	r3, r3, #7
 8003f3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f000 f9ff 	bl	800434c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	4313      	orrs	r3, r2
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f94:	f023 030c 	bic.w	r3, r3, #12
 8003f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	011a      	lsls	r2, r3, #4
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	031b      	lsls	r3, r3, #12
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004052:	2302      	movs	r3, #2
 8004054:	e0ae      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	f200 809f 	bhi.w	80041a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080041a5 	.word	0x080041a5
 8004074:	080041a5 	.word	0x080041a5
 8004078:	080041a5 	.word	0x080041a5
 800407c:	080040e1 	.word	0x080040e1
 8004080:	080041a5 	.word	0x080041a5
 8004084:	080041a5 	.word	0x080041a5
 8004088:	080041a5 	.word	0x080041a5
 800408c:	08004123 	.word	0x08004123
 8004090:	080041a5 	.word	0x080041a5
 8004094:	080041a5 	.word	0x080041a5
 8004098:	080041a5 	.word	0x080041a5
 800409c:	08004163 	.word	0x08004163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f9bc 	bl	8004424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	619a      	str	r2, [r3, #24]
      break;
 80040de:	e064      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa02 	bl	80044f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
      break;
 8004120:	e043      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fa4b 	bl	80045c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0208 	orr.w	r2, r2, #8
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0204 	bic.w	r2, r2, #4
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      break;
 8004160:	e023      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fa95 	bl	8004698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69d9      	ldr	r1, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
      break;
 80041a2:	e002      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
      break;
 80041a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_ConfigClockSource+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0b4      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x186>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004210:	d03e      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0xd4>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	f200 8087 	bhi.w	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	f000 8086 	beq.w	800432e <HAL_TIM_ConfigClockSource+0x172>
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004226:	d87f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b70      	cmp	r3, #112	; 0x70
 800422a:	d01a      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xa6>
 800422c:	2b70      	cmp	r3, #112	; 0x70
 800422e:	d87b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b60      	cmp	r3, #96	; 0x60
 8004232:	d050      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004234:	2b60      	cmp	r3, #96	; 0x60
 8004236:	d877      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b50      	cmp	r3, #80	; 0x50
 800423a:	d03c      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0xfa>
 800423c:	2b50      	cmp	r3, #80	; 0x50
 800423e:	d873      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d058      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d86f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d064      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	2b30      	cmp	r3, #48	; 0x30
 800424e:	d86b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d060      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d867      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05c      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d05a      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004260:	e062      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004272:	f000 fad6 	bl	8004822 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	609a      	str	r2, [r3, #8]
      break;
 800428e:	e04f      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a0:	f000 fabf 	bl	8004822 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042b2:	609a      	str	r2, [r3, #8]
      break;
 80042b4:	e03c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	461a      	mov	r2, r3
 80042c4:	f000 fa36 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2150      	movs	r1, #80	; 0x50
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fa8d 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80042d4:	e02c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	461a      	mov	r2, r3
 80042e4:	f000 fa54 	bl	8004790 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2160      	movs	r1, #96	; 0x60
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa7d 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80042f4:	e01c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	461a      	mov	r2, r3
 8004304:	f000 fa16 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2140      	movs	r1, #64	; 0x40
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fa6d 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 8004314:	e00c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f000 fa64 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 8004326:	e003      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e000      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800432e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <TIM_Base_SetConfig+0xc8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00f      	beq.n	8004384 <TIM_Base_SetConfig+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436a:	d00b      	beq.n	8004384 <TIM_Base_SetConfig+0x38>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a2a      	ldr	r2, [pc, #168]	; (8004418 <TIM_Base_SetConfig+0xcc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <TIM_Base_SetConfig+0x38>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a29      	ldr	r2, [pc, #164]	; (800441c <TIM_Base_SetConfig+0xd0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0x38>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a28      	ldr	r2, [pc, #160]	; (8004420 <TIM_Base_SetConfig+0xd4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <TIM_Base_SetConfig+0xc8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_Base_SetConfig+0x72>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x72>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <TIM_Base_SetConfig+0xcc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x72>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1a      	ldr	r2, [pc, #104]	; (800441c <TIM_Base_SetConfig+0xd0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x72>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <TIM_Base_SetConfig+0xd4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a07      	ldr	r2, [pc, #28]	; (8004414 <TIM_Base_SetConfig+0xc8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	615a      	str	r2, [r3, #20]
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400
 800441c:	40000800 	.word	0x40000800
 8004420:	40000c00 	.word	0x40000c00

08004424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f023 0201 	bic.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 0302 	bic.w	r3, r3, #2
 800446c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <TIM_OC1_SetConfig+0xc8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10c      	bne.n	800449a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0308 	bic.w	r3, r3, #8
 8004486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a13      	ldr	r2, [pc, #76]	; (80044ec <TIM_OC1_SetConfig+0xc8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d111      	bne.n	80044c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40012c00 	.word	0x40012c00

080044f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f023 0210 	bic.w	r2, r3, #16
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0320 	bic.w	r3, r3, #32
 800453a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <TIM_OC2_SetConfig+0xd0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10d      	bne.n	800456c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <TIM_OC2_SetConfig+0xd0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d113      	bne.n	800459c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800457a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00

080045c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0303 	bic.w	r3, r3, #3
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800460c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a1d      	ldr	r2, [pc, #116]	; (8004694 <TIM_OC3_SetConfig+0xd0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d10d      	bne.n	800463e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800463c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <TIM_OC3_SetConfig+0xd0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d113      	bne.n	800466e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800464c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	621a      	str	r2, [r3, #32]
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40012c00 	.word	0x40012c00

08004698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	031b      	lsls	r3, r3, #12
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <TIM_OC4_SetConfig+0x98>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d109      	bne.n	800470c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	019b      	lsls	r3, r3, #6
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00

08004734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f023 0210 	bic.w	r2, r3, #16
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	031b      	lsls	r3, r3, #12
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr

080047ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	f043 0307 	orr.w	r3, r3, #7
 8004810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004822:	b480      	push	{r7}
 8004824:	b087      	sub	sp, #28
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	021a      	lsls	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	431a      	orrs	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	609a      	str	r2, [r3, #8]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	2201      	movs	r2, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1a      	ldr	r2, [r3, #32]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	43db      	mvns	r3, r3
 8004882:	401a      	ands	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1a      	ldr	r2, [r3, #32]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	fa01 f303 	lsl.w	r3, r1, r3
 8004898:	431a      	orrs	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048bc:	2302      	movs	r3, #2
 80048be:	e04b      	b.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a19      	ldr	r2, [pc, #100]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d00e      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a15      	ldr	r2, [pc, #84]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a13      	ldr	r2, [pc, #76]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10c      	bne.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	4313      	orrs	r3, r2
 800493c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00

08004974 <memset>:
 8004974:	4603      	mov	r3, r0
 8004976:	4402      	add	r2, r0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <memset+0xa>
 800497c:	4770      	bx	lr
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <memset+0x4>

08004984 <__libc_init_array>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	2600      	movs	r6, #0
 8004988:	4d0c      	ldr	r5, [pc, #48]	; (80049bc <__libc_init_array+0x38>)
 800498a:	4c0d      	ldr	r4, [pc, #52]	; (80049c0 <__libc_init_array+0x3c>)
 800498c:	1b64      	subs	r4, r4, r5
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	42a6      	cmp	r6, r4
 8004992:	d109      	bne.n	80049a8 <__libc_init_array+0x24>
 8004994:	f000 f81a 	bl	80049cc <_init>
 8004998:	2600      	movs	r6, #0
 800499a:	4d0a      	ldr	r5, [pc, #40]	; (80049c4 <__libc_init_array+0x40>)
 800499c:	4c0a      	ldr	r4, [pc, #40]	; (80049c8 <__libc_init_array+0x44>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	42a6      	cmp	r6, r4
 80049a4:	d105      	bne.n	80049b2 <__libc_init_array+0x2e>
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ac:	4798      	blx	r3
 80049ae:	3601      	adds	r6, #1
 80049b0:	e7ee      	b.n	8004990 <__libc_init_array+0xc>
 80049b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b6:	4798      	blx	r3
 80049b8:	3601      	adds	r6, #1
 80049ba:	e7f2      	b.n	80049a2 <__libc_init_array+0x1e>
 80049bc:	08004a2c 	.word	0x08004a2c
 80049c0:	08004a2c 	.word	0x08004a2c
 80049c4:	08004a2c 	.word	0x08004a2c
 80049c8:	08004a30 	.word	0x08004a30

080049cc <_init>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr

080049d8 <_fini>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr
